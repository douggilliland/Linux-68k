68K GAS  tutor13.s 			page 1


   1               	* THIS VERSION MODIFIED FOR TEESSIDE X68K PC-2.2 CROSS ASSEMBLER
   2               	*     ftp://nyquist.ee.ualberta.ca/pub/motorola/m68k/x68k.zip
   3               	
   4               	*     CHANGES FROM ORIGINAL MOTOROLA SOURCE:
   5               	*         MANY "MOVE.L" CHANGED TO "MOVEQ"
   6               	*             SIMILAR CHANGES ON A FEW OTHER COMMANDS WHERE
   7               	*             X68K DOES NOT AUTOMATICALLY MOTOROLA-IZE.
   8               	*         X68K HANDLES CHARACTER CONSTANTS DIFFERENTLY
   9               	*             DC.W  '1'    -->  $3100  (GOOD)
  10               	*             DC.W  '1'+0  -->  $0031  (WHAT!)
  11               	*     ONE DIFFERENCE REMAINS IN A "DON'T CARE" BYTE
  12               	*         $008FE0 1A3C00FF  MOVE.B  #-1,D5
  13               	*                     ^^ $00 INSTEAD OF $FF
  14               	
  15               	*=======================================================================*
  16               	* MOTOROLA EDUCATION COMPUTER BOARD ROM PROGRAM "TUTOR"  REVISION # 1.3 *
  17               	*=======================================================================*
  18               	
  19               	* MACROS
  20               	
  21               	ADDR2MEM: .MACRO a1,a2
  22               	         PEA     \a1(%PC)         | MOVE ADDRESS TO MEMORY; POSITION
  23               	         MOVE.L  (%A7)+,\a2       | INDEPENDANT = TO "MOVE.L #\1,\2"
  24               	         .ENDM
  25               	
  26               	SAVEREGS: .MACRO
  27               	         TEMP = 0x04d6
  28               	         MOVE.L  %A7,REGA7        | SAVE STACK POINTER
  29               	         LEA     SV\@(%PC),%A7    | A7 = RETURN ADDRESS (FOR CALL TO SAVE)
  30               	         MOVE.L  %A7,TEMP         | TEMP = RETURN ADDRESS
  31               	         JRA     SAVE             | BSR WITHOUT USING STACK
  32               	SV\@:
  33               	         .ENDM
  34               	
  35               	*-------------------------------------------------------------------------
  36               	
  37               	* EQUATES (in alphabetical order)
  38               	
  39               	BELL     =       0x07
  40               	BLANK    =       0x20
  41               	BKPOINT  =       0x4AFB
  42               	BUFFSIZE =       0x80
  43               	BUFSIZE  =       80
  44               	CR       =       0x0D
  45               	CTLD     =       0x04
  46               	CTLH     =       0x08
  47               	CTLW     =       0x17
  48               	CTLX     =       0x18
  49               	DEL      =       0x7F
  50               	DELAYC1  =       0x1000
  51               	EOT      =       0x04
  52               	LF       =       0x0A
  53               	LOCVARSZ =       16
  54               	RESET    =       0x43            | MASTER RESET FOR ACIA
  55               	
  56               	*-------------------------------------------------------------------------
  57               	* File ARAM      DATA VARIABLES                                   05/10/82
68K GAS  tutor13.s 			page 2


  58               	
  59               	****************************************************************
  60               	*  N O T E:  Ram locations:   starting at zero                 *
  61               	****************************************************************
  62               	
  63               	         .ORG    0x000000
  64               	
  65               	*                                 DEC HEX  DESCRIPTION
  66 0000 0000 0000 	         DS.L    1              | 0   $00  AREA OVERLAID BY ROM SR
  67 0004 0000 0000 	         DS.L    1              | 1   $01  AND PC
  68               	
  69 0008 0000 0000 	_AV2:    DS.L    1              | 2   $02  BUS ERROR            "BUS "
  70 000c 0000 0000 	_AV3:    DS.L    1              | 3   $03  ADDRESS ERROR        "ADDR"
  71 0010 0000 0000 	_AV4:    DS.L    1              | 4   $04  ILL INSTRUCTION      "OPCO"
  72 0014 0000 0000 	         DS.L    1              | 5   $05  DIVIDE BY ZERO       "DIV0"
  73 0018 0000 0000 	         DS.L    1              | 6   $06  CHECK TRAP           "CHCK"
  74 001c 0000 0000 	         DS.L    1              | 7   $07  TRAP V               "TP V"
  75 0020 0000 0000 	AV8:     DS.L    1              | 8   $08  PRIVILEDGE VIOLATION "PRIV"
  76 0024 0000 0000 	_AV9:    DS.L    1              | 9   $09  TRACE
  77 0028 0000 0000 	         DS.L    1              | 10  $0A  1010 LINE EMULATION  "1010"
  78 002c 0000 0000 	_AV11:   DS.L    1              | 11  $0B  1111 LINE EMULATION  "1111"
  79 0030 0000 0000 	_AV12:   DS.L    1              | 12  $0C  USED AS TEMPORARY STORAGE FOR VECTOR MSGS.
  80 0034 0000 0000 	         DS.L    1              | 13  $0D  NOT USED
  81 0038 0000 0000 	         DS.L    1              | 14  $0E
  82 003c 0000 0000 	         DS.L    1              | 15  $0F
  83 0040 0000 0000 	         DS.L    1              | 16  $10
  84 0044 0000 0000 	         DS.L    1              | 17  $11
  85 0048 0000 0000 	         DS.L    1              | 18  $12
  86 004c 0000 0000 	         DS.L    1              | 19  $13
  87 0050 0000 0000 	         DS.L    1              | 20  $14
  88 0054 0000 0000 	         DS.L    1              | 21  $15
  89 0058 0000 0000 	         DS.L    1              | 22  $16
  90 005c 0000 0000 	         DS.L    1              | 23  $17
  91 0060 0000 0000 	_AV24:   DS.L    1              | 24  $18   0  AUTO VECTORS     "SPUR"
  92 0064 0000 0000 	         DS.L    1              | 25  $19   1                   "AV#1"
  93 0068 0000 0000 	         DS.L    1              | 26  $1A   2                   "AV#2"   TEST BUTTON
  94 006c 0000 0000 	         DS.L    1              | 27  $1B   3                   "AV#3"
  95 0070 0000 0000 	         DS.L    1              | 28  $1C   4                   "AV#4"
  96 0074 0000 0000 	         DS.L    1              | 29  $1D   5                   "AV#5"
  97 0078 0000 0000 	         DS.L    1              | 30  $1E   6                   "AV#6"
  98 007c 0000 0000 	_AV31:   DS.L    1              | 31  $1F   7                   "AV#7   [ABORT BUTTON]
  99 0080 0000 0000 	         DS.L    1              | 32  $20   TRAP  0             "UT 0"
 100 0084 0000 0000 	         DS.L    1              | 33  $21   TRAP  1             "UT 1"
 101 0088 0000 0000 	         DS.L    1              | 34  $22   TRAP  2             "UT 2"
 102 008c 0000 0000 	         DS.L    1              | 35  $23   TRAP  3             "UT 3"
 103 0090 0000 0000 	         DS.L    1              | 36  $24   TRAP  4             "UT 4"
 104 0094 0000 0000 	         DS.L    1              | 37  $25   TRAP  5             "UT 5"
 105 0098 0000 0000 	         DS.L    1              | 38  $26   TRAP  6             "UT 6"
 106 009c 0000 0000 	         DS.L    1              | 39  $27   TRAP  7             "UT 7"
 107 00a0 0000 0000 	         DS.L    1              | 40  $28   TRAP  8             "UT 8"
 108 00a4 0000 0000 	         DS.L    1              | 41  $29   TRAP  9             "UT 9"
 109 00a8 0000 0000 	         DS.L    1              | 42  $2A   TRAP 10             "UT A"
 110 00ac 0000 0000 	         DS.L    1              | 43  $2B   TRAP 11             "UT B"
 111 00b0 0000 0000 	         DS.L    1              | 44  $2C   TRAP 12             "UT C"
 112 00b4 0000 0000 	         DS.L    1              | 45  $2D   TRAP 13             "UT D"
 113 00b8 0000 0000 	_AV46:   DS.L    1              | 46  $2E   TRAP 14             "UT E"
 114 00bc 0000 0000 	AV47:    DS.L    1              | 47  $2F   TRAP 15             "UT F"
68K GAS  tutor13.s 			page 3


 115 00c0 0000 0000 	_AV48:   DS.L    1              | 48  $30
 116 00c4 0000 0000 	         DS.L    1              | 49  $31
 117 00c8 0000 0000 	         DS.L    1              | 50  $32
 118 00cc 0000 0000 	         DS.L    1              | 51  $33
 119 00d0 0000 0000 	         DS.L    1              | 52  $34
 120 00d4 0000 0000 	         DS.L    1              | 53  $35
 121 00d8 0000 0000 	         DS.L    1              | 54  $36
 122 00dc 0000 0000 	         DS.L    1              | 55  $37
 123 00e0 0000 0000 	         DS.L    1              | 56  $38
 124 00e4 0000 0000 	         DS.L    1              | 57  $39
 125 00e8 0000 0000 	         DS.L    1              | 58  $3A
 126 00ec 0000 0000 	         DS.L    1              | 59  $3B
 127 00f0 0000 0000 	         DS.L    1              | 60  $3C
 128 00f4 0000 0000 	         DS.L    1              | 61  $3D
 129 00f8 0000 0000 	         DS.L    1              | 62  $3E
 130 00fc 0000 0000 	         DS.L    1              | 63  $3F
 131 0100 0000 0000 	         DS.L    1              | 64  $40
 132 0104 0000 0000 	         DS.L    1              | 65  $41
 133 0108 0000 0000 	         DS.L    1              | 66  $42
 134 010c 0000 0000 	         DS.L    1              | 67  $43
 135 0110 0000 0000 	         DS.L    1              | 68  $44
 136 0114 0000 0000 	         DS.L    1              | 69  $45
 137 0118 0000 0000 	         DS.L    1              | 70  $46
 138 011c 0000 0000 	         DS.L    1              | 71  $47
 139 0120 0000 0000 	         DS.L    1              | 72  $48
 140 0124 0000 0000 	         DS.L    1              | 73  $49
 141 0128 0000 0000 	         DS.L    1              | 74  $4A
 142 012c 0000 0000 	         DS.L    1              | 75  $4B
 143 0130 0000 0000 	         DS.L    1              | 76  $4C
 144 0134 0000 0000 	         DS.L    1              | 77  $4D
 145 0138 0000 0000 	         DS.L    1              | 78  $4E
 146 013c 0000 0000 	         DS.L    1              | 79  $4F
 147 0140 0000 0000 	         DS.L    1              | 80  $50
 148 0144 0000 0000 	         DS.L    1              | 81  $51
 149 0148 0000 0000 	         DS.L    1              | 82  $52
 150 014c 0000 0000 	         DS.L    1              | 83  $53
 151 0150 0000 0000 	         DS.L    1              | 84  $54
 152 0154 0000 0000 	         DS.L    1              | 85  $55
 153 0158 0000 0000 	         DS.L    1              | 86  $56
 154 015c 0000 0000 	         DS.L    1              | 87  $57
 155 0160 0000 0000 	         DS.L    1              | 88  $58
 156 0164 0000 0000 	         DS.L    1              | 89  $59
 157 0168 0000 0000 	         DS.L    1              | 90  $5A
 158 016c 0000 0000 	         DS.L    1              | 91  $5B
 159 0170 0000 0000 	         DS.L    1              | 92  $5C
 160 0174 0000 0000 	         DS.L    1              | 93  $5D
 161 0178 0000 0000 	         DS.L    1              | 94  $5E
 162 017c 0000 0000 	         DS.L    1              | 95  $5F
 163 0180 0000 0000 	         DS.L    1              | 96  $60
 164 0184 0000 0000 	         DS.L    1              | 97  $61
 165 0188 0000 0000 	         DS.L    1              | 98  $62
 166 018c 0000 0000 	         DS.L    1              | 99  $63
 167 0190 0000 0000 	         DS.L    1              | 100  $64
 168 0194 0000 0000 	         DS.L    1              | 101  $65
 169 0198 0000 0000 	         DS.L    1              | 102  $66
 170 019c 0000 0000 	         DS.L    1              | 103  $67
 171 01a0 0000 0000 	         DS.L    1              | 104  $68
68K GAS  tutor13.s 			page 4


 172 01a4 0000 0000 	         DS.L    1              | 105  $69
 173 01a8 0000 0000 	         DS.L    1              | 106  $6A
 174 01ac 0000 0000 	         DS.L    1              | 107  $6B
 175 01b0 0000 0000 	         DS.L    1              | 108  $6C
 176 01b4 0000 0000 	         DS.L    1              | 109  $6D
 177 01b8 0000 0000 	         DS.L    1              | 110  $6E
 178 01bc 0000 0000 	         DS.L    1              | 111  $6F
 179 01c0 0000 0000 	         DS.L    1              | 112  $70
 180 01c4 0000 0000 	         DS.L    1              | 113  $71
 181 01c8 0000 0000 	         DS.L    1              | 114  $72
 182 01cc 0000 0000 	         DS.L    1              | 115  $73
 183 01d0 0000 0000 	         DS.L    1              | 116  $74
 184 01d4 0000 0000 	         DS.L    1              | 117  $75
 185 01d8 0000 0000 	         DS.L    1              | 118  $76
 186 01dc 0000 0000 	         DS.L    1              | 119  $77
 187 01e0 0000 0000 	         DS.L    1              | 120  $78
 188 01e4 0000 0000 	         DS.L    1              | 121  $79
 189 01e8 0000 0000 	         DS.L    1              | 122  $7A
 190 01ec 0000 0000 	         DS.L    1              | 123  $7B
 191 01f0 0000 0000 	         DS.L    1              | 124  $7C
 192 01f4 0000 0000 	         DS.L    1              | 125  $7D
 193 01f8 0000 0000 	         DS.L    1              | 126  $7E
 194 01fc 0000 0000 	         DS.L    1              | 127  $7F
 195 0200 0000 0000 	         DS.L    1              | 128  $80
 196 0204 0000 0000 	         DS.L    1              | 129  $81
 197 0208 0000 0000 	         DS.L    1              | 130  $82
 198 020c 0000 0000 	         DS.L    1              | 131  $83
 199 0210 0000 0000 	         DS.L    1              | 132  $84
 200 0214 0000 0000 	         DS.L    1              | 133  $85
 201 0218 0000 0000 	         DS.L    1              | 134  $86
 202 021c 0000 0000 	         DS.L    1              | 135  $87
 203 0220 0000 0000 	         DS.L    1              | 136  $88
 204 0224 0000 0000 	         DS.L    1              | 137  $89
 205 0228 0000 0000 	         DS.L    1              | 138  $8A
 206 022c 0000 0000 	         DS.L    1              | 139  $8B
 207 0230 0000 0000 	         DS.L    1              | 140  $8C
 208 0234 0000 0000 	         DS.L    1              | 141  $8D
 209 0238 0000 0000 	         DS.L    1              | 142  $8E
 210 023c 0000 0000 	         DS.L    1              | 143  $8F
 211 0240 0000 0000 	         DS.L    1              | 144  $90
 212 0244 0000 0000 	         DS.L    1              | 145  $91
 213 0248 0000 0000 	         DS.L    1              | 146  $92
 214 024c 0000 0000 	         DS.L    1              | 147  $93
 215 0250 0000 0000 	         DS.L    1              | 148  $94
 216 0254 0000 0000 	         DS.L    1              | 149  $95
 217 0258 0000 0000 	         DS.L    1              | 150  $96
 218 025c 0000 0000 	         DS.L    1              | 151  $97
 219 0260 0000 0000 	         DS.L    1              | 152  $98
 220 0264 0000 0000 	         DS.L    1              | 153  $99
 221 0268 0000 0000 	         DS.L    1              | 154  $9A
 222 026c 0000 0000 	         DS.L    1              | 155  $9B
 223 0270 0000 0000 	         DS.L    1              | 156  $9C
 224 0274 0000 0000 	         DS.L    1              | 157  $9D
 225 0278 0000 0000 	         DS.L    1              | 158  $9E
 226 027c 0000 0000 	         DS.L    1              | 159  $9F
 227 0280 0000 0000 	         DS.L    1              | 160  $A0
 228 0284 0000 0000 	         DS.L    1              | 161  $A1
68K GAS  tutor13.s 			page 5


 229 0288 0000 0000 	         DS.L    1              | 162  $A2
 230 028c 0000 0000 	         DS.L    1              | 163  $A3
 231 0290 0000 0000 	         DS.L    1              | 164  $A4
 232 0294 0000 0000 	         DS.L    1              | 165  $A5
 233 0298 0000 0000 	         DS.L    1              | 166  $A6
 234 029c 0000 0000 	         DS.L    1              | 167  $A7
 235 02a0 0000 0000 	         DS.L    1              | 168  $A8
 236 02a4 0000 0000 	         DS.L    1              | 169  $A9
 237 02a8 0000 0000 	         DS.L    1              | 170  $AA
 238 02ac 0000 0000 	         DS.L    1              | 171  $AB
 239 02b0 0000 0000 	         DS.L    1              | 172  $AC
 240 02b4 0000 0000 	         DS.L    1              | 173  $AD
 241 02b8 0000 0000 	         DS.L    1              | 174  $AE
 242 02bc 0000 0000 	         DS.L    1              | 175  $AF
 243 02c0 0000 0000 	         DS.L    1              | 176  $B0
 244 02c4 0000 0000 	         DS.L    1              | 177  $B1
 245 02c8 0000 0000 	         DS.L    1              | 178  $B2
 246 02cc 0000 0000 	         DS.L    1              | 179  $B3
 247 02d0 0000 0000 	         DS.L    1              | 180  $B4
 248 02d4 0000 0000 	         DS.L    1              | 181  $B5
 249 02d8 0000 0000 	         DS.L    1              | 182  $B6
 250 02dc 0000 0000 	         DS.L    1              | 183  $B7
 251 02e0 0000 0000 	         DS.L    1              | 184  $B8
 252 02e4 0000 0000 	         DS.L    1              | 185  $B9
 253 02e8 0000 0000 	         DS.L    1              | 186  $BA
 254 02ec 0000 0000 	         DS.L    1              | 187  $BB
 255 02f0 0000 0000 	         DS.L    1              | 188  $BC
 256 02f4 0000 0000 	         DS.L    1              | 189  $BD
 257 02f8 0000 0000 	         DS.L    1              | 190  $BE
 258 02fc 0000 0000 	         DS.L    1              | 191  $BF
 259 0300 0000 0000 	         DS.L    1              | 192  $C0
 260 0304 0000 0000 	         DS.L    1              | 193  $C1
 261 0308 0000 0000 	         DS.L    1              | 194  $C2
 262 030c 0000 0000 	         DS.L    1              | 195  $C3
 263 0310 0000 0000 	         DS.L    1              | 196  $C4
 264 0314 0000 0000 	         DS.L    1              | 197  $C5
 265 0318 0000 0000 	         DS.L    1              | 198  $C6
 266 031c 0000 0000 	         DS.L    1              | 199  $C7
 267 0320 0000 0000 	         DS.L    1              | 200  $C8
 268 0324 0000 0000 	         DS.L    1              | 201  $C9
 269 0328 0000 0000 	         DS.L    1              | 202  $CA
 270 032c 0000 0000 	         DS.L    1              | 203  $CB
 271 0330 0000 0000 	         DS.L    1              | 204  $CC
 272 0334 0000 0000 	         DS.L    1              | 205  $CD
 273 0338 0000 0000 	         DS.L    1              | 206  $CE
 274 033c 0000 0000 	         DS.L    1              | 207  $CF
 275 0340 0000 0000 	         DS.L    1              | 208  $D0
 276 0344 0000 0000 	         DS.L    1              | 209  $D1
 277 0348 0000 0000 	         DS.L    1              | 210  $D2
 278 034c 0000 0000 	         DS.L    1              | 211  $D3
 279 0350 0000 0000 	         DS.L    1              | 212  $D4
 280 0354 0000 0000 	         DS.L    1              | 213  $D5
 281 0358 0000 0000 	         DS.L    1              | 214  $D6
 282 035c 0000 0000 	         DS.L    1              | 215  $D7
 283 0360 0000 0000 	         DS.L    1              | 216  $D8
 284 0364 0000 0000 	         DS.L    1              | 217  $D9
 285 0368 0000 0000 	         DS.L    1              | 218  $DA
68K GAS  tutor13.s 			page 6


 286 036c 0000 0000 	         DS.L    1              | 219  $DB
 287 0370 0000 0000 	         DS.L    1              | 220  $DC
 288 0374 0000 0000 	         DS.L    1              | 221  $DD
 289 0378 0000 0000 	         DS.L    1              | 222  $DE
 290 037c 0000 0000 	         DS.L    1              | 223  $DF
 291 0380 0000 0000 	         DS.L    1              | 224  $E0
 292 0384 0000 0000 	         DS.L    1              | 225  $E1
 293 0388 0000 0000 	         DS.L    1              | 226  $E2
 294 038c 0000 0000 	         DS.L    1              | 227  $E3
 295 0390 0000 0000 	         DS.L    1              | 228  $E4
 296 0394 0000 0000 	         DS.L    1              | 229  $E5
 297 0398 0000 0000 	         DS.L    1              | 230  $E6
 298 039c 0000 0000 	         DS.L    1              | 231  $E7
 299 03a0 0000 0000 	         DS.L    1              | 232  $E8
 300 03a4 0000 0000 	         DS.L    1              | 233  $E9
 301 03a8 0000 0000 	         DS.L    1              | 234  $EA
 302 03ac 0000 0000 	         DS.L    1              | 235  $EB
 303 03b0 0000 0000 	         DS.L    1              | 236  $EC
 304 03b4 0000 0000 	         DS.L    1              | 237  $ED
 305 03b8 0000 0000 	         DS.L    1              | 238  $EE
 306 03bc 0000 0000 	         DS.L    1              | 239  $EF
 307 03c0 0000 0000 	         DS.L    1              | 240  $F0
 308 03c4 0000 0000 	         DS.L    1              | 241  $F1
 309 03c8 0000 0000 	         DS.L    1              | 242  $F2
 310 03cc 0000 0000 	         DS.L    1              | 243  $F3
 311 03d0 0000 0000 	         DS.L    1              | 244  $F4
 312 03d4 0000 0000 	         DS.L    1              | 245  $F5
 313 03d8 0000 0000 	         DS.L    1              | 246  $F6
 314 03dc 0000 0000 	         DS.L    1              | 247  $F7
 315 03e0 0000 0000 	         DS.L    1              | 248  $F8
 316 03e4 0000 0000 	         DS.L    1              | 249  $F9
 317 03e8 0000 0000 	         DS.L    1              | 250  $FA
 318 03ec 0000 0000 	         DS.L    1              | 251  $FB
 319 03f0 0000 0000 	         DS.L    1              | 252  $FC
 320 03f4 0000 0000 	         DS.L    1              | 253  $FD            3RD
 321 03f8 0000 0000 	         DS.L    1              | 254  $FE            2ND
 322 03fc 0000 0000 	         DS.L    1              | 255  $FF VECTOR FOR 1ST IPC DISK CONTROLLER
 323               	
 324               	*  PSEUDO REGISTERS
 325               	
 326 0400 0000 0000 	_REGPC:  DS.L    1              | USERS PROGRAM COUNTER
 327 0404 0000 0000 	_REGSR:  DS.L    1              | USERS CONDITION CODES
 328               	
 329 0408 0000 0000 	_REGS:   DS.L    8              | D REGISTERS
 329      0000 0000 
 329      0000 0000 
 329      0000 0000 
 329      0000 0000 
 330 0428 0000 0000 	         DS.L    7              | A0 THROUGH A6 REGISTERS
 330      0000 0000 
 330      0000 0000 
 330      0000 0000 
 330      0000 0000 
 331 0444 0000 0000 	_REGA7:  DS.L    1              | A7 REGISTER
 332 0448 0000 0000 	_REGUS:  DS.L    1              | USER STACK
 333               	
 334               	****************************************************************
68K GAS  tutor13.s 			page 7


 335               	*              WORKING STORAGE                                 *
 336               	*  NOTE: SUBROUTINE "INITHRAM" ZEROES RAM...                   *
 337               	*        FROM "BEGHRAM" THROUGH "ENDHRAM" WHEN IT IS EXECUTED  *
 338               	****************************************************************
 339               	
 340               	_BEGHRAM: .align 4              | INITIALIZE STARTS HERE
 341               	
 342 044c 0000 0000 	_OFFSET: DS.L    8              | ASSUMED OFFSETS (VIA "R@" FORMAT)
 342      0000 0000 
 342      0000 0000 
 342      0000 0000 
 342      0000 0000 
 343 046c 0000 0000 	MEMSIZE: DS.L    1              | MEMORY SIZE IN BYTES
 344 0470 0000 0000 	_BPADD:  DS.L    8              | BREAKPOINT ADDRESSES
 344      0000 0000 
 344      0000 0000 
 344      0000 0000 
 344      0000 0000 
 345 0490 0000 0000 	_BPTILL: DS.L    1              | TEMPORARY BREAKPOINT
 346 0494 0000 0000 	_BPCNT:  DS.L    9              | BREAKPOINT COUNTS
 346      0000 0000 
 346      0000 0000 
 346      0000 0000 
 346      0000 0000 
 347 04b8 0000 0000 	_BPDATA:  DS.W   9              | HOLD USER WORDS REPLACED BY TRAP IN SET BP
 347      0000 0000 
 347      0000 0000 
 347      0000 0000 
 347      0000 
 348 04ca 0000 0000 	_BERRD:  DS.L    2              | SPECIAL DATA FOR BUS AND ADDR ERROR EXCEPTIONS
 348      0000 0000 
 349 04d2 0000 0000 	_SAVEAV4: DS.L   1              | HOLDS USER'S AV4 VECTOR (WE USE FOR BP)
 350 04d6 0000 0000 	_TEMP:   DS.L    1              | TEMP
 351 04da 0000 0000 	_TRACECNT:DS.L   1              | TRACE COUNTER (-1=TRACE 1 & RUN)
 352 04de 0000      	_TRACEON: DS.W   1              | FLAG FOR TRACE ON
 353 04e0 0000      	_BPSTATUS:DS.W   1              | 1=PB ARE IN  0=ARE OUT OF MEMORY
 354 04e2 0000 0000 	_ECHOPT1:DS.L    1              | ECHO FLAG TO PORT ONE
 355               	
 356               	* THE FOLLOWING MUST REMAIN AS IS
 357               	*  User docomentation DEPENDS upon it!
 358               	*
 359               	_OPTIONS: .align 2              | FORCE WORD BOUNDRY
 360 04e6 00        	         DS.B    1              | X-ON CHARACTER
 361 04e7 00        	         DS.B    1              | X-OFF CHARACTER
 362 04e8 00        	         DS.B    1              | NO NO-AUTO LINEFEED
 363 04e9 00        	         DS.B    1              | SHORT FORM REGISTER DISPLAY
 364 04ea 00        	         DS.B    1              | TM  trailing character
 365 04eb 00        	         DS.B    1              | TM  exit character
 366               	_XONOFF  =       OPTIONS
 367               	_TMCHARS  =      OPTIONS+4
 368               	
 369               	* END of as is section
 370               	
 371               	***************************
 372               	* TARGET SUPERVISOR STACK *
 373               	***************************
 374               	
68K GAS  tutor13.s 			page 8


 375 04ec 0000 0000 	         DS.L    20
 375      0000 0000 
 375      0000 0000 
 375      0000 0000 
 375      0000 0000 
 376 053c 0000 0000 	SSA7:    DS.L    1
 377               	
 378               	**************
 379               	* I/O BUFFER *
 380               	**************
 381               	
 382 0540 0000 0000 	_BUFFER:  DS.B   BUFFSIZE
 382      0000 0000 
 382      0000 0000 
 382      0000 0000 
 382      0000 0000 
 383               	
 384 05c0 0000 0000 	_DUMPTEMP:DS.B   80             | HEADER TEMP BUFFER
 384      0000 0000 
 384      0000 0000 
 384      0000 0000 
 384      0000 0000 
 385               	
 386 0610 0000 0000 	_SCREEN1: DS.L   1              | PRINT THIS BEFORE TRACE DISPLAY
 387 0614 0000 0000 	_SCREEN2: DS.L   1              | PRINT THIS AFTER TRACE DISPLAY
 388               	
 389 0618 0000      	_NULLPADS:DS.B    2             | CHARACTER NULL PADS
 390 061a 0000      	_CRPADS:  DS.B    2             | CARRIAGE RETURN NULL PADS
 391               	
 392 061c 0000 0000 	_OUTTO:  DS.L    1              | HOLDS ADDRESS OF OUTPUT ROUTINE
 393 0620 0000 0000 	_INFROM: DS.L    1              | HOLDS ADDRESS OF INPUT ROUTINE
 394 0624 0000 0000 	_ALTSER1: DS.L   1              | ALTERNATE SERIAL PORT#1
 395 0628 0000 0000 	_ALTSER2: DS.L   1              | ALTERNATE SERIAL PORT#2
 396 062c 0000 0000 	_INPORT1: DS.L   1              | INPUT ROUTINE ADDRESS
 397 0630 0000 0000 	_OUTPORT1:DS.L   1              | ADDRESS FOR OUPUT ROUTINE
 398 0634 0000 0000 	_INPORT2: DS.L   1              | ADDRESS FOR INPUT ROUTINE
 399 0638 0000 0000 	_OUTPORT2:DS.L   1              | FOR OUTPURT ROUTINE
 400 063c 0000 0000 	_INPORT3: DS.L   1              | THIS MIGHT BE FOR TAPE
 401 0640 0000 0000 	_OUTPORT3:DS.L   1              | THIS MIGHT BE FOR PRINTER
 402 0644 0000 0000 	_INPORT4: DS.L   1              | CASSETTE
 403 0648 0000 0000 	_OUTPORT4:DS.L   1              | CASSETTE
 404 064c 0000      	_MD1CON:  DS.W   1              | ACIA PROFILE (PORT1/PORT2)
 405 064e 0000 0000 	_PDIPORT: DS.L   1              | PDIPORT ADDRESS
 406 0652 0000      	_CRTPNT:  DS.W   1              | OUTPUT TO PRINTER AND CRT
 407 0654 00        	_TAPENULS:DS.B   1              | NULLS FOR CASSETTE
 408               	
 409 0655 00        	         DS.B    1              | PAD BYTE
 410               	
 411 0656 0000 0000 	_CTLINK: DS.L    1              | POINTER TO FIRST TABLE
 412               	
 413               	_ENDHRAM: .align 2              | MUST START ON WORD BOUNDRY
 414               	
 415               	*********************
 416               	* SYSTEM STACK AREA *
 417               	*********************
 418               	
 419               	         .align  2              | FORCE ON WORD BOUNDRY
68K GAS  tutor13.s 			page 9


 420 065a 0000 0000 	         DS.B    300            | ROOM FOR STACK
 420      0000 0000 
 420      0000 0000 
 420      0000 0000 
 420      0000 0000 
 421 0786 0000      	_SYSTACK: DS.W   1              | START OF STACK (ADDRESS DECREASES)
 422 0788 0000 0000 	         DS.B    4              | STRETCHED STACK (USED BY 'SAVE')
 423               	
 424 078c 0000 0000 	         DS.B    120            | EXTENDED AREA USED IF DISASSEMBLER
 424      0000 0000 
 424      0000 0000 
 424      0000 0000 
 424      0000 0000 
 425               	
 426               	         .align  1              | LAST LOW MEMORY LOCATION USED + 1
 427               	
 428               	*-------------------------------------------------------------------------
 429               	
 430               	*CODE68K
 431               	*                                 OFFSET  0
 432               	ESKB     =       0x00000000     | DS      0
 433               	TDATA    =       0x00000000     | DS.B    10
 434               	TNB      =       0x0000000A     | DS.B    1
 435               	TLSPEC   =       0x0000000B     | DS.B    1
 436               	TLENGTH  =       0x0000000C     | DS.W    1
 437               	PCOUNTER =       0x0000000E     | DS.L    1
 438               	PTROP    =       0x00000012     | DS.L    1              POINTER TO OPERAND
 439               	PENDOP   =       0x00000016     | DS.L    1              POINTER END OF OPERAND
 440               	PTRBUFE  =       0x0000001A     | DS.L    1              POINTER TO END OF FORMATED SOURCE
 441               	LINK     =       0x0000001E     | DS.L    1              SAVE FOR UNLINK
 442               	ESKE     =       0x00000022     | DS.B    0
 443               	
 444               	*DCODE68K
 445               	*                                 OFFSET  -LOCVARSZ
 446               	DDATA    =       0xFFFFFFF0     | DS.L    3
 447               	HISPC    =       0xFFFFFFFC     | DS.L    1
 448               	
 449               	*LOAD
 450               	*                                 OFFSET  -((BUFFSIZE/2)+4)
 451               	CC       =       0xFFFFFFBC     | DS.L    1              CC (BYTE COUNT)
 452               	ADDRESS  =       0xFFFFFFC0     | DS.L    1              ADDRESS + OFFSET
 453               	LDATA    =       0xFFFFFFC4     | DS.B    1
 454               	
 455               	*-------------------------------------------------------------------------
 456               	* File B         Init Vectors+Ram                                 05/29/82
 457               	
 458 0804 0000 0000 	         .ORG    0x00080000
 458      0000 0000 
 458      0000 0000 
 458      0000 0000 
 458      0000 0000 
 459               	
 460               	         REGA7 =  0x444
 461 80000 0000 0444 	FIRST:   DC.L    REGA7          | SUPERVISOR STACK
 462               	         PC_START = 0x8146		| DGG CHANGED
 463 80004 0000 8146 	         DC.L    PC_START       | PROGRAM COUNTER
 464 80008 6000 0CB0 	V2:      BRA     TRACE
68K GAS  tutor13.s 			page 10


 465               	
 466               	**********************************
 467               	* INITIALIZE HIGH RAM SUBROUTINE *
 468               	**********************************
 469               	
 470               	        BEGHRAM = 0x044c
 471               	        ENDHRAM = 0x065a
 472 8000c 41F8 044C 	INITHRAM:LEA     BEGHRAM,%A0     | START OF WORK RAM (PAST REGISTERS)
 473 80010 203C 0000 	         MOVE.L  #(ENDHRAM-BEGHRAM),%D0 | BYTES TO ZERO
 473      020E 
 474 80016 4281      	         CLR.L   %D1
 475 80018 10C1      	INIT:    MOVE.B  %D1,(%A0)+     | ZERO MEMORY
 476 8001a 5380      	         SUBQ.L  #1,%D0
 477 8001c 66FA      	         BNE.S   INIT
 478               	
 479               	         AV2 = 0x0008
 480               	         ADDR2MEM BERRMSG,AV2   | POINT AT BUS TRAP ERROR MESSAGE ROUTINE
 480 8001e 487A 0010 	>  PEA BERRMSG(%PC)
 480 80022 21DF 0008 	>  MOVE.L (%A7)+,AV2
 481               	
 482               	         AV3 = 0x000c
 483               	         ADDR2MEM ADDRMSG,AV3   | POINT AT ADDRESS TRAP ERROR MESSAGE ROUTINE
 483 80026 487A 0012 	>  PEA ADDRMSG(%PC)
 483 8002a 21DF 000C 	>  MOVE.L (%A7)+,AV3
 484               	
 485 8002e 4E75      	         RTS
 486               	
 487               	****************************************************
 488               	* SPECIAL HANDLING FOR BUS ERROR AND ADDRESS ERROR *
 489               	****************************************************
 490               	
 491 80030 21FC 4255 	BERRMSG: MOVE.L  #0x42555320,0x30 | "BUS "
 491      5320 0030 
 492               	
 493 80038 6008      	         BRA.S   VECTBE
 494               	
 495 8003a 21FC 4144 	ADDRMSG: MOVE.L  #0x41444452,0x30 | "ADDR"
 495      4452 0030 
 496               	
 497               	         BERRD = 0x04ca
 498 80042 21DF 04CA 	VECTBE:  MOVE.L  (%A7)+,BERRD
 499 80046 21DF 04CE 	         MOVE.L  (%A7)+,BERRD+4
 500               	
 501               	         SAVEREGS
 501               	>  TEMP =0x04d6
 501 8004a 21CF 0444 	>  MOVE.L %A7,REGA7
 501 8004e 4FFA 000A 	>  LEA SV2(%PC),%A7
 501 80052 21CF 04D6 	>  MOVE.L %A7,TEMP
 501 80056 6000 0C34 	>  JRA SAVE
 501               	> SV2:
 502 8005a 6100 1C7A 	         BSR     FIXBUF
 503 8005e 3CFC 0D0A 	         MOVE.W  #0xD0A,(%A6)+
 504 80062 3038 04CA 	         MOVE.W  BERRD,%D0
 505 80066 6100 1988 	         BSR     PNT4HX         | FORMAT FUNCTION CODE
 506               	
 507 8006a 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 508 8006e 2038 04CC 	         MOVE.L  BERRD+2,%D0
68K GAS  tutor13.s 			page 11


 509 80072 6100 196E 	         BSR     PNT8HX         | FORMAT ACCESS ADDRESS
 510               	
 511 80076 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 512 8007a 3038 04D0 	         MOVE.W  BERRD+6,%D0
 513 8007e 6100 1970 	         BSR     PNT4HX         | FORMAT INSTRUCTION REGISTER
 514               	
 515 80082 6100 1BC6 	         BSR     OUTPUT
 516 80086 6000 1936 	         BRA     EVECT2         | GO DISPLAY REGISTERS & PROMPT
 517               	
 518 8008a 5359 4E54 	MSG008:  .ascii "SYNTAX "
 518      4158 20
 519               	
 520 80091 4552 524F 	MSG008E: .ascii "ERROR "
 520      5220 
 521               	
 522 80097 04        	MSGEOT:  DC.B    EOT
 523               	
 524 80098 5748 4154 	MSG021:  .ascii "WHAT"
 525 8009c 04        	         DC.B    EOT
 526               	
 527 8009d 00        	         DC.B    0              | PAD BYTE
 528               	
 529               	* PRINT WHAT
 530               	         .align  2
 531 8009e 4BFA FFF8 	WHAT:    LEA     MSG021(%PC),%A5 | PRINT 'WHAT' AND ENTER MACSBUG
 532 800a2 614E      	WHAT93:  BSR.S   FIXDATA
 533               	         TRACEON = 0x04de
 534 800a4 4278 04DE 	         CLR.W   TRACEON
 535 800a8 6100 1B86 	MSG:     BSR     OUT1CR
 536 800ac 6000 0184 	         BRA     MACSBUG
 537               	
 538               	* PRINT ERROR
 539               	
 540 800b0 4BFA FFDF 	ERROR:   LEA     MSG008E(%PC),%A5
 541 800b4 60EC      	         BRA.S   WHAT93
 542               	
 543 800b6 4BFA FFD2 	SYNTAX:  LEA     MSG008(%PC),%A5  | 'SYNTAX ERROR'
 544 800ba 60E6      	         BRA.S   WHAT93
 545               	
 546               	* FORMAT PHYSICAL ADDRESS FROM (D0)
 547 800bc 4BFA 0022 	PPHY:    LEA     MSG019(%PC),%A5
 548 800c0 6130      	         BSR.S   FIXDATA
 549 800c2 6012      	         BRA.S   P2PHY2
 550               	
 551               	* FORMAT TWO PHYSICAL ADDRESSES FROM (A0) & (A1)
 552 800c4 4BFA 001A 	P2PHY:   LEA     MSG019(%PC),%A5  | 'PHYSICAL ADDRESS='
 553 800c8 6128      	         BSR.S   FIXDATA
 554 800ca 2008      	         MOVE.L  %A0,%D0
 555 800cc 6100 1914 	         BSR     PNT8HX         | FORMAT ADDR1
 556 800d0 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE FOR FORMATING
 557 800d4 2009      	         MOVE.L  %A1,%D0
 558 800d6 6100 190A 	P2PHY2:  BSR     PNT8HX         | FORMAT ADDR2
 559 800da 6100 1B54 	         BSR     OUT1CR         | DISPLAY IT
 560 800de 4E75      	         RTS
 561               	
 562 800e0 5048 5953 	MSG019:  .ascii  "PHYSICAL ADDRESS="
 562      4943 414C 
68K GAS  tutor13.s 			page 12


 562      2041 4444 
 562      5245 5353 
 562      3D
 563 800f1 04        	         DC.B    EOT
 564               	
 565               	*************************************************************
 566               	* -FIXDATA- SUBROUTINE...  MOVES MESSAGE POINTED TO BY (A5) *
 567               	*                          INTO "BUFFER". EOT, ($04), ENDS  *
 568               	*                          THE MOVE. AT COMPLETION (A5) IS  *
 569               	*                          POINTING AT THE BEGINNING, (A6)  *
 570               	*                          POINTS AT END.                   *
 571               	*************************************************************
 572               	
 573               	         BUFFER = 0x0540
 574 800f2 4DF8 0540 	FIXDATA: LEA     BUFFER,%A6
 575 800f6 0C15 0004 	FIXDADD: CMPI.B  #EOT,(%A5)
 576 800fa 6704      	         BEQ.S   FIXD2
 577 800fc 1CDD      	         MOVE.B  (%A5)+,(%A6)+
 578 800fe 60F6      	         BRA.S   FIXDADD
 579 80100 4BF8 0540 	FIXD2:   LEA     BUFFER,%A5
 580 80104 4E75      	         RTS
 581               	
 582               	************************************************************
 583               	* -FIXDCRLF- SUBROUTINE INSERTS A CARRIAGE RETURN AND LINE *
 584               	*                       FEED IN FRONT OF THE TEXT, THEN    *
 585               	*                       USES THE REMAINING PORTION OF THE  *
 586               	*                       FIXDATA.                           *
 587               	************************************************************
 588               	
 589 80106 4DF8 0540 	FIXDCRLF:LEA     BUFFER,%A6
 590 8010a 3CFC 0D0A 	         MOVE.W  #0x0D0A,(%A6)+   | CR,LF
 591 8010e 60E6      	         BRA.S   FIXDADD
 592               	
 593               	*-------------------------------------------------------------------------
 594               	* File E         VERSAbug entry point                             01/08/81
 595               	
 596               	**********************
 597               	* INITIALIZE VECTORS *
 598               	**********************
 599               	*                                 Set most vectors to point at "????" routine
 600 80110 41F8 0008 	INITVECT:LEA     8,%A0          | Skip (Restart) STACK & ADDRESS vectors
 601 80114 43FA 188C 	         LEA     ABORTE(%PC),%A1 | A1 = "Default" TRAP ERROR routine address
 602               	
 603 80118 20C9      	INIT0:   MOVE.L  %A1,(%A0)+     | INITIALIZE VECTOR
 604 8011a B1FC 0000 	         CMPA.L  #0x400,%A0     | Done?
 604      0400 
 605 80120 6BF6      	         BMI.S   INIT0          | *
 606 80122 4E75      	         RTS
 607               	
 608               	* SPECIAL ENTRY THAT DOES NOT CHANGE VECTORS
 609               	
 610               	         REGSR = 0x00000404
 611 80124 48B8 0001 	START1S: MOVEM.W %D0,REGSR+2     | Assure good parity.
 611      0406 
 612 8012a 40F8 0406 	         MOVE.W  %SR,REGSR+2     | SAVE TARGET'S STATUS REGISTER
 613 8012e 21CF 0444 	         MOVE.L  %A7,REGA7       | SAVE TARGET'S STACK
 614               	         REGPC = 0x0400
68K GAS  tutor13.s 			page 13


 615 80132 21D7 0400 	         MOVE.L  (%A7),REGPC     | .PROGRAM COUNTER
 616 80136 4FF8 0444 	         LEA     REGA7,%A7
 617 8013a 48E7 FFFE 	         MOVEM.L %D0-%D7/%A0-%A6,-(%A7) | .REGISTERS
 618               	         SYSTACK = 0x0786
 619 8013e 4FF8 0786 	         LEA     SYSTACK,%A7
 620 80142 6000 0020 	         BRA     START11
 621               	
 622               	************************
 623               	*    INITIALIZATION    *
 624               	************************
 625               	
 626               	* SAVE PROCESSOR REGISTERS (EXCEPT A7 & PC)
 627               	
 628               	         .align 2
 629 80146 48B8 0001 	START:   MOVEM.W %D0,REGSR+2    | Assure good parity
 629      0406 
 630 8014c 40F8 0406 	         MOVE.W  %SR,REGSR+2    | SAVE STATUS REGISTER
 631 80150 48E7 FFFE 	         MOVEM.L %D0-%D7/%A0-%A6,-(%A7)
 632               	
 633 80154 4FF8 0786 	         LEA     SYSTACK,%A7    | SET UP STACK
 634 80158 21CF 0444 	         MOVE.L  %A7,REGA7
 635               	
 636 8015c 4281      	         CLR.L   %D1
 637 8015e 21C1 0400 	         MOVE.L  %D1,REGPC      | PC = 000000
 638               	
 639 80162 61AC      	         BSR.S   INITVECT
 640               	
 641 80164 46FC 2700 	START11: MOVE.W  #0x2700,%SR     | MASK OFF INTERRUPTS
 642               	
 643 80168 4E68      	         MOVE.L  %USP,%A0
 644               	         REGUS = 0x0448
 645 8016a 21C8 0448 	         MOVE.L  %A0,REGUS      | USER STACK
 646               	
 647 8016e 6100 FE9C 	         BSR     INITHRAM       | ZERO (INITIALIZE) HIGH RAM
 648               	
 649               	* VECTMSG.SA
 650 80172 6100 0206 	         BSR     INITVMSG
 651               	
 652               	* H.SA
 653               	         AV4 = 0x0010
 654               	         ADDR2MEM CHKBP,AV4     | ILLEGAL INSTRUCTION
 654 80176 487A 0C6C 	>  PEA CHKBP(%PC)
 654 8017a 21DF 0010 	>  MOVE.L (%A7)+,AV4
 655               	
 656               	* TM.SA
 657               	         TMCHARS = 0x04ea
 658 8017e 31FC 1801 	         MOVE.W  #0x1801,TMCHARS | CNTLX,CNTL/A
 658      04EA 
 659               	
 660               	* W.SA
 661               	         AV31 = 0x007c
 662               	         ADDR2MEM  ABORTB,AV31  | ABORT
 662 80184 487A 17D8 	>  PEA ABORTB(%PC)
 662 80188 21DF 007C 	>  MOVE.L (%A7)+,AV31
 663               	
 664               	* Y.SA
 665               	         OUTPORT1 = 0x0630
68K GAS  tutor13.s 			page 14


 666               	         ADDR2MEM  OUT1CR0,OUTPORT1 | INITIALIZE I/O ROUTINES
 666 8018c 487A 1ABC 	>  PEA OUT1CR0(%PC)
 666 80190 21DF 0630 	>  MOVE.L (%A7)+,OUTPORT1
 667               	         OUTPORT2 = 0x0638
 668               	         ADDR2MEM  OUTPUT20,OUTPORT2
 668 80194 487A 1AD4 	>  PEA OUTPUT20(%PC)
 668 80198 21DF 0638 	>  MOVE.L (%A7)+,OUTPORT2
 669               	         OUTPORT3 = 0x0640
 670               	         ADDR2MEM  PRCRLF,OUTPORT3     | PRINTER DRIVER
 670 8019c 487A 1C08 	>  PEA PRCRLF(%PC)
 670 801a0 21DF 0640 	>  MOVE.L (%A7)+,OUTPORT3
 671               	         OUTPORT4 = 0x0648
 672               	         ADDR2MEM  TAPEOUT,OUTPORT4    | CASSETTE
 672 801a4 487A 1D36 	>  PEA TAPEOUT(%PC)
 672 801a8 21DF 0648 	>  MOVE.L (%A7)+,OUTPORT4
 673               	         INPORT1 = 0x062c
 674               	         ADDR2MEM  PORTIN10,INPORT1
 674 801ac 487A 1B50 	>  PEA PORTIN10(%PC)
 674 801b0 21DF 062C 	>  MOVE.L (%A7)+,INPORT1
 675               	         INPORT2 = 0x0634
 676               	         ADDR2MEM  PORTIN20,INPORT2
 676 801b4 487A 1E5E 	>  PEA PORTIN20(%PC)
 676 801b8 21DF 0634 	>  MOVE.L (%A7)+,INPORT2
 677               	         INPORT3 = 0x063c
 678               	         ADDR2MEM  PORTIN10,INPORT3
 678 801bc 487A 1B40 	>  PEA PORTIN10(%PC)
 678 801c0 21DF 063C 	>  MOVE.L (%A7)+,INPORT3
 679               	         INPORT4 = 0x0644
 680               	         ADDR2MEM  TAPEIN,INPORT4      | CASSETTE
 680 801c4 487A 1F16 	>  PEA TAPEIN(%PC)
 680 801c8 21DF 0644 	>  MOVE.L (%A7)+,INPORT4
 681               	
 682               	         TAPENULS = 0x0654
 683 801cc 11FC 0008 	         MOVE.B  #8,TAPENULS    | NULLS FOR CASSETTE
 683      0654 
 684               	         PDIPORT = 0x064E
 685 801d2 21FC 00F0 	         MOVE.L  #PDI1,PDIPORT  | PRINTER
 685      0000 064E 
 686               	
 687               	*        INITIALIZE MC68230 PI/T
 688 801da 207C 00F0 	         MOVE.L  #PDI1,%A0       | BASE ADDRESS OF PI/T
 688      0000 
 689 801e0 203C 0000 	         MOVE.L  #0x0000FF00,%D0
 689      FF00 
 690 801e6 01C8 0001 	         MOVEP.L %D0,1(%A0)
 691               	
 692               	*        SELECT MODE 0
 693               	*        IRQ'S INACTIVATED
 694               	*        PORT A--ALL BITS OUTPUTS
 695               	*        PORT B--ALL BITS INPUTS
 696               	
 697 801ea 117C 0060 	         MOVE.B  #0x60,13(%A0)    | SUBMODE 01 FOR PORT A; INTERLOCKED HANDS
 697      000D 
 698 801f0 117C 00A0 	         MOVE.B  #0xA0,15(%A0)    | SUBMODE 1X FOR PORT B
 698      000F 
 699 801f6 117C 0030 	         MOVE.B  #0x30,1(%A0)     | ENABLE HANDSHAKE LINES
 699      0001 
68K GAS  tutor13.s 			page 15


 700 801fc 117C 00A8 	         MOVE.B  #0xA8,15(%A0)    | RESET AND INIT PRINTER
 700      000F 
 701 80202 21FC 00F0 	         MOVE.L  #PDI1+0x10,PDIPORT
 701      0010 064E 
 702               	
 703 8020a 117C 00A0 	         MOVE.B  #0xA0,15(%A0)    | CLEAR INIT
 703      000F 
 704               	
 705               	* INITIALIZE THE PDI'S
 706               	
 707               	         MD1CON = 0x064c
 708 80210 31FC 1515 	         MOVE.W  #0x1515,MD1CON
 708      064C 
 709 80216 6100 1DA2 	         BSR     INITSER        | RESET & PROGRAM PDI
 710               	
 711               	* INITIALIZE XON/XOFF (READER ON / READER OFF)
 712               	*            AUTO-LINE FEED OVERRIDE
 713               	
 714               	         XONOFF = 0x04e6
 715 8021a 21FC 0000 	         MOVE.L  #0x00000000,XONOFF
 715      0000 04E6 
 716               	
 717               	* TRAP14.SA
 718               	         AV46 = 0x00b8
 719               	         ADDR2MEM  TRAP14,AV46
 719 80222 487A 3D74 	>  PEA TRAP14(%PC)
 719 80226 21DF 00B8 	>  MOVE.L (%A7)+,AV46
 720               	         CTLINK = 0x0656
 721               	*        MOVE.L  #(254<<24)+CT,CTLINK
 722 8022a 21FC FE00 	         MOVE.L  #0xfe00bf14,CTLINK
 722      BF14 0656 
 723               	
 724               	************************************************************************
 725               	*                    V E R S I O N   N U M B E R   A N D   P R O M P T *
 726               	************************************************************************
 727               	
 728 80232 46FC 2700 	MACSBUG: MOVE.W  #0x2700,%SR    | MASK OFF INTERRUPTS
 729 80236 4FF8 0786 	         LEA     SYSTACK,%A7    | RESTORE SYSTEM STACK
 730 8023a 6100 0B60 	         BSR     SWAPOUT        | GET BP OUT OF USER MEMORY
 731               	
 732               	         BPTILL = 0x0490
 733 8023e 42B8 0490 	         CLR.L   BPTILL         | GET RID OF 'TILL' BREAKPOINT
 734               	         OUTTO = 0x061c
 735 80242 42B8 061C 	         CLR.L   OUTTO          | INITIALIZE I/O TO DEFAULT
 736               	         INFROM = 0x0620
 737 80246 42B8 0620 	         CLR.L   INFROM         | INITIALIZE I/O TO DEFAULT
 738               	         ECHOPT1 = 0x04e2
 739 8024a 4238 04E2 	         CLR.B   ECHOPT1        | NO ECHO TO PORT1
 740               	
 741 8024e 4BFA 00AA 	         LEA     MSG001(%PC),%A5 | > (Prompt)
 742 80252 6100 FE9E 	         BSR     FIXDATA
 743               	
 744 80256 4A78 04DE 	         TST.W   TRACEON        | SEE IF IN TRACE MODE
 745 8025a 6704      	         BEQ.S   MACSBUG1
 746 8025c 1CFC 003A 	         MOVE.B  #':',(%A6)+    | IN TRACE MODE
 747 80260 1CFC 003E 	MACSBUG1:MOVE.B  #'>',(%A6)+    | PROMPT
 748 80264 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | .. SPACE
68K GAS  tutor13.s 			page 16


 749 80268 6100 19E0 	         BSR     OUTPUT         | GO PRINT IT
 750               	
 751               	* INPUT LINE
 752 8026c 6100 1A68 	         BSR     FIXBUF         | GET READY FOR INPUT
 753 80270 6100 1A6C 	         BSR     PORTIN1        | GET A COMMAND
 754 80274 1CBC 0020 	DECODE6: MOVE.B  #BLANK,(%A6)   | BLANK OUT END+1
 755               	
 756               	*  DECODE A COMMAND
 757               	*
 758               	*  DECODE SPECIAL CHARACTER USAGE:
 759               	*    LEADING SPACES IGNORED
 760               	*    LEADING NULLS IGNORED
 761               	*    IF SECOND CHAR  *  CHAR CAN BE ANY CHAR
 762               	
 763 80278 BBCE      	         CMP.L   %A6,%A5        | SEE IF ANYTHING ENTERED
 764 8027a 6B08      	         BMI.S   DECODE1
 765 8027c 4A78 04DE 	         TST.W   TRACEON        | SEE IF IN TRACE MODE
 766 80280 6600 031A 	         BNE     TCMDHOT        | DIRECT TO TRACE 1 COMMAND
 767               	
 768 80284 BBCE      	DECODE1: CMP.L   %A6,%A5        | SEE IF AT END OF BUFFER
 769 80286 6200 FE16 	         BHI     WHAT           | GO TO 'WHAT' IF CONFUSED
 770 8028a 1015      	         MOVE.B  (%A5),%D0      | GRAB FIRST CHARACTER
 771 8028c 0C00 002A 	         CMPI.B  #'*',%D0       | SEND LINE COMMAND
 772 80290 6608      	         BNE.S   DECODE10
 773 80292 528D      	         ADDQ.L  #1,%A5         | GET PAST PHOENY PROMPT
 774 80294 6100 19BE 	         BSR     OUTPUT2        | SEND LINE+CR (NO LF) TO PORT2
 775 80298 6098      	         BRA.S   MACSBUG        | REENTER COMMAND MODE
 776               	
 777 8029a 0C00 0020 	DECODE10:CMPI.B  #0x20,%D0      | IGNORE LEADING SPACES
 778 8029e 6604      	         BNE.S   DECODE2        | WHERE TO GO IF NOT A SPACE
 779 802a0 528D      	         ADDQ.L  #1,%A5         | BUMP START OF BUFFER
 780 802a2 60E0      	         BRA.S   DECODE1        | TRY NEXT CHARACTER
 781               	*
 782 802a4 1215      	DECODE2: MOVE.B  (%A5),%D1      | GET 2 LETTERS OF COMMAND
 783 802a6 E149      	         LSL.W   #8,%D1         | MAKE ROOM FOR SECOND CHAR
 784 802a8 122D 0001 	         MOVE.B  1(%A5),%D1     | GET SECOND CHAR
 785 802ac 4283      	         CLR.L   %D3            | D3 = CLEAR "NO" SWITCH
 786               	
 787 802ae 43FA 0058 	DECODE21:LEA     SOLIST(%PC),%A1 | A1 = COMMAND LIST ADDRESS
 788 802b2 3419      	DECODE4: MOVE.W  (%A1)+,%D2     | D2 = 2 CHAR COMMAND FROM LIST
 789 802b4 4280      	         CLR.L   %D0            | CLEAR HIGH BITS
 790 802b6 3019      	         MOVE.W  (%A1)+,%D0     | D0 = OFFSET FROM START OF ROM
 791               	
 792 802b8 4A83      	         TST.L   %D3
 793 802ba 6704      	         BEQ.S   DECODE41       | NOT A "NO"
 794 802bc 4A02      	         TST.B   %D2            | IS "NO" OPTION SUPPORTED THIS COMMAND?
 795 802be 6AF2      	         BPL.S   DECODE4        | NO...THEN RUN OUT OF COMMANDS
 796               	
 797 802c0 0242 7F7F 	DECODE41:ANDI.W  #0x7F7F,%D2    | CLEAR "INVISABLE" & "NO" BITS
 798 802c4 0C42 7F7F 	         CMPI.W  #0x7F7F,%D2    | END OF LIST?
 799 802c8 6700 FDD4 	         BEQ     WHAT           | Command not found
 800               	
 801 802cc 0C02 002A 	         CMPI.B  #'*',%D2       | SEE IF DON'T CARE CHARACTER
 802 802d0 6602      	         BNE.S   DECODE3
 803 802d2 1401      	         MOVE.B  %D1,%D2        | DEFAULT
 804               	
 805 802d4 B441      	DECODE3: CMP.W   %D1,%D2        | Command from table = the input?
68K GAS  tutor13.s 			page 17


 806 802d6 66DA      	         BNE.S   DECODE4        | COMMAND NOT FOUND
 807               	
 808 802d8 4278 04DE 	         CLR.W   TRACEON        | TURN OFF TRACE MODE
 809               	
 810 802dc 548D      	         ADDQ.L  #2,%A5         | POINT A5 PAST 2 DIGIT COMMAND
 811               	
 812 802de 487A FD20 	         PEA     FIRST(%PC)     | BUILD GO TO ADDRESS
 813 802e2 D197      	         ADD.L   %D0,(%A7)      | ON STACK.
 814 802e4 D797      	         ADD.L   %D3,(%A7)
 815               	
 816 802e6 205F      	         MOVE.L  (%A7)+,%A0     | GO TO COMMAND
 817 802e8 4E90      	         JSR     (%A0)          | * SAVE MARK FOR RETURN
 818 802ea 6000 FF46 	         BRA     MACSBUG        | *  RETURN HERE
 819               	
 820               	*
 821               	*    NO COMMAND
 822               	*
 823 802ee 76FC      	NOCMD:   MOVEQ   #-4,%D3        | SET "NO" SWITCH
 824 802f0 1215      	         MOVE.B  (%A5),%D1      | MOVE CHAR #3
 825 802f2 E141      	         ASL.W   #8,%D1         | MOVE OVER 1 CHAR
 826 802f4 122D 0001 	         MOVE.B  1(%A5),%D1     | MOVE CHAR #4
 827 802f8 60B4      	         BRA.S   DECODE21       | WHICH "NO" COMMAND?
 828               	
 829               	*-------------------------------------------------------------------------
 830               	* File COMMANDS  Command list                                     06/20/82
 831               	
 832 802fa 0D0A      	MSG001:  DC.B    CR,LF
 833 802fc 5455 544F 	         .ascii  "TUTOR  1.3 "
 833      5220 2031 
 833      2E33 20
 834 80307 04        	         DC.B    EOT            | "PROMPT"
 835               	
 836               	*******************************************************
 837               	* C O P Y R I G H T . 1 9 8 1 . B Y . M O T O R O L A *
 838               	******************************************************
 839               	
 840               	* VERSAbug command generation macro
 841               	CMD:     .MACRO a1,a2,a3,a4
 842               	FLAG      =     0              |
 843               	         .IFC    "\a2","HELP=NO"
 844               	FLAG     =     FLAG+0x8000     | "Help" will not display this command
 845               	         .ENDIF
 846               	         .IFC    "\a3","HELP=NO"
 847               	FLAG     =     FLAG+0x8000     | "Help" will not display this command
 848               	         .ENDIF
 849               	         .IFC    "\a2","NORTN=YES"
 850               	FLAG     =       FLAG+0x80       | "NO\1".Command
 851               	         .ENDIF
 852               	         .IFC    "\a3","NORTN=YES"
 853               	FLAG     =       FLAG+0x80       | "NO\1".Command
 854               	         .ENDIF
 855               	         .IFC    "\a1","PER"    | Check for the "PER" command
 856               	         .ascii  ".*" | +FLAG      | Reg commands (.A2 .D6 .PC .R0 etc.)
 857               	         DC.W    PERCMD-FIRST   |*************************************
 858               	         .ENDIF
 859               	         .IFNC   "\a1","PER"     | If not PERCMD...
 860               	         .IFEQ   "\a1"&(0xFF00)   | If 1 digit code, 2nd will be a blank.
68K GAS  tutor13.s 			page 18


 861               	         .ascii  "\a1 "  | +FLAG     | "\1"....Command  -  -  (Single Digit)
 862               	         .ENDIF
 863               	         .IFNE   "\a1"&(0xFF00)   | If 2 digit code, leave as is.
 864               	         .ascii  "\a1"  | +FLAG      | "\1"...Command
 865               	         .ENDIF
 866               	         DC.W    \a1\()CMD-FIRST    |************************************
 867               	         .ENDIF
 868               	         .ENDM
 869               	
 870               	SOLIST:  .align  2               | Start Of LIST
 871               	
 872               	*        CMD     PER,"HELP=NO",X,X
 873 80308 AE2A 158C 	         DC.B    0xAE, 0x2A, 0x15, 0x8C
 874               	*        CMD     NO,"HELP=NO",X,X
 875 8030c CE4F 02EE 	         DC.B    0xCE, 0x4F, 0x02, 0xEE
 876               	*        CMD     BF,X,X
 877 80310 4246 04E4 	         DC.B    0x42, 0x46, 0x04, 0xE4
 878               	*        CMD     BM,X,X
 879 80314 424D 0536 	         DC.B    0x42, 0x4D, 0x05, 0x36
 880               	*        CMD     BR,"NORTN=YES",X,X
 881 80318 42D2 0652 	         DC.B    0x42, 0xD2, 0x06, 0x52
 882               	*        CMD     BS,X,X
 883 8031c 4253 0718 	         DC.B    0x42, 0x53, 0x07, 0x18
 884               	*        CMD     BT,X,X
 885 80320 4254 0852 	         DC.B    0x42, 0x54, 0x08, 0x52
 886               	*        CMD     DC,X,X
 887 80324 4443 08A4 	         DC.B    0x44, 0x43, 0x08, 0xA4
 888               	*        CMD     DF,X,X
 889 80328 4446 0902 	         DC.B    0x44, 0x46, 0x09, 0x02
 890               	*        CMD     DU,X,X
 891 8032c 4455 0A20 	         DC.B    0x44, 0x55, 0x0A, 0x20
 892               	*        CMD     G,X,X
 893 80330 4720 0624 	         DC.B    0x47, 0x20, 0x06, 0x24
 894               	*        CMD     GD,X,X
 895 80334 4744 0632 	         DC.B    0x47, 0x44, 0x06, 0x32
 896               	*        CMD     GO,X,X
 897 80338 474F 0624 	         DC.B    0x47, 0x4F, 0x06, 0x24
 898               	*        CMD     GT,X,X
 899 8033c 4754 05D8 	         DC.B    0x47, 0x54, 0x05, 0xD8
 900               	*        CMD     HE,X,X
 901 80340 4845 0E82 	         DC.B    0x48, 0x45, 0x0E, 0x82
 902               	*        CMD     LO,X,X
 903 80344 4C4F 0FC6 	         DC.B    0x4C, 0x4F, 0x0F, 0xC6
 904               	*        CMD     M,X,X
 905 80348 4D20 1314 	         DC.B    0x4D, 0x20, 0x13, 0x14
 906               	*        CMD     MD,X,X
 907 8034c 4D44 1164 	         DC.B    0x4D, 0x44, 0x11, 0x64
 908               	*        CMD     MM,X,X
 909 80350 4D4D 1314 	         DC.B    0x4D, 0x4D, 0x13, 0x14
 910               	*        CMD     MS,X,X
 911 80354 4D53 1498 	         DC.B    0x4D, 0x53, 0x14, 0x98
 912               	*        CMD     OF,X,X
 913 80358 4F46 16BC 	         DC.B    0x4F, 0x46, 0x16, 0xBC
 914               	*        CMD     PA,"NORTN=YES",X,X
 915 8035c 50C1 21BC 	         DC.B    0x50, 0xC1, 0x21, 0xBC
 916               	*        CMD     PF,X,X
 917 80360 5046 173A 	         DC.B    0x50, 0x46, 0x17, 0x3A
68K GAS  tutor13.s 			page 19


 918               	*        CMD     T,X,X
 919 80364 5420 0588 	         DC.B    0x54, 0x20, 0x05, 0x88
 920               	*        CMD     TM,X,X
 921 80368 544D 1870 	         DC.B    0x54, 0x4D, 0x18, 0x70
 922               	*        CMD     TR,X,X
 923 8036c 5452 0588 	         DC.B    0x54, 0x52, 0x05, 0x88
 924               	*        CMD     TT,X,X
 925 80370 5454 05A4 	         DC.B    0x54, 0x54, 0x05, 0xA4
 926               	*        CMD     VE,X,X
 927 80374 5645 0FC0 	         DC.B    0x56, 0x45, 0x0F, 0xC0
 928               	
 929 80378 FFFF      	         DC.W    0xFFFF     | End of list indicator
 930               	
 931               	*-------------------------------------------------------------------------
 932               	* File VECTMSG   Messages for vectors                             05/29/82
 933               	
 934               	************************************************************
 935               	*Reprogram some VECTORS to specific ERROR handler routines *
 936               	************************************************************
 937               	
 938 8037a 41FA 0026 	INITVMSG:LEA     VECT(%PC),%A0  | A0 = START OF VECTOR TABLE
 939 8037e 43F8 0010 	         LEA     AV4,%A1        | A1 = FIRST VECTOR TO INITIALIZE
 940 80382 700A      	         MOVEQ   #10,%D0        | D0 = COUNT
 941 80384 22C8      	VECTI:   MOVE.L  %A0,(%A1)+     | MOVE ADDRESS TO VECTOR
 942 80386 D1C0      	         ADD.L   %D0,%A0        | BUMP ADDRESS
 943               	         AV11    = 0x002C
 944 80388 B3FC 0000 	         CMPA.L  #AV11+4,%A1
 944      0030 
 945 8038e 66F4      	         BNE.S   VECTI
 946               	
 947               	         AV24    = 0x0060
 948 80390 43F8 0060 	         LEA     AV24,%A1       | A1 = NEXT VECTOR TO INITIALIZE
 949 80394 22C8      	VECTI2:  MOVE.L  %A0,(%A1)+     | MOVE ADDRESS TO VECTOR
 950 80396 D1C0      	         ADD.L   %D0,%A0        | BUMP ADDRESS
 951               	         AV48 = 0x00c0
 952 80398 B3FC 0000 	         CMPA.L  #AV48,%A1
 952      00C0 
 953 8039e 66F4      	         BNE.S   VECTI2
 954 803a0 4E75      	         RTS
 955               	
 956               	*************************************************************************
 957               	* STANDARD VECTOR "MESSAGE" HANDLING ROUTINE ($30 IS TEMP STORAGE AREA) *
 958               	*************************************************************************
 959               	
 960 803a2 21FC 4F50 	VECT:    MOVE.L  #0x4f50434f,0x30 | "OPCO" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 960      434F 0030 
 961               	
 962 803aa 604E      	         BRA.S   EVECT5
 963 803ac 21FC 4449 	         MOVE.L  #0x44495630,0x30 | "DIV0" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 963      5630 0030 
 964               	
 965 803b4 6044      	         BRA.S   EVECT5
 966 803b6 21FC 4348 	         MOVE.L  #0x4348434b,0x30 | "CHCK" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 966      434B 0030 
 967               	
 968 803be 603A      	         BRA.S   EVECT5
 969 803c0 21FC 5450 	         MOVE.L  #0x54502056,0x30 | "TP V" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
68K GAS  tutor13.s 			page 20


 969      2056 0030 
 970               	
 971 803c8 6030      	         BRA.S   EVECT5
 972 803ca 21FC 5052 	         MOVE.L  #0x50524956,0x30 | "PRIV" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 972      4956 0030 
 973               	
 974 803d2 6026      	         BRA.S   EVECT5
 975 803d4 21FC 5452 	         MOVE.L  #0x54524143,0x30 | "TRAC" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 975      4143 0030 
 976               	
 977 803dc 601C      	         BRA.S   EVECT5
 978 803de 21FC 3130 	         MOVE.L  #0x31303130,0x30 | "1010" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 978      3130 0030 
 979               	
 980 803e6 6012      	         BRA.S   EVECT5
 981 803e8 21FC 3131 	         MOVE.L  #0x31313131,0x30 | "1111" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 981      3131 0030 
 982               	
 983 803f0 6008      	         BRA.S   EVECT5
 984 803f2 21FC 5350 	         MOVE.L  #0x53505552,0x30 | "SPUR" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 984      5552 0030 
 985               	
 986 803fa 6044      	EVECT5:  BRA.S   EVECT6
 987 803fc 21FC 4156 	         MOVE.L  #0x41562331,0x30 | "AV#1" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 987      2331 0030 
 988               	
 989 80404 603A      	         BRA.S   EVECT6
 990 80406 21FC 4156 	         MOVE.L  #0x41562332,0x30 | "AV#2" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 990      2332 0030 
 991               	
 992 8040e 6030      	         BRA.S   EVECT6
 993 80410 21FC 4156 	         MOVE.L  #0x41562333,0x30 | "AV#3" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 993      2333 0030 
 994               	
 995 80418 6026      	         BRA.S   EVECT6
 996 8041a 21FC 4156 	         MOVE.L  #0x41562334,0x30 | "AV#4" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 996      2334 0030 
 997               	
 998 80422 601C      	         BRA.S   EVECT6
 999 80424 21FC 4156 	         MOVE.L  #0x41562335,0x30 | "AV#5" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 999      2335 0030 
 1000               	
 1001 8042c 6012      	         BRA.S   EVECT6
 1002 8042e 21FC 4156 	         MOVE.L  #0x41562336,0x30 | "AV#6" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1002      2336 0030 
 1003               	
 1004 80436 6008      	         BRA.S   EVECT6
 1005 80438 21FC 4156 	         MOVE.L  #0x41562337,0x30 | "AV#7" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1005      2337 0030 
 1006               	
 1007 80440 604E      	EVECT6:  BRA.S   EVECT7
 1008 80442 21FC 5554 	         MOVE.L  #0x55542030,0x30 | "UT 0" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1008      2030 0030 
 1009               	
 1010 8044a 6044      	         BRA.S   EVECT7
 1011 8044c 21FC 5554 	         MOVE.L  #0x55542031,0x30 | "UT 1" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1011      2031 0030 
68K GAS  tutor13.s 			page 21


 1012               	
 1013 80454 603A      	         BRA.S   EVECT7
 1014 80456 21FC 5554 	         MOVE.L  #0x55542032,0x30 | "UT 2" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1014      2032 0030 
 1015               	
 1016 8045e 6030      	         BRA.S   EVECT7
 1017 80460 21FC 5554 	         MOVE.L  #0x55542033,0x30 | "UT 3" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1017      2033 0030 
 1018               	
 1019 80468 6026      	         BRA.S   EVECT7
 1020 8046a 21FC 5554 	         MOVE.L  #0x55542034,0x30 | "UT 4" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1020      2034 0030 
 1021               	
 1022 80472 601C      	         BRA.S   EVECT7
 1023 80474 21FC 5554 	         MOVE.L  #0x55542035,0x30 | "UT 5" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1023      2035 0030 
 1024               	
 1025 8047c 6012      	         BRA.S   EVECT7
 1026 8047e 21FC 5554 	         MOVE.L  #0x55542036,0x30 | "UT 6" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1026      2036 0030 
 1027               	
 1028 80486 6008      	         BRA.S   EVECT7
 1029 80488 21FC 5554 	         MOVE.L  #0x55542037,0x30 | "UT 7" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1029      2037 0030 
 1030               	
 1031 80490 604E      	EVECT7:  BRA.S   EVECT
 1032 80492 21FC 5554 	         MOVE.L  #0x55542038,0x30 | "UT 8" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1032      2038 0030 
 1033               	
 1034 8049a 6044      	         BRA.S   EVECT
 1035 8049c 21FC 5554 	         MOVE.L  #0x55542039,0x30 | "UT 9" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1035      2039 0030 
 1036               	
 1037 804a4 603A      	         BRA.S   EVECT
 1038 804a6 21FC 5554 	         MOVE.L  #0x55542041,0x30 | "UT A" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1038      2041 0030 
 1039               	
 1040 804ae 6030      	         BRA.S   EVECT
 1041 804b0 21FC 5554 	         MOVE.L  #0x55542042,0x30 | "UT B" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1041      2042 0030 
 1042               	
 1043 804b8 6026      	         BRA.S   EVECT
 1044 804ba 21FC 5554 	         MOVE.L  #0x55542043,0x30 | "UT C" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1044      2043 0030 
 1045               	
 1046 804c2 601C      	         BRA.S   EVECT
 1047 804c4 21FC 5554 	         MOVE.L  #0x55542044,0x30 | "UT D" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1047      2044 0030 
 1048               	
 1049 804cc 6012      	         BRA.S   EVECT
 1050 804ce 21FC 5554 	         MOVE.L  #0x55542045,0x30 | "UT E" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1050      2045 0030 
 1051               	
 1052 804d6 6108      	         BSR.S   EVECT
 1053 804d8 21FC 5554 	         MOVE.L  #0x55542046,0x30 | "UE F" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1053      2046 0030 
 1054               	
68K GAS  tutor13.s 			page 22


 1055               	*
 1056               	*    SAVE REGISTERS AND PRINT VECTOR MSG
 1057               	*
 1058 804e0 6000 14C8 	EVECT:   BRA     EVECTL
 1059               	
 1060               	*-------------------------------------------------------------------------
 1061               	* File BF        Block Fill command                               06/16/82
 1062               	
 1063               	*  BLOCK FILL    ADDRESS1 ADDRESS2 WORD-DATA
 1064               	
 1065 804e4 41FA FBD0 	BFCMD:   LEA     SYNTAX(%PC),%A0
 1066 804e8 6100 15CA 	         BSR     FNEXTF
 1067 804ec 6100 064C 	         BSR     GETA
 1068 804f0 6100 15E0 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1069 804f4 2C00      	         MOVE.L  %D0,%D6        | D6 = FROM BEGIN ADDRESS
 1070               	
 1071 804f6 6100 15BC 	         BSR     FNEXTF
 1072 804fa 6100 063E 	         BSR     GETA
 1073 804fe 6100 15D2 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1074 80502 2240      	         MOVE.L  %D0,%A1          | A1 = FROM END ADDRESS
 1075               	
 1076 80504 6100 15AE 	         BSR     FNEXTF         | FIND NEXT FIELD
 1077 80508 6100 162C 	         BSR     GETNUMA        | D0 = VALUE
 1078 8050c 2E00      	         MOVE.L  %D0,%D7
 1079               	
 1080 8050e 2046      	         MOVE.L  %D6,%A0          | A0 = FROM BEGIN ADDRESS
 1081 80510 6100 FBB2 	         BSR     P2PHY          | DISPLAY ADDRESSES
 1082 80514 B3C8      	         CMP.L   %A0,%A1
 1083 80516 6500 FB9E 	         BCS     SYNTAX         | END ADDR TOO SMALL
 1084               	
 1085 8051a 0C87 0001 	         CMPI.L  #0x10000,%D7
 1085      0000 
 1086 80520 6400 FB94 	         BCC     SYNTAX         | WORD OVERFLOW
 1087               	
 1088               	BFCMD11:
 1089 80524 3087      	         MOVE.W  %D7,(%A0)      | STORE DATA
 1090 80526 3218      	         MOVE.W  (%A0)+,%D1
 1091 80528 B247      	         CMP.W   %D7,%D1        | VERIFY DATA
 1092 8052a 6600 0F5A 	         BNE     MM90           | 'DATA DID NOT STORE'
 1093               	
 1094 8052e B3C8      	         CMP.L   %A0,%A1
 1095 80530 64F2      	         BCC.S   BFCMD11
 1096 80532 6000 FCFE 	         BRA     MACSBUG
 1097               	
 1098               	*-------------------------------------------------------------------------
 1099               	* File BM        BM (Block Move) Command                          11/27/81
 1100               	
 1101               	*  BLOCK MOVE
 1102               	
 1103 80536 41FA FB7E 	BMCMD:   LEA     SYNTAX(%PC),%A0
 1104 8053a 6100 1578 	         BSR     FNEXTF
 1105 8053e 6100 05FA 	         BSR     GETA
 1106 80542 2640      	         MOVE.L  %D0,%A3        | A3 = FROM BEGIN ADDRESS
 1107               	
 1108 80544 6100 156E 	         BSR     FNEXTF
 1109 80548 6100 05F0 	         BSR     GETA
 1110 8054c 2240      	         MOVE.L  %D0,%A1        | A1 = FROM END ADDRESS
68K GAS  tutor13.s 			page 23


 1111               	
 1112 8054e 6100 1564 	         BSR     FNEXTF
 1113 80552 6100 05E6 	         BSR     GETA
 1114 80556 2440      	         MOVE.L  %D0,%A2        | A2 = TO BEGIN ADDRESS
 1115               	
 1116 80558 204B      	         MOVE.L  %A3,%A0
 1117 8055a 6100 FB68 	         BSR     P2PHY          | PRINT ADDRESSES (A0) & (A1)
 1118 8055e 200A      	         MOVE.L  %A2,%D0
 1119 80560 6100 FB5A 	         BSR     PPHY           | PRINT TO ADDRESS
 1120               	
 1121 80564 2209      	         MOVE.L  %A1,%D1
 1122 80566 928B      	         SUB.L   %A3,%D1        | D1 =  SIZE - 1
 1123 80568 6500 FB4C 	         BCS     SYNTAX         | END LESS THAN BEGIN
 1124 8056c 5281      	         ADDQ.L  #1,%D1         | D1 = COUNT (SIZE)
 1125               	
 1126 8056e B5CB      	         CMP.L   %A3,%A2
 1127 80570 6408      	         BCC.S   BM122          | MOVING LOW TO HIGH
 1128               	
 1129 80572 14DB      	BM112:   MOVE.B  (%A3)+,(%A2)+  | MOVING HIGH TO LOW
 1130 80574 5381      	         SUBQ.L  #1,%D1         | COUNT
 1131 80576 66FA      	         BNE.S   BM112
 1132 80578 600A      	         BRA.S   BM142
 1133               	
 1134 8057a D7C1      	BM122:   ADD.L   %D1,%A3        | MOVING LOW TO HIGH
 1135 8057c D5C1      	         ADD.L   %D1,%A2
 1136 8057e 1523      	BM132:   MOVE.B  -(%A3),-(%A2)
 1137 80580 5381      	         SUBQ.L  #1,%D1
 1138 80582 66FA      	         BNE.S   BM132
 1139 80584 6000 FCAC 	BM142:   BRA     MACSBUG
 1140               	
 1141               	*-------------------------------------------------------------------------
 1142               	* File BR        BR, GD, GT, TR, TT, PER Commands                 12/04/81
 1143               	
 1144               	*   ***T***   TRACE COMMAND
 1145               	
 1146               	TCMD:    .align  2              | "T" Alias for "TR" command
 1147 80588 41FA 0012 	TRCMD:   LEA     TCMDHOT(%PC),%A0 | IF NO PARAMTERS
 1148 8058c 6100 1526 	         BSR     FNEXTF         | FIND NEXT FIELD
 1149 80590 6100 15A4 	         BSR     GETNUMA        | FIND NUMBER OF INST TO TRACE
 1150 80594 6100 1542 	         BSR     CKADDR         | INSURE 24 BITS OR LESS
 1151 80598 4A80      	         TST.L   %D0
 1152 8059a 6602      	         BNE.S   TCMD15
 1153               	
 1154               	TCMDHOT: .align  2              | SPECIAL ENTRY FROM DECODE
 1155 8059c 7001      	         MOVEQ   #1,%D0         | ZERO; MAKE TRACE ONE
 1156               	         TRACECNT = 0x04da
 1157 8059e 21C0 04DA 	TCMD15:  MOVE.L  %D0,TRACECNT
 1158 805a2 6022      	         BRA.S   TRACE2
 1159               	
 1160               	*
 1161               	** TT ** "TRACE TILL" COMMAND
 1162               	*
 1163               	
 1164 805a4 41FA FB10 	TTCMD:   LEA     SYNTAX(%PC),%A0
 1165 805a8 6100 150A 	         BSR     FNEXTF         | FIND NEXT FIELD
 1166 805ac 6100 058C 	         BSR     GETA           | GET ADDRESS
 1167 805b0 6100 1520 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
68K GAS  tutor13.s 			page 24


 1168               	
 1169 805b4 2C00      	         MOVE.L  %D0,%D6
 1170 805b6 6100 FB04 	         BSR     PPHY           | DISPLAY TILL ADDRESS
 1171               	
 1172 805ba 21C6 0490 	         MOVE.L  %D6,BPTILL      | 9TH BP
 1173 805be 21FC 0000 	         MOVE.L  #0xFFFF,TRACECNT  | SET FOR A VERY LONG TIME
 1173      FFFF 04DA 
 1174               	
 1175 805c6 31FC FFFF 	TRACE2:  MOVE.W  #-1,TRACEON    | FOR DECODE OF NEXT COMMAND
 1175      04DE 
 1176               	
 1177 805cc 2038 0400 	         MOVE.L  REGPC,%D0
 1178 805d0 6100 FAEA 	         BSR     PPHY           | DISPLAY START (PC) ADDRESS
 1179 805d4 6000 0778 	         BRA     UNTRACE
 1180               	
 1181               	*
 1182               	*   ***GT***  RUN PROGRAM TO TEMP BREAKPOINT
 1183               	*
 1184               	
 1185 805d8 41FA FADC 	GTCMD:   LEA     SYNTAX(%PC),%A0  | GET NUMBER ELSE PRINT "WHAT"
 1186 805dc 6100 14D6 	         BSR     FNEXTF         | FIND NEXT FIELD
 1187 805e0 6100 0558 	         BSR     GETA           | GET ADDRESS
 1188 805e4 6100 14EC 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1189 805e8 2C00      	         MOVE.L  %D0,%D6        | D6 = UNTIL ADDRESS
 1190 805ea 6100 FAD0 	         BSR     PPHY           | PRINT PHYSICAL ADDRESS
 1191               	
 1192               	* IF TILL ADDRESS IN BREAKPOINT TABLE; DISPLAY WHAT
 1193               	
 1194               	         BPADD = 0x0470
 1195 805ee 41F8 0470 	         LEA     BPADD,%A0     | A0 = POINTER TO BP ADDRESSES
 1196 805f2 7E08      	         MOVEQ   #8,%D7        | D7 = # OF ADDRESS ALLOWED
 1197 805f4 BC98      	GT21:    CMP.L   (%A0)+,%D6
 1198 805f6 6700 00A0 	         BEQ     BCMD55         | ALREADY IN TABLE -SHOW TABLE-
 1199 805fa 5387      	         SUBQ.L  #1,%D7
 1200 805fc 66F6      	         BNE.S   GT21
 1201               	
 1202 805fe 21C6 0490 	         MOVE.L  %D6,BPTILL     | 9TH BREAKPOINT
 1203 80602 6116      	         BSR.S   GOCMD1A        | NORMAL STARTUP
 1204 80604 6020      	         BRA.S   GOCMD1
 1205               	
 1206 80606 41FA 0012 	GOSET1:  LEA     GOCMD1A(%PC),%A0 | WHERE TO GO IF NO PARAMERS
 1207 8060a 6100 14A8 	         BSR     FNEXTF         | FIND NEXT FIELD
 1208 8060e 6100 052A 	         BSR     GETA           | GET ADDRESS
 1209 80612 6100 14BE 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1210 80616 21C0 0400 	         MOVE.L  %D0,REGPC
 1211               	
 1212 8061a 2038 0400 	GOCMD1A: MOVE.L  REGPC,%D0       | (ALSO SUBROUTINE ENTRY)
 1213 8061e 6100 FA9C 	         BSR     PPHY           | PRINT ".PC" PHYSICAL ADDRESS
 1214 80622 4E75      	         RTS
 1215               	
 1216               	GCMD:    .align  2              | "G" ALIAS FOR "GO"
 1217 80624 61E0      	GOCMD:   BSR.S   GOSET1         | "GO" (AFTER TRACING ONE INST)
 1218 80626 21FC FFFF 	GOCMD1:  MOVE.L  #-1,TRACECNT   | "FLAG" COUNTER AS SPECIAL
 1218      FFFF 04DA 
 1219               	
 1220 8062e 6000 071E 	         BRA     UNTRACE
 1221               	
68K GAS  tutor13.s 			page 25


 1222 80632 61D2      	GDCMD:   BSR.S   GOSET1         | "GO DIRECT" Command
 1223 80634 6000 0726 	         BRA     UNSTACK
 1224               	
 1225               	*   ***BR***  SET AND PRINT BREAKPOINTS
 1226               	
 1227               	*                   DELETE ALL BREAKPOINTS
 1228               	
 1229 80638 6108      	NOBRCMD: BSR.S   FIXBP          | GET POINTERS
 1230 8063a 4298      	BCMD01:  CLR.L   (%A0)+         | CLEAR THE ADDRESS TABLE
 1231 8063c 5387      	         SUBQ.L  #1,%D7         | DO IT 8 TIMES
 1232 8063e 66FA      	         BNE.S   BCMD01
 1233 80640 6060      	         BRA.S   BCMD7          | DISPLAY EMPTY TABLE
 1234               	
 1235 80642 41F8 0470 	FIXBP:   LEA     BPADD,%A0      | SET UP ADDRESS & COUNTER
 1236 80646 7E08      	         MOVEQ   #8,%D7         | COUNTER
 1237               	         BPCNT = 0x0494
 1238 80648 45F8 0494 	         LEA     BPCNT,%A2      | COUNTS
 1239 8064c 4E75      	         RTS
 1240               	
 1241               	************************************************************
 1242               	* THIS COMMAND SUPPORTS THE "NO" OPTION. COMMANDS THAT ALLOW
 1243               	* THE "NO" OPTION PROVIDE A HARD BRANCH 4 BYTES BEFORE THE
 1244               	* REGULAR COMMAND.
 1245               	************************************************************
 1246               	
 1247 8064e 6000 009A 	         BRA     NOBR0          | ENTRY FOR "NOBR" (IT LOOKS FOR PARMS OR NOT)
 1248 80652 41FA 004E 	BRCMD:   LEA     BCMD7(%PC),%A0 |   WHERE TO GO IF NO PARMS
 1249 80656 6100 145C 	BCMD0:   BSR     FNEXTF         | FIND NEXT FIELD
 1250 8065a 6100 04DE 	         BSR     GETA           | GET ADDRESS
 1251 8065e 6100 1472 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1252               	
 1253 80662 61DE      	         BSR.S   FIXBP          | SET UP COUNTER & ADDRESS
 1254 80664 B090      	BCMD00:  CMP.L   (%A0),%D0      |  SEE IF ALREADY IN TABLE
 1255 80666 6710      	         BEQ.S   BCMD33         | GO CHECK FOR COUNT
 1256 80668 588A      	         ADDQ.L  #4,%A2         | BUMP OTHER POINTER
 1257 8066a 5888      	         ADDQ.L  #4,%A0         |  BUMP MAIN POINTER
 1258 8066c 5387      	         SUBQ.L  #1,%D7
 1259 8066e 66F4      	         BNE.S   BCMD00
 1260               	
 1261 80670 61D0      	         BSR.S   FIXBP          | GET ADDRESS & POINTERS
 1262 80672 4A90      	BCMD3:   TST.L   (%A0)          | FIND AN EMPTY STOP
 1263 80674 661A      	         BNE.S   BCMD5
 1264 80676 2080      	         MOVE.L  %D0,(%A0)      |  PUT NEW ADDRESS IN TABLE
 1265 80678 4292      	BCMD33:  CLR.L   (%A2)          | CLEAR CURRENT COUNT
 1266 8067a 1215      	         MOVE.B  (%A5),%D1      | CHECK INPUT FOR COUNT
 1267 8067c 0C01 003B 	         CMPI.B  #';',%D1
 1268 80680 6608      	         BNE.S   BCMD6          | NO COUNT
 1269 80682 528D      	         ADDQ.L  #1,%A5         | BUMP THE BUFFER SCANNER
 1270 80684 6100 14B0 	         BSR     GETNUMA        | GO GET THE COUNT
 1271 80688 2480      	         MOVE.L  %D0,(%A2)      | MOVE TO TABLE
 1272               	
 1273 8068a 41FA 0016 	BCMD6:   LEA     BCMD7(%PC),%A0 | WHERE TO GO IF NO MORE PARAMETERS
 1274 8068e 60C6      	         BRA.S   BCMD0
 1275               	
 1276 80690 5888      	BCMD5:   ADDQ.L  #4,%A0         | BUMP TABLE POINTER
 1277 80692 588A      	         ADDQ.L  #4,%A2         | BUMP POINTER TO COUNTS
 1278 80694 5387      	         SUBQ.L  #1,%D7         | LOOP AROUND
68K GAS  tutor13.s 			page 26


 1279 80696 66DA      	         BNE.S   BCMD3
 1280               	
 1281 80698 4BFA F9F7 	BCMD55:  LEA     MSG008E(%PC),%A5 | TABLE FULL; ERROR MESSAGE
 1282 8069c 6100 FA54 	         BSR     FIXDATA
 1283 806a0 6008      	         BRA.S   BCMD77
 1284               	
 1285 806a2 4BFA 003A 	BCMD7:   LEA     MSGBR(%PC),%A5  | "BREAKPOINTS"
 1286 806a6 6100 FA5E 	         BSR     FIXDCRLF
 1287 806aa 6100 1584 	BCMD77:  BSR     OUT1CR
 1288               	
 1289 806ae 6192      	         BSR.S   FIXBP          | SET ADDRESS & COUNTER
 1290 806b0 2C1A      	BCMD8:   MOVE.L  (%A2)+,%D6     | D6 = COUNT
 1291 806b2 2010      	         MOVE.L  (%A0),%D0      | D0 = ADDRESS
 1292 806b4 671E      	         BEQ.S   BCMD9          | ZERO ADDRESS
 1293 806b6 6100 135C 	         BSR     FRELADDR       | FORMAT RELATIVE ADDRESS
 1294 806ba 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+
 1295               	
 1296 806be 2010      	         MOVE.L  (%A0),%D0       | FORMAT ABSOLUTE ADDRESS
 1297 806c0 6100 1328 	         BSR     PNT6HX
 1298 806c4 2006      	         MOVE.L  %D6,%D0
 1299 806c6 6708      	         BEQ.S   BCMD81         | DON'T PRINT ZERO COUNT
 1300 806c8 1CFC 003B 	         MOVE.B  #';',(%A6)+
 1301 806cc 6100 13A0 	         BSR     PNTZHX         | PRINT WITH ZERO SURPRESS
 1302               	
 1303 806d0 6100 155E 	BCMD81:  BSR     OUT1CR
 1304 806d4 5888      	BCMD9:   ADDQ.L  #4,%A0
 1305 806d6 5387      	         SUBQ.L  #1,%D7         | LOOP AROUND
 1306 806d8 66D6      	         BNE.S   BCMD8
 1307 806da 6000 FB56 	         BRA     MACSBUG
 1308               	
 1309 806de 4252 4541 	MSGBR:   .ascii  "BREAKPOINTS"
 1309      4B50 4F49 
 1309      4E54 53
 1310 806e9 04        	         DC.B    EOT
 1311               	
 1312               	* NOBR COMMAND
 1313               	
 1314 806ea 41FA FF4C 	NOBR0:   LEA     NOBRCMD(%PC),%A0 | WHERE TO GO IF NO PARAMETERS
 1315 806ee 6100 13C4 	NOBR1:   BSR     FNEXTF         | FIND NEXT FIELD
 1316 806f2 6100 0446 	         BSR     GETA           | GO DECODE NUMBER/ADDRESS
 1317 806f6 4A80      	         TST.L   %D0
 1318 806f8 679E      	         BEQ.S   BCMD55         | ZERO NOT VALID BREAKPOINT
 1319 806fa 6100 13D6 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1320               	
 1321 806fe 41F8 0470 	         LEA     BPADD,%A0      | SET UP TABLE POINTER
 1322 80702 7E08      	         MOVEQ   #8,%D7         | COUNTER
 1323 80704 2210      	NOBR3:   MOVE.L  (%A0),%D1      | GET BREAKPOINT IN TABLE
 1324 80706 B081      	         CMP.L   %D1,%D0        | SEE IF SAME
 1325 80708 6706      	         BEQ.S   NOBR4
 1326 8070a 5888      	         ADDQ.L  #4,%A0
 1327 8070c 5387      	         SUBQ.L  #1,%D7
 1328 8070e 66F4      	         BNE.S   NOBR3
 1329 80710 4290      	NOBR4:   CLR.L   (%A0)           | CLEAR THIS BREAKPOINT
 1330 80712 41FA FF8E 	         LEA     BCMD7(%PC),%A0  | WHERE TO GO IF NO PARAMETER
 1331 80716 60D6      	         BRA.S   NOBR1
 1332               	
 1333               	*-------------------------------------------------------------------------
68K GAS  tutor13.s 			page 27


 1334               	* File BS        BS (Block Search) Command                        11/27/81
 1335               	
 1336               	*
 1337               	*  BLOCK SEARCH   BS <ADDR1> <ADDR2> 'LITERAL STRING'
 1338               	*                 BS <ADDR1> <ADDR2> <DATA> [<MASK>] [;<OPTION>]
 1339               	
 1340 80718 41FA F99C 	BSCMD:   LEA     SYNTAX(%PC),%A0
 1341 8071c 6100 1396 	         BSR     FNEXTF
 1342 80720 6100 0418 	         BSR     GETA
 1343 80724 2640      	         MOVE.L  %D0,%A3          | A3 = FROM BEGIN ADDRESS
 1344               	
 1345 80726 6100 138C 	         BSR     FNEXTF
 1346 8072a 6100 040E 	         BSR     GETA
 1347 8072e 2240      	         MOVE.L  %D0,%A1         | A1 = FROM END ADDRESS
 1348               	
 1349 80730 6100 1382 	         BSR     FNEXTF
 1350 80734 1015      	         MOVE.B  (%A5),%D0
 1351 80736 0C00 0027 	         CMPI.B  #0x27,%D0
 1352 8073a 6700 00B0 	         BEQ     BS311          | LITERAL STRING SEARCH
 1353               	
 1354 8073e 6100 13F6 	         BSR     GETNUMA
 1355 80742 2E00      	         MOVE.L  %D0,%D7          | D7 = DATA WE ARE LOOKING FOR
 1356 80744 4285      	         CLR.L   %D5             | SCAN FOR OPTIONS
 1357 80746 204D      	         MOVE.L  %A5,%A0
 1358 80748 B1CE      	BS91:    CMP.L   %A6,%A0
 1359 8074a 6426      	         BCC.S   BS97           | AT END OF BUFFER
 1360               	
 1361 8074c 1018      	         MOVE.B  (%A0)+,%D0
 1362 8074e 0C00 003B 	         CMPI.B  #';',%D0
 1363 80752 66F4      	         BNE.S   BS91           | NOT SEMICOLON
 1364               	
 1365 80754 2C48      	         MOVE.L  %A0,%A6
 1366 80756 538E      	         SUBQ.L  #1,%A6          | ADJUST END OF BUFFER POINTER
 1367               	
 1368 80758 1010      	         MOVE.B  (%A0),%D0       | D0 = OPTION CHARACTER
 1369 8075a 0C00 0042 	         CMPI.B  #'B',%D0
 1370 8075e 6712      	         BEQ.S   BS97           | BYTE  D5 = 0
 1371               	
 1372 80760 7A01      	         MOVEQ   #1,%D5
 1373 80762 0C00 0057 	         CMPI.B  #'W',%D0
 1374 80766 670A      	         BEQ.S   BS97           | WORD  D5 = +
 1375               	
 1376 80768 7AFF      	         MOVEQ   #-1,%D5         | LONG WORD  D5 = -
 1377 8076a 0C00 004C 	         CMPI.B  #'L',%D0
 1378 8076e 6600 F946 	         BNE     SYNTAX
 1379               	BS97:    .align  2
 1380               	
 1381 80772 78FF      	         MOVEQ   #-1,%D4         | D4 = DEFAULT SEARCH MASK
 1382 80774 41FA 000C 	         LEA     BS101(%PC),%A0
 1383 80778 6100 133A 	         BSR     FNEXTF         | FIND NEXT FIELD
 1384 8077c 6100 13B8 	         BSR     GETNUMA
 1385 80780 2800      	         MOVE.L  %D0,%D4          | D4 = MASK
 1386               	BS101:   .align  2
 1387               	
 1388 80782 204B      	         MOVE.L  %A3,%A0
 1389 80784 6100 F93E 	         BSR     P2PHY          | PRINT ADDRESSES (A0) & (A1)
 1390               	
68K GAS  tutor13.s 			page 28


 1391 80788 B3CB      	         CMP.L   %A3,%A1
 1392 8078a 6500 F92A 	         BCS     SYNTAX         | END LESS THAN BEGIN
 1393               	
 1394 8078e B7C9      	BS200:   CMP.L   %A1,%A3
 1395 80790 6400 FAA0 	         BCC     MACSBUG        | DONE
 1396               	
 1397 80794 6100 1540 	         BSR     FIXBUF
 1398 80798 200B      	         MOVE.L  %A3,%D0
 1399 8079a 6100 124E 	         BSR     PNT6HX         | FORMAT ADDRESS
 1400 8079e 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+   | SPACE INTO BUFFER
 1401               	
 1402 807a2 4A85      	         TST.L   %D5
 1403 807a4 6734      	         BEQ.S   BS225          | BYTE SIZE
 1404               	
 1405 807a6 200B      	         MOVE.L  %A3,%D0
 1406 807a8 6100 1328 	         BSR     CKWADR         | INSURE WORD BOUNDRY
 1407 807ac 4A85      	         TST.L   %D5
 1408 807ae 6A18      	         BPL.S   BS219          | WORD SIZE (2 BYTES)
 1409               	
 1410 807b0 7C02      	         MOVEQ   #2,%D6          | D6 =  SIZE (LONG WORD)
 1411 807b2 2013      	         MOVE.L  (%A3),%D0        | FETCH
 1412 807b4 C084      	         AND.L   %D4,%D0          | MASK
 1413 807b6 B087      	         CMP.L   %D7,%D0          | COMPARE
 1414 807b8 660A      	         BNE.S   BS215
 1415               	
 1416 807ba 2013      	         MOVE.L  (%A3),%D0        | DISPLAY NON-MASKED DATA
 1417 807bc 6100 1224 	         BSR     PNT8HX
 1418               	
 1419 807c0 6100 146E 	BS213:   BSR     OUT1CR
 1420               	
 1421 807c4 D7C6      	BS215:   ADD.L   %D6,%A3          | BUMP FETCH ADDRESS  (D6 = SIZE)
 1422 807c6 60C6      	         BRA.S   BS200
 1423               	
 1424 807c8 7C02      	BS219:   MOVEQ   #2,%D6          | SIZE = WORD
 1425 807ca 3013      	         MOVE.W  (%A3),%D0
 1426 807cc C044      	         AND.W   %D4,%D0
 1427 807ce B047      	         CMP.W   %D7,%D0
 1428 807d0 66F2      	         BNE.S   BS215
 1429               	
 1430 807d2 3013      	         MOVE.W  (%A3),%D0
 1431 807d4 6100 121A 	         BSR     PNT4HX         | DISPLAY
 1432 807d8 60E6      	         BRA.S   BS213
 1433               	
 1434 807da 7C01      	BS225:   MOVEQ   #1,%D6          | SIZE = BYTE
 1435 807dc 1013      	         MOVE.B  (%A3),%D0
 1436 807de C004      	         AND.B   %D4,%D0
 1437 807e0 B007      	         CMP.B   %D7,%D0
 1438 807e2 66E0      	         BNE.S   BS215
 1439               	
 1440 807e4 1013      	         MOVE.B  (%A3),%D0
 1441 807e6 6100 1210 	         BSR     PNT2HX         | DISPLAY
 1442 807ea 60D4      	         BRA.S   BS213
 1443               	
 1444               	* LITERAL STRING SEARCH
 1445               	*   SAVE STRING
 1446               	
 1447               	         DUMPTEMP = 0x05c0
68K GAS  tutor13.s 			page 29


 1448 807ec 45F8 05C0 	BS311:   LEA     DUMPTEMP,%A2
 1449 807f0 528D      	BS313:   ADDQ.L  #1,%A5
 1450 807f2 BBCE      	         CMP.L   %A6,%A5
 1451 807f4 6400 F8C0 	         BCC     SYNTAX         | ADDR1 GREATER THAN ADDR2
 1452 807f8 14D5      	         MOVE.B  (%A5),(%A2)+
 1453 807fa 1015      	         MOVE.B  (%A5),%D0
 1454 807fc 0C00 0027 	         CMPI.B  #0x27,%D0
 1455 80800 66EE      	         BNE.S   BS313
 1456 80802 538A      	         SUBQ.L  #1,%A2         | A2 = END OF STRING + 1
 1457               	
 1458 80804 204B      	         MOVE.L  %A3,%A0
 1459 80806 6100 F8BC 	         BSR     P2PHY          | DISPLAY ADDRESSES
 1460               	
 1461 8080a B3CB      	         CMP.L   %A3,%A1
 1462 8080c 6500 F8A8 	         BCS     SYNTAX
 1463               	
 1464               	* LOOK FOR STRING MATCH
 1465               	
 1466 80810 49F8 05C0 	BS323:   LEA     DUMPTEMP,%A4   | A4 = BEGIN OF STRING
 1467 80814 204B      	         MOVE.L  %A3,%A0        | A0 = BEGIN OF MEMORY
 1468 80816 1010      	BS325:   MOVE.B  (%A0),%D0
 1469 80818 B01C      	         CMP.B   (%A4)+,%D0     | DATA COMPARE
 1470 8081a 662C      	         BNE.S   BS365          | MIS-MATCH
 1471               	
 1472 8081c B3C8      	         CMP.L   %A0,%A1        | ADDRESS CHECK
 1473 8081e 6500 FA12 	         BCS     MACSBUG        | OUT OF MEMORY
 1474               	
 1475 80822 5288      	         ADDQ.L  #1,%A0
 1476 80824 B9CA      	         CMP.L   %A2,%A4
 1477 80826 65EE      	         BCS.S   BS325          | MORE STRING TO CHECK
 1478               	
 1479 80828 6100 14AC 	         BSR     FIXBUF         | HAVE MATCH
 1480 8082c 200B      	         MOVE.L  %A3,%D0        | FORMAT ADDRESS
 1481 8082e 6100 11BA 	         BSR     PNT6HX
 1482 80832 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+   | SPACE
 1483               	
 1484 80836 1CFC 0027 	         MOVE.B  #0x27,(%A6)+     | LEADING QUOTE
 1485 8083a 49F8 05C0 	         LEA     DUMPTEMP,%A4    | MOVE STRING TO BUFFER
 1486 8083e 1CDC      	BS355:   MOVE.B  (%A4)+,(%A6)+
 1487 80840 B5CC      	         CMP.L   %A4,%A2
 1488 80842 64FA      	         BCC.S   BS355
 1489               	
 1490 80844 6100 13EA 	         BSR     OUT1CR         | DISPLAY
 1491               	
 1492 80848 528B      	BS365:   ADDQ.L  #1,%A3
 1493 8084a B3CB      	         CMP.L   %A3,%A1
 1494 8084c 6500 F9E4 	         BCS     MACSBUG        | DONE
 1495 80850 60BE      	         BRA.S   BS323
 1496               	
 1497               	*-------------------------------------------------------------------------
 1498               	* File BT        BT (Block Test) command                          11/30/81
 1499               	
 1500               	* BT   BLOCK OF MEMORY TEST
 1501               	
 1502 80852 6100 0D00 	BTCMD:   BSR     MTSETUP        | PREPARE PARMS (FROM,TO/COUNT)
 1503 80856 6100 1004 	         BSR     RAMTEST        | EXEC MEMORY TEST SUBROUTINE
 1504 8085a 6700 F9D6 	         BEQ     MACSBUG        | NO ERRORS, RETURN TO MACSBUG
68K GAS  tutor13.s 			page 30


 1505 8085e 2F01      	         MOVE.L  %D1,-(%A7)      | SAVE DATA READ
 1506 80860 2F00      	         MOVE.L  %D0,-(%A7)      | SAVE DATA WRITTEN CAUSING ERROR
 1507               	
 1508 80862 6100 1472 	         BSR     FIXBUF         | SET UP TO PRINT
 1509 80866 2CFC 4641 	         MOVE.L  #0x4641494C,(%A6)+ | "FAIL"
 1509      494C 
 1510 8086c 2CFC 4544 	         MOVE.L  #0x45442041,(%A6)+ | "ED A"
 1510      2041 
 1511 80872 3CFC 5420 	         MOVE.W  #0x5420,(%A6)+ | "T "
 1512 80876 200A      	         MOVE.L  %A2,%D0        | ADDRESS WHERE IT FAILED
 1513 80878 6100 1170 	         BSR     PNT6HX
 1514               	
 1515 8087c 2CFC 2020 	         MOVE.L  #0x20205752,(%A6)+ | "  WR"
 1515      5752 
 1516 80882 2CFC 4F54 	         MOVE.L  #0x4f54453d,(%A6)+ | "OTE="
 1516      453D 
 1517 80888 201F      	         MOVE.L  (%A7)+,%D0     | WHAT WAS WRITTEN
 1518 8088a 6100 1164 	         BSR     PNT4HX
 1519               	
 1520 8088e 2CFC 2020 	         MOVE.L  #0x20202052,(%A6)+ | "   R"
 1520      2052 
 1521 80894 2CFC 4541 	         MOVE.L  #0x4541443d,(%A6)+ | "EAD="
 1521      443D 
 1522 8089a 201F      	         MOVE.L  (%A7)+,%D0     | WHAT WAS READ
 1523 8089c 6100 1152 	         BSR     PNT4HX
 1524               	
 1525 808a0 6000 F806 	         BRA     MSG            | PRINT IT
 1526               	
 1527               	*-------------------------------------------------------------------------
 1528               	* File DC        DC (Data Conversion) Command                     12/10/81
 1529               	
 1530               	*
 1531               	*
 1532               	*  ***DC***  NUMBER CONVERSIONS
 1533               	*
 1534               	DCCMD:   .align  2              | -DATA CONVERT COMMAND-
 1535 808a4 41FA F810 	NUMCON0: LEA     SYNTAX(%PC),%A0 | IF NO PARAMETERS
 1536 808a8 6100 120A 	         BSR     FNEXTF         | POINT TO NEXT PARAMETER
 1537 808ac 6100 028C 	         BSR     GETA           | EVALUATE EXPRESSION
 1538               	
 1539 808b0 6100 1424 	         BSR     FIXBUF         | SET UP FOR PRINT
 1540 808b4 2E00      	         MOVE.L  %D0,%D7        | D7=VALUE
 1541 808b6 4A87      	         TST.L   %D7            | SEE IF NEGATIVE
 1542 808b8 6A0E      	         BPL.S   NUMCON1
 1543 808ba 1CFC 0024 	         MOVE.B  #'$',(%A6)+
 1544 808be 2007      	         MOVE.L  %D7,%D0        | MOVE NEGATIVE RESULT TO D0
 1545 808c0 6100 1120 	         BSR     PNT8HX
 1546 808c4 1CFC 003D 	         MOVE.B  #'=',(%A6)+
 1547 808c8 2007      	NUMCON1: MOVE.L  %D7,%D0        | RESTORE
 1548 808ca 6A08      	         BPL.S   NUMCON2
 1549 808cc 4480      	         NEG.L   %D0
 1550 808ce 6B04      	         BMI.S   NUMCON2        | SPECIAL CASE (-0)
 1551 808d0 1CFC 002D 	         MOVE.B  #'-',(%A6)+
 1552 808d4 1CFC 0024 	NUMCON2: MOVE.B  #'$',(%A6)+
 1553 808d8 6100 1194 	         BSR     PNTZHX
 1554 808dc 1CFC 003D 	         MOVE.B  #'=',(%A6)+    | NOW PRINT DECIMAL VALUE
 1555 808e0 2007      	         MOVE.L  %D7,%D0
68K GAS  tutor13.s 			page 31


 1556 808e2 6A08      	         BPL.S   NUMCON3
 1557 808e4 4480      	         NEG.L   %D0
 1558 808e6 6B04      	         BMI.S   NUMCON3        | SPECIAL CASE (-0)
 1559 808e8 1CFC 002D 	         MOVE.B  #'-',(%A6)+
 1560 808ec 1CFC 0026 	NUMCON3: MOVE.B  #'&',(%A6)+
 1561 808f0 6100 066A 	         BSR     HEX2DEC        | PUT VALUE IN BUFFER
 1562 808f4 6000 F7B2 	         BRA     MSG            | GO PRINT IT
 1563               	
 1564               	*-------------------------------------------------------------------------
 1565               	* File DFDI      DF (Display registers) WITH disassembler         05/27/82
 1566               	
 1567 808f8 5043 5352 	REGNAMES:.ascii  "PCSR"         | TABLE OF NAMES OF REGISTERS
 1568 808fc 5553 5353 	         .ascii  "USSS"
 1569 80900 3F3F      	         .ascii  "??"           | END OF TABLE
 1570               	
 1571               	DFCMD:   .align  2              | DF COMMAND  ENTRY
 1572 80902 600A      	         BRA.S   TD07
 1573               	
 1574 80904 6100 13D0 	TDISPLY: BSR     FIXBUF         | PRINT TRACE DISPLAY SUBROUTINE
 1575 80908 4A38 04E9 	         TST.B   XONOFF+3
 1576 8090c 6652      	         BNE.S   TD25           | SHORT DISPLAY
 1577               	
 1578 8090e 6100 13C6 	TD07:    BSR     FIXBUF         | PRINT PRELUDE
 1579 80912 42B8 061C 	         CLR.L   OUTTO          | FORCE DISPLAY TO OPERATORS CONSOLE
 1580               	         SCREEN1 = 0x0610
 1581 80916 2CF8 0610 	         MOVE.L  SCREEN1,(%A6)+
 1582 8091a 6704      	         BEQ.S   TD09           | SKIP PRELUDE
 1583 8091c 6100 132C 	         BSR     OUTPUT
 1584               	TD09:
 1585               	
 1586 80920 49FA FFD6 	         LEA     REGNAMES(%PC),%A4 | REGISTER NAMES
 1587 80924 45F8 0400 	         LEA     REGPC,%A2      | REGISTER DATA
 1588 80928 6100 13AC 	         BSR     FIXBUF         | SET UP I/O BUFFER
 1589               	
 1590 8092c 301C      	TD1:     MOVE.W  (%A4)+,%D0     | GET REG NAME
 1591 8092e 2E1A      	         MOVE.L  (%A2)+,%D7     | GET REG CONTENT
 1592 80930 0C40 3F3F 	         CMPI.W  #0x3f3f,%D0    | "??" SEE IF AT END OF REGS
 1593 80934 6650      	         BNE.S   TD4
 1594 80936 6100 12F8 	         BSR     OUT1CR         | PRINT BUFFER
 1595               	
 1596 8093a 1E3C 0044 	         MOVE.B  #'D',%D7       | CLASS=DATA
 1597               	         REGS = 0x0408
 1598 8093e 47F8 0408 	         LEA     REGS,%A3       | OFFSET
 1599 80942 6100 0DDA 	         BSR     PNTCLS         | GO PRINT THE BLOCK
 1600               	
 1601 80946 1E3C 0041 	         MOVE.B  #'A',%D7       | CLASS=ADDRESS
 1602 8094a 47F8 0428 	         LEA     REGS+32,%A3    | OFFSET
 1603 8094e 6100 0DCE 	         BSR     PNTCLS         | GO PRINT THE BLOCK
 1604               	
 1605 80952 6100 1382 	         BSR     FIXBUF
 1606 80956 7214      	         MOVEQ   #20,%D1        | LOOP COUNTER
 1607 80958 1CFC 002D 	TD27:    MOVE.B  #'-',(%A6)+    | FILL BUFFER WITH BOARDER
 1608 8095c 5381      	         SUBQ.L  #1,%D1
 1609 8095e 66F8      	         BNE.S   TD27
 1610               	
 1611 80960 2878 0400 	TD25:    MOVE.L  REGPC,%A4      | DISASSEMBLE
 1612 80964 4CD4 0007 	         MOVEM.L (%A4),%D0-%D2
68K GAS  tutor13.s 			page 32


 1613 80968 2A4E      	         MOVE.L  %A6,%A5
 1614 8096a 6100 3230 	         BSR     DCODE68K
 1615 8096e 4BF8 0540 	         LEA     BUFFER,%A5
 1616               	
 1617 80972 6100 12BC 	         BSR     OUT1CR         | PRINT
 1618               	
 1619 80976 6100 135E 	         BSR     FIXBUF         | PRINT END STUFF FOR SCREEN CONTROL
 1620               	         SCREEN2 = 0x0614
 1621 8097a 2CF8 0614 	         MOVE.L  SCREEN2,(%A6)+
 1622 8097e 6704      	         BEQ.S   TD39           | SKIP END STUFF
 1623 80980 6100 12C8 	         BSR     OUTPUT
 1624 80984 4E75      	TD39:    RTS                    | RETURN FOR MORE WORK
 1625               	
 1626 80986 3400      	TD4:     MOVE.W  %D0,%D2        | PRINT REG NAME IN BUFFER
 1627 80988 E040      	         ASR.W   #8,%D0         | MOVE IT OVER
 1628 8098a 1600      	         MOVE.B  %D0,%D3        | SAVE REGISTER TYPE A,D,W,M ETC
 1629 8098c 1CC0      	         MOVE.B  %D0,(%A6)+     |  SAVE FIRST LETTER
 1630 8098e 1CC2      	         MOVE.B  %D2,(%A6)+     | SAVE NEXT LETTER
 1631 80990 1CFC 003D 	         MOVE.B  #'=',(%A6)+    | EQUAL SIGN
 1632 80994 0C42 5553 	         CMPI.W  #0x5553,%D2    | "US"
 1633 80998 6606      	         BNE.S   T44
 1634 8099a 2038 0448 	         MOVE.L  REGUS,%D0      | USER STACK
 1635 8099e 6014      	         BRA.S   T449
 1636               	
 1637 809a0 0C42 5353 	T44:     CMPI.W  #0x5353,%D2    | "SS" SUPER STACK IS SPECIAL
 1638 809a4 6606      	         BNE.S   T448
 1639 809a6 2038 0444 	         MOVE.L  REGA7,%D0      | GET A7
 1640 809aa 6008      	         BRA.S   T449
 1641               	
 1642 809ac 2007      	T448:    MOVE.L  %D7,%D0        | REGISTER VALUE
 1643 809ae 0C42 5352 	         CMPI.W  #0x5352,%D2    | "SR" SEE IF STATUS REGISTER
 1644 809b2 670C      	         BEQ.S   TDCC
 1645 809b4 6100 102C 	T449:    BSR     PNT8HX         | FORMAT 8 HEX CHAR
 1646 809b8 1CFC 0020 	TD9:     MOVE.B  #BLANK,(%A6)+  | SPACE BETWEEN REGS
 1647 809bc 6000 FF6E 	         BRA TD1
 1648               	
 1649               	*   CONDITION CODE FORMAT
 1650               	*
 1651 809c0 3600      	TDCC:    MOVE.W  %D0,%D3        | SAVE FOR A MOMENT
 1652 809c2 6100 102C 	         BSR     PNT4HX
 1653 809c6 1CFC 003D 	         MOVE.B  #'=',(%A6)+
 1654 809ca 2E3C 8000 	         MOVE.L  #0x80000054,%D7 | TRACE BIT
 1654      0054 
 1655 809d0 613E      	         BSR.S   TDCC9
 1656 809d2 2E3C 2000 	         MOVE.L  #0x20000053,%D7 | SUPERVISOR BIT
 1656      0053 
 1657 809d8 6136      	         BSR.S   TDCC9
 1658 809da 3003      	         MOVE.W  %D3,%D0        | INTERRUPT LEVEL
 1659 809dc E048      	         LSR.W   #8,%D0
 1660 809de 0200 0007 	         ANDI.B  #0x07,%D0      | "7" MAX IN SR FOR LEVEL
 1661 809e2 6100 101C 	         BSR     PUTHEX
 1662 809e6 2E3C 0010 	         MOVE.L  #0x100058,%D7   | X BIT
 1662      0058 
 1663 809ec 6122      	         BSR.S   TDCC9
 1664 809ee 2E3C 0008 	         MOVE.L  #0x8004E,%D7    | N BIT
 1664      004E 
 1665 809f4 611A      	         BSR.S   TDCC9
68K GAS  tutor13.s 			page 33


 1666 809f6 2E3C 0004 	         MOVE.L  #0x4005A,%D7    | Z BIT
 1666      005A 
 1667 809fc 6112      	         BSR.S   TDCC9
 1668 809fe 2E3C 0002 	         MOVE.L  #0x20056,%D7    | V BIT
 1668      0056 
 1669 80a04 610A      	         BSR.S   TDCC9
 1670 80a06 2E3C 0001 	         MOVE.L  #0x10043,%D7    | C BIT
 1670      0043 
 1671 80a0c 6102      	         BSR.S   TDCC9
 1672 80a0e 60A8      	         BRA.S   TD9
 1673               	*
 1674 80a10 2C07      	TDCC9:   MOVE.L  %D7,%D6        | DUPLICATE STUFF
 1675 80a12 4846      	         SWAP    %D6            | GET BIT POSITION
 1676 80a14 CC43      	         AND.W   %D3,%D6        | SEE IF ON
 1677 80a16 6604      	         BNE.S   TDCC91
 1678 80a18 1E3C 002E 	         MOVE.B  #'.',%D7       | PUT IN PERIOD IF OFF
 1679 80a1c 1CC7      	TDCC91:  MOVE.B  %D7,(%A6)+     | PUT IN LETTER IF ON
 1680 80a1e 4E75      	         RTS
 1681               	
 1682               	*-------------------------------------------------------------------------
 1683               	* File DUMP      DU     Dump "S-Records"                          05/10/82
 1684               	
 1685               	*   ***DUMP***  DUMP  "S" RECORDS
 1686               	*    FORMAT:  DU  ADDRESS1 ADDRESS2  [TEXT....]
 1687               	*
 1688               	DUCMD:   .align  2
 1689 80a20 6100 1774 	         BSR     SCANPORT       | SEE WHERE TO SEND OUTPUT (DUMMY CALL)
 1690 80a24 2C38 061C 	         MOVE.L  OUTTO,%D6      | SAVE OUTTO FOR ACTUAL S-RECORD DUMP
 1691 80a28 42B8 061C 	         CLR.L   OUTTO          | OVERRIDE SCANPORT CALL
 1692               	
 1693 80a2c 41FA F688 	         LEA     SYNTAX(%PC),%A0 | WHERE TO GO IF NO PARAMTERS
 1694 80a30 6100 1082 	         BSR     FNEXTF         | FIND NEXT FIELD
 1695 80a34 6100 0104 	         BSR     GETA           | GET ADDRESS1
 1696 80a38 2640      	         MOVE.L  %D0,%A3        | A3 = BEGIN ADDRESS
 1697               	
 1698 80a3a 6100 1078 	         BSR     FNEXTF
 1699 80a3e 6100 00FA 	         BSR     GETA           | GET ADDRESS2
 1700 80a42 2840      	         MOVE.L  %D0,%A4        | A4 = END ADDRESS
 1701               	
 1702               	* PROCESS HEADER
 1703 80a44 41FA 0006 	         LEA     PUNCH5(%PC),%A0 | WHERE TO GO IF NO HEADER
 1704 80a48 6100 106A 	         BSR     FNEXTF         | LOOK FOR HEADER
 1705               	PUNCH5:  .align  2
 1706               	
 1707               	* MOVE TEXT TO "TEMP STORAGE"
 1708 80a4c 45F8 05C0 	         LEA     DUMPTEMP,%A2
 1709 80a50 2A0A      	         MOVE.L  %A2,%D5         | D5 = START OF TEXT
 1710 80a52 BDCD      	PUM11:   CMP.L   %A5,%A6
 1711 80a54 6704      	         BEQ.S   PUM13
 1712 80a56 14DD      	         MOVE.B  (%A5)+,(%A2)+    | MOVE
 1713 80a58 60F8      	         BRA.S   PUM11
 1714 80a5a CB8A      	PUM13:   EXG     %A2,%D5         | D5 = END OF TEXT +1
 1715               	
 1716               	* DISPLAY ADDRESSES
 1717 80a5c 204B      	         MOVE.L  %A3,%A0
 1718 80a5e 224C      	         MOVE.L  %A4,%A1
 1719 80a60 6100 F662 	         BSR     P2PHY          | DISPLAY TWO ADDRESSES
68K GAS  tutor13.s 			page 34


 1720               	
 1721               	* INSURE END EQUAL GREATER THAN BEG
 1722 80a64 B9CB      	         CMP.L   %A3,%A4
 1723 80a66 6500 F64E 	         BCS     SYNTAX
 1724               	
 1725 80a6a 21C6 061C 	         MOVE.L  %D6,OUTTO       | RESTORE OPTIONAL DESTINATION OF DUMP
 1726               	
 1727               	* FINISH PROCESSING HEADER
 1728               	*  A2 = START OF TEXT
 1729 80a6e 6100 1266 	         BSR     FIXBUF         | A5,A6=#BUFFER
 1730 80a72 7C02      	         MOVEQ   #2,%D6         | THE BYTE COUNT
 1731 80a74 4284      	         CLR.L   %D4            | CLEAR THE CHECKSUM
 1732 80a76 2CFC 5330 	         MOVE.L  #0x53303f3f,(%A6)+ | "S0??" START OF S RECORD
 1732      3F3F 
 1733 80a7c 2CFC 3030 	         MOVE.L  #0x30303030,(%A6)+ | "0000" DUMMY ADDRESS
 1733      3030 
 1734 80a82 B5C5      	MORES0:  CMP.L   %D5,%A2        | SEE IF AT END OF TEXT
 1735 80a84 6C0C      	         BGE.S   ENDS0          | WHERE TO GO WHEN ALL CHARACTERS USED
 1736 80a86 5286      	         ADDQ.L  #1,%D6         | ANOTHER BYTE
 1737               	
 1738 80a88 101A      	         MOVE.B  (%A2)+,%D0     | GET ANOTHER BYTE OF TEXT
 1739               	
 1740 80a8a D880      	         ADD.L   %D0,%D4        | FOR CHECKSUM
 1741 80a8c 6100 0F6A 	         BSR     PNT2HX         | PUT IT IN BUFFER
 1742 80a90 60F0      	         BRA.S   MORES0
 1743               	ENDS0:   .align  2
 1744               	
 1745 80a92 6100 0084 	         BSR     PNTSREC        | GO PRINT THE "S" RECORD
 1746 80a96 344B      	         MOVE    %A3,%A2        | A2 WILL SCAN BETWEEN A3-A4
 1747               	
 1748               	* DO ANOTHER "S" RECORD
 1749 80a98 6100 123C 	MORESP:  BSR     FIXBUF         | A5,A6=#BUFFER
 1750 80a9c 4284      	         CLR.L   %D4            | CLEAR CHECKSUM REGISTER
 1751 80a9e 200B      	         MOVE.L  %A3,%D0        | READY TO PRINT ADDRESS
 1752 80aa0 220B      	         MOVE.L  %A3,%D1        | GET READY TO AND ADDRESS
 1753 80aa2 7610      	         MOVEQ   #0x10,%D3      | MAXIMUM BYTES ON S REC LINE
 1754 80aa4 D283      	         ADD.L   %D3,%D1        | INSURE END OF LINE ADDRESS IS MAX
 1755 80aa6 0281 00FF 	         ANDI.L  #0xFF0000,%D1  | SEE IF 3 BYTE ADDRESS
 1755      0000 
 1756 80aac 6618      	         BNE.S   S2REC          | WHERE TO GO IF 3 BYTES NEEDED
 1757 80aae 2CFC 5331 	         MOVE.L  #0x53313f3f,(%A6)+ | "S1??" PUSH
 1757      3F3F 
 1758 80ab4 300B      	         MOVE    %A3,%D0        | SET UP TO PRINT 2 BYTE ADDRESS
 1759 80ab6 6100 0F38 	         BSR     PNT4HX         | PRINT 4 HEX CHAR ADDRESS
 1760 80aba 7C02      	         MOVEQ   #2,%D6         | BYTE COUNT
 1761 80abc 300B      	         MOVE.W  %A3,%D0        | FIX UP CHECKSUM
 1762 80abe D800      	         ADD.B   %D0,%D4        | LOW BYTE
 1763 80ac0 E040      	         ASR     #8,%D0         | SHIFT IT OVER
 1764 80ac2 D800      	         ADD.B   %D0,%D4        | HIGH BYTE OF ADDRESS
 1765 80ac4 6018      	         BRA.S   PNCA3          | GO PUNCH A LINE
 1766               	
 1767 80ac6 2CFC 5332 	S2REC:   MOVE.L  #0X53323F3F,(%A6)+ | "S2??" PUSH
 1767      3F3F 
 1768 80acc 6100 0F1C 	         BSR     PNT6HX         | PRINT 6 HEX CHAR ADDRESS
 1769 80ad0 7C03      	         MOVEQ   #3,%D6         | BYTE COUNT
 1770 80ad2 200B      	         MOVE.L  %A3,%D0        | FIX UP CHECKSUM
 1771 80ad4 D800      	         ADD.B   %D0,%D4        | LOW BYTE
68K GAS  tutor13.s 			page 35


 1772 80ad6 E040      	         ASR     #8,%D0         | SHIFT IT OVER
 1773 80ad8 D800      	         ADD.B   %D0,%D4        | MIDDLE BYTE
 1774 80ada 4840      	         SWAP    %D0            | SET UP FOR HIGH BYTE
 1775 80adc D800      	         ADD.B   %D0,%D4        | ADD HIGH BYTE
 1776 80ade B7CC      	PNCA3:   CMP.L   %A4,%A3        | SEE IF AT ENDING ADDRESS
 1777               	
 1778               	* END OF FILE
 1779 80ae0 6F1C      	         BLE.S   A3OUT          | WHERE TO GO IF BELOW OR AT END ADDRESS
 1780 80ae2 612E      	         BSR.S   PNTSRECX       | END IT BY PRINTING LAST RECORD
 1781 80ae4 6100 11F0 	         BSR     FIXBUF         | A5,A6=#BUFFER
 1782 80ae8 4284      	         CLR.L   %D4            | CLEAR THE CHECKSUM
 1783 80aea 2CFC 5339 	         MOVE.L  #0x53393f3f,(%A6)+ | "S9??" MOVE TO PRINT BUFFER
 1783      3F3F 
 1784 80af0 2CFC 3030 	         MOVE.L  #0x30303030,(%A6)+ | MOVE "0000" TO PRIT BUFFER
 1784      3030 
 1785 80af6 7C02      	         MOVEQ   #2,%D6         | BYTE COUNT
 1786 80af8 611E      	         BSR.S   PNTSREC        | PRINT "S9" END-OF-FILE RECORD
 1787 80afa 6000 F736 	         BRA     MACSBUG        | REENTER MACSBUG
 1788               	
 1789 80afe 101B      	A3OUT:   MOVE.B  (%A3)+,%D0     | GRAB THE BYTE FROM MEMORY
 1790 80b00 D840      	         ADD.W   %D0,%D4        | ADD TO CHECKSUM
 1791 80b02 5246      	         ADDQ.W  #1,%D6         | BUMP THE BYTE COUNT
 1792 80b04 5289      	         ADDQ.L  #1,%A1         | ADD TO COUNT OF BYTES PROCESSED
 1793 80b06 6100 0EF0 	         BSR     PNT2HX         | PUT THE HEX IN THE PRINT BUFFER
 1794 80b0a 5383      	         SUBQ.L  #1,%D3         | COUNT DOWN CHAR TO GO IN LINE
 1795 80b0c 66D0      	         BNE.S   PNCA3
 1796 80b0e 6108      	         BSR.S   PNTSREC        | END OF LINE-PUNCH IT
 1797 80b10 6086      	         BRA.S   MORESP         | GO FIX UP NEXT LINE
 1798               	
 1799               	* FIX UP & PRINT THE "S" RECORD/LINE
 1800               	
 1801 80b12 B2FC 0000 	PNTSRECX:CMP.W   #0,%A1         | SEE IF ANY CHAR MOVED
 1802 80b16 6720      	         BEQ.S   PNTSRTS        | NO CHAR MOVED
 1803               	
 1804 80b18 5246      	PNTSREC: ADD     #1,%D6         | ONE MORE BYTE (CHECKSUM)
 1805 80b1a D846      	         ADD.W   %D6,%D4        | ADD BYTE COUNT TO CHECKSUM
 1806 80b1c 4604      	         NOT.B   %D4            | COMPLIMENT THE CHECKSUM
 1807 80b1e 2004      	         MOVE.L  %D4,%D0        | READY FOR PRINT-HEX
 1808 80b20 6100 0ED6 	         BSR     PNT2HX         | PUT CHECKSUM IN RECORD
 1809 80b24 2E0E      	         MOVE.L  %A6,%D7        | SAVE FOR THE MOMENT
 1810 80b26 2C4D      	         MOVE.L  %A5,%A6        | START OF BUFFER
 1811 80b28 548E      	         ADDQ.L  #2,%A6         | BYPASS RECORD TYPE (4 CHAR)
 1812 80b2a 1006      	         MOVE.B  %D6,%D0        | SET UP BYTE COUNT FOR PNTHEX ROUTINE
 1813 80b2c 6100 0ECA 	         BSR     PNT2HX         | PUT THE BYTE COUNT IN THE PRINT BUFFER
 1814 80b30 2C47      	         MOVE.L  %D7,%A6        | RESTORE REAL END OF BUFFER
 1815 80b32 6100 10FC 	         BSR     OUT1CR         | DO THE ACTUAL DISPLAY/PUNCH
 1816 80b36 93C9      	         SUB.L   %A1,%A1        | CLEAR COUNTER OF BYTES PROCESSED
 1817 80b38 4E75      	PNTSRTS: RTS
 1818               	
 1819               	*-------------------------------------------------------------------------
 1820               	* File GETA      GET ADDRESS Subroutine                           12/01/81
 1821               	
 1822               	* GET ADDRESS
 1823               	*  ENTER (%A5) POINTER START OF BUFFER
 1824               	*        (%A6) POINTER END OF BUFFER
 1825               	*
 1826               	*  RETURN:  D0 = ADDRESS
68K GAS  tutor13.s 			page 36


 1827               	
 1828               	*        (%A6) POINTER END OF BUFFER
 1829               	*
 1830               	*  RETURN:  D0 = ADDRESS
 1831               	
 1832               	* FORMATS HANDLED:
 1833               	*  1.  NUMBER        DEFAULTS TO HEX
 1834               	*  2.  $NUMBER       HEX
 1835               	*  3.  &NUMBER       DECIMAL
 1836               	*  4.  (A@)
 1837               	*  5.  NUMBER(A@)
 1838               	*  6.  (A@,D@)
 1839               	*  7.  NUMBER(A@,D@)
 1840               	*  8.  [NUMBER]      MEMORY INDIRECT
 1841               	*
 1842               	*   FORMATS 1,2,3,8  ADD OFFSET R0 UNLESS R1 - R7 SPECIFIED
 1843               	
 1844               	* WORK REGISTERS
 1845               	*  D4    VALUE BEING BUILT
 1846               	*
 1847               	*  D5    FLAG REGISTER
 1848               	*     = 8000xXXX  R@ GIVEN (GARO)
 1849               	*     = XXXX80xX  [  GIVEN (GALB)
 1850               	*     = XXXXXX80  (  GIVEN (GALP)
 1851               	*
 1852               	*  D6    FLAG REGISTER
 1853               	*     = 8000xXXX  A@ GIVEN           (GAAVF)
 1854               	*     = XXXX80xX  NEED PLUS OR MINUS (GANPM)
 1855               	*     = XXXXXX2B  +  PLUS GIVEN      (GAPMS)
 1856               	*             2D  -  MINUS GIVEN
 1857               	
 1858 80b3a 48E7 0E80 	GETA:    MOVEM.L %D4-%D6/%A0,-(%A7) | SAVE SOME REGISTERS
 1859 80b3e 4284      	         CLR.L   %D4            | VALUE BEING BUILT
 1860 80b40 4285      	         CLR.L   %D5            | FLAG REG
 1861 80b42 4286      	         CLR.L   %D6            | FLAG REG
 1862               	
 1863 80b44 101D      	         MOVE.B  (%A5)+,%D0     | GET BYTE
 1864 80b46 BDCD      	         CMP.L   %A5,%A6
 1865 80b48 6500 010C 	         BCS     GAP191         | END OF BUFFER
 1866               	
 1867 80b4c 0C00 005B 	         CMPI.B  #'[',%D0
 1868 80b50 660C      	         BNE.S   GAP113
 1869               	
 1870               	*  [  SET INDIRECT
 1871               	
 1872 80b52 0045 8000 	         ORI.W   #0x8000,%D5     | SET LEFT BRACKET (GALB)
 1873               	
 1874 80b56 101D      	GAP111:  MOVE.B  (%A5)+,%D0     | GET BYTE
 1875 80b58 BDCD      	         CMP.L   %A5,%A6
 1876 80b5a 6500 00FA 	         BCS     GAP191         | END OF BUFFER
 1877               	GAP113:  .align  2
 1878               	
 1879 80b5e 0C00 002B 	         CMPI.B  #'+',%D0
 1880 80b62 675E      	         BEQ.S   GAP121         | PLUS SIGN
 1881               	
 1882 80b64 0C00 002D 	         CMPI.B  #'-',%D0
 1883 80b68 6758      	         BEQ.S   GAP121         | MINUS SIGN
68K GAS  tutor13.s 			page 37


 1884               	
 1885 80b6a 0C00 005D 	         CMPI.B  #']',%D0
 1886 80b6e 675E      	         BEQ.S   GAP131         | RIGHT BRACKET (INDIRECT)
 1887               	
 1888 80b70 0C00 0028 	         CMPI.B  #'(',%D0
 1889 80b74 676C      	         BEQ.S   GAP141         | LEFT PARIN
 1890               	
 1891 80b76 0C00 002C 	         CMPI.B  #',',%D0
 1892 80b7a 6700 0092 	         BEQ     GAP161         | COMMA
 1893               	
 1894 80b7e 0C00 0029 	         CMPI.B  #')',%D0
 1895 80b82 6700 00CC 	         BEQ     GAP181         | RIGHT PARIN
 1896               	
 1897 80b86 0C00 003B 	         CMPI.B  #';',%D0       | "SEMI-COLON"
 1898 80b8a 6700 00CA 	         BEQ     GAP191         | TERMINATE
 1899               	
 1900 80b8e 0C00 0020 	         CMPI.B  #BLANK,%D0     | "SPACE"
 1901 80b92 6700 00C2 	         BEQ     GAP191         | TERMINATE
 1902               	
 1903 80b96 4A46      	         TST.W   %D6            | (GANPM)
 1904 80b98 6B70      	         BMI.S   GAE            | NEEDS PLUS OR MINUS
 1905               	
 1906 80b9a 0C00 0052 	         CMPI.B  #'R',%D0
 1907 80b9e 6700 0094 	         BEQ     GAP171         | RELATIVE OFFSET
 1908               	
 1909 80ba2 4A06      	         TST.B   %D6            | (GALP)
 1910 80ba4 6B64      	         BMI.S   GAE            | (...   NUMBER NOT ALLOWED
 1911               	
 1912               	* NONE OF ABOVE ASSUME NUMERIC VALUE
 1913 80ba6 538D      	         SUBQ.L  #1,%A5         | ADJUST (A5) TO FIRST CHAR
 1914 80ba8 4280      	         CLR.L   %D0
 1915 80baa 6100 0F8A 	         BSR     GETNUMA
 1916               	
 1917 80bae 0C06 002D 	         CMPI.B  #'-',%D6       | (GAPMS)
 1918 80bb2 6704      	         BEQ.S   GAP118         | MINUS SIGN
 1919               	
 1920 80bb4 D880      	         ADD.L   %D0,%D4        | PLUS SIGN
 1921 80bb6 6002      	         BRA.S   GAP119
 1922               	
 1923 80bb8 9880      	GAP118:  SUB.L   %D0,%D4
 1924               	
 1925 80bba 4206      	GAP119:  CLR.B   %D6            | (GAPMS)  RESET PLUS MINUS FLAG
 1926 80bbc 0046 8000 	         ORI.W   #0x8000,%D6     | (GANPM)  SET NEED PLUS MINUS
 1927 80bc0 6094      	GAP111S: BRA.S   GAP111
 1928               	
 1929               	* (*) (-) SET ARITHMETIC OPERATOR
 1930               	
 1931 80bc2 4A06      	GAP121:  TST.B   %D6            | (GAPMS)
 1932 80bc4 6644      	         BNE.S   GAE            | MULTI OPERATORS
 1933 80bc6 1C00      	         MOVE.B  %D0,%D6        |  (GAPMS)
 1934 80bc8 0246 00FF 	         ANDI.W  #0x00FF,%D6     | RESET (GANPM) NEED PLUS MINUS
 1935 80bcc 60F2      	         BRA.S   GAP111S
 1936               	
 1937               	*  ]  CLOSE INDIRECT
 1938               	
 1939 80bce 4A45      	GAP131:  TST.W   %D5            | (GALB)
 1940 80bd0 6A38      	         BPL.S   GAE            | [ MISSING
68K GAS  tutor13.s 			page 38


 1941               	
 1942               	* IF NO R@ GIVEN ADD R0
 1943 80bd2 4A85      	         TST.L   %D5            | (GARO)
 1944 80bd4 6B04      	         BMI.S   GAP135         | R@ GIVEN
 1945               	         OFFSET = 0x044c
 1946 80bd6 D8B8 044C 	         ADD.L   OFFSET,%D4     | NO R@ GIVEN; ADD R0
 1947               	GAP135:  .align  2
 1948               	
 1949 80bda 2044      	         MOVE.L  %D4,%A0
 1950 80bdc 2010      	         MOVE.L  (%A0),%D0
 1951 80bde 6000 008A 	         BRA     GAP199
 1952               	
 1953               	*  (  DO PARIN PAIR
 1954               	
 1955 80be2 4A05      	GAP141:  TST.B   %D5            | (GALP)
 1956 80be4 6B24      	         BMI.S   GAE            | MULTI (
 1957 80be6 4A85      	         TST.L   %D5            | (GARO)
 1958 80be8 6B20      	         BMI.S   GAE            | R@ NOT ALLOWED WITH (..)
 1959 80bea 0005 0080 	         ORI.B   #0x80,%D5       | (GALP) SET LEFT PAREN
 1960               	
 1961               	* LEFT PARIN SET; MUST BE A@ NEXT
 1962 80bee 101D      	         MOVE.B  (%A5)+,%D0     |  GET BYTE
 1963 80bf0 BDCD      	         CMP.L   %A5,%A6
 1964 80bf2 6516      	         BCS.S   GAE
 1965 80bf4 0C00 0041 	         CMPI.B  #'A',%D0
 1966 80bf8 6610      	         BNE.S   GAE            | NOT A-REG
 1967 80bfa 41F8 0428 	         LEA     REGS+32,%A0
 1968 80bfe 6170      	         BSR.S   GASRGN         | GET VALUE IN A@
 1969 80c00 D881      	         ADD.L   %D1,%D4
 1970 80c02 0086 8000 	         ORI.L   #0x80000000,%D6 | (GAAVF) A-REG VALUE FLAG
 1970      0000 
 1971 80c08 60B6      	         BRA.S   GAP111S
 1972               	
 1973 80c0a 6000 F4AA 	GAE:     BRA     SYNTAX
 1974               	
 1975               	*  COMMA  A-REG or
 1976               	*  COMMA  D-REG REQUIRED
 1977               	
 1978 80c0e 4A86      	GAP161:  TST.L   %D6            | (GAAVF)
 1979 80c10 6AF8      	         BPL.S   GAE            | NO A-REG SPECIFIED
 1980 80c12 101D      	         MOVE.B  (%A5)+,%D0     | GET BYTE
 1981 80c14 BDCD      	         CMP.L   %A5,%A6
 1982 80c16 65F2      	         BCS.S   GAE
 1983 80c18 0C00 0041 	         CMPI.B  #'A',%D0
 1984 80c1c 6606      	         BNE.S   GAP163
 1985 80c1e 41F8 0428 	         LEA     REGS+32,%A0    | GET VALUE IN A@
 1986 80c22 600A      	         BRA.S   GAP165
 1987 80c24 0C00 0044 	GAP163:  CMPI.B  #'D',%D0
 1988 80c28 66E0      	         BNE.S   GAE            | NOT D-REG
 1989 80c2a 41F8 0408 	         LEA     REGS,%A0       | GET VALUE IN D@
 1990 80c2e 6140      	GAP165:  BSR.S   GASRGN
 1991 80c30 D881      	         ADD.L   %D1,%D4
 1992 80c32 608C      	         BRA.S   GAP111S
 1993               	
 1994               	*  R@  OFFSET
 1995               	
 1996 80c34 0C06 002B 	GAP171:  CMPI.B  #'+',%D6       | (GAPMS)
68K GAS  tutor13.s 			page 39


 1997 80c38 66D0      	         BNE.S   GAE            | ONLY + ALLOWED
 1998               	
 1999               	* ONLY ONE R@ ALLOWED
 2000               	
 2001 80c3a 4A85      	         TST.L   %D5            | (GARO)
 2002 80c3c 6BCC      	         BMI.S   GAE            | MULIT R@
 2003 80c3e 0085 8000 	         ORI.L   #0x80000000,%D5 | SET R@ GIVEN (GARO)
 2003      0000 
 2004               	
 2005 80c44 41F8 044C 	         LEA     OFFSET,%A0
 2006 80c48 6126      	         BSR.S   GASRGN         | GET VALUE IN R@
 2007 80c4a D881      	         ADD.L   %D1,%D4
 2008 80c4c 6000 FF6C 	         BRA     GAP119
 2009               	
 2010               	*  )  CLOSE THE WORLD
 2011               	
 2012 80c50 4A86      	GAP181:  TST.L   %D6            | (GAAVF)
 2013 80c52 6AB6      	         BPL.S   GAE            | NO (
 2014 80c54 6012      	         BRA.S   GAP197
 2015               	
 2016               	*  SPACE  TERMINATOR
 2017               	
 2018 80c56 4A45      	GAP191:  TST.W   %D5            | (GALB)
 2019 80c58 6BB0      	         BMI.S   GAE            | [ WITHOUT ]
 2020 80c5a 4A05      	         TST.B   %D5            | (GALP)
 2021 80c5c 6BAC      	         BMI.S   GAE            | ( WITHOUT )
 2022 80c5e 538D      	         SUBQ.L  #1,%A5         | ADJUST CHAR POINTER
 2023               	
 2024               	* IF NO R@ GIVEN ADD R0
 2025               	
 2026 80c60 4A85      	         TST.L   %D5            | (GARO)
 2027 80c62 6B04      	         BMI.S   GAP197         | R@ GIVEN
 2028 80c64 D8B8 044C 	         ADD.L   OFFSET,%D4
 2029 80c68 2004      	GAP197:  MOVE.L  %D4,%D0
 2030               	
 2031 80c6a 4CDF 0170 	GAP199:  MOVEM.L (%A7)+,%D4-%D6/%A0
 2032 80c6e 4E75      	         RTS
 2033               	
 2034               	* GET NEXT NUMBER
 2035               	*  %A0 = POINTER TO TABLE OF VALUES
 2036               	*  %D1 = VALUE ON RETURN
 2037               	
 2038 80c70 4280      	GASRGN:  CLR.L   %D0
 2039 80c72 101D      	         MOVE.B  (%A5)+,%D0     | GET BYTE
 2040 80c74 BDCD      	         CMP.L   %A5,%A6
 2041 80c76 6592      	         BCS.S   GAE
 2042 80c78 0400 0030 	         SUBI.B  #'0',%D0       | ADJUST TO ZERO
 2043 80c7c 0C00 0007 	         CMPI.B  #7,%D0
 2044 80c80 6288      	         BHI.S   GAE            | NOT 0 - 7
 2045 80c82 C0FC 0004 	         MULU    #4,%D0         | 4 * OFFSET
 2046 80c86 2230 0000 	         MOVE.L  (%A0,%D0.W),%D1
 2047 80c8a 4E75      	         RTS
 2048               	
 2049               	*-------------------------------------------------------------------------
 2050               	* File H         Register save,Trace, Breakpoint                  03/03/82
 2051               	
 2052               	*       SAVE ALL REGISTERS ROUTINE-JMP [TEMP] BACK
68K GAS  tutor13.s 			page 40


 2053               	*          USUALLY CALLED BY THE MACRO "SAVEREGS"
 2054               	
 2055               	SAVE:    .align  2
 2056 80c8c 4FF8 0444 	         LEA     REGA7,%A7       | WHERE TO START STORING
 2057 80c90 48E7 FFFE 	         MOVEM.L %D0-%D7/%A0-%A6,-(%A7) | SAVE REGISTERS
 2058               	
 2059 80c94 4FF8 078A 	         LEA     SYSTACK+4,%A7   | SET UP STRETCHED VERSAUG STACK
 2060               	
 2061 80c98 2078 0444 	         MOVE.L  REGA7,%A0       | A0 = TARGETS SUPERVISOR STACK POINTER
 2062 80c9c 31D8 0406 	         MOVE.W  (%A0)+,REGSR+2  | GET TARGETS SR
 2063               	
 2064 80ca0 21D8 0400 	         MOVE.L  (%A0)+,REGPC    | GET TARGETS PC
 2065               	
 2066 80ca4 21C8 0444 	         MOVE.L  %A0,REGA7       | WHERE TARGET STACK REALLY POINTS
 2067               	
 2068 80ca8 4E69      	         MOVE.L  %USP,%A1        | GET USERS STACK POINTER
 2069 80caa 21C9 0448 	         MOVE.L  %A1,REGUS       | SAVE IT FOR DISPLAY ETC
 2070               	
 2071 80cae 2038 0400 	         MOVE.L  REGPC,%D0       | GET PROGRAM COUNTER
 2072 80cb2 598F      	         SUBQ.L  #4,%A7          | SET REAL MACSBUG STACK
 2073 80cb4 2F38 04D6 	         MOVE.L  TEMP,-(%A7)     | PUT RETURN ADDRESS ON STACK
 2074 80cb8 4E75      	         RTS                     | RETURN TO SENDER
 2075               	
 2076               	*
 2077               	*     ***TRACE***  TRACE ENTRY POINT
 2078               	*       ENTER FROM VECTOR 9  (LOCATION 24) FOR
 2079               	*
 2080               	
 2081               	* REGISTER USAGE
 2082               	*  %A0 = ADDRESS OF BREAKPOINT ADDRESS
 2083               	*  %A2 = ADDRESS OF BREAKPOINT COUNTS
 2084               	*  %D1 = PC
 2085               	*  %D5 = TRACECNT
 2086               	*  %D7 = BKPT COUNT
 2087               	
 2088 80cba 46FC 2700 	TRACE:   MOVE.W  #0x2700,%SR     | MASK OFF INTERRUPTS
 2089               	         SAVEREGS
 2089               	>  TEMP =0x04d6
 2089 80cbe 21CF 0444 	>  MOVE.L %A7,REGA7
 2089 80cc2 4FFA 0008 	>  LEA SV14(%PC),%A7
 2089 80cc6 21CF 04D6 	>  MOVE.L %A7,TEMP
 2089 80cca 60C0      	>  JRA SAVE
 2089               	> SV14:
 2090               	
 2091               	* IF PC POINTS TO "TRACE"; DOUBLE EVENT OCCURED
 2092               	*  CLEAR LAST EVENT BY IGNORING
 2093               	
 2094 80ccc 0CB8 0000 	         CMPI.L  #0x8008,REGPC
 2094      8008 0400 
 2095               	*        CMPI.L  #V2,REGPC
 2096               	
 2097 80cd4 6610      	         BNE.S   TRACE16
 2098               	
 2099 80cd6 2A78 0444 	         MOVE.L  REGA7,%A5       | TRIM LAST EVENT FROM STACK
 2100 80cda 31DD 0406 	         MOVE.W  (%A5)+,REGSR+2  | MOVE VALUES FROM STACK TO
 2101 80cde 21DD 0400 	         MOVE.L  (%A5)+,REGPC    | PSUEDO SR, PC,
 2102 80ce2 21CD 0444 	         MOVE.L  %A5,REGA7       | REFLECT ADJUSTMENTS IN PSUEDO STACK
68K GAS  tutor13.s 			page 41


 2103 80ce6 0278 7FFF 	TRACE16: ANDI.W  #0x7FFF,REGSR+2  | RESET "T" (TRACE) BIT
 2103      0406 
 2104               	
 2105 80cec 2A38 04DA 	         MOVE.L  TRACECNT,%D5
 2106 80cf0 6B54      	         BMI.S   TRACE39        | EXECUTING ONE-INSTRUCTION
 2107 80cf2 6700 0C92 	         BEQ     ABORT335       | NOT TRACEING
 2108               	
 2109               	*   MAKE SURE WE ARE NOT TRACING OURSELVES
 2110 80cf6 2238 0400 	         MOVE.L  REGPC,%D1      | GET PC
 2111 80cfa 41FA F304 	         LEA.L   FIRST(%PC),%A0
 2112 80cfe B288      	         CMP.L   %A0,%D1
 2113 80d00 6B10      	         BMI.S   TISOK          | TRACING BELOW OURSELVES
 2114 80d02 41FA 3424 	         LEA     LAST(%PC),%A0
 2115 80d06 B288      	         CMP.L   %A0,%D1
 2116 80d08 6208      	         BHI.S   TISOK          | TRACING ABOVE OURSELVES
 2117 80d0a 4BFA 015E 	         LEA     MSG020(%PC),%A5 | TRACING OURSELVES
 2118 80d0e 6000 0128 	         BRA     CHKBP4
 2119               	TISOK:
 2120               	
 2121 80d12 41F8 0470 	         LEA     BPADD,%A0
 2122 80d16 45F8 0494 	         LEA     BPCNT,%A2
 2123 80d1a 7E09      	         MOVEQ   #9,%D7         | 9TH BP IS "UNTILL" FEATURE
 2124               	
 2125 80d1c B290      	TRACE01: CMP.L   (%A0),%D1      | SEE IF PC MATCHES ADDRESS IN TABLE
 2126 80d1e 6610      	         BNE.S   TRACE08
 2127 80d20 2012      	         MOVE.L  (%A2),%D0      | GET COUNT
 2128 80d22 6700 0110 	         BEQ     CHKBP3         | COUNT ZERO
 2129 80d26 5380      	         SUBQ.L  #1,%D0         | COUNT DOWN
 2130 80d28 2480      	         MOVE.L  %D0,(%A2)      |  SAVE IT
 2131 80d2a 6700 0108 	         BEQ     CHKBP3         | COUNT WENT TO ZERO
 2132 80d2e 6008      	         BRA.S   TRACE03
 2133               	
 2134 80d30 5888      	TRACE08: ADDQ.L  #4,%A0         | BUMP TABLE POINTER
 2135 80d32 588A      	         ADDQ.L  #4,%A2         | BUMP COUNT TABLE POINTER
 2136 80d34 5387      	         SUBQ.L  #1,%D7         | LOOP AROUND
 2137 80d36 66E4      	         BNE.S   TRACE01
 2138               	
 2139 80d38 6100 FBCA 	TRACE03: BSR     TDISPLY        | DO TRACE DISPLAY
 2140 80d3c 53B8 04DA 	         SUBQ.L  #1,TRACECNT    | TRACE COUNT
 2141 80d40 6700 F4F0 	         BEQ     MACSBUG        | STOP WHEN ZERO
 2142 80d44 6008      	         BRA.S   UNTRACE        | CONTINUE WITH TRACE
 2143               	
 2144               	* END UP HERE AFTER BREAKPOINTING ONE INSTRUCTION
 2145               	* -- PUT BP BACK IN AND CONTINUE TO RUN
 2146               	
 2147 80d46 42B8 04DA 	TRACE39: CLR.L   TRACECNT
 2148 80d4a 613A      	         BSR.S   SWAPIN         | PUT BP INTO USER'S MEMORY
 2149 80d4c 600E      	         BRA.S   UNSTACK        | CONTINUE TO RUN
 2150               	
 2151 80d4e 0078 8000 	UNTRACE: ORI.W   #0x8000,REGSR+2 | SET UP TRACE BIT!
 2151      0406 
 2152               	         AV9 = 0x0024
 2153               	         ADDR2MEM TRACE,AV9     | TAKE TRACE VECTOR
 2153 80d54 487A FF64 	>  PEA TRACE(%PC)
 2153 80d58 21DF 0024 	>  MOVE.L (%A7)+,AV9
 2154               	
 2155 80d5c 2278 0448 	UNSTACK: MOVE.L  REGUS,%A1
68K GAS  tutor13.s 			page 42


 2156 80d60 4E61      	         MOVE.L  %A1,%USP       | US = TARGET'S USER STACK
 2157 80d62 2478 0400 	         MOVE.L  REGPC,%A2      | A2 = TARGET'S PC
 2158               	
 2159               	         .align  2              | INSURE MEMORY AT LOCATION OF PC
 2160 80d66 3012      	         MOVE.W  (%A2),%D0      | * ADDR TRAP ERROR * IF NO MEMORY
 2161               	
 2162 80d68 2278 0444 	         MOVE.L  REGA7,%A1      | A1 = TARGET SYSTEM STACK (SS)
 2163               	
 2164               	         .align  2              | INSURE MEMORY AT TARGET'S STACK
 2165 80d6c 230A      	         MOVE.L  %A2,-(%A1)     | MOVE PC ONTO TARGET'S STACK
 2166               	
 2167 80d6e 3038 0406 	         MOVE.W  REGSR+2,%D0
 2168 80d72 3300      	         MOVE.W  %D0,-(%A1)     | SR ONTO TARGET'S STACK
 2169               	
 2170 80d74 21C9 04D6 	         MOVE.L  %A1,TEMP       | TEMP = TARGETS SS
 2171               	
 2172 80d78 4FF8 0408 	         LEA     REGS,%A7       | A7 = POINTER TO PSUEDO REGISTERS
 2173 80d7c 4CDF 7FFF 	         MOVEM.L (%A7)+,%D0-%D7/%A0-%A6 | ARM MOST OF TARGET REGISTERS
 2174 80d80 2E78 04D6 	         MOVE.L  TEMP,%A7       | SS = TARGET'S
 2175               	
 2176 80d84 4E73      	         RTE                    | GO BACK TO THE USER
 2177               	
 2178 80d86 6114      	SWAPIN:  BSR.S   SWAPOUT        | MAKE SURE THEY ARE ALL OUT
 2179               	
 2180               	         SAVEAV4 = 0x04d2
 2181 80d88 21F8 0010 	         MOVE.L  AV4,SAVEAV4    | SAVE VECTOR (WHOM EVER'S IT WAS)
 2181      04D2 
 2182 80d8e 4DFA 0054 	         LEA     CHKBP(%PC),%A6
 2183 80d92 21CE 0010 	         MOVE.L  %A6,AV4        | REPLACE IT WITH THE "CHKBP" RTN
 2184 80d96 4DFA 002A 	         LEA     SWAPIN1(%PC),%A6 | A6 = ROUTINE ADDRESS
 2185 80d9a 6010      	         BRA.S   SWAP
 2186               	
 2187               	         BPSTATUS = 0x04e0
 2188 80d9c 4A78 04E0 	SWAPOUT: TST.W   BPSTATUS        | SEE IF OUT ALREADY
 2189 80da0 6740      	         BEQ.S   SWAPEND         | YES...DONE
 2190 80da2 21F8 04D2 	         MOVE.L  SAVEAV4,AV4     | NO....REPLACE THE VECTOR
 2190      0010 
 2191               	
 2192 80da8 4DFA 0028 	         LEA     SWAPOUT1(%PC),%A6 | A6 = ROUTINE ADDRESS
 2193 80dac 41F8 0470 	SWAP:    LEA     BPADD,%A0       | A0 = ADDRESS OF TABLE
 2194 80db0 45F8 0494 	         LEA     BPCNT,%A2       | A2 = ADDRESS OF COUNTS
 2195 80db4 7E09      	         MOVEQ   #9,%D7          | DO 9 BP
 2196               	         BPDATA = 0x04b8
 2197 80db6 47F8 04B8 	         LEA     BPDATA,%A3      | CONTENT TABLE
 2198               	
 2199 80dba 2850      	SWAP1:   MOVE.L  (%A0),%A4       | GET POSSIBLE ADDDRESS
 2200 80dbc 4A90      	         TST.L   (%A0)           | IS POSSIBLE ADDRESS ZERO
 2201 80dbe 671A      	         BEQ.S   SWAP99          | ZERO MEANS NO BP DEFINED
 2202 80dc0 4ED6      	         JMP     (%A6)           | GO TO RIGHT ROUTINE
 2203               	
 2204               	SWAPIN1:
 2205 80dc2 3014      	         MOVE.W  (%A4),%D0       | USER'S PROGRAM GOES INTO TABLE
 2206               	
 2207 80dc4 3680      	         MOVE.W  %D0,(%A3)
 2208 80dc6 38BC 4AFB 	         MOVE.W  #BKPOINT,(%A4)  | PUT BREAKPOINT IN
 2209               	
 2210 80dca 31FC 0001 	         MOVE.W  #1,BPSTATUS     | FLAG AS BP IN
68K GAS  tutor13.s 			page 43


 2210      04E0 
 2211 80dd0 6008      	         BRA.S   SWAP99
 2212               	
 2213 80dd2 3013      	SWAPOUT1:MOVE.W  (%A3),%D0       | GET CONTENTS FROM TABLE
 2214 80dd4 3880      	         MOVE.W  %D0,(%A4)       | PUT CONTENTS BACK INTO PROGRAM
 2215               	
 2216 80dd6 4278 04E0 	         CLR.W   BPSTATUS        | FLAG AS BREAKPOINTS OUT
 2217 80dda 5888      	SWAP99:  ADDQ.L  #4,%A0          | BUMP ADDRESS TABLE POINTER
 2218 80ddc 548B      	         ADDQ.L  #2,%A3          | BUMP CONTENT TABLE POINTER
 2219 80dde 5387      	         SUBQ.L  #1,%D7
 2220 80de0 66D8      	         BNE.S   SWAP1
 2221 80de2 4E75      	SWAPEND: RTS
 2222               	
 2223               	*  ILLEGAL INSTRUCTION ENTRY POINT
 2224               	*   BREAKPOINT TEST
 2225               	*
 2226 80de4 46FC 2700 	CHKBP:   MOVE.W  #0x2700,%SR     | MASK OF INT.
 2227               	         SAVEREGS
 2227               	>  TEMP =0x04d6
 2227 80de8 21CF 0444 	>  MOVE.L %A7,REGA7
 2227 80dec 4FFA 000A 	>  LEA SV16(%PC),%A7
 2227 80df0 21CF 04D6 	>  MOVE.L %A7,TEMP
 2227 80df4 6000 FE96 	>  JRA SAVE
 2227               	> SV16:
 2228 80df8 2038 0400 	         MOVE.L  REGPC,%D0       | GET PROGRAM COUNTER TO COMPARE
 2229 80dfc 2A40      	         MOVE.L  %D0,%A5         | A5 = TARGET PC
 2230 80dfe 3215      	         MOVE.W  (%A5),%D1       | SEE WHAT OP CODE WAS XEQ
 2231               	
 2232 80e00 619A      	         BSR.S   SWAPOUT         | TAKE BREAKPOINTS OUT
 2233               	
 2234 80e02 0C41 4AFB 	         CMPI.W  #BKPOINT,%D1    | USED FOR BP
 2235 80e06 6616      	         BNE.S   CHKBP11         | NOT AT BREAKPOINT
 2236               	
 2237 80e08 41F8 0470 	         LEA     BPADD,%A0       | A0 = ADDRESS OF BP ADDRESSES
 2238 80e0c 45F8 0494 	         LEA     BPCNT,%A2       | A2 = ADDRESS OF BP COUNTS
 2239 80e10 7E09      	         MOVEQ   #9,%D7          | D7 = LOOP COUNT
 2240               	
 2241 80e12 BBD0      	CHKBP1:  CMP.L   (%A0),%A5       | SEE IF WE ARE THERE
 2242 80e14 6712      	         BEQ.S   CHKBP2          | AT BREAKPOINT; AT AN ADDRESS
 2243               	
 2244 80e16 5888      	         ADDQ.L  #4,%A0          | BUMP BOTH POINTERS
 2245 80e18 588A      	         ADDQ.L  #4,%A2
 2246 80e1a 5387      	         SUBQ.L  #1,%D7
 2247 80e1c 66F4      	         BNE.S   CHKBP1
 2248               	
 2249               	* IS NOT A BREAKPOINT; ASSUME ILLEGAL INSTRUCTION
 2250 80e1e 4BFA 0028 	CHKBP11: LEA     MSG009(%PC),%A5 | "ILLEGAL INSTRUCTION"
 2251 80e22 4278 04DE 	         CLR.W   TRACEON         | RESET TRACE MODE
 2252 80e26 6010      	         BRA.S   CHKBP4
 2253               	
 2254               	* AT BREAKPOINT...CHECK COUNT
 2255 80e28 2012      	CHKBP2:  MOVE.L  (%A2),%D0       | GET COUNT
 2256 80e2a 6708      	         BEQ.S   CHKBP3          | COUNT ZERO
 2257 80e2c 5380      	         SUBQ.L  #1,%D0          | DECREMENT
 2258 80e2e 2480      	         MOVE.L  %D0,(%A2)       | PUT COUNT BACK
 2259 80e30 6600 F7F4 	         BNE     GOCMD1          | COUNT NOT ZERO; KEEP GOING
 2260               	
68K GAS  tutor13.s 			page 44


 2261 80e34 4BFA 0026 	CHKBP3:  LEA     MSG014(%PC),%A5 | "AT BREAKPOINT"
 2262               	
 2263 80e38 6100 F2CC 	CHKBP4:  BSR     FIXDCRLF
 2264 80e3c 6100 0DF2 	         BSR     OUT1CR
 2265 80e40 6100 FAC2 	         BSR     TDISPLY         | PRINT TRACE DISPLAY
 2266 80e44 6000 F3EC 	         BRA     MACSBUG
 2267               	
 2268 80e48 494C 4C45 	MSG009:  .ascii  "ILLEGAL INSTRUCTION"
 2268      4741 4C20 
 2268      494E 5354 
 2268      5255 4354 
 2268      494F 4E
 2269 80e5b 04        	         DC.B    EOT
 2270               	
 2271 80e5c 4154 2042 	MSG014:  .ascii  "AT BREAKPOINT"
 2271      5245 414B 
 2271      504F 494E 
 2271      54
 2272 80e69 04        	         DC.B    EOT
 2273               	
 2274 80e6a 2E50 4320 	MSG020:  .ascii  ".PC within \"DEBUGGER\""
 2274      7769 7468 
 2274      696E 2022 
 2274      4445 4255 
 2274      4747 4552 
 2275 80e7f 0704      	         DC.B    BELL,EOT
 2276               	
 2277 80e81 00        	         DC.B    0              | PAD BYTE
 2278               	
 2279               	*-------------------------------------------------------------------------
 2280               	* File HE        HELP Command                                     12/01/81
 2281               	
 2282               	* HELP  COMMAND
 2283               	*  PRINT: REGISTERS AND COMMANDS IN TABLES
 2284               	
 2285 80e82 4BFA 0066 	HECMD:   LEA     MSG002(%PC),%A5
 2286 80e86 6100 F26A 	         BSR     FIXDATA
 2287 80e8a 6100 0DA4 	         BSR     OUT1CR          | PRINT
 2288               	
 2289 80e8e 49FA F478 	         LEA     SOLIST(%PC),%A4 | A4 = POINTER TO COMMAND LIST
 2290               	
 2291 80e92 6100 0E42 	         BSR     FIXBUF
 2292 80e96 143C 0008 	         MOVE.B  #8,%D2          | D2 = # CMDS PER LINE
 2293 80e9a 321C      	HELP4:   MOVE.W  (%A4)+,%D1      | GET 2 BYTE COMMAND
 2294 80e9c 0C41 FFFF 	         CMPI.W  #0xFFFF,%D1
 2295 80ea0 6740      	         BEQ.S   HELP6           | DONE PRINT LAST BUFFER
 2296 80ea2 548C      	         ADDQ.L  #2,%A4          | BUMP POINTER UP BY 2
 2297 80ea4 4A41      	         TST.W   %D1             | IS THE INVISIBLE INDICATOR ON?
 2298 80ea6 6BF2      	         BMI.S   HELP4           | YES... THEN BYPASS THIS ONE
 2299 80ea8 3601      	         MOVE.W  %D1,%D3         | SAVE XX FOR "XX" AND "NOXX" IN HELP
 2300 80eaa 0241 7F7F 	         ANDI.W  #0x7F7F,%D1     | REMOVE CONTROL BITS
 2301 80eae 3CC1      	         MOVE.W  %D1,(%A6)+      | NO.... MOVE THIS COMMAND TO "PRINT" LINE
 2302 80eb0 2CFC 2020 	         MOVE.L  #0x20202020,(%A6)+  | MOVE BLANKS FOR SPACING
 2302      2020 
 2303 80eb6 6118      	         BSR.S   HELP81          | PRINT THE LINE IF FULL
 2304 80eb8 0803 0007 	         BTST    #7,%D3          | IS "NO" OPTION SUPPORTED?
 2305 80ebc 6710      	         BEQ.S   EOHLOOP         | NO...BYPASS THIS COMMAND, ELSE...
68K GAS  tutor13.s 			page 45


 2306 80ebe 3CFC 4E4F 	         MOVE.W  #0x4e4f,(%A6)+  | "NO  "   IN MSG
 2307 80ec2 0243 7F7F 	         ANDI.W  #0x7F7F,%D3     | RESET CONTROL BITS
 2308 80ec6 3CC3      	         MOVE.W  %D3,(%A6)+      | "NOCC"   IN MSG (WHERE CC=COMMAND CODE)
 2309 80ec8 3CFC 2020 	         MOVE.W  #0x2020,(%A6)+  | "NOCC  " IN MSG    "    "    "      "
 2310 80ecc 6102      	         BSR.S   HELP81          | PRINT THE LINE IF FULL
 2311 80ece 60CA      	EOHLOOP: BRA.S   HELP4           | NEXT COMMAND.
 2312               	
 2313               	*        DISPLAY LINE OF COMMANDS (IF FULL)
 2314               	
 2315 80ed0 5302      	HELP81:  SUBQ.B  #1,%D2          | D2 = COUNT OF COMMANDS PER LINE
 2316 80ed2 660C      	         BNE.S   HELP85          | NOT FULL, JUST RETURN FOR MORE
 2317 80ed4 6100 0D5A 	         BSR     OUT1CR          | YES, THEN WRITE IT
 2318 80ed8 6100 0DFC 	         BSR     FIXBUF          | SET-UP LINE FOR NEXT COMMANDS
 2319 80edc 143C 0008 	         MOVE.B  #8,%D2          | D2 = MAX NUMBER CAN BE PLACED IN LINE
 2320 80ee0 4E75      	HELP85:  RTS
 2321               	
 2322 80ee2 6100 0D4C 	HELP6:   BSR     OUT1CR          | PRINT ANY REMAINING PORTION
 2323               	*        BRA.S   HELP1           | SEE IF COMPLETE
 2324 80ee6 6000 F34A 	         BRA     MACSBUG         | HELP IS COMPLETE SO RETURN
 2325               	
 2326 80eea 2E50 4320 	MSG002:  .ascii  ".PC .SR .US .SS"
 2326      2E53 5220 
 2326      2E55 5320 
 2326      2E53 53
 2327 80ef9 0D0A      	         DC.B    CR,LF
 2328               	
 2329 80efb 2E44 3020 	         .ascii  ".D0 .D1 .D2 .D3 .D4 .D5 .D6 .D7"
 2329      2E44 3120 
 2329      2E44 3220 
 2329      2E44 3320 
 2329      2E44 3420 
 2330 80f1a 0D0A      	         DC.B    CR,LF
 2331               	
 2332 80f1c 2E41 3020 	         .ascii    ".A0 .A1 .A2 .A3 .A4 .A5 .A6 .A7"
 2332      2E41 3120 
 2332      2E41 3220 
 2332      2E41 3320 
 2332      2E41 3420 
 2333 80f3b 0D0A      	         DC.B    CR,LF
 2334               	
 2335 80f3d 2E52 3020 	         .ascii  ".R0 .R1 .R2 .R3 .R4 .R5 .R6"
 2335      2E52 3120 
 2335      2E52 3220 
 2335      2E52 3320 
 2335      2E52 3420 
 2336 80f58 0D0A 04   	         DC.B    CR,LF,EOT
 2337               	
 2338 80f5b 00        	         DC.B    0              | PAD BYTE
 2339               	
 2340               	*-------------------------------------------------------------------------
 2341               	* File HEX2DEC   HEX2DEC convert hex to decimal                   11/02/81
 2342               	
 2343               	*    CONVERT BINARY TO DECIMAL  REG  D0 PUT IN ( A6) BUFFER AS ASCII
 2344               	
 2345 80f5c 48E7 7B00 	HEX2DEC: MOVEM.L %D1-%D4/%D6-%D7,-(%A7)   | SAVE REGISTERS
 2346 80f60 2E00      	         MOVE.L  %D0,%D7          | SAVE IT HERE
 2347 80f62 6A08      	         BPL.S   HX2DC
68K GAS  tutor13.s 			page 46


 2348 80f64 4487      	         NEG.L   %D7              | CHANGE TO POSITIVE
 2349 80f66 6B4E      	         BMI.S   HX2DC57          | SPECIAL CASE (-0)
 2350 80f68 1CFC 002D 	         MOVE.B  #'-',(%A6)+      | PUT IN NEG SIGN
 2351 80f6c 4244      	HX2DC:   CLR.W   %D4              | FOR ZERO SURPRESS
 2352 80f6e 7C0A      	         MOVEQ   #10,%D6          | COUNTER
 2353 80f70 7401      	HX2DC0:  MOVEQ   #1,%D2           | VALUE TO SUB
 2354 80f72 2206      	         MOVE.L  %D6,%D1          | COUNTER
 2355 80f74 5381      	         SUBQ.L  #1,%D1           | ADJUST - FORM POWER OF TEN
 2356 80f76 671A      	         BEQ.S   HX2DC2           | IF POWER IS ZERO
 2357 80f78 3602      	HX2DC1:  MOVE.W  %D2,%D3          | D3=LOWER WORD
 2358 80f7a C6FC 000A 	         MULU    #10,%D3
 2359 80f7e 4842      	         SWAP    %D2              | D2=UPPER WORD
 2360 80f80 C4FC 000A 	         MULU    #10,%D2
 2361 80f84 4843      	         SWAP    %D3              | ADD UPPER TO UPPER
 2362 80f86 D443      	         ADD.W   %D3,%D2
 2363 80f88 4842      	         SWAP    %D2              | PUT UPPER IN UPPER
 2364 80f8a 4843      	         SWAP    %D3              | PUT LOWER IN LOWER
 2365 80f8c 3403      	         MOVE.W  %D3,%D2          | D2=UPPER & LOWER
 2366 80f8e 5381      	         SUBQ.L  #1,%D1
 2367 80f90 66E6      	         BNE.S   HX2DC1
 2368 80f92 4280      	HX2DC2:  CLR.L   %D0              | HOLDS SUB AMT
 2369 80f94 BE82      	HX2DC22: CMP.L   %D2,%D7
 2370 80f96 6D06      	         BLT.S   HX2DC3           | IF NO MORE SUB POSSIBLE
 2371 80f98 5280      	         ADDQ.L  #1,%D0           | BUMP SUBS
 2372 80f9a 9E82      	         SUB.L   %D2,%D7          | COUNT DOWN BY POWERS OF TEN
 2373 80f9c 60F6      	         BRA.S   HX2DC22          | DO MORE
 2374 80f9e 4A00      	HX2DC3:  TST.B   %D0              | ANY VALUE?
 2375 80fa0 6604      	         BNE.S   HX2DC4
 2376 80fa2 4A44      	         TST.W   %D4              | ZERO SURPRESS
 2377 80fa4 6708      	         BEQ.S   HX2DC5
 2378 80fa6 0600 0030 	HX2DC4:  ADDI.B  #0x30,%D0         | BINARY TO ASCII
 2379 80faa 1CC0      	         MOVE.B  %D0,(%A6)+       | PUT IN BUFFER
 2380 80fac 1800      	         MOVE.B  %D0,%D4          | MARK AS NON ZERO SURPRESS
 2381 80fae 5386      	HX2DC5:  SUBQ.L  #1,%D6           | NEXT POWER
 2382 80fb0 66BE      	         BNE.S   HX2DC0
 2383 80fb2 4A44      	         TST.W   %D4              | SEE IF ANYTHING PRINTED
 2384 80fb4 6604      	         BNE.S   HX2DC6
 2385 80fb6 1CFC 0030 	HX2DC57: MOVE.B  #'0',(%A6)+      | PRINT AT LEST A ZERO
 2386 80fba 4CDF 00DE 	HX2DC6:  MOVEM.L (%A7)+,%D1-%D4/%D6-%D7 | RESTORE REGISTERS
 2387 80fbe 4E75      	         RTS                      | END OF ROUTINE
 2388               	
 2389               	*-------------------------------------------------------------------------
 2390               	* File LOAD      LO & VE (Load & Verify) Commands.                02/22/82
 2391               	
 2392               	* THIS FUNCTION
 2393               	*   1.) READS A "S-RECORD"
 2394               	*   2.) FORMATS THE DATA ON THE STACK
 2395               	*   3.) CALCULATES THE CHECKSUM
 2396               	*   4.) THEN STORES (VERIFIES) THE DATA TO MEMORY
 2397               	*
 2398               	* WHEN VERIFYING RECORDS MAKE BE SKIPPED WHILE DISPLAYING THE MISS-MATCHED
 2399               	*  RECORDS.  DISPLAY FORMAT
 2400               	*   S1CCAAAA.-.-.-33.-
 2401               	*     CC                     BYTE COUNT
 2402               	*       AAAA                 ADDRESS
 2403               	*           .-.-.-  .-       DATA FIELDS THAT MATCHED
 2404               	*                 33         DATA MISS MATCH (DISPLAY DATA FROM S-RECORD)
68K GAS  tutor13.s 			page 47


 2405               	
 2406               	*   ***LOAD*** AND ***VERIFY***  "S" RECORDS
 2407               	*
 2408               	*        %D4 = ERROR FLAG
 2409               	*
 2410               	*        %D5 = V000I0CC
 2411               	*             0.......  = LOAD
 2412               	*             8.......  = VERIFY
 2413               	*             ....0...  = CALCULATE CHECKSUM
 2414               	*             ....8...  = IGNORE CHECKSUM
 2415               	*             ......CC  = CHECKSUM
 2416               	
 2417 80fc0 7A01      	VECMD:   MOVEQ   #1,%D5         | MARK THE MODE
 2418 80fc2 E29D      	         ROR.L   #1,%D5         | D5 = $80000000
 2419 80fc4 6002      	         BRA.S   CHKCHKS        | GO CHECK CHECKSUM OPTION
 2420               	
 2421 80fc6 4285      	LOCMD:   CLR.L   %D5            | READ MODE
 2422 80fc8 4284      	CHKCHKS: CLR.L   %D4            | RESET ERROR FLAG
 2423 80fca 6100 11CA 	         BSR     SCANPORT       | SET UP OUTPUT P1,P2,P3 ETC
 2424               	
 2425               	* SEE IF CHECKSUM -C OPTION AND =SEND THIS OPTION
 2426               	
 2427 80fce BBCE      	READ01:  CMP.L   %A6,%A5        |SEE IF AT END OF BUFFER
 2428 80fd0 643C      	         BCC.S   READ09
 2429 80fd2 101D      	         MOVE.B  (%A5)+,%D0     | GET A CHARACTER
 2430 80fd4 0C00 003D 	READ03:  CMPI.B  #'=',%D0       | SEE IF EQUAL SIGN
 2431 80fd8 6730      	         BEQ.S   READ08
 2432               	
 2433 80fda 0C00 0058 	         CMPI.B  #'X',%D0       | SEE IF ECHO
 2434 80fde 6606      	         BNE.S   READ021
 2435 80fe0 1A3C FFFF 	         MOVE.B  #-1,%D5        | D5.B = ECHO TO PORT ONE
 2436 80fe4 60E8      	         BRA.S   READ01
 2437               	
 2438 80fe6 0C00 002D 	READ021: CMPI.B  #'-',%D0       |SEE IF MINUS SIGN
 2439 80fea 66E2      	         BNE.S   READ01
 2440 80fec BBCE      	         CMP.L   %A6,%A5        | SEE IF AT END OF BUFFER
 2441 80fee 671E      	         BEQ.S   READ09
 2442 80ff0 101D      	         MOVE.B  (%A5)+,%D0     | GRAB SECOND CHARACTER
 2443 80ff2 0C00 0043 	         CMPI.B  #'C',%D0       | SEE IF LETTER C AS IN -C
 2444 80ff6 66DC      	         BNE.S   READ03
 2445 80ff8 0045 8000 	         ORI.W   #0x8000,%D5     | MARK AS IGNORE CHECKSUM
 2446 80ffc 60D0      	         BRA.S   READ01
 2447               	
 2448 80ffe 4286      	READS1:  CLR.L   %D6            | D6 = TYPE "S1"
 2449 81000 5983      	         SUBQ.L  #4,%D3         | BYTE COUNT
 2450               	
 2451 81002 4280      	         CLR.L   %D0
 2452 81004 6100 013C 	         BSR     READHEX4       | FORM ADDRESS
 2453 81008 6066      	         BRA.S   READS202
 2454               	
 2455 8100a 6100 0C48 	READ08:  BSR     OUTPUT2        | SEND REST OF LINE(+CR) TO PORT
 2456               	
 2457 8100e 11C5 04E2 	READ09:  MOVE.B  %D5,ECHOPT1    | MOVE ECHO FLAG
 2458 81012 21F8 0630 	         MOVE.L  OUTPORT1,OUTTO | SEND OUTPUT TO CONSOLE
 2458      061C 
 2459               	
 2460 81018 4FF8 0786 	READ0:   LEA     SYSTACK,%A7    | FORCE STACK (FOR ERROR RECOVERY)
68K GAS  tutor13.s 			page 48


 2461               	
 2462 8101c 4E54 FFBC 	         LINK    %A4,#-((BUFFSIZE/2)+4) | CREATE BUFFER ON STACK
 2463               	
 2464 81020 4205      	         CLR.B   %D5            | ZERO CHECKSUM
 2465               	
 2466 81022 6100 0CB2 	         BSR     FIXBUF         | START OF INPUT BUFFER
 2467 81026 6100 0FDA 	         BSR     PORTIN2        | GET A RECORD FROM PORT
 2468               	
 2469 8102a 264D      	         MOVE.L  %A5,%A3        | START ADDRESS OF BUFFER
 2470 8102c 101B      	READ00:  MOVE.B  (%A3)+,%D0     | GET FIRST CHARACTER
 2471 8102e BDCB      	         CMP.L   %A3,%A6
 2472 81030 65E6      	         BCS.S   READ0          | END OF BUFFER WITHOUT "S"
 2473               	
 2474 81032 0C00 0053 	READ005: CMPI.B  #'S',%D0       | SEE IF IT IS AN S
 2475 81036 66F4      	         BNE.S   READ00         | GET ANOTHER CHARACTER
 2476 81038 6100 00C4 	         BSR     GETCHR         | GET RECORD TYPE
 2477 8103c 2C00      	         MOVE.L  %D0,%D6
 2478               	
 2479 8103e 6100 00B0 	         BSR     READHEX        | GET CHAR COUNT
 2480 81042 4283      	         CLR.L   %D3
 2481 81044 1600      	         MOVE.B  %D0,%D3
 2482               	
 2483 81046 0C06 0030 	         CMPI.B  #'0',%D6       | "S0"???
 2484 8104a 67CC      	         BEQ.S   READ0          | JUST IGNORE
 2485 8104c 0C06 0031 	         CMPI.B  #'1',%D6
 2486 81050 67AC      	         BEQ.S   READS1         | S1 RECORD TYPE (2 BYTE ADDRESS)
 2487 81052 0C06 0038 	         CMPI.B  #'8',%D6
 2488 81056 6700 00F6 	         BEQ     READS8         | S8 RECORD TYPE
 2489 8105a 0C06 0039 	         CMPI.B  #'9',%D6
 2490 8105e 6700 00FE 	         BEQ     READS9         | S9 RECORD TYPE
 2491 81062 0C06 0032 	         CMPI.B  #'2',%D6
 2492 81066 66CA      	         BNE.S   READ005        | KEEP LOOKING FOR "Sn"
 2493               	
 2494 81068 7C02      	READS2:  MOVEQ   #2,%D6         | D6 = TYPE = S2 (3 BYTE ADDRESS)
 2495 8106a 6100 00D0 	         BSR     READHEX6
 2496 8106e 5B83      	         SUBQ.L  #5,%D3         | BYTE COUNT
 2497 81070 2943 FFBC 	READS202:MOVE.L  %D3,CC(%A4)
 2498               	
 2499 81074 2940 FFC0 	         MOVE.L  %D0,ADDRESS(%A4) | ADDRESS + OFFSET
 2500 81078 45EC FFC4 	         LEA     LDATA(%A4),%A2   | A2 = STORE TO STACK POINTER
 2501               	
 2502 8107c 6172      	READ100: BSR.S   READHEX        | GET DATA BYTE
 2503 8107e 14C0      	         MOVE.B  %D0,(%A2)+     | MOVE DATA TO STACK
 2504 81080 51CB FFFA 	         DBRA    %D3,READ100
 2505               	
 2506 81084 4A45      	         TST.W   %D5
 2507 81086 6B0A      	         BMI.S   READ120        | IGNORE CHECKSUM
 2508               	
 2509 81088 1E05      	         MOVE.B  %D5,%D7
 2510 8108a 6164      	         BSR.S   READHEX        | GET CHECKSUM FROM DATA
 2511 8108c 4607      	         NOT.B   %D7            | CALCULATED CHECKSUM
 2512 8108e B007      	         CMP.B   %D7,%D0
 2513 81090 664C      	         BNE.S   READCKSM       | ERROR
 2514               	READ120:
 2515               	
 2516               	* STORE DATA (VERIFY) TO MEMORY
 2517               	
68K GAS  tutor13.s 			page 49


 2518 81092 262C FFBC 	         MOVE.L  CC(%A4),%D3    | BYTE COUNT
 2519 81096 266C FFC0 	         MOVE.L  ADDRESS(%A4),%A3 | MEMORY STORE ADDRESS
 2520 8109a 45EC FFC4 	         LEA     LDATA(%A4),%A2   | DATA ADDRESS ON STACK
 2521               	
 2522 8109e 4A85      	         TST.L   %D5
 2523 810a0 6B10      	         BMI.S   READ400        | VERIFY
 2524               	
 2525 810a2 1692      	READ130: MOVE.B  (%A2),(%A3)    | STORE DATA
 2526 810a4 B70A      	         CMP.B   (%A2)+,(%A3)+  | VERIFY DATA STORED
 2527 810a6 6600 045C 	         BNE     SETME          | DATA DID NOT STORE
 2528 810aa 51CB FFF6 	         DBRA    %D3,READ130
 2529 810ae 6000 FF68 	READ135: BRA     READ0
 2530               	
 2531               	***     VERIFY
 2532               	
 2533 810b2 43ED 0008 	READ400: LEA     8(%A5),%A1     | A1 = PTR TO INPUT STRING
 2534 810b6 D3C6      	         ADD.L   %D6,%A1
 2535               	
 2536 810b8 4287      	         CLR.L   %D7            | D7 = MISS-MATCH FLAG
 2537               	
 2538 810ba B70A      	READ410: CMP.B   (%A2)+,(%A3)+  | VERIFY DATA
 2539 810bc 6618      	         BNE.S   READ440        | MISS-MATCH
 2540 810be 12FC 002E 	         MOVE.B  #'.',(%A1)+    | OVERLAY INPUT STRING IF OK
 2541 810c2 12FC 002D 	         MOVE.B  #'-',(%A1)+
 2542 810c6 51CB FFF2 	READ420: DBRA    %D3,READ410
 2543               	
 2544 810ca 4A87      	         TST.L   %D7
 2545 810cc 67E0      	         BEQ.S   READ135        | RECORD OK
 2546               	
 2547 810ce 2C49      	         MOVE.L  %A1,%A6        | DONOT DISPLAY CHECKSUM
 2548 810d0 6100 0B5E 	READ430: BSR     OUT1CR         | DISPLAY IT
 2549 810d4 60D8      	         BRA.S   READ135        | READ NEXT RECORD
 2550               	
 2551 810d6 7EFF      	READ440: MOVEQ   #-1,%D7        | D7 = Set miss-match flag
 2552 810d8 78FF      	         MOVEQ   #-1,%D4        | D4 = Set Summary error flag
 2553 810da 5489      	         ADDQ.L  #2,%A1
 2554 810dc 60E8      	         BRA.S   READ420
 2555               	
 2556 810de 78FF      	READCKSM:MOVEQ   #-1,%D4        | D4 = Set summary error flag
 2557 810e0 4BFA 0051 	         LEA     MSGLOAD2(%PC),%A5
 2558 810e4 6100 F010 	         BSR     FIXDADD
 2559 810e8 2007      	         MOVE.L  %D7,%D0
 2560 810ea 6100 090C 	         BSR     PNT2HX         | CALCULATED CHECKSUM
 2561 810ee 60E0      	         BRA.S   READ430
 2562               	
 2563 810f0 6114      	READHEX: BSR.S   GETHEXC        | FORM BYTE
 2564 810f2 E900      	         ASL.B   #4,%D0
 2565 810f4 1200      	         MOVE.B  %D0,%D1
 2566 810f6 610E      	         BSR.S   GETHEXC
 2567 810f8 8001      	         OR.B    %D1,%D0        | D0 = BYTE FORMED
 2568 810fa DA00      	         ADD.B   %D0,%D5        | UPDATE CHECKSUM
 2569 810fc 4E75      	         RTS
 2570               	
 2571 810fe 101B      	GETCHR:  MOVE.B  (%A3)+,%D0
 2572 81100 BDCB      	         CMP.L   %A3,%A6
 2573 81102 65DA      	         BCS.S   READCKSM       | OVERFLOW
 2574 81104 4E75      	         RTS
68K GAS  tutor13.s 			page 50


 2575               	
 2576 81106 61F6      	GETHEXC: BSR.S   GETCHR
 2577 81108 0400 0030 	         SUBI.B  #0x30,%D0       | SEE IF LESS THAN ZERO
 2578 8110c 6D10      	         BLT.S   RHEX3
 2579 8110e 0C00 0009 	         CMPI.B  #0x09,%D0       | SEE IF GT 9
 2580 81112 6F08      	         BLE.S   RHEX2
 2581 81114 5F00      	         SUBQ.B  #7,%D0         | NORMALIZE $A TO 10
 2582 81116 0C00 0010 	         CMPI.B  #0x10,%D0       | SEE IF TOO LARGE
 2583 8111a 6402      	         BCC.S   RHEX3
 2584 8111c 4E75      	RHEX2:   RTS
 2585               	
 2586 8111e 4BFA 000A 	RHEX3:   LEA     MSGLOAD1(%PC),%A5 |"NOT HEX=X?"  MESSAGE
 2587 81122 6100 EFD2 	         BSR     FIXDADD
 2588 81126 1CE3      	         MOVE.B  -(%A3),(%A6)+  | BAD CHARACTER
 2589 81128 60A6      	         BRA.S   READ430        | GO TRY NEXT RECORD
 2590               	
 2591 8112a 4E4F 5420 	MSGLOAD1:.ascii  "NOT HEX="
 2591      4845 583D 
 2592 81132 04        	         DC.B    EOT
 2593               	
 2594 81133 2043 484B 	MSGLOAD2:.ascii  " CHKSUM="
 2594      5355 4D3D 
 2595 8113b 04        	         DC.B    EOT
 2596               	
 2597 8113c 4280      	READHEX6:CLR.L   %D0            | FORM ADDRESS (3 BYTE)
 2598 8113e 61B0      	         BSR.S   READHEX
 2599 81140 E180      	         ASL.L   #8,%D0
 2600 81142 61AC      	READHEX4:BSR.S   READHEX        | FORM ADDRESS (2 BYTE)
 2601 81144 E180      	         ASL.L   #8,%D0
 2602 81146 61A8      	         BSR.S   READHEX
 2603 81148 D0B8 044C 	         ADD.L   OFFSET,%D0
 2604 8114c 4E75      	         RTS
 2605               	
 2606 8114e 61EC      	READS8:  BSR.S   READHEX6
 2607 81150 21C0 0400 	READS800:MOVE.L  %D0,REGPC      | SAVE IT IN THE USER PREG
 2608               	
 2609 81154 4A84      	         TST.L   %D4
 2610 81156 6600 EF58 	         BNE     ERROR          | DISPLAY "ERROR"
 2611 8115a 6000 F0D6 	         BRA     MACSBUG        | END OF ROUTINE
 2612               	
 2613 8115e 4280      	READS9:  CLR.L   %D0
 2614 81160 61E0      	         BSR.S   READHEX4       | GET ADDRESS
 2615 81162 60EC      	         BRA.S   READS800
 2616               	
 2617               	*-------------------------------------------------------------------------
 2618               	* File MDDI      MD[S] (Memory Display) Command                   06/16/82
 2619               	
 2620               	*   ***MD***   MEMORY DISPLAY         ENTRY POINT
 2621               	*     FORMAT:  MD[S] <ADDRESS> [<COUNT>] [;DI]
 2622               	* 1.  IF "S" USED IN COMMAND THEN IT WILL DUMP 16 LINES, (1 Screen), AND
 2623               	*     PROMPT-ENTER CR FOR 16 MORE LINES ETC OR ANY MACSBUG COMMAND.
 2624               	*
 2625               	
 2626               	MDCMD:   .align  2
 2627 81164 6100 1030 	         BSR     SCANPORT       | WHERE TO SEND OUTPUT
 2628 81168 21F9 0000 	         MOVE.L  INPORT1.L,INFROM | ONLY ALLOW INPUT FROM PORT1
 2628      062C 0620 
68K GAS  tutor13.s 			page 51


 2629               	
 2630 81170 7CFF      	         MOVEQ   #-1,%D6        | D6 = HOW MANY LINES PER PAGE
 2631               	
 2632 81172 97CB      	         SUB.L   %A3,%A3        | A4 = DEFAULT ZERO  START
 2633 81174 284B      	         MOVE.L  %A3,%A4        |  A3 = END ADDR
 2634               	
 2635 81176 4287      	         CLR.L   %D7            | D7 = DO NOT DISASSEMBLE
 2636 81178 244D      	         MOVE.L  %A5,%A2
 2637 8117a BDCA      	PRINT8:  CMP.L   %A2,%A6        | LOOK FOR OPTIONS
 2638 8117c 651A      	         BCS.S   PRINTDI        | NO  OPTIONS
 2639 8117e 0C1A 003B 	         CMPI.B  #';',(%A2)+
 2640 81182 66F6      	         BNE.S   PRINT8
 2641               	
 2642 81184 2C4A      	         MOVE.L  %A2,%A6
 2643 81186 538E      	         SUBQ.L  #1,%A6         | A6 = POINTER TO ;
 2644               	
 2645 81188 0C1A 0044 	         CMPI.B  #'D',(%A2)+
 2646 8118c 6600 EF28 	PRINTMB: BNE     SYNTAX         | COMMAND SYNTAX ERROR
 2647 81190 0C1A 0049 	         CMPI.B  #'I',(%A2)+
 2648 81194 66F6      	         BNE.S   PRINTMB
 2649 81196 7EFF      	         MOVEQ   #-1,%D7        | DISASSEMBLE OPTION
 2650               	PRINTDI:
 2651               	
 2652               	* LOOK FOR "S" IN COMMAND
 2653 81198 1015      	         MOVE.B  (%A5),%D0
 2654 8119a 0C00 0053 	         CMPI.B  #'S',%D0
 2655 8119e 6608      	         BNE.S   PRINT5         | NO "S" IN COMMAND
 2656 811a0 528D      	         ADDQ.L  #1,%A5         | MOVE PAST "S"
 2657               	
 2658 811a2 7C10      	         MOVEQ   #16,%D6        | DO 16 LINES AT A TIME
 2659 811a4 97CB      	         SUB.L   %A3,%A3
 2660 811a6 538B      	         SUBQ.L  #1,%A3         | MAX END ADDRESS
 2661               	
 2662 811a8 41FA 001A 	PRINT5:  LEA     PRINT7(%PC),%A0 | WHERE TO GO IF NO PARAMETERS
 2663 811ac 6100 0906 	         BSR     FNEXTF         | FIND NEXT FIELD
 2664 811b0 6100 F988 	         BSR     GETA
 2665 811b4 2840      	         MOVE.L  %D0,%A4        | A4 = GET ADDRESS
 2666               	
 2667 811b6 6100 08FC 	         BSR     FNEXTF
 2668 811ba 6100 094C 	         BSR     GETEXP         | D0 = GET COUNT
 2669 811be D08C      	         ADD.L   %A4,%D0        | END=START+COUNT-1
 2670 811c0 5380      	         SUBQ.L  #1,%D0         | BACK OFF ONE
 2671 811c2 2640      	         MOVE.L  %D0,%A3        | A3 = END ADDRESS
 2672               	
 2673 811c4 4A87      	PRINT7:  TST.L   %D7
 2674 811c6 672A      	         BEQ.S   PUTADR         | NOT DISASSEMBLE
 2675               	
 2676 811c8 6100 0B0C 	PRINTDI5:BSR     FIXBUF         | DI OPTION
 2677 811cc 48E7 0310 	         MOVEM.L %A3/%D6-%D7,-(%A7)
 2678 811d0 4CD4 0007 	         MOVEM.L (%A4),%D0-%D2  | D0-D2 = DATA TO DISASSEMBLE
 2679 811d4 6100 29C6 	         BSR     DCODE68K       | DISASSEMBLE
 2680 811d8 6100 0A56 	         BSR     OUT1CR
 2681 811dc 4CDF 08C0 	         MOVEM.L (%A7)+,%A3/%D6-%D7
 2682               	
 2683 811e0 5386      	         SUBQ.L  #1,%D6
 2684 811e2 676C      	         BEQ.S   PRINT9         | "MDS" COMMAND
 2685               	
68K GAS  tutor13.s 			page 52


 2686 811e4 B7CC      	         CMP.L   %A4,%A3        |  END CHECK
 2687 811e6 64E0      	         BCC.S   PRINTDI5
 2688 811e8 6066      	         BRA.S   PRINT9
 2689               	
 2690 811ea 7C10      	PRINT3:  MOVEQ   #16,%D6        | D6 = LINE BLOCK COUNT
 2691 811ec 97CB      	         SUB.L   %A3,%A3
 2692 811ee 538B      	         SUBQ.L  #1,%A3         | A3 = MAX END ADDRESS
 2693 811f0 60D2      	         BRA.S   PRINT7
 2694               	
 2695               	* START A NEW  LINE
 2696               	*
 2697 811f2 6100 0AE2 	PUTADR:  BSR     FIXBUF         | SET UP OUTPUT BUFFER
 2698 811f6 200C      	         MOVE.L  %A4,%D0        | CURRENT LINE ADDRESS
 2699 811f8 6100 081A 	         BSR     FRELADDR       | FORM RELATIVE ADDRESS
 2700 811fc 1CFC 0020 	         MOVE.B  #0x20,(%A6)+   | FORMAT  SPACE
 2701 81200 204C      	         MOVE.L  %A4,%A0        | A0 IS SCANNING ADDRESS
 2702 81202 7610      	         MOVEQ   #0x10,%D3      | SET UP COUNTER FOR LOOP
 2703               	
 2704 81204 1018      	NXTBP:   MOVE.B  (%A0)+,%D0     | GET BYTE TO PRINT
 2705 81206 6100 07F0 	         BSR     PNT2HX         | PRINT IT
 2706 8120a 1CFC 0020 	         MOVE.B  #0x20,(%A6)+   | SPACE BETWEEN EACH HEX
 2707               	
 2708 8120e 0C03 0009 	         CMPI.B  #9,%D3         | HALF LINE SPACING
 2709 81212 6604      	         BNE.S   NXTBP3
 2710 81214 1CFC 0020 	         MOVE.B  #0x20,(%A6)+
 2711               	NXTBP3:
 2712               	
 2713 81218 5383      	         SUBQ.L  #1,%D3
 2714 8121a 66E8      	         BNE.S   NXTBP          | LOOP TILL D3 IS ZERO
 2715               	
 2716 8121c 1CFC 0020 	         MOVE.B  #0x20,(%A6)+   | MOVE A SPACE
 2717 81220 204C      	         MOVE.L  %A4,%A0        | RELOAD SCANNER FOR ASCII PRINTS
 2718 81222 7610      	         MOVEQ   #0x10,%D3      | RELOAD COUNTER
 2719               	
 2720 81224 1018      	NXTCHR:  MOVE.B  (%A0)+,%D0     | FETCH BYTE
 2721 81226 0200 007F 	         ANDI.B  #0x7F,%D0      | REMOVE HIGH ORDER BIT, (ASCII ONLY USES 7 BITS)
 2722 8122a 0C00 0020 	         CMPI.B  #0x20,%D0      | SEE IF IT IS CONTROL CHAR
 2723 8122e 6D06      	         BLT.S   NOTCHR         | BYPASS IF IT IS... ELSE
 2724 81230 0C00 007F 	         CMPI.B  #0x7F,%D0      | IS IT A "7F"?    (CAUSES PRINTER PROBLEM)
 2725 81234 6D04      	         BLT.S   PUTCHR         | NO... THEN PRINT IT, ELSE SUBSTITUTE "."
 2726 81236 103C 002E 	NOTCHR:  MOVE.B  #0x2E,%D0      | CHANGE UNPRINTABLE TO PERIOD
 2727               	
 2728 8123a 1CC0      	PUTCHR:  MOVE.B  %D0,(%A6)+     | MOVE "EDITTED" CHARACTER TO PRINT LINE
 2729 8123c 5383      	         SUBQ.L  #1,%D3         | LOOP AROUND FOR NEXT CHAR
 2730 8123e 66E4      	         BNE.S   NXTCHR         | ANY LEFT?
 2731 81240 6100 09EE 	         BSR     OUT1CR         | NO... THEN PRINT THE COMPLETE LINE
 2732 81244 508C      	         ADDQ.L  #0x08,%A4      | UPDATE STARTING ADDRESS OF NEXT ADDRESS
 2733 81246 508C      	         ADDQ.L  #0x08,%A4      | ........
 2734 81248 B7CC      	         CMP.L   %A4,%A3        |  DOES NEW LINE START PAST END
 2735 8124a 6504      	         BCS.S   PRINT9         | SEE IF STILL GOING
 2736 8124c 5386      	         SUBQ.L  #1,%D6         | DECR THE COUNTER
 2737 8124e 66A2      	         BNE.S   PUTADR         | DO ANOTHER LINE
 2738               	
 2739 81250 4BFA F0A8 	PRINT9:  LEA     MSG001(%PC),%A5 | SET UP FOR PROMPT
 2740 81254 6100 EE9C 	         BSR     FIXDATA
 2741 81258 1CFC 003E 	         MOVE.B  #'>',(%A6)+    | PROMPT SAME AS MACSBUG
 2742 8125c 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+
68K GAS  tutor13.s 			page 53


 2743 81260 6100 09E8 	         BSR     OUTPUT         | PRINT IT
 2744               	
 2745 81264 6100 0A70 	         BSR     FIXBUF         | RESET BUFFER
 2746 81268 6100 0A74 	         BSR     PORTIN1        | TAKE IN INPUT
 2747 8126c BBCE      	         CMP.L   %A6,%A5        | SEE IF ANYTHING ENTERED
 2748 8126e 6700 FF7A 	         BEQ     PRINT3         | NOTHING ENTERED; DO 16 MORE LINES
 2749 81272 42B8 061C 	         CLR.L   OUTTO
 2750 81276 6000 EFFC 	         BRA     DECODE6        | GO MAKE SURE 2ND DIGIT IS BLANK
 2751               	
 2752               	*-------------------------------------------------------------------------
 2753               	* File MMDI      Modify Memory command WITH asm/disasm            11/27/81
 2754               	
 2755               	* MODIFY MEMORY
 2756               	*  COMMON REGISTER USAGE
 2757               	*   %A6  IO BUFFER POINTER  END
 2758               	*   %A5  IO BUFFER POINTER  START
 2759               	*   %A4  ADDRESS TO MODIFY
 2760               	*   A3
 2761               	*   A2
 2762               	*   A1
 2763               	*   A0
 2764               	*   %D7  DATA READ (DATA STORED)
 2765               	*   %D6  SIZE  1/2/4 BYTES  (ASM/DISASM 2 - 10 BYTES)
 2766               	*   %D5  OVERRIDE BYTE (80xX=NON VERIFY)  (XX80=BYTE SIZE)
 2767               	*
 2768               	* ;OPTIONS
 2769               	*   ;W  WORD
 2770               	*   ;L  LONG WORD (4 BYTES)
 2771               	*   ;DI DISASSEMBLE
 2772               	*     ;O  ODD ADDRESSES ONLY
 2773               	*     ;V  EVEN ADDRESSES ONLY
 2774               	*       ;N  NON-VERIFY
 2775               	*
 2776               	
 2777 8127a 6100 0856 	MMDI:    BSR     CKWADR
 2778 8127e 6100 0858 	         BSR     CKADDR
 2779 81282 4286      	         CLR.L   %D6            | SIZE = 0
 2780 81284 D9C6      	MMDI22:  ADD.L   %D6,%A4        | PC = PC + SIZE
 2781 81286 6100 0A4E 	MMDI23:  BSR     FIXBUF         | A5 & A6 = POINTER TO BUFFER
 2782               	
 2783               	*                  ENTRY
 2784               	*                   A4 = PROGRAM COUNTER
 2785               	*                   A5 = POINTER TO STORE DISASSEMBLED LINE
 2786 8128a 4CD4 0007 	         MOVEM.L   (%A4),%D0-%D2 | DATA TO DISASSEMBLE
 2787 8128e 6100 290C 	         BSR       DCODE68K
 2788               	*                  RETURN
 2789               	*                   A4 = NEW PROGRAM COUNTER
 2790               	*                   A5 = PTR START BUFFER
 2791               	*                   A6 = PRT END BUFFER
 2792               	*                   D6 = NUMBER OF BYTES DISASSEMBLED
 2793               	
 2794 81292 1CFC 003F 	         MOVE.B  #'?',(%A6)+
 2795 81296 6100 09B2 	         BSR     OUTPUT
 2796               	
 2797 8129a 6100 0A3A 	MMDI31:  BSR     FIXBUF
 2798 8129e 6100 0A50 	         BSR     PORTIN1N       | INPUT ASSEMBLY SOURCE (NO LINE FEED)
 2799 812a2 BDCD      	         CMP.L   %A5,%A6
68K GAS  tutor13.s 			page 54


 2800 812a4 6606      	         BNE.S   MMDI34
 2801 812a6 6100 0988 	         BSR     OUT1CR         | NOTHING INPUT; OUTPUT LINE FEED
 2802 812aa 60DA      	         BRA.S   MMDI23
 2803               	
 2804 812ac 99C6      	MMDI34:  SUB.L   %D6,%A4        | BACKUP PC
 2805               	
 2806 812ae 0C15 002E 	         CMPI.B  #'.',(%A5)
 2807 812b2 6700 01DE 	         BEQ     MM905          | CLOSE
 2808               	
 2809 812b6 47F8 0797 	         LEA     SYSTACK+17,%A3 | STORE BUFFER
 2810               	
 2811               	*                  A3 = STORE POINTER
 2812               	*                  A4 = PROGRAM COUNTER
 2813               	*                  A5 = POINTER TO DATA TO ASSEMBLE
 2814               	*                  A6 = POINTER TO END OF SOURCE DATA
 2815               	
 2816 812ba 6100 16FA 	         BSR     CODE68K        | ASSEMBLE
 2817               	
 2818               	*                  A3 = POINTER TO LINE ASSEMBLED
 2819               	*                  A4 = PROGRAM COUNTER
 2820               	*                  A6 = POINTER END OF LINE ASSEMBLED
 2821               	*                  D0-D2 = DATA ASSEMBLED
 2822               	*                  D6 = NUMBER OF BYTES ASSEMBLED
 2823               	*                  D7 = ERROR FLAG & POSITION OF ERROR
 2824               	
 2825 812be 2A4B      	         MOVE.L  %A3,%A5
 2826 812c0 D7FC 0000 	         ADD.L   #78,%A3        | A3 = MAX LINE
 2826      004E 
 2827 812c6 B7CE      	MMDI26:  CMP.L   %A6,%A3
 2828 812c8 6506      	         BCS.S   MMDI27
 2829 812ca 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE FILL LINE
 2830 812ce 60F6      	         BRA.S   MMDI26
 2831 812d0 6100 095E 	MMDI27:  BSR     OUT1CR         | PRINT LINE JUST ENTERED
 2832               	
 2833 812d4 4A07      	         TST.B   %D7
 2834 812d6 6620      	         BNE.S   MMDI30         | ERROR; DON"T STORE DATA
 2835               	
 2836 812d8 45F8 078A 	         LEA     SYSTACK+4,%A2  | A2 = TEMP AREA
 2837 812dc 48E2 E000 	         MOVEM.L %D0/%D1/%D2,-(%A2) | STORE DATA
 2838 812e0 2206      	         MOVE.L  %D6,%D1        | D1 = NUMBER OF BYTES TO STORE
 2839 812e2 5381      	         SUBQ.L  #1,%D1
 2840 812e4 224C      	         MOVE.L  %A4,%A1        | A1 = DATA STORE POINTER
 2841 812e6 101A      	MMDI29:  MOVE.B  (%A2)+,%D0
 2842 812e8 1280      	         MOVE.B  %D0,(%A1)
 2843 812ea 1419      	         MOVE.B  (%A1)+,%D2     | INSURE DATA STORED
 2844 812ec B400      	         CMP.B   %D0,%D2
 2845 812ee 6600 0196 	         BNE     MM90
 2846 812f2 51C9 FFF2 	         DBRA    %D1,MMDI29
 2847 812f6 608C      	         BRA.S   MMDI22
 2848               	
 2849 812f8 6100 09DC 	MMDI30:  BSR     FIXBUF
 2850 812fc 1CFC 0020 	MMDI44:  MOVE.B  #BLANK,(%A6)+  | SPACES
 2851 81300 51CF FFFA 	         DBRA    %D7,MMDI44
 2852               	
 2853 81304 1D7C 0058 	         MOVE.B  #'X',-1(%A6)   | X UNDER ERROR
 2853      FFFF 
 2854 8130a 1CFC 003F 	         MOVE.B  #'?',(%A6)+    | ? ALLOW REINPUT
68K GAS  tutor13.s 			page 55


 2855 8130e 6100 093A 	         BSR     OUTPUT
 2856 81312 6086      	         BRA.S   MMDI31
 2857               	
 2858               	MCMD:    .align  2              | "M" Alias for "MM" Command
 2859               	MMCMD:   .align  2              | "MM" Command -Memory Modify-
 2860 81314 41FA EDA0 	         LEA     SYNTAX(%PC),%A0 | A0=ERROR RETURN
 2861 81318 6100 079A 	         BSR     FNEXTF
 2862 8131c 6100 F81C 	         BSR     GETA
 2863 81320 2840      	         MOVE.L  %D0,%A4        |  A4= ADDRESS OF DATA
 2864 81322 7C01      	         MOVEQ   #1,%D6         | SIZE = BYTE
 2865 81324 4285      	         CLR.L   %D5            | NO OVERRIDE
 2866               	
 2867 81326 BDCD      	MM05:    CMP.L   %A5,%A6
 2868 81328 6566      	         BCS.S   MM10           | AT END OF BUFFER
 2869               	
 2870               	* LOOK FOR ;OPTIONS
 2871 8132a 101D      	         MOVE.B  (%A5)+,%D0
 2872 8132c 0C00 003B 	         CMPI.B  #';',%D0
 2873 81330 66F4      	         BNE.S   MM05           | IGNORE NOT ;
 2874               	
 2875 81332 101D      	         MOVE.B  (%A5)+,%D0     |  GET NEXT CHAR
 2876 81334 0C00 0044 	         CMPI.B  #'D',%D0
 2877 81338 660A      	         BNE.S   MM045
 2878               	
 2879 8133a 0C1D 0049 	         CMPI.B  #'I',(%A5)+    | DISSAMBLY OPTION
 2880 8133e 66E6      	         BNE.S   MM05
 2881 81340 6000 FF38 	         BRA     MMDI
 2882               	
 2883 81344 0C00 0057 	MM045:   CMPI.B  #'W',%D0
 2884 81348 6742      	         BEQ.S   MM065          | ;W   D6=2
 2885               	
 2886 8134a 0C00 004C 	         CMPI.B  #'L',%D0
 2887 8134e 6608      	         BNE.S   MM054
 2888 81350 1C3C 0004 	         MOVE.B  #4,%D6         | ;L   D6=4
 2889 81354 4205      	         CLR.B   %D5            | RESET BYTE OVERRIDE
 2890 81356 60CE      	         BRA.S   MM05
 2891               	
 2892 81358 0C00 004E 	MM054:   CMPI.B  #'N',%D0
 2893 8135c 6606      	         BNE.S   MM056
 2894 8135e 0045 8000 	         ORI.W   #0x8000,%D5     | ;N  D5=$8000
 2895 81362 60C2      	         BRA.S   MM05
 2896               	
 2897 81364 0C00 004F 	MM056:   CMPI.B  #'O',%D0
 2898 81368 6608      	         BNE.S   MM058
 2899 8136a 200C      	         MOVE.L  %A4,%D0        | ;O
 2900 8136c 0000 0001 	         ORI.B   #1,%D0         | FORCE ODD ADDRESS
 2901 81370 600E      	         BRA.S   MM060
 2902               	
 2903 81372 0C00 0056 	MM058:   CMPI.B  #'V',%D0
 2904 81376 6600 ED3E 	         BNE     SYNTAX         | ERROR
 2905 8137a 200C      	         MOVE.L  %A4,%D0        | ;V
 2906 8137c 0200 00FE 	         ANDI.B  #0xFE,%D0       | FORCE EVEN ADDRESS
 2907 81380 2840      	MM060:   MOVE.L  %D0,%A4
 2908 81382 0005 0080 	         ORI.B   #0x80,%D5       | BYTE OVERRIDE
 2909 81386 1C3C 0002 	MM064:   MOVE.B  #2,%D6         | SIZE = WORD (2 BYTES)
 2910 8138a 609A      	         BRA.S   MM05
 2911               	
68K GAS  tutor13.s 			page 56


 2912 8138c 4205      	MM065:   CLR.B   %D5            | RESET BYTE OVERRIDE
 2913 8138e 60F6      	         BRA.S   MM064
 2914               	
 2915               	* FORMAT ADDRESS FOR PRINTING
 2916 81390 200C      	MM10:    MOVE.L  %A4,%D0
 2917 81392 0C06 0001 	         CMPI.B  #1,%D6
 2918 81396 6708      	         BEQ.S   MM11           | "BYTE"
 2919 81398 4A05      	         TST.B   %D5
 2920 8139a 6B04      	         BMI.S   MM11           | BYTE OVERRIDE
 2921 8139c 6100 0734 	         BSR     CKWADR         | CHK ALLIGNMENT
 2922 813a0 6100 0736 	MM11:    BSR     CKADDR
 2923 813a4 6100 0930 	         BSR     FIXBUF
 2924 813a8 6100 066A 	         BSR     FRELADDR       | FORM RELATIVE ADDRESS
 2925 813ac 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 2926               	
 2927 813b0 4A45      	         TST.W   %D5
 2928 813b2 6B2C      	         BMI.S   MM18           | NON-VERIFY (DON"T READ MEMORY)
 2929               	
 2930               	* READ DATA FROM MEMORY & FORMAT IT
 2931 813b4 4A05      	         TST.B   %D5
 2932 813b6 6B0C      	         BMI.S   MM12           | BYTE OVERRIDE
 2933               	
 2934 813b8 0C06 0002 	         CMPI.B  #2,%D6
 2935 813bc 6710      	         BEQ.S   MM14           | WORD
 2936 813be 0C06 0004 	         CMPI.B  #4,%D6
 2937 813c2 6714      	         BEQ.S   MM16           | LONG WORD
 2938               	
 2939               	* BYTE
 2940               	MM12:
 2941 813c4 1E14      	         MOVE.B  (%A4),%D7      | D7 = DATA READ
 2942 813c6 2007      	         MOVE.L  %D7,%D0
 2943 813c8 6100 062E 	         BSR     PNT2HX         | FORMAT BYTE
 2944 813cc 6012      	         BRA.S   MM18
 2945               	
 2946               	* WORD
 2947               	MM14:
 2948 813ce 3E14      	         MOVE.W  (%A4),%D7
 2949 813d0 2007      	         MOVE.L  %D7,%D0
 2950 813d2 6100 061C 	         BSR     PNT4HX         | FORMAT WORD
 2951 813d6 6008      	         BRA.S   MM18
 2952               	
 2953               	* LONG WORD
 2954               	MM16:
 2955 813d8 2E14      	         MOVE.L  (%A4),%D7
 2956 813da 2007      	         MOVE.L  %D7,%D0
 2957 813dc 6100 0604 	         BSR     PNT8HX         | FORMAT LONG WORD
 2958               	
 2959 813e0 1CFC 0020 	MM18:    MOVE.B  #BLANK,(%A6)+  | SPACE
 2960 813e4 1CFC 003F 	         MOVE.B  #'?',(%A6)+
 2961 813e8 6100 0860 	         BSR     OUTPUT
 2962               	
 2963               	* READ USER INPUT
 2964               	*  [DATA] (CR)   NEXT
 2965               	*           ^    LAST
 2966               	*           =    SAME
 2967               	*           .    EXIT
 2968               	
68K GAS  tutor13.s 			page 57


 2969 813ec 6100 08E8 	         BSR     FIXBUF
 2970 813f0 6100 08EC 	         BSR     PORTIN1
 2971 813f4 BDCD      	         CMP.L   %A5,%A6
 2972 813f6 6700 0082 	         BEQ     MM50           | NO DATA (CR ONLY)
 2973               	
 2974 813fa 41FA 005A 	         LEA     MM40(%PC),%A0  | A0 = NO PARAMETER RETURN
 2975 813fe 6100 06B4 	         BSR     FNEXTF         | FIND NEXT FIELD
 2976               	
 2977               	* IF = ^ OR .  TAKE ACTION
 2978 81402 1015      	         MOVE.B  (%A5),%D0
 2979 81404 0C00 003D 	         CMPI.B  #'=',%D0
 2980 81408 6786      	         BEQ.S   MM10
 2981 8140a 0C00 002E 	         CMPI.B  #'.',%D0
 2982 8140e 6700 EE22 	         BEQ     MACSBUG
 2983 81412 0C00 005E 	         CMPI.B  #'^',%D0
 2984 81416 6768      	         BEQ.S   MM60
 2985               	
 2986 81418 6100 06EE 	         BSR     GETEXP         | GET DATA
 2987 8141c 2E00      	         MOVE.L  %D0,%D7        | D7=DATA STORED
 2988               	
 2989               	* WE HAVE DATA; STORE IT
 2990 8141e 4A05      	         TST.B   %D5
 2991 81420 6B0C      	         BMI.S   MM22           | BYTE OVERRIDE
 2992               	
 2993 81422 0C06 0002 	         CMPI.B  #2,%D6
 2994 81426 6714      	         BEQ.S   MM24           | WORD
 2995 81428 0C06 0004 	         CMPI.B  #4,%D6
 2996 8142c 671C      	         BEQ.S   MM26           | LONG WORD
 2997               	
 2998               	* BYTE
 2999               	MM22:
 3000 8142e 1880      	         MOVE.B  %D0,(%A4)      | STORE DATA
 3001 81430 4A45      	         TST.W   %D5
 3002 81432 6B22      	         BMI.S   MM40           | NO-VERIFY
 3003 81434 1014      	         MOVE.B  (%A4),%D0
 3004 81436 B007      	         CMP.B   %D7,%D0
 3005 81438 664C      	         BNE.S   MM90           | NO MATCH
 3006 8143a 601A      	         BRA.S   MM40
 3007               	
 3008               	* WORD
 3009               	MM24:
 3010 8143c 3880      	         MOVE.W  %D0,(%A4)      | STORE
 3011 8143e 4A45      	         TST.W   %D5
 3012 81440 6B14      	         BMI.S   MM40           | DO NOT VERIFY
 3013 81442 3014      	         MOVE.W  (%A4),%D0
 3014 81444 B047      	         CMP.W   %D7,%D0
 3015 81446 663E      	         BNE.S   MM90           | NO MATCH
 3016 81448 600C      	         BRA.S   MM40
 3017               	
 3018               	* LONG WORD
 3019               	MM26:
 3020 8144a 2880      	         MOVE.L  %D0,(%A4)
 3021 8144c 4A45      	         TST.W   %D5
 3022 8144e 6B06      	         BMI.S   MM40           | DO NOT VERIFY
 3023 81450 2014      	         MOVE.L  (%A4),%D0
 3024 81452 B087      	         CMP.L   %D7,%D0
 3025 81454 6630      	         BNE.S   MM90           | NO MATCH
68K GAS  tutor13.s 			page 58


 3026               	
 3027               	* LOOK FOR  . = ^
 3028 81456 1015      	MM40:    MOVE.B  (%A5),%D0
 3029 81458 0C00 002E 	         CMPI.B  #'.',%D0
 3030 8145c 6700 EDD4 	         BEQ     MACSBUG        | DONE
 3031 81460 0C00 005E 	         CMPI.B  #'^',%D0
 3032 81464 671A      	         BEQ.S   MM60           | BACKUP ADDRESS
 3033 81466 0C00 003D 	         CMPI.B  #'=',%D0
 3034 8146a 6700 FF24 	         BEQ     MM10           | ADDRESS STAYS THE SAME
 3035 8146e 0C00 0020 	         CMPI.B  #BLANK,%D0
 3036 81472 6706      	         BEQ.S   MM50
 3037 81474 BDCD      	         CMP.L   %A5,%A6
 3038 81476 6600 EC3E 	         BNE     SYNTAX         | ERROR
 3039               	
 3040               	* ADDRESS LOW TO HIGH
 3041 8147a D9C6      	MM50:    ADD.L   %D6,%A4
 3042 8147c 6000 FF12 	         BRA     MM10
 3043               	
 3044               	* ADDRESS HIGH TO LOW
 3045 81480 99C6      	MM60:    SUB.L   %D6,%A4
 3046 81482 6000 FF0C 	         BRA     MM10
 3047               	
 3048 81486 4BFA 00B6 	MM90:    LEA     MSG017(%PC),%A5 | "DATA DID NOT STORE"
 3049 8148a 6100 EC7A 	MM95:    BSR     FIXDCRLF
 3050 8148e 6000 EC18 	         BRA     MSG
 3051               	
 3052 81492 4BFA EC03 	MM905:   LEA     MSGEOT(%PC),%A5
 3053 81496 60F2      	         BRA.S   MM95
 3054               	
 3055               	*-------------------------------------------------------------------------
 3056               	* File MS        Memory set command                               11/02/81
 3057               	
 3058               	*    ***MS***   MEMORY SET
 3059               	*     FORMAT: MS  ADDRESS HEX HEX,HEX,"ASCII"  ETC.
 3060               	*     COMMAS OR SPACES BETWEEN FIELDS
 3061               	*     FIELDS ARE SIZE ADJUSTED (STORES UP TO 4 BYTES)
 3062               	*     ASCII ENCLOSED IN SINGLE QUOTES-ANY LENGTH
 3063               	
 3064 81498 41FA EC1C 	MSCMD:   LEA     SYNTAX(%PC),%A0 | IF NO PARAMETERS
 3065 8149c 6100 0616 	         BSR     FNEXTF         | FIND NEXT FIELD
 3066 814a0 6100 F698 	         BSR     GETA           | GET ADDRESS
 3067 814a4 6100 0632 	         BSR     CKADDR         | CHECK VALID ADDRESS
 3068               	
 3069 814a8 2240      	         MOVE.L  %D0,%A1        | A1=START (OPEN) ADDRESS
 3070 814aa 41FA ED86 	SETM1:   LEA     MACSBUG(%PC),%A0 | IF NO PARAMTER
 3071 814ae 6100 0604 	         BSR     FNEXTF         | FIND NEXT FIELD
 3072 814b2 284D      	         MOVE.L  %A5,%A4        | SAVE ADDRESS OF PARAMTER
 3073 814b4 1015      	         MOVE.B  (%A5),%D0      | CHECK OUT NEXT CHARACTER
 3074 814b6 0C00 0027 	         CMPI.B  #0x27,%D0      | SEE IF IT IS QUOTE MARK
 3075 814ba 6730      	         BEQ.S   SETM5          | SPECIAL ROUTINE
 3076 814bc 0C00 004E 	         CMPI.B  #'N',%D0       | SEE IF NEXT LINE FEATURE
 3077 814c0 674E      	         BEQ.S   SETM7
 3078 814c2 6100 0672 	         BSR     GETNUMA        | GET THE DATA
 3079 814c6 2649      	         MOVE.L  %A1,%A3        | ADDRESS
 3080 814c8 220D      	         MOVE.L  %A5,%D1        | COMPUTE BYTES OF DATA
 3081 814ca 928C      	         SUB.L   %A4,%D1        | LEN=END-START
 3082 814cc E281      	         ASR.L   #1,%D1         | BYTES=CHAR/2
68K GAS  tutor13.s 			page 59


 3083 814ce 6402      	         BCC.S   SETM3          | TAKE CARE OF ODD CHARACTER
 3084 814d0 5281      	         ADDQ.L  #1,%D1         | WHOLE NUMBER OF BYTES
 3085 814d2 2401      	SETM3:   MOVE.L  %D1,%D2        | D1 SCANS DOWN
 3086 814d4 5382      	         SUBQ.L  #1,%D2         | KNOCK IT DOWN TO INDEX
 3087 814d6 1780 2000 	         MOVE.B  %D0,0(%A3,%D2.W) | INDEXED BECAUSE BACKWARD
 3088               	
 3089 814da 1633 2000 	         MOVE.B  0(%A3,%D2.W),%D3 | REREAD TO CHECK IF STORED OK
 3090               	
 3091 814de B600      	         CMP.B   %D0,%D3        | ARE SAME?
 3092 814e0 6622      	         BNE.S   SETME          | "DATA DID NOT STORE"
 3093               	
 3094 814e2 E080      	         ASR.L   #8,%D0         | SHIFT ONE BYTE
 3095 814e4 5289      	         ADDQ.L  #1,%A1         | BUMP ADDRESS
 3096 814e6 5381      	         SUBQ.L  #1,%D1
 3097 814e8 66E8      	         BNE.S   SETM3
 3098 814ea 60BE      	         BRA.S   SETM1          | GO DO NEXT DATA
 3099               	
 3100               	*  DATA IN IN ASCII STRING
 3101 814ec 528D      	SETM5:   ADDQ.L  #1,%A5         | GET PAST QUOTE MARK
 3102 814ee BBCE      	SETM6:   CMP.L   %A6,%A5        | SEE IF END OF BUFFER
 3103 814f0 6C00 ED40 	         BGE     MACSBUG
 3104 814f4 101D      	         MOVE.B  (%A5)+,%D0     | GRAB CHARACTER
 3105 814f6 0C00 0027 	         CMPI.B  #0x27,%D0      | SEE IF QUOTE MARK
 3106 814fa 67AE      	         BEQ.S   SETM1          | IF SO-END OF STRING
 3107 814fc 1280      	         MOVE.B  %D0,(%A1)      | SAVE DATA
 3108               	
 3109 814fe 1219      	         MOVE.B  (%A1)+,%D1     | REREAD FOR CHECK
 3110               	
 3111 81500 B001      	         CMP.B   %D1,%D0        | SEE IF SAME
 3112 81502 67EA      	         BEQ.S   SETM6
 3113 81504 4BFA 0038 	SETME:   LEA     MSG017(%PC),%A5 | "DATA DID NOT STORE"
 3114 81508 6100 EBFC 	         BSR     FIXDCRLF
 3115 8150c 6000 EB9A 	         BRA     MSG
 3116               	
 3117 81510 6100 07C4 	SETM7:   BSR     FIXBUF         | DISPLAY CURRENT ADDRESS
 3118 81514 2009      	         MOVE.L  %A1,%D0
 3119 81516 6100 04CA 	         BSR     PNT8HX         | PUT ADDRESS IN BUFFER
 3120 8151a 2CFC 2020 	         MOVE.L  #0x20203f20,(%A6)+ | "  ? " PROMPT
 3120      3F20 
 3121 81520 6100 0728 	         BSR     OUTPUT         | DUMP BUFFER WITH NO LF CR
 3122 81524 6100 07B0 	         BSR     FIXBUF         | GET READY FOR INPUT
 3123 81528 1AFC 0020 	         MOVE.B  #BLANK,(%A5)+  | ADVANCE IN BUFFER
 3124 8152c 2C4D      	         MOVE.L  %A5,%A6        |  BECAUSE OF SNAFU IN FINDNP
 3125 8152e 6100 07AE 	         BSR     PORTIN1        | INPUT FROM CONSOLE
 3126 81532 1025      	         MOVE.B  -(%A5),%D0     | JUST BACK UP IN BUFFER
 3127 81534 BBCE      	         CMP.L   %A6,%A5
 3128 81536 6700 ECFA 	         BEQ     MACSBUG
 3129 8153a 6000 FF6E 	         BRA     SETM1          | DO DECODE IT
 3130               	
 3131 8153e 4441 5441 	MSG017:  .ascii  "DATA DID NOT STORE"
 3131      2044 4944 
 3131      204E 4F54 
 3131      2053 544F 
 3131      5245 
 3132 81550 0D0A 04   	         DC.B    CR,LF,EOT
 3133               	
 3134 81553 00        	         DC.B    0              | PAD BYTE
68K GAS  tutor13.s 			page 60


 3135               	
 3136               	*-------------------------------------------------------------------------
 3137               	* File MTSETUP   MTSETUP memory test setup                        11/02/81
 3138               	
 3139               	*
 3140               	* SET UP PARMS FOR BLOCK TEST AND BLOCK INITIALIZE
 3141               	*
 3142               	
 3143               	MTSETUP: .align  2
 3144 81554 21CF 04D6 	         MOVE.L  %A7,TEMP        | STACK FOR EXCEPTION RETURN
 3145 81558 41FA EB5C 	         LEA     SYNTAX(%PC),%A0 | WHERE TO GO IF NO PARAMETERS
 3146 8155c 6100 0556 	         BSR     FNEXTF          | FIND NEXT FIELD
 3147 81560 6100 F5D8 	         BSR     GETA            | GET ADDR1
 3148 81564 6100 056C 	         BSR     CKWADR          | CHECK WORD BOUNDRY ADDRESS
 3149 81568 2640      	         MOVE.L  %D0,%A3         | SAVE STARTING ADDRESS
 3150               	
 3151 8156a 41FA EB4A 	         LEA     SYNTAX(%PC),%A0 | SET UP TO TRY "TO" ADDRESS
 3152 8156e 6100 0544 	         BSR     FNEXTF
 3153 81572 6100 F5C6 	         BSR     GETA            | GET ADDR2
 3154 81576 6100 055A 	         BSR     CKWADR
 3155 8157a 2240      	         MOVE.L  %D0,%A1         | A1 = END ADDRESS?
 3156 8157c 204B      	         MOVE.L  %A3,%A0         | A0 = STARTING ADDRESS
 3157 8157e 6100 EB44 	         BSR     P2PHY           | DISPLAY TWO ADDRESSES
 3158 81582 B3C8      	         CMP.L   %A0,%A1
 3159 81584 6500 EB30 	         BCS     SYNTAX          | END ADDR TOO SMALL
 3160 81588 5489      	         ADDQ.L  #2,%A1          | ADJUST END ADDR
 3161 8158a 4E75      	         RTS
 3162               	
 3163               	*-------------------------------------------------------------------------
 3164               	* File OF        OF & PERIOD Command                              12/18/81
 3165               	
 3166               	* .*  HANDLER
 3167               	*   GET TWO CHARACTERS FOLLOWING PERIOD
 3168               	
 3169 8158c E149      	PERCMD:  LSL.W   #8,%D1
 3170 8158e 1215      	         MOVE.B  (%A5),%D1       | D1 = 2ND,3RD CHARACTERS
 3171 81590 538D      	         SUBQ.L  #1,%A5          | A5 = POINTER TO 2ND CHAR  (1ST REAL CHARACTER)
 3172               	
 3173 81592 41FA 0030 	         LEA     REGTBL(%PC),%A0
 3174 81596 4287      	PER4:    CLR.L   %D7
 3175 81598 3E18      	         MOVE.W  (%A0)+,%D7      | SAVE FIRST WORD FOR END OF TABLE TEST
 3176 8159a 3018      	         MOVE.W  (%A0)+,%D0      | GET REAL REGISTER ID INTO D0
 3177 8159c 0C47 FFFF 	         CMPI.W  #0xFFFF,%D7     | ARE WE AT THE END OF THE TABLE?
 3178 815a0 6700 EAFC 	         BEQ     WHAT            | YES...THEN WE DIDNT FIND IT
 3179               	
 3180 815a4 0C00 0040 	         CMPI.B  #'@',%D0
 3181 815a8 660E      	         BNE.S   PER3            | NOT @
 3182               	
 3183               	* THIRD CHAR MUST BE NUMERIC 0 - 7
 3184 815aa 1001      	         MOVE.B  %D1,%D0         | ALLEGED DIGIT
 3185 815ac 0C00 0030 	         CMPI.B  #'0',%D0
 3186 815b0 6BE4      	         BMI.S   PER4            | NOT A DIGIT
 3187 815b2 0C00 0038 	         CMPI.B  #'8',%D0
 3188 815b6 6ADE      	         BPL.S   PER4            | NOT A DIGIT
 3189               	
 3190 815b8 B041      	PER3:    CMP.W   %D1,%D0
 3191 815ba 66DA      	         BNE.S   PER4            | MISS-MATCH
68K GAS  tutor13.s 			page 61


 3192               	
 3193               	*******************************************************************
 3194               	*        AT THIS TIME WE HAVE FOUND THE ENTRY IN THE "REG TABLE"  *
 3195               	*        WE NOW NEED TO EXTRACT AND USE THE OFFSET                *
 3196               	*******************************************************************
 3197               	
 3198 815bc 41FA EA42 	         LEA     FIRST(%PC),%A0  | A0 = Start of VERSAbug RO
 3199 815c0 D1C7      	         ADD.L   %D7,%A0         | Add offset
 3200 815c2 4ED0      	         JMP     (%A0)           | Now go to the calculated location
 3201               	
 3202               	***************
 3203               	REGTBL:
 3204               	***************
 3205               	
 3206 815c4 1628      	         DC.W    SETA7-FIRST    | Stack Register Routine
 3207 815c6 4137      	         .ascii  "A7"
 3208               	
 3209 815c8 1622      	         DC.W    SETPC-FIRST    | Program Counter Routine
 3210 815ca 5043      	         .ascii  "PC"
 3211               	
 3212 815cc 161C      	         DC.W    SETSR-FIRST    | Status Register Routine
 3213 815ce 5352      	         .ascii  "SR"
 3214               	
 3215 815d0 1616      	         DC.W    SETUS-FIRST    | User Stack Routine
 3216 815d2 5553      	         .ascii  "US"
 3217               	
 3218 815d4 1610      	         DC.W    SETSS-FIRST    | System Stack Routine
 3219 815d6 5353      	         .ascii  "SS"
 3220               	
 3221 815d8 160A      	         DC.W    SETD-FIRST     | Data Register Routine
 3222 815da 4440      	         .ascii  "D@"
 3223               	
 3224 815dc 1604      	         DC.W    SETA-FIRST     | Address Register Routine
 3225 815de 4140      	         .ascii  "A@"
 3226               	
 3227 815e0 15FE      	         DC.W    PNTCLSA-FIRST  | All Address Registers Routine
 3228 815e2 4120      	         .ascii  "A "
 3229               	
 3230 815e4 15F8      	         DC.W    PNTCLSD-FIRST  | All Data Registers Routine
 3231 815e6 4420      	         .ascii  "D "
 3232               	
 3233 815e8 15F2      	         DC.W    SETRN-FIRST    | All Registers Routine
 3234 815ea 5240      	         .ascii  "R@"
 3235               	
 3236 815ec FFFF      	         DC.W    0xFFFF         | END OF TABLE
 3237               	
 3238               	*    PRINT & INPUT REGISTER ROUTINES
 3239               	
 3240 815ee 6000 003E 	SETD:    LEA     REGS,%A4       | START OF REGISTERS
 3240      4EF9 0000 
 3240      0000 4EF9 
 3240      0000 0000 
 3240      4EF9 0000 
 3241 81632 6034      	         BRA.S   SETR
 3242               	
 3243 81634 49F8 0428 	SETA:    LEA     REGS+32,%A4    | OFFSET IN REGISTER TABLE
 3244 81638 602E      	         BRA.S   SETR
68K GAS  tutor13.s 			page 62


 3245               	
 3246 8163a 49F8 0400 	SETPC:   LEA     REGPC,%A4      | WHERE PC IS
 3247 8163e 6030      	         BRA.S   SETR0
 3248               	
 3249 81640 49F8 0404 	SETSR:   LEA     REGSR,%A4      | WHERE SR IS
 3250 81644 602A      	         BRA.S   SETR0
 3251               	
 3252 81646 2238 0404 	SETA7:   MOVE.L  REGSR,%D1      | GET CONDITION CODES
 3253 8164a 0241 2000 	         ANDI.W  #0x2000,%D1    | CHECK SUPERVISOR BIT
 3254 8164e 6706      	         BEQ.S   SETUS
 3255 81650 49F8 0444 	SETSS:   LEA     REGA7,%A4      | WHERE SUPERVISOR STACK IS
 3256 81654 601A      	         BRA.S   SETR0
 3257               	
 3258 81656 49F8 0448 	SETUS:   LEA     REGUS,%A4      | USER STACK
 3259 8165a 6014      	         BRA.S   SETR0
 3260               	
 3261 8165c 49F8 044C 	SETRN:   LEA     OFFSET,%A4     | SET OFFSET
 3262 81660 0C01 0037 	         CMPI.B  #'7',%D1
 3263 81664 6700 EA50 	         BEQ     SYNTAX         | NOT ALLOWED TO CHANGE A7
 3264               	
 3265               	*  ROUTINE TO ENTER DATA FOR A SINGLE REGISTER
 3266               	*   A5-A6 ARE COMMAND BUFFER
 3267               	*   %D0 HAS REGISTER DIGIT %A4 HAS CLASS OFFSET
 3268               	
 3269 81668 6100 057C 	SETR:    BSR     GETHEX         | GET REG NUMBER
 3270 8166c E588      	         LSL.L   #2,%D0         | SHIFT LEFT...MULT BY 4
 3271 8166e D9C0      	         ADD.L   %D0,%A4        | A4 NOW HAS EXACT ADDRESS
 3272 81670 548D      	SETR0:   ADDQ.L  #2,%A5         | NOW FIND PARAMETERS
 3273 81672 103C 003A 	         MOVE.B  #':',%D0       | SEE IF COLON IN COMMAND
 3274 81676 6154      	         BSR.S   SCAN
 3275 81678 671E      	         BEQ.S   SETR5
 3276               	*SEE IF ANY PARAMER (HEX)
 3277 8167a 41FA 0016 	         LEA     SETR4(%PC),%A0 | WHERE TO GO IF NO PARAMETERS
 3278 8167e 6100 0434 	         BSR     FNEXTF         | FIND NEXT FIELD
 3279               	
 3280 81682 0C00 002E 	         CMPI.B  #'.',%D0
 3281 81686 6706      	         BEQ.S   SEMACS         | PERIOD; GET OUT
 3282               	
 3283 81688 6100 F4B0 	         BSR     GETA           | GET ADDRESS VALUE
 3284 8168c 2880      	         MOVE.L  %D0,(%A4)      | SAVE NEW VALUE
 3285 8168e 6000 EBA2 	SEMACS:  BRA     MACSBUG
 3286               	
 3287               	*JUST PRINT IT
 3288               	
 3289 81692 6148      	SETR4:   BSR.S   PRINTR         | FIX UP TO PRINT
 3290 81694 6000 EA12 	         BRA     MSG            | GO PRINT MESSAGE-GO TO MACSBUG
 3291               	
 3292 81698 6102      	SETR5:   BSR.S   SETSR1
 3293 8169a 60F2      	         BRA.S   SEMACS
 3294               	
 3295 8169c 613E      	SETSR1:  BSR.S   PRINTR         | FIX UP TO PRINT
 3296 8169e 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 3297 816a2 1CFC 003F 	         MOVE.B  #'?',(%A6)+    | PROMPT
 3298 816a6 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 3299 816aa 6100 059E 	         BSR     OUTPUT         | PRINT IT
 3300               	
 3301 816ae 6100 0626 	         BSR     FIXBUF
68K GAS  tutor13.s 			page 63


 3302 816b2 6100 062A 	         BSR     PORTIN1
 3303               	
 3304 816b6 41FA 0012 	         LEA     SETSR15(%PC),%A0 | A0=DEFAULT (NO PARM) ADDRESS
 3305 816ba 6100 03F8 	         BSR     FNEXTF         | FIND FIELD
 3306               	
 3307 816be 0C00 002E 	         CMPI.B  #'.',%D0
 3308 816c2 67CA      	         BEQ.S   SEMACS         | PERIOD; GET OUT
 3309               	
 3310 816c4 6100 F474 	         BSR     GETA           | CONVERT IT
 3311 816c8 2880      	         MOVE.L  %D0,(%A4)      | STORE NEW DATA
 3312               	
 3313               	SETSR15: .align  2
 3314 816ca 4E75      	         RTS
 3315               	
 3316               	* SEE IF CHARACTER IS IN BUFFER
 3317               	
 3318 816cc 204D      	SCAN:    MOVE.L  %A5,%A0        | A0 IS WORKING SCANNER
 3319 816ce B1CE      	SCAN2:   CMP.L   %A6,%A0        | SEE IF AT END OF BUFFER
 3320 816d0 6208      	         BHI.S   RETURN5
 3321 816d2 B010      	         CMP.B   (%A0),%D0      | LOOK AT CHARACTER
 3322 816d4 6704      	         BEQ.S   RETURN5
 3323 816d6 5288      	         ADDQ.L  #1,%A0         | GET PAST CHARACTER
 3324 816d8 60F4      	         BRA.S   SCAN2
 3325 816da 4E75      	RETURN5: RTS
 3326               	
 3327               	* ROUTINE TO SET UP TO PRINT REG
 3328               	
 3329 816dc 6100 05F8 	PRINTR:  BSR     FIXBUF
 3330               	
 3331 816e0 568E      	         ADDQ.L  #3,%A6         | GET PAST REG NAME (.XX)
 3332 816e2 1CFC 003D 	         MOVE.B  #'=',(%A6)+    | PUT IN EQUAL SIGN
 3333 816e6 2014      	         MOVE.L  (%A4),%D0      | GET VALUE
 3334 816e8 B9FC 0000 	         CMPA.L  #REGSR,%A4     | SEE IF THIS IS CONDITION CODES
 3334      0404 
 3335 816ee 6606      	         BNE.S   PRINTR2
 3336 816f0 6100 02FE 	         BSR     PNT4HX         | JUST PRINT WORD
 3337 816f4 4E75      	         RTS
 3338               	
 3339 816f6 6100 02EA 	PRINTR2: BSR     PNT8HX         | PRINT THE VALUE
 3340 816fa 4E75      	         RTS
 3341               	
 3342               	*
 3343               	*   PRINT ALL REGISTERS IN A CLASS (A OR D OR R)
 3344               	*
 3345               	
 3346               	OFCMD:   .align  2              | "OF" Command -Display Offset registers-
 3347 816fc 1E3C 0052 	SETO:    MOVE.B  #'R',%D7
 3348 81700 47F8 044C 	         LEA     OFFSET,%A3
 3349 81704 6012      	         BRA.S   PNTCLSB
 3350               	
 3351 81706 1E3C 0044 	PNTCLSD: MOVE.B  #'D',%D7       | CLASS=DATA
 3352 8170a 47F8 0408 	         LEA     REGS,%A3       | OFFSET
 3353 8170e 6008      	         BRA.S   PNTCLSB
 3354               	
 3355 81710 1E3C 0041 	PNTCLSA: MOVE.B  #'A',%D7       | CLASS=ADDRESS
 3356 81714 47F8 0428 	         LEA     REGS+32,%A3    | OFFSET
 3357 81718 6104      	PNTCLSB: BSR.S   PNTCLS
68K GAS  tutor13.s 			page 64


 3358 8171a 6000 EB16 	         BRA     MACSBUG
 3359               	
 3360 8171e 6100 05B6 	PNTCLS:  BSR     FIXBUF
 3361 81722 4286      	         CLR.L   %D6            | REGISTER COUNTER
 3362 81724 611C      	PNTCLS1: BSR.S   PNTREG         | PRINT THE REGISTER
 3363 81726 0C06 0004 	         CMPI.B  #4,%D6         | DISPLAY AFTER 3&7
 3364 8172a 660A      	         BNE.S   PNTCLS2
 3365 8172c 6100 0502 	         BSR     OUT1CR
 3366 81730 6100 05A4 	         BSR     FIXBUF
 3367 81734 60EE      	         BRA.S   PNTCLS1        | DO SOME MORE
 3368               	
 3369 81736 0C06 0008 	PNTCLS2: CMPI.B  #8,%D6         | AT END?
 3370 8173a 66E8      	         BNE.S   PNTCLS1
 3371 8173c 6100 04F2 	         BSR     OUT1CR         | PRINT IT
 3372 81740 4E75      	         RTS
 3373               	
 3374               	*  SUBROUTINE TO PRINT REGISTER  X#=01234567.
 3375               	
 3376 81742 1CC7      	PNTREG:  MOVE.B  %D7,(%A6)+     | CLASS
 3377 81744 1006      	         MOVE.B  %D6,%D0        | REG#
 3378 81746 6100 02B8 	         BSR     PUTHEX
 3379 8174a 1CFC 003D 	         MOVE.B  #'=',(%A6)+    | EQUAL SIGN
 3380 8174e 2006      	         MOVE.L  %D6,%D0        | COMPUTE ADDRESS OF REG
 3381 81750 E588      	         LSL.L   #2,%D0         | MULT BY FOUR
 3382 81752 D08B      	         ADD.L   %A3,%D0        | ADD IN OFFSET
 3383 81754 2840      	         MOVE.L  %D0,%A4        | SET UP TO GET DEFFERED
 3384 81756 B9FC 0000 	         CMPA.L  #REGA7,%A4     | SEE IF REG A7
 3384      0444 
 3385 8175c 660E      	         BNE.S   PNTREG1
 3386 8175e 2038 0404 	         MOVE.L  REGSR,%D0      | GET STATUS REGISTER
 3387 81762 0240 2000 	         ANDI.W  #0x2000,%D0    | CHECK SUPERVISOR BIT
 3388 81766 6604      	         BNE.S   PNTREG1
 3389 81768 49F8 0448 	         LEA     REGUS,%A4      | TAKE ADDRESS OF USER STACK
 3390 8176c 2014      	PNTREG1: MOVE.L  (%A4),%D0      | GET REG CONTENT
 3391 8176e 6100 0272 	         BSR     PNT8HX         |PUT IN BUFFER
 3392 81772 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 3393 81776 5286      	         ADDQ.L  #1,%D6         | BUMP REG#
 3394 81778 4E75      	         RTS
 3395               	
 3396               	*-------------------------------------------------------------------------
 3397               	* File PF        "PFCMD", Port format                             05/19/82
 3398               	
 3399               	* **PF**   PF      DISPLAY PORT PROFILE
 3400               	*          PF1     DISPLAY/CHANGE PORT 1
 3401               	*          PF2     DISPLAY/CHANGE PORT 2
 3402               	
 3403 8177a 1C15      	PFCMD:   MOVE.B  (%A5),%D6      | D6 = PORT #
 3404 8177c 0C06 0031 	         CMPI.B  #'1',%D6
 3405 81780 675A      	         BEQ.S   PFCMD1         | CHANGE PORT 1
 3406 81782 0C06 0032 	         CMPI.B  #'2',%D6
 3407 81786 6754      	         BEQ.S   PFCMD1         | CHANGE PORT 2
 3408               	
 3409 81788 43F8 064C 	         LEA     MD1CON,%A1     | PRINT BOTH PORTS
 3410 8178c 4BFA 00A2 	         LEA     MSG003(%PC),%A5
 3411 81790 6132      	         BSR.S   PFPT           | DISPLAY/CHANGE
 3412 81792 6100 04B6 	         BSR     OUTPUT
 3413               	
68K GAS  tutor13.s 			page 65


 3414               	         NULLPADS = 0x0618
 3415 81796 43F8 0618 	         LEA     NULLPADS,%A1
 3416 8179a 4BFA 009F 	         LEA     MSG004(%PC),%A5
 3417 8179e 6124      	         BSR.S   PFPT
 3418 817a0 6100 04A8 	         BSR     OUTPUT
 3419               	
 3420               	         CRPADS = 0x061a
 3421 817a4 43F8 061A 	         LEA     CRPADS,%A1
 3422 817a8 4BFA 009C 	         LEA     MSG005(%PC),%A5
 3423 817ac 6116      	         BSR.S   PFPT
 3424               	
 3425 817ae 4BFA 00A1 	         LEA     MSG031(%PC),%A5 | TELL WHERE XONOFF IS
 3426 817b2 6100 E942 	         BSR     FIXDADD
 3427               	         OPTIONS = 0x04e6
 3428 817b6 203C 0000 	         MOVE.L  #OPTIONS,%D0
 3428      04E6 
 3429 817bc 6100 022C 	         BSR     PNT6HX         | "OPTIONS@AAAAAA"
 3430 817c0 6000 E8E6 	         BRA     MSG
 3431               	
 3432 817c4 6100 E940 	PFPT:    BSR     FIXDCRLF       | FORMAT FROM A5
 3433 817c8 1011      	         MOVE.B  (%A1),%D0
 3434 817ca 6100 022C 	         BSR     PNT2HX         | FORMAT DATA
 3435 817ce 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 3436 817d2 1029 0001 	         MOVE.B  1(%A1),%D0
 3437 817d6 6100 0220 	         BSR     PNT2HX         | FORMAT DATA PORT 2
 3438 817da 4E75      	         RTS
 3439               	
 3440 817dc 43F8 064C 	PFCMD1:  LEA     MD1CON,%A1
 3441 817e0 4BFA 004E 	         LEA     MSG003(%PC),%A5
 3442 817e4 6120      	         BSR.S   PFCH           | DISPLAY/CHANGE
 3443               	
 3444 817e6 43F8 0618 	         LEA     NULLPADS,%A1
 3445 817ea 4BFA 004F 	         LEA     MSG004(%PC),%A5
 3446 817ee 6116      	         BSR.S   PFCH
 3447               	
 3448 817f0 43F8 061A 	         LEA     CRPADS,%A1
 3449 817f4 4BFA 0050 	         LEA     MSG005(%PC),%A5
 3450 817f8 610C      	         BSR.S   PFCH
 3451 817fa 6100 07BE 	         BSR     INITSER        | PLACE NEW SBITS INTO ACIA
 3452 817fe 6100 04D6 	         BSR     FIXBUF         | BLANK LINE FOR SPACING
 3453 81802 6000 E8A4 	         BRA     MSG
 3454               	
 3455 81806 6100 E8EA 	PFCH:    BSR     FIXDATA        | FORMAT FROM A5
 3456 8180a 0C06 0031 	         CMPI.B  #'1',%D6
 3457 8180e 6702      	         BEQ.S   PFCH2          | PORT 1
 3458 81810 5289      	         ADDQ.L  #1,%A1         | PORT 2
 3459 81812 1011      	PFCH2:   MOVE.B  (%A1),%D0
 3460 81814 6100 01E2 	         BSR     PNT2HX         | FORMAT DATA
 3461 81818 1CFC 003F 	         MOVE.B  #'?',(%A6)+
 3462 8181c 6100 042C 	         BSR     OUTPUT
 3463               	
 3464 81820 6100 04BC 	         BSR     PORTIN1        | INPUT LINE
 3465 81824 BDCD      	         CMP.L   %A5,%A6
 3466 81826 6706      	         BEQ.S   PFCH4          | NOTHING INPUT
 3467               	
 3468 81828 6100 030C 	         BSR     GETNUMA
 3469 8182c 1280      	         MOVE.B  %D0,(%A1)
68K GAS  tutor13.s 			page 66


 3470 8182e 4E75      	PFCH4:   RTS
 3471               	
 3472 81830 464F 524D 	MSG003:  .ascii  "FORMAT=   "
 3472      4154 3D20 
 3472      2020 
 3473 8183a 04        	         DC.B    EOT
 3474               	
 3475 8183b 4348 4152 	MSG004:  .ascii  "CHAR NULL="
 3475      204E 554C 
 3475      4C3D 
 3476 81845 04        	         DC.B    EOT
 3477               	
 3478 81846 432F 5220 	MSG005:  .ascii  "C/R  NULL="
 3478      204E 554C 
 3478      4C3D 
 3479 81850 04        	         DC.B    EOT
 3480               	
 3481 81851 0D0A      	MSG031:  DC.B    CR,LF
 3482 81853 4F50 5449 	         .ascii  "OPTIONS@"
 3482      4F4E 5340 
 3483 8185b 04        	         DC.B    EOT
 3484               	
 3485               	*-------------------------------------------------------------------------
 3486               	* File RAMTEST   RAMTEST                                          11/02/81
 3487               	
 3488               	***********************************************************************
 3489               	* MEMORY TEST SUBROUTINE.                                             *
 3490               	*                                                                     *
 3491               	*        A0=BEGINNING ADDRESS (MUST BE EVEN ADDRESS)                  *
 3492               	*        A1=ENDING ADDRESS+1  (MUST BE EVEN ADDRESS)                  *
 3493               	*        A2=FAILING ADDRESS                                           *
 3494               	*        D0=DATA WRITTEN TO RAM                                       *
 3495               	*        D1=DATA READ FROM RAM                                        *
 3496               	*                                                                     *
 3497               	*        ZERO FLAG IS SET IF TEST IS SUCCESSFUL                       *
 3498               	*           REGISTERS D2,D3,D4 DESTROYED                              *
 3499               	***********************************************************************
 3500               	
 3501               	*       -1ST TEST-
 3502               	RAMTEST: .align  2
 3503 8185c 2608      	         MOVE.L  %A0,%D3        | D3 = BEGINNING ADDRESS
 3504 8185e 2443      	         MOVE.L  %D3,%A2        | USE A2 AS POINTER IN MEMORY
 3505 81860 70FE      	WALK3:   MOVEQ   #-2,%D0        | PREPARE FOR "WALKING BIT" TEST
 3506               	WALK0:
 3507 81862 3480      	         MOVE.W  %D0,(%A2)      | STORE D0 INTO MEMORY
 3508 81864 3212      	         MOVE.W  (%A2),%D1      | D1 CONTAINS RAM DATA
 3509 81866 B240      	         CMP.W   %D0,%D1        | WRITTEN VS. READ
 3510 81868 6642      	         BNE.S   RAMERR         | STOP ON ERROR
 3511 8186a E358      	         ROL.W   #1,%D0         | ROLL A ZERO IN A FIELD OF ONES
 3512 8186c 65F4      	         BCS.S   WALK0          | CONTINUE TILL DONE
 3513               	
 3514 8186e 7001      	         MOVEQ   #0x00000001,%D0 | THIS TIME, WALK A 1 THROUGH ZEROS
 3515               	WALK1:
 3516 81870 3480      	         MOVE.W  %D0,(%A2)      | STORE D0 INTO MEMORY
 3517 81872 3212      	         MOVE.W  (%A2),%D1      | D1 CONTAINS RAM DATA
 3518 81874 B240      	         CMP.W   %D0,%D1        | WRITTEN VS. READ
 3519 81876 6634      	         BNE.S   RAMERR         | STOP ON ERROR
68K GAS  tutor13.s 			page 67


 3520 81878 E340      	         ASL.W   #1,%D0         | ROLL A ONE TO THE NEXT POSITION
 3521 8187a 64F4      	         BCC.S   WALK1          | CONTINUE TILL DONE
 3522               	
 3523 8187c 45EA 0100 	         LEA     0x0100(%A2),%A2 | GO TO NEXT 256TH POSITION
 3524 81880 B5C9      	         CMP.L   %A1,%A2        | CHECK TO SEE IF DONE
 3525 81882 6DDC      	         BLT.S   WALK3          | CONTINUE
 3526               	
 3527               	* -2ND TEST-
 3528 81884 2443      	         MOVE.L  %D3,%A2        | SET A2 TO POINT TO START OF MEMORY
 3529 81886 7000      	         MOVEQ   #0x00000000,%D0 | CLEAR D0
 3530               	MTCLR:
 3531 81888 34C0      	         MOVE.W  %D0,(%A2)+     | CLEAR MEMORY
 3532 8188a B5C9      	         CMP.L   %A1,%A2        | DONE?
 3533 8188c 66FA      	         BNE.S   MTCLR          | NO... ZERO ALL OF MEMORY
 3534               	
 3535 8188e 74FF      	         MOVEQ   #-1,%D2        | SET D2 = FFFF
 3536               	MTSTOR1:
 3537 81890 3222      	         MOVE.W  -(%A2),%D1     | FIRST READ BACK MEMORY
 3538 81892 B240      	         CMP.W   %D0,%D1        | CHK AGAINST WHAT WAS WRITTEN
 3539 81894 6616      	         BNE.S   RAMERR         | STOP ON ERROR
 3540 81896 3482      	         MOVE.W  %D2,(%A2)      | STORE COMPLEMENT
 3541 81898 B5C3      	         CMP.L   %D3,%A2        | DONE?
 3542 8189a 66F4      	         BNE.S   MTSTOR1        | NO... COMPLEMENT ALL OF MEMORY
 3543 8189c 3002      	         MOVE.W  %D2,%D0        | D0=WHAT WAS WRITTEN
 3544 8189e 4642      	         NOT.W   %D2            | SAVE COMPLEMENT FOR LATER
 3545               	
 3546               	MTSTOR0:
 3547 818a0 3212      	         MOVE.W  (%A2),%D1      | READ BACK MEMORY
 3548 818a2 B240      	         CMP.W   %D0,%D1        | CHK AGAINST WHAT WAS WRITTEN
 3549 818a4 6606      	         BNE.S   RAMERR         | STOP ON ERROR
 3550 818a6 34C2      	         MOVE.W  %D2,(%A2)+     | STORE COMPLEMENT
 3551 818a8 B5C9      	         CMP.L   %A1,%A2        | DONE?
 3552 818aa 66F4      	         BNE.S   MTSTOR0        | NO...KEEP LOOPING, YES...
 3553               	
 3554 818ac 2043      	RAMERR:  MOVE.L  %D3,%A0        | RESTORE A0
 3555 818ae 4E75      	         RTS                    | RETURN
 3556               	
 3557               	*-------------------------------------------------------------------------
 3558               	* File TM        TM  Transparent mode                             12/28/81
 3559               	
 3560               	*    TM  [[EXIT CHAR]TRAILING CHAR]
 3561               	*
 3562               	*  In transparent mode the terminal is physically connected to the
 3563               	*  host; at the same time the terminal is watched by TM software
 3564               	*  for the EXIT character.  When the exit character is transmitted
 3565               	*  by the terminal it goes directly to the host; and at the same
 3566               	*  time the TM software reconfigures the hardware.  If a nonnull
 3567               	*  trailing character is present it is now sent via port 2 to
 3568               	*  the host.
 3569               	
 3570               	*   TRANSPARENT MODE
 3571               	
 3572 818b0 41FA 0012 	TMCMD:   LEA     P2CMD0(%PC),%A0
 3573 818b4 6100 01FE 	         BSR     FNEXTF         | FIND NEXT FIELD
 3574 818b8 11DD 04EB 	         MOVE.B  (%A5)+,TMCHARS+1 | QUIT CHARACTER
 3575 818bc 6100 01F6 	         BSR     FNEXTF         | FIND NEXT FIELD
 3576 818c0 11DD 04EA 	         MOVE.B  (%A5)+,TMCHARS | OPTIONAL TRAILING CHAR
68K GAS  tutor13.s 			page 68


 3577 818c4 3E38 04EA 	P2CMD0:  MOVE.W  TMCHARS,%D7
 3578 818c8 6100 03E8 	         BSR     GETSER1        | ADDRESS FOR PORT1 INTO A0
 3579 818cc 4BFA 007A 	         LEA     MSG006(%PC),%A5 | "TRANSPARENT MODE"
 3580 818d0 6100 E834 	         BSR     FIXDCRLF       | SET UP FOR MESSAGE
 3581 818d4 2007      	         MOVE.L  %D7,%D0        | EXIT CHARACTER
 3582 818d6 6100 0120 	         BSR     PNT2HX         | PRINT 2 HEX CHARACTERS
 3583 818da 3CFC 203D 	         MOVE.W  #0x203d,(%A6)+ | " ="
 3584 818de 1007      	         MOVE.B  %D7,%D0        | SEE IF CONTROL CHAR
 3585 818e0 0C00 0020 	         CMPI.B  #BLANK,%D0
 3586 818e4 6A0A      	         BPL.S   P2CMD01
 3587 818e6 2CFC 2043 	         MOVE.L  #0x2043544c,(%A6)+ | " CTL"
 3587      544C 
 3588 818ec 0600 0040 	         ADDI.B  #64,%D0        | MAKE IT A PRINTABLE CHARACTER
 3589 818f0 1CFC 0020 	P2CMD01: MOVE.B  #BLANK,(%A6)+
 3590 818f4 1CC0      	         MOVE.B  %D0,(%A6)+
 3591 818f6 3CFC 0D0A 	         MOVE.W  #0x0D0A,(%A6)+
 3592 818fa 6100 0334 	         BSR     OUT1CR         | GO PRINT BUFFER WITH CRLF
 3593               	
 3594 818fe 1039 0000 	         MOVE.B  MD1CON.L,%D0   | PROGRAM ACIA FOR TRANSPARENT MODE
 3594      064C 
 3595 81904 0200 009F 	         ANDI.B  #0x9F,%D0
 3596 81908 0000 0040 	         ORI.B   #0x40,%D0      | FORCE RTS HIGH
 3597 8190c 1080      	         MOVE.B  %D0,(%A0)
 3598 8190e 0810 0000 	P2CMD2:  BTST.B  #0x0,(%A0)     | READ STATUS
 3599 81912 67FA      	         BEQ.S   P2CMD2
 3600 81914 1028 0002 	         MOVE.B  2(%A0),%D0     | RECEIVE CHAR FROM PORT 1
 3601 81918 0200 007F 	         ANDI.B  #0x7F,%D0
 3602 8191c B007      	         CMP.B   %D7,%D0        | SEE IF QUIT CHARACTER (CTL A USUALLY)
 3603 8191e 66EE      	         BNE.S   P2CMD2
 3604 81920 1039 0000 	         MOVE.B  MD1CON.L,%D0   | REPROGRAM FOR NON-TRANSPARENT
 3604      064C 
 3605 81926 0200 009F 	         ANDI.B  #0x9F,%D0
 3606 8192a 1080      	         MOVE.B  %D0,(%A0)
 3607               	
 3608 8192c E047      	         ASR.W   #8,%D7
 3609 8192e 4A07      	         TST.B   %D7
 3610 81930 6712      	         BEQ.S   P2CMD6
 3611               	* SPECIAL SECOND CHAR TO HOST SEQUENCE
 3612 81932 203C 0000 	         MOVE.L  #DELAYC1,%D0
 3612      1000 
 3613 81938 5380      	P2CMD4:  SUBQ.L  #1,%D0         | DELAY; ALLOW HOST TO SYNC
 3614 8193a 66FC      	         BNE.S   P2CMD4
 3615 8193c 6100 0386 	         BSR     GETSER2
 3616 81940 1147 0002 	         MOVE.B  %D7,2(%A0)     | SEND CHAR
 3617 81944 6000 E8EC 	P2CMD6:  BRA     MACSBUG
 3618               	
 3619 81948 2A54 5241 	MSG006:  .ascii  "*TRANSPARENT* EXIT=$"
 3619      4E53 5041 
 3619      5245 4E54 
 3619      2A20 4558 
 3619      4954 3D24 
 3620 8195c 04        	         DC.B    EOT
 3621               	
 3622 8195d 00        	         DC.B    0              | PAD BYTE
 3623               	         .align  2
 3624               	
 3625               	*-------------------------------------------------------------------------
68K GAS  tutor13.s 			page 69


 3626               	* File W         Software Abort, Hex print routines               06/05/82
 3627               	
 3628               	*
 3629               	*   HANDLE THE ABORT BUTTON
 3630               	*
 3631 8195e 46FC 2700 	ABORTB:  MOVE.W  #0x2700,%SR
 3632               	         SAVEREGS
 3632               	>  TEMP =0x04d6
 3632 81962 21CF 0444 	>  MOVE.L %A7,REGA7
 3632 81966 4FFA 000A 	>  LEA SV17(%PC),%A7
 3632 8196a 21CF 04D6 	>  MOVE.L %A7,TEMP
 3632 8196e 6000 F31C 	>  JRA SAVE
 3632               	> SV17:
 3633 81972 6100 060A 	         BSR     FAULTSER       | RESET SERIAL PORTS
 3634 81976 4BFA 0016 	         LEA     MSG012(%PC),%A5 | "SOFTWARE ABORT"
 3635               	
 3636 8197a 6100 063E 	         BSR     INITSER        | RESET SERIAL PORTS (CLEAR TM MODE)
 3637 8197e 6100 E786 	         BSR     FIXDCRLF       | MOVE MESSAGE TO BUFFER
 3638 81982 6100 02C6 	EVECT4:  BSR     OUTPUT         | MSG TO PORT1
 3639 81986 6100 EF7C 	ABORT335:BSR     TDISPLY        | DISPLAY REGISTERS
 3640 8198a 6000 E8A6 	         BRA     MACSBUG
 3641               	
 3642 8198e 0A0A      	MSG012:  DC.B    LF,LF
 3643 81990 534F 4654 	         .ascii  "SOFTWARE ABORT"
 3643      5741 5245 
 3643      2041 424F 
 3643      5254 
 3644 8199e 0D0A 04   	         DC.B    CR,LF,EOT
 3645               	
 3646 819a1 00        	         DC.B    0              | PAD BYTE
 3647               	         .align  2
 3648               	
 3649 819a2 21FC 3F3F 	ABORTE:MOVE.L    #0x3f3f3f3f,0x30   | "????" UNKNOWN INTERRUPT
 3649      3F3F 0030 
 3650               	
 3651               	*    SAVE REGISTERS AND PRINT VECTOR MSG
 3652               	*
 3653               	         .align  2
 3654               	EVECTL:  SAVEREGS
 3654               	>  TEMP =0x04d6
 3654 819aa 21CF 0444 	>  MOVE.L %A7,REGA7
 3654 819ae 4FFA 000A 	>  LEA SV18(%PC),%A7
 3654 819b2 21CF 04D6 	>  MOVE.L %A7,TEMP
 3654 819b6 6000 F2D4 	>  JRA SAVE
 3654               	> SV18:
 3655 819ba 6100 05C2 	         BSR     FAULTSER       | RESET SERIAL PORTS
 3656 819be 6100 0316 	EVECT2:  BSR     FIXBUF         | PRINT MESSAGE "XXXX TRAP ERROR"
 3657 819c2 3CFC 0D0A 	         MOVE.W  #0x0D0A,(%A6)+
 3658               	         AV12 = 0x0030
 3659 819c6 2CF8 0030 	         MOVE.L  AV12,(%A6)+    | TYPE OF ERROR
 3660 819ca 4BFA 0008 	         LEA     MSG010(%PC),%A5 | "TRAP ERROR"
 3661 819ce 6100 E726 	         BSR     FIXDADD
 3662 819d2 60AE      	         BRA.S   EVECT4
 3663               	
 3664 819d4 2054 5241 	MSG010:  .ascii  " TRAP ERROR"
 3664      5020 4552 
 3664      524F 52
68K GAS  tutor13.s 			page 70


 3665 819df 0D0A 04   	         DC.B    CR,LF,EOT
 3666               	
 3667               	*
 3668               	*  PRINT HEX ROUTINES
 3669               	*
 3670               	*
 3671               	* PRINT 8 HEX CHARACTERS
 3672               	*
 3673               	*  %D0,%D1,%D2 DESTROYED
 3674               	*
 3675               	         .align 2
 3676 819e2 4840      	PNT8HX:  SWAP    %D0            | FLIP REG HALVES
 3677 819e4 610A      	         BSR.S   PNT4HX         | DO TOP WORD
 3678 819e6 4840      	         SWAP    %D0            | NOW DO LOWER WORD
 3679 819e8 6006      	         BRA.S   PNT4HX
 3680               	* PRINT 6 HEX CHARACTERS
 3681 819ea 4840      	PNT6HX:  SWAP    %D0            | FLIP REGISTER HALVES
 3682 819ec 610A      	         BSR.S   PNT2HX
 3683 819ee 4840      	         SWAP    %D0            | FLIP BACK REG HALVES
 3684               	* PRINT 4 HEX CHARACTERS IN D0.W
 3685 819f0 3200      	PNT4HX:  MOVE.W  %D0,%D1        |  SAVE IN TEMP
 3686 819f2 E058      	         ROR.W   #8,%D0         | GET BITS 15-8 INTO LOWER BYTE
 3687 819f4 6102      	         BSR.S   PNT2HX         | PRINT IT
 3688 819f6 3001      	         MOVE.W  %D1,%D0        | PULL IT BACK
 3689               	* PRINT 2 HEX CHARACTERS IN D0.B
 3690 819f8 3400      	PNT2HX:  MOVE.W  %D0,%D2        | SAVE IN TEMP REG
 3691 819fa E850      	         ROXR.W  #4,%D0         | FORM UPPER NIBBLE
 3692 819fc 6102      	         BSR.S   PUTHEX         | PUT ASCII INTO PRINT BUFFER
 3693 819fe 3002      	         MOVE.W  %D2,%D0        | GET BACK FROM TEMP
 3694               	* CONVERT D0.NIBBLE TO HEX & PUT IT IN PRINT BUFFER
 3695               	*
 3696 81a00 0200 000F 	PUTHEX:  ANDI.B  #0x0F,%D0      | SAVE LOWER NIBBLE
 3697 81a04 0000 0030 	         ORI.B   #0x30,%D0      | CONVERT TO ASCII
 3698 81a08 0C00 0039 	         CMPI.B  #0x39,%D0      | SEE IF IT IS>9
 3699 81a0c 6F02      	         BLE.S   SAVHEX
 3700 81a0e 5E40      	         ADD     #7,%D0         | ADD TO MAKE 10=>A
 3701 81a10 1CC0      	SAVHEX:  MOVE.B  %D0,(%A6)+     | PUT IT IN PRINT BUFFER
 3702 81a12 4E75      	         RTS
 3703               	
 3704               	* FORMAT RELATIVE ADDRESS  AAAAAA+Rn
 3705               	*        ENTER     %D0 = VALUE
 3706               	*                  %A6 = STORE POINTER
 3707               	*
 3708 81a14 48E7 4780 	FRELADDR:MOVEM.L %D1/%D5-%D7/%A0,-(%A7)
 3709 81a18 41F8 044C 	         LEA     OFFSET,%A0
 3710 81a1c 7EFF      	         MOVEQ   #-1,%D7        | D7 = DIFF. BEST FIT
 3711 81a1e 4286      	         CLR.L   %D6            | D6 = OFFSET POSITION
 3712               	
 3713 81a20 2200      	FREL10:  MOVE.L  %D0,%D1
 3714 81a22 4A90      	         TST.L   (%A0)
 3715 81a24 670C      	         BEQ.S   FREL15         | ZERO OFFSET
 3716 81a26 9290      	         SUB.L   (%A0),%D1      | D1 = DIFF.
 3717 81a28 6B08      	         BMI.S   FREL15         | NO FIT
 3718               	
 3719 81a2a B287      	         CMP.L   %D7,%D1
 3720 81a2c 6404      	         BCC.S   FREL15         | OLD FIT BETTER
 3721               	
68K GAS  tutor13.s 			page 71


 3722 81a2e 2E01      	         MOVE.L  %D1,%D7        | D7 = NEW BEST FIT
 3723 81a30 2A06      	         MOVE.L  %D6,%D5        | D5 = POSITION
 3724               	
 3725 81a32 5888      	FREL15:  ADDQ.L  #4,%A0
 3726 81a34 5286      	         ADDQ.L  #1,%D6
 3727 81a36 0C46 0008 	         CMPI.W  #8,%D6
 3728 81a3a 66E4      	         BNE.S   FREL10         | MORE OFFSETS TO CHECK
 3729               	
 3730 81a3c 4A87      	         TST.L   %D7
 3731 81a3e 6B1C      	         BMI.S   FREL25         | NO FIT
 3732 81a40 4A46      	         TST     %D6
 3733 81a42 6606      	         BNE.S   FREL20
 3734 81a44 4AB8 044C 	         TST.L   OFFSET
 3735 81a48 6712      	         BEQ.S   FREL25         | R0 = 000000; NO FIT
 3736               	
 3737 81a4a 2007      	FREL20:  MOVE.L  %D7,%D0
 3738 81a4c 619C      	         BSR.S   PNT6HX         | FORMAT OFFSET
 3739 81a4e 1CFC 002B 	         MOVE.B  #'+',(%A6)+    | +
 3740 81a52 1CFC 0052 	         MOVE.B  #'R',(%A6)+    | R
 3741 81a56 0605 0030 	         ADDI.B  #'0',%D5       | MAKE ASCII
 3742 81a5a 600A      	         BRA.S   FREL30
 3743               	
 3744 81a5c 618C      	FREL25:  BSR.S   PNT6HX         | FORMAT ADDRESS AS IS
 3745 81a5e 1A3C 0020 	         MOVE.B  #BLANK,%D5
 3746 81a62 1CC5      	         MOVE.B  %D5,(%A6)+     | THREE SPACES FOR ALIGNMENT
 3747 81a64 1CC5      	         MOVE.B  %D5,(%A6)+
 3748 81a66 1CC5      	FREL30:  MOVE.B  %D5,(%A6)+
 3749               	
 3750 81a68 4CDF 01E2 	         MOVEM.L (%A7)+,%D1/%D5-%D7/%A0
 3751 81a6c 4E75      	         RTS
 3752               	
 3753               	*
 3754               	*
 3755               	*   PRINT HEX (ZERO SURPRESS)
 3756               	*
 3757 81a6e 4284      	PNTZHX:  CLR.L   %D4            | IS ZERO WHEN SURPRESSING
 3758 81a70 2200      	         MOVE.L  %D0,%D1        | SAVE IN TEMP
 3759 81a72 6738      	         BEQ.S   PNTZ81         | IF ZERO
 3760 81a74 6A08      	         BPL.S   PNTZ0
 3761 81a76 4481      	         NEG.L   %D1            | CHANGE TO POSITIVE VALUE
 3762 81a78 6B32      	         BMI.S   PNTZ81         | WATCH OUT SPECIAL CASE $80000000
 3763 81a7a 1CFC 002D 	         MOVE.B  #'-',(%A6)+    | PUT SIGN INTO BUFFER
 3764 81a7e 7408      	PNTZ0:   MOVEQ   #8,%D2         | 8 POSSIBLE CHARACTERS
 3765 81a80 2001      	PNTZ1:   MOVE.L  %D1,%D0        | UNSAVE IT
 3766 81a82 2602      	         MOVE.L  %D2,%D3        | COUNT DOWN FROM HERE
 3767 81a84 5383      	         SUBQ.L  #1,%D3         | BACK OFF ONE
 3768 81a86 670C      	         BEQ.S   PNTZ4          | IF NO ROTATE SKIP THIS
 3769 81a88 E880      	PNTZ2:   ASR.L   #4,%D0         | ROTATE LRIGHT
 3770 81a8a 0280 0FFF 	         ANDI.L  #0xFFFFFFF,%D0 | CLEAR TOP NIBBLE
 3770      FFFF 
 3771 81a90 5383      	         SUBQ.L  #1,%D3
 3772 81a92 66F4      	         BNE.S   PNTZ2
 3773 81a94 0200 000F 	PNTZ4:   ANDI.B  #0xF,%D0       | SAVE ONLY NIBBLE
 3774 81a98 6604      	         BNE.S   PNTZ3
 3775 81a9a 4A04      	         TST.B   %D4            | SEE IF STILL SURPRESSING
 3776 81a9c 6706      	         BEQ.S   PNTZ8
 3777 81a9e 6100 FF60 	PNTZ3:   BSR     PUTHEX         | PUT A HEX CHAR IN BUFFER
68K GAS  tutor13.s 			page 72


 3778 81aa2 1800      	         MOVE.B  %D0,%D4        | MARK AS NON-SURPRESSING MODE
 3779 81aa4 5382      	PNTZ8:   SUBQ.L  #1,%D2         | DO ANOTHER CHAR
 3780 81aa6 66D8      	         BNE.S   PNTZ1
 3781 81aa8 4A04      	         TST.B   %D4            | SEE IF ANYTHING PRINTED
 3782 81aaa 6604      	         BNE.S   PNTZ9
 3783 81aac 1CFC 0030 	PNTZ81:  MOVE.B  #'0',(%A6)+    | MOVE AT LEAST ONE ZERO
 3784 81ab0 4E75      	PNTZ9:   RTS
 3785               	
 3786               	* FIND NEXT FIELD... (%A5) POINTS TO FIELD, (%A0) NULL FIELD RETURN
 3787               	*   *-*-WARNING-*-* IF (%A0) RETURN IS USED;  RETURN MUST BE AT
 3788               	*                   SAME SUBROUTINE LEVEL OR STACK GETS SCREWED UP
 3789               	*
 3790               	*  SKIP LEADING SPACES
 3791               	*  TERMINATE NULL FIELD ON COMA ,SEMICOLEN OR A5=A6
 3792               	
 3793 81ab2 528D      	FNEXTF1: ADDQ.L  #1,%A5
 3794               	
 3795 81ab4 1015      	FNEXTF:  MOVE.B  (%A5),%D0      | ENTRY POINT
 3796 81ab6 BBCE      	         CMP.L   %A6,%A5
 3797 81ab8 6414      	         BCC.S   FNEXTF7        | AT END OF BUFFER
 3798 81aba 0C00 0020 	         CMPI.B  #BLANK,%D0
 3799 81abe 67F2      	         BEQ.S   FNEXTF1        | SPACE
 3800               	
 3801 81ac0 0C00 002C 	         CMPI.B  #',',%D0
 3802 81ac4 6708      	         BEQ.S   FNEXTF7        | COMMA - NULL FIELD
 3803 81ac6 0C00 003B 	         CMPI.B  #';',%D0
 3804 81aca 6702      	         BEQ.S   FNEXTF7        | SEMICOLON - NULL FIELD
 3805 81acc 4E75      	         RTS                    | NORMAL FOUND FIELD RETURN
 3806               	
 3807 81ace 588F      	FNEXTF7: ADDQ.L  #4,%A7         | TRIM STACK
 3808 81ad0 4ED0      	         JMP     (%A0)          | NULL FIELD RETURN
 3809               	
 3810               	**************************************************************
 3811               	* THIS ROUTINE MAKES SURE YOU ARE ON THE CORRECT BOUNDRY.    *
 3812               	*  %D0 = ARGUMENT...   CHECKS ADDRESS AND WORD ALIGNMENTS.   *
 3813               	**************************************************************
 3814               	
 3815 81ad2 E298      	CKWADR:  ROR.L   #1,%D0
 3816 81ad4 E398      	         ROL.L   #1,%D0
 3817 81ad6 6508      	         BCS.S   CKADR39        | NOT WORD ALIGNED
 3818               	
 3819 81ad8 0C80 0100 	CKADDR:  CMPI.L  #0x1000000,%D0 | VALID ADDRESS?
 3819      0000 
 3820 81ade 6514      	         BCS.S   CKADR99        | GOOD ADDRESS
 3821               	
 3822 81ae0 4BFA 0014 	CKADR39: LEA     MSG018(%PC),%A5
 3823 81ae4 6100 E60C 	         BSR     FIXDATA
 3824 81ae8 6100 FEF8 	         BSR     PNT8HX
 3825 81aec 6100 0142 	         BSR     OUT1CR
 3826 81af0 6000 E740 	         BRA     MACSBUG
 3827               	
 3828 81af4 4E75      	CKADR99: RTS
 3829               	
 3830 81af6 494E 5641 	MSG018:  .ascii  "INVALID ADDRESS="
 3830      4C49 4420 
 3830      4144 4452 
 3830      4553 533D 
68K GAS  tutor13.s 			page 73


 3831 81b06 04        	         DC.B    EOT
 3832               	
 3833 81b07 00        	         DC.B    0              | PAD BYTE
 3834               	         .align  2
 3835               	
 3836               	* EVALUATE EXPRESSION
 3837               	*  NUMBER PLUS OR MINUS NUMBER....
 3838               	*
 3839 81b08 2F07      	GETEXP:  MOVE.L  %D7,-(%A7)     | SAVE D7
 3840 81b0a 4287      	         CLR.L   %D7
 3841 81b0c 6128      	GETEXP21:BSR.S   GETNUMA        | GET NUMBER
 3842 81b0e DE80      	         ADD.L   %D0,%D7        | D7 = NUMBER BEING BUILT
 3843 81b10 121D      	GETEXP15:MOVE.B  (%A5)+,%D1     | D1 = TERMINATING CHAR
 3844 81b12 4280      	         CLR.L   %D0            | D0 = NEXT NUMBER (=0 1ST TIME)
 3845 81b14 0C01 002B 	         CMPI.B  #'+',%D1
 3846 81b18 67F2      	         BEQ.S   GETEXP21       | PLUS
 3847 81b1a 0C01 002D 	         CMPI.B  #'-',%D1
 3848 81b1e 6606      	         BNE.S   GETEXP39       | NOT MINUS
 3849 81b20 6114      	         BSR.S   GETNUMA        | GET NEXT NUMBER
 3850 81b22 9E80      	         SUB.L   %D0,%D7
 3851 81b24 60EA      	         BRA.S   GETEXP15
 3852               	
 3853 81b26 2007      	GETEXP39:MOVE.L  %D7,%D0        | D0 = VALUE BUILT
 3854 81b28 538D      	         SUBQ.L  #1,%A5         | A5 = CHAR AFTER EXPRESSION
 3855 81b2a 2E1F      	         MOVE.L  (%A7)+,%D7     | RESTORE D7
 3856 81b2c 4E75      	         RTS
 3857               	
 3858               	*   ROUTINES TO CONVERT STRING TO BINARY VALUE
 3859               	*
 3860               	*        ACCEPTS PREFIXES:
 3861               	*         % binary
 3862               	*         @ octal
 3863               	*         & decimal
 3864               	*         $ hex
 3865               	*
 3866 81b2e 610A      	GETNUMD: BSR.S   GETDECNU       | GET DECIMAL NUMBER
 3867 81b30 6600 E57E 	GETNUMD9:BNE     ERROR
 3868 81b34 4E75      	         RTS
 3869               	
 3870 81b36 610A      	GETNUMA: BSR.S   GETHEXNU       | GET HEX NUMBER
 3871 81b38 60F6      	         BRA.S   GETNUMD9
 3872               	
 3873 81b3a 48E7 7C80 	GETDECNU:MOVEM.L %D1-%D5/%A0,-(%A7) | DECODE AS A DECIMAL NUMBER
 3874 81b3e 760A      	         MOVEQ   #10,%D3        | D3 = BASE (DECIMAL)
 3875 81b40 6006      	         BRA.S   GETN20
 3876               	
 3877 81b42 48E7 7C80 	GETHEXNU:MOVEM.L %D1-%D5/%A0,-(%A7) | DECODE AS A HEX NUMBER
 3878 81b46 7610      	         MOVEQ   #16,%D3        | D3 = BASE
 3879               	
 3880 81b48 4244      	GETN20:  CLR.W   %D4            | D4 = FLAG FOR CHARACTER HIT
 3881 81b4a 4281      	         CLR.L   %D1            | D1 = TEMP RESULTS
 3882 81b4c 0C15 0020 	         CMPI.B  #BLANK,(%A5)
 3883 81b50 6778      	         BEQ.S   GETN80         | FIRST CHAR SPACE; ERROR
 3884               	
 3885 81b52 BBCE      	GETN30:  CMP.L   %A6,%A5        | SEE IF AT END OF BUFFER
 3886 81b54 677A      	         BEQ.S   GETN90
 3887 81b56 4280      	         CLR.L   %D0
68K GAS  tutor13.s 			page 74


 3888 81b58 101D      	         MOVE.B  (%A5)+,%D0     | D0 = CHARACTER
 3889               	
 3890 81b5a 41FA 007E 	         LEA     GETNDATA(%PC),%A0 | POINTER TO TERMINATE CHARS
 3891 81b5e 1A18      	GETN40:  MOVE.B  (%A0)+,%D5     | D5 = TERMINATION CHAR
 3892 81b60 6706      	         BEQ.S   GETN50         | NOT TERM.CHAR
 3893 81b62 B005      	         CMP.B   %D5,%D0
 3894 81b64 6768      	         BEQ.S   GETN85         | FOUND TERMINATION CHAR; EXIT
 3895 81b66 60F6      	         BRA.S   GETN40
 3896               	
 3897 81b68 0C00 0025 	GETN50:  CMPI.B  #'%',%D0       | SEE IF FLAGGED AS BINARY
 3898 81b6c 660A      	         BNE.S   GETN60
 3899 81b6e 7602      	         MOVEQ   #2,%D3         | BASE IS BINARY
 3900 81b70 4A44      	GETN55:  TST.W   %D4            | ANYTHING ENTERED
 3901 81b72 6656      	         BNE.S   GETN80         | CONFLICT
 3902               	
 3903 81b74 78FF      	GETN57:  MOVEQ   #-1,%D4        | SET DATA ENTERED FLAG
 3904 81b76 60DA      	         BRA.S   GETN30
 3905               	
 3906 81b78 0C00 0040 	GETN60:  CMPI.B  #'@',%D0       | SEE IF FLAGGED AS OCTAL
 3907 81b7c 6604      	         BNE.S   GETN65
 3908 81b7e 7608      	         MOVEQ   #8,%D3         | BASE IS OCTAL
 3909 81b80 60EE      	         BRA.S   GETN55
 3910               	
 3911 81b82 0C00 0026 	GETN65:  CMPI.B  #'&',%D0       | SEE IF FLAGGED AS DECIMAL
 3912 81b86 6604      	         BNE.S   GETN70
 3913 81b88 760A      	         MOVEQ   #10,%D3        | BASE IS DECIMAL
 3914 81b8a 60E4      	         BRA.S   GETN55
 3915               	
 3916 81b8c 0C00 0024 	GETN70:  CMPI.B  #'$',%D0       | SEE IF FLAGGED AS HEX
 3917 81b90 6604      	         BNE.S   GETN75
 3918 81b92 7610      	         MOVEQ   #16,%D3        | BASE IS 16
 3919 81b94 60DA      	         BRA.S   GETN55
 3920               	
 3921 81b96 0400 0030 	GETN75:  SUBI.B  #0x30,%D0
 3922 81b9a 6D2E      	         BLT.S   GETN80         | LESS THAN ZERO
 3923 81b9c 0C00 0009 	         CMPI.B  #9,%D0
 3924 81ba0 6F0E      	         BLE.S   GETN77         | VALUE 0 - 9
 3925 81ba2 0C00 0011 	         CMPI.B  #0x11,%D0
 3926 81ba6 6D22      	         BLT.S   GETN80         | LESS THAN A
 3927 81ba8 0C00 0016 	         CMPI.B  #0x16,%D0
 3928 81bac 6E1C      	         BGT.S   GETN80         | GREATER THAN F
 3929 81bae 5F00      	         SUBQ.B  #7,%D0         | MAKE BINARY
 3930               	
 3931 81bb0 B043      	GETN77:  CMP.W   %D3,%D0        | IS INPUT LARGER THAN BASE
 3932 81bb2 6416      	         BCC.S   GETN80         | LARGER THAN BASE
 3933 81bb4 2401      	         MOVE.L  %D1,%D2        | GET READY TO MULTIPLY D1*BASE
 3934 81bb6 4841      	         SWAP    %D1
 3935 81bb8 C2C3      	         MULU    %D3,%D1        | TOP PART
 3936 81bba 4841      	         SWAP    %D1
 3937 81bbc 4A41      	         TST.W   %D1            | CHECK FOR OVERFLOW
 3938 81bbe 660A      	         BNE.S   GETN80         | VALUE IS TOO LARGE
 3939 81bc0 C4C3      	         MULU    %D3,%D2        | NOW WORK ON LOW WORD
 3940 81bc2 D282      	         ADD.L   %D2,%D1        | PUT IT BACK TOGETHER
 3941 81bc4 6904      	         BVS.S   GETN80         | OVERFLOW?
 3942 81bc6 D280      	         ADD.L   %D0,%D1        | ADD IN NEW STUFF
 3943 81bc8 68AA      	         BVC.S   GETN57
 3944 81bca 70FF      	GETN80:  MOVEQ   #-1,%D0        | ERROR RETURN (BNE)
68K GAS  tutor13.s 			page 75


 3945 81bcc 6006      	         BRA.S   GETN95
 3946               	
 3947 81bce 538D      	GETN85:  SUBQ.L  #1,%A5         | BACK UP TO POINT AT SPACE/PREVIOUS CHAR
 3948 81bd0 2001      	GETN90:  MOVE.L  %D1,%D0        | SET UP RESULT FOR RETURN
 3949 81bd2 4281      	         CLR.L   %D1            | NORMAL RETURN (BEQ)
 3950 81bd4 4CDF 013E 	GETN95:  MOVEM.L (%A7)+,%D1-%D5/%A0 | RESTORE SOME REGISTERS
 3951 81bd8 4E75      	         RTS
 3952               	
 3953 81bda 2028 2B2C 	GETNDATA:.ascii  " (+,-.:;=^]"
 3953      2D2E 3A3B 
 3953      3D5E 5D
 3954 81be5 00        	         DC.B    0              | TERMINATE CHARS
 3955               	
 3956               	*
 3957               	*  ***GETHEX***  GET HEX (BINARY VALUE FROM ASCII)
 3958               	*   D0.B HAS ASCII CHAR  RETURNS $0-$F BINARY
 3959               	*
 3960 81be6 0C00 0030 	GETHEX:CMPI.B    #0x30,%D0      | IS IT LESS THAN ZERO
 3961 81bea 6D1C      	       BLT.S     PNMSG011
 3962 81bec 0C00 0039 	       CMPI.B    #0x39,%D0      | IS IT GREATER THAN 9
 3963 81bf0 6F0E      	       BLE.S     GTHX2          | GOOD HEX
 3964               	
 3965 81bf2 0C00 0041 	       CMPI.B    #0x41,%D0      | IS IT LESS THAN "A"
 3966 81bf6 6D10      	       BLT.S     PNMSG011
 3967 81bf8 0C00 0046 	       CMPI.B    #0x46,%D0      | IS IT GT "F"
 3968 81bfc 6E0A      	       BGT.S     PNMSG011
 3969 81bfe 5F00      	       SUBQ.B    #7,%D0         | MAKE IT SMALLER A=10
 3970 81c00 0280 0000 	GTHX2: ANDI.L    #0xF,%D0
 3970      000F 
 3971 81c06 4E75      	       RTS
 3972               	
 3973 81c08 6100 00CC 	PNMSG011:BSR     FIXBUF         | PRINT NOT A HEX DIGIT
 3974 81c0c 1CC0      	         MOVE.B  %D0,(%A6)+     | PUT IN OFFENDING CHAR
 3975 81c0e 4BFA 000A 	         LEA     MSG011(%PC),%A5 | "  IS NOT A HEX DIGIT"
 3976 81c12 6100 E4E2 	         BSR     FIXDADD
 3977 81c16 6000 E490 	         BRA     MSG            | GO PRINT IT AND ENTER MACSBUG
 3978               	
 3979 81c1a 2020 4953 	MSG011:  .ascii  "  IS NOT A HEX DIGIT"
 3979      204E 4F54 
 3979      2041 2048 
 3979      4558 2044 
 3979      4947 4954 
 3980 81c2e 04        	         DC.B    EOT
 3981               	
 3982 81c2f 00        	         DC.B    0              | PAD BYTE
 3983               	         .align  2
 3984               	
 3985               	*-------------------------------------------------------------------------
 3986               	* File X         COMMON I/O                                       05/17/82
 3987               	
 3988               	******************************
 3989               	*
 3990               	*    SEND LINE TO PORT1 WITH CR/LF
 3991               	*
 3992 81c30 1CFC 000D 	OUT1CR:  MOVE.B  #CR,(%A6)+
 3993 81c34 1CFC 000A 	         MOVE.B  #LF,(%A6)+
 3994 81c38 4AB8 061C 	         TST.L   OUTTO          | SEE IF ALTERNATE ADDRESS
68K GAS  tutor13.s 			page 76


 3995 81c3c 6706      	         BEQ.S   OUT1CRX
 3996 81c3e 2F38 061C 	         MOVE.L  OUTTO,-(%A7)   | PUSH ON STACK
 3997 81c42 4E75      	         RTS                    | GO DO IT
 3998               	
 3999 81c44 2F38 0630 	OUT1CRX: MOVE.L  OUTPORT1,-(%A7) | GO TO I/O ADDRESS
 4000 81c48 4E75      	         RTS                    | (THIS NORMALLY GOES TO OUT1CR0)
 4001               	*
 4002               	OUT1CR0: .align  2
 4003               	*
 4004               	*    OUTPUT BUFFER TO PORT1
 4005               	*
 4006 81c4a 48E7 F0C0 	OUTPUT:  MOVEM.L %D0-%D3/%A0-%A1,-(%A7) | GET SOME WORKING ROOM
 4007 81c4e 4283      	         CLR.L   %D3            | D3 = NO OFFSET INTO NULL CHARACTERS
 4008 81c50 6160      	         BSR.S   GETSER1        | A0 = GET SERIAL PORT 1 ADDRESS
 4009 81c52 601E      	         BRA.S   OUTP2
 4010               	*
 4011               	*    SEND LINE TO PORT2 WITH CR
 4012               	*
 4013 81c54 1CFC 000D 	OUTPUT2: MOVE.B  #0xD,(%A6)+    | TACK ON A "CR"
 4014 81c58 4AB8 061C 	         TST.L   OUTTO          | SEE IF ALTERNATE ADDRESS
 4015 81c5c 6706      	         BEQ.S   OUTPUT2X
 4016 81c5e 2F38 061C 	         MOVE.L  OUTTO,-(%A7)   | PUSH ON STACK
 4017 81c62 4E75      	         RTS                    | GO DO IT
 4018               	
 4019 81c64 2F38 0638 	OUTPUT2X:MOVE.L  OUTPORT2,-(%A7) | GO TO IO ROUTINE
 4020 81c68 4E75      	         RTS                    | (THIS NORMALLY GOES TO OUTPUT20)
 4021               	*
 4022               	OUTPUT20:.align  2
 4023               	*
 4024               	*     OUTPUT BUFFER TO PORT2
 4025               	*
 4026 81c6a 48E7 F0C0 	OUTPUT21:MOVEM.L %D0-%D3/%A0-%A1,-(%A7)
 4027 81c6e 7601      	         MOVEQ   #1,%D3         | SIGNAL FOR PORT2
 4028 81c70 6152      	         BSR.S   GETSER2        | RETURNS SERIAL PORT 2 BASE ADDRESS IN A0
 4029               	*
 4030               	*   SEND BUFFER TO PORT
 4031               	*
 4032 81c72 BBCE      	OUTP2:   CMP.L   %A6,%A5        | SEE IF AT OR BEYOND END OF LINE
 4033 81c74 6506      	         BCS.S   OUTP3          | NO... KEEP GOING, ELSE
 4034 81c76 4CDF 030F 	         MOVEM.L (%A7)+,%D0-%D3/%A0-%A1 | RESTORE REGISTERS
 4035 81c7a 4E75      	         RTS                    | END OF ROUTINE
 4036               	
 4037 81c7c 101D      	OUTP3:   MOVE.B  (%A5)+,%D0     | GRAB BYTE TO OUTPUT
 4038 81c7e 6102      	         BSR.S   OUTCH1         | GO PRINT IT
 4039 81c80 60F0      	         BRA.S   OUTP2          | GO DO ANOTHER
 4040               	
 4041               	*   SEND CHARACTER IN D0.B TO PORT1
 4042               	*   WHOSE BASE ADDRESS IS IN A0
 4043               	*   D3=0 FOR PORT1  D3=1 FOR PORT2
 4044               	*   PUTS IN NULL PADDING AS NEEDED
 4045               	*
 4046 81c82 6100 01D6 	OUTCH1:  BSR     OUTCH          | GO PRINT D0
 4047 81c86 4A00      	         TST.B   %D0            | SEE IF NULL
 4048 81c88 6726      	         BEQ.S   OUTCHRTS       | JUST END IF NULL
 4049 81c8a 4282      	         CLR.L   %D2            | CLEAR UPPER BYTES OF NULL LOOP COUNTER
 4050 81c8c 43F8 0618 	         LEA     NULLPADS,%A1   | FORM ADDRESS OF PADS
 4051 81c90 D3C3      	         ADD.L   %D3,%A1        | D3=0 FOR PORT1 1=PORT2
68K GAS  tutor13.s 			page 77


 4052 81c92 1411      	         MOVE.B  (%A1),%D2      | DEFAULT NULL PADS
 4053 81c94 0C00 000D 	         CMPI.B  #0xD,%D0       | SEE IF CR
 4054 81c98 6608      	         BNE.S   OUTCH2
 4055 81c9a 43F8 061A 	         LEA     CRPADS,%A1     | FORM ADDRESS OF CR PADS
 4056 81c9e D3C3      	         ADD.L   %D3,%A1        | D3=0 FOR PORT1  1=PORT2
 4057 81ca0 1411      	         MOVE.B  (%A1),%D2      | NULLS AFTER CR
 4058 81ca2 4A82      	OUTCH2:  TST.L   %D2            | SEE IF ANY PADDS TO BE SEND
 4059 81ca4 670A      	         BEQ.S   OUTCHRTS       | 0=NONE
 4060 81ca6 4280      	         CLR.L   %D0            | 0=NULL CHAR TO BE SEND
 4061 81ca8 6100 01B0 	OUTCH3:  BSR     OUTCH          | SEND A NULL
 4062 81cac 5382      	         SUBQ.L  #1,%D2         | LOOP AROUND
 4063 81cae 66F8      	         BNE.S   OUTCH3
 4064 81cb0 4E75      	OUTCHRTS:RTS                    | END OF OUTCH ROUTINE
 4065               	
 4066               	*
 4067               	*   GET BASE ADDRESS OF SERIAL PORT 1 IN  A0
 4068               	*
 4069               	
 4070 81cb2 41F9 00F0 	GETSER1: LEA     SER1,%A0       | DEFAULT
 4070      0040 
 4071               	         ALTSER1 = 0x0624
 4072 81cb8 4AB8 0624 	         TST.L   ALTSER1        | IF ALTERNATE IS ZERO
 4073 81cbc 6704      	         BEQ.S   RETURN         | THEN RETURN
 4074 81cbe 2078 0624 	         MOVE.L  ALTSER1,%A0    | ELSE USE ALTERNATE SERIAL PORT 1
 4075 81cc2 4E75      	RETURN:  RTS                    | RETURN (USED FROM A COUPLE OF PLACES)
 4076               	
 4077               	*
 4078               	*   GET BASE ADDRESS OF SERIAL PORT 2 IN A0
 4079               	*
 4080               	
 4081 81cc4 41F9 00F0 	GETSER2: LEA     SER2,%A0       | DEFAULT SERIAL PORT 2
 4081      0041 
 4082               	         ALTSER2 = 0x0628
 4083 81cca 4AB8 0628 	         TST.L   ALTSER2        | IF ALTERNATE IS ZERO
 4084 81cce 67F2      	         BEQ.S   RETURN         | THEN RETURN
 4085 81cd0 2078 0628 	         MOVE.L  ALTSER2,%A0    | ELSE USE ALTERNATE SERIAL PORT 2
 4086 81cd4 4E75      	         RTS                    | RETURN
 4087               	*
 4088               	*     FIX THE BUFFER %A5 & %A6 SET TO START OF BUFFER QUE
 4089               	*
 4090 81cd6 4BF8 0540 	FIXBUF:  LEA     BUFFER,%A5
 4091 81cda 2C4D      	         MOVE.L  %A5,%A6
 4092 81cdc 4E75      	         RTS
 4093               	
 4094               	*   INPUT A LINE FROM PORT1
 4095               	*
 4096 81cde 4AB8 0620 	PORTIN1: TST.L   INFROM         | SEE IF ALTERNAME ADDRESS
 4097 81ce2 6706      	         BEQ.S   PORTIN1X
 4098 81ce4 2F38 0620 	         MOVE.L  INFROM,-(%A7)  | PUSH ON STACK
 4099 81ce8 4E75      	         RTS                    | GO DO IT
 4100 81cea 2F38 062C 	PORTIN1X:MOVE.L  INPORT1,-(%A7) | GO TO IO ROUTINE
 4101 81cee 4E75      	         RTS                    | NORMALLY GOES TO PORTIN10
 4102               	
 4103 81cf0 48E7 F9E0 	PORTIN1N:MOVEM.L %D0-%D4/%D7/%A0-%A2,-(%A7)
 4104 81cf4 4A38 04E8 	         TST.B   XONOFF+2
 4105 81cf8 6608      	         BNE.S   PORTIN1V       | OVERRIDE "No Auto Line Feed"
 4106 81cfa 7E01      	         MOVEQ   #1,%D7         | "No Auto Line Feed" Entry point
68K GAS  tutor13.s 			page 78


 4107 81cfc 6006      	         BRA.S   PORTIN1W
 4108               	
 4109               	* ENTRY ALSO POSSIBLE FROM:  PORTIN2
 4110 81cfe 48E7 F9E0 	PORTIN10:MOVEM.L %D0-%D4/%D7/%A0-%A2,-(%A7)
 4111 81d02 4287      	PORTIN1V:CLR.L   %D7            | "Auto Line Feed" Entry point.
 4112 81d04 4283      	PORTIN1W:CLR.L   %D3            | FLAG AS PORT1
 4113 81d06 61AA      	         BSR.S   GETSER1        | MOVE ADDRESS INTO A0
 4114               	
 4115 81d08 6100 02DC 	READBUF: BSR     INCHNE         | GO GET SOME DATA  (NO ECHO)
 4116 81d0c 4A00      	         TST.B   %D0            | CHECK FOR NULLS
 4117 81d0e 67F8      	         BEQ.S   READBUF
 4118 81d10 3800      	         MOVE.W  %D0,%D4        | SAVE FOR A WHILE
 4119 81d12 6100 FF6E 	         BSR     OUTCH1         | ECHO WHAT IS IN D0
 4120 81d16 3004      	         MOVE.W  %D4,%D0        | RESTORE IT
 4121 81d18 0C00 000A 	         CMPI.B  #LF,%D0        | SEE IF LINE FEED
 4122 81d1c 67EA      	         BEQ.S   READBUF        | DONT PUT IT IN BUFFER
 4123               	
 4124 81d1e 0C00 0018 	         CMPI.B  #CTLX,%D0      | SEE IF CTRL-X "CANCEL LINE"
 4125 81d22 6610      	         BNE.S   CHKCTLH        | No... Then go check for backspace
 4126 81d24 700D      	         MOVEQ   #CR,%D0        | Yes.. 1) Send a carriage return
 4127 81d26 6100 FF5A 	         BSR     OUTCH1
 4128 81d2a 700A      	         MOVEQ   #LF,%D0        |       2) Send a line feed
 4129 81d2c 6100 FF54 	         BSR     OUTCH1
 4130 81d30 2C4D      	         MOVE.L  %A5,%A6        |       3) Set BUFFER at start again
 4131 81d32 60D4      	         BRA.S   READBUF        |       4) Restart this routine
 4132               	
 4133 81d34 0C00 0008 	CHKCTLH: CMPI.B  #CTLH,%D0      | CTRL-H? (Backspace)
 4134 81d38 6714      	         BEQ.S   BS4CTLH        | Yes...  Go backspace 1 character
 4135 81d3a 0C00 007F 	         CMPI.B  #DEL,%D0       | DEL?    (Also a Backspace)
 4136 81d3e 6624      	         BNE.S   CHKCTLD        | No....  Then go check for CTRL D
 4137 81d40 BDCD      	BKSPACE: CMP.L   %A5,%A6        | Yes...  Usually need an extra "Backspace"
 4138 81d42 67C4      	         BEQ.S   READBUF        | If at start of buffer, don"t back up any more.
 4139 81d44 103C 0008 	         MOVE.B  #CTLH,%D0      | Backspace cursor.
 4140 81d48 6100 FF38 	         BSR     OUTCH1
 4141 81d4c 6004      	         BRA.S   BLANKIT        | Bypass check for start of buffer
 4142               	
 4143               	BS4CTLH: .align  2              | CTL-H already backed up 1 character.
 4144 81d4e BDCD      	         CMP.L   %A5,%A6        | At beginning of buffer?
 4145 81d50 67B6      	         BEQ.S   READBUF        | Yes...  Then don"t back up any more.
 4146 81d52 7020      	BLANKIT: MOVEQ   #0x20,%D0      | Now blank out previous character.
 4147 81d54 6100 FF2C 	         BSR     OUTCH1
 4148 81d58 1026      	         MOVE.B  -(%A6),%D0     | Remove last character from buffer.
 4149 81d5a 103C 0008 	         MOVE.B  #CTLH,%D0      | Backup cursor again.
 4150 81d5e 6100 FF22 	         BSR     OUTCH1
 4151 81d62 60A4      	         BRA.S   READBUF        | Go get next character.
 4152               	
 4153 81d64 0C00 0004 	CHKCTLD: CMPI.B  #CTLD,%D0      | CTL D?  (REPRINT)
 4154 81d68 6626      	         BNE.S   CHKCR          | No....  Then go check if a "CR".
 4155 81d6a 700D      	         MOVEQ   #CR,%D0        |  Yes...  Print "CR"
 4156 81d6c 6100 FF14 	         BSR     OUTCH1
 4157 81d70 700A      	         MOVEQ   #LF,%D0        | Print "LF"
 4158 81d72 6100 FF0E 	         BSR     OUTCH1
 4159 81d76 2F0D      	         MOVE.L  %A5,-(%A7)     | SAVE ON STACK FOR A MOMENT
 4160 81d78 6100 FED0 	         BSR     OUTPUT         | GO PRINT BUFFER
 4161 81d7c 2A5F      	         MOVE.L  (%A7)+,%A5     | GET BACK FROM STACK
 4162 81d7e 6088      	         BRA.S   READBUF
 4163               	
68K GAS  tutor13.s 			page 79


 4164 81d80 1CC0      	CHARSAVE:MOVE.B  %D0,(%A6)+     | SAVE DATA INTO BUFFER
 4165 81d82 220E      	         MOVE.L  %A6,%D1        | CALCULATE ROOM USED
 4166 81d84 928D      	         SUB.L   %A5,%D1        | DONT USE MORE THAN "BUFFSIZE"
 4167 81d86 0C41 0080 	         CMPI.W  #BUFFSIZE,%D1
 4168 81d8a 6B00 FF7C 	         BMI     READBUF        | We're OK, go get next character.
 4169 81d8e 60B0      	         BRA.S   BKSPACE        | If not, handle as though a "CNTL-H"
 4170               	
 4171 81d90 0C00 000D 	CHKCR:   CMPI.B  #CR,%D0        | CR?  (End of command line).
 4172 81d94 66EA      	         BNE.S   CHARSAVE       | No.. Then go store this character.
 4173               	
 4174 81d96 4A07      	         TST.B   %D7            | Check "Auto Line Feed" switch
 4175 81d98 6606      	         BNE.S   NOAUTOLF       | Yes.. Bypass sending Line feed.
 4176 81d9a 700A      	         MOVEQ   #LF,%D0        | No... Set one up and...
 4177 81d9c 6100 FEE4 	         BSR     OUTCH1         | Send it!
 4178               	NOAUTOLF:.align  2
 4179               	
 4180 81da0 4CDF 079F 	 MOVEM.L (%A7)+,%D0-%D4/%D7/%A0-%A2 | Restore Regs.
 4181 81da4 4E75      	         RTS                    | RETURN TO CALLER
 4182               	
 4183               	*-------------------------------------------------------------------------
 4184               	* File Y         TUTOR     I/O Routine                            05/19/82
 4185               	
 4186               	LTIME    =       205000         | LONG TIMER 5 SEC @ 8 MHZ
 4187               	STIME    =       41000          | SHORT TIMER  100 MLS @ 8 MHZ
 4188               	
 4189               	PDI1     =       0xF00000       | PARALLEL PORT ADDRESS
 4190               	PITCDDR  =       0xF00009       | PORT C DATA DIRECTION REGISTER
 4191               	PITPCDR  =       0xF00019       | PORT C DATA REGISTER
 4192               	PITTCR   =       0xF00021       | TIMER CONTROL REGISTER
 4193               	PSTATUS  =       0xB            | PRINTER STATUS
 4194               	PBDATA   =       3              | PRINTER CONTROL--BUSY,PAPER,SELECT
 4195               	PDATA    =       1              | PRINTER DATA
 4196               	SER1     =       0xF00040       | TERMINAL
 4197               	SER2     =       0xF00041       | SERIAL PORT2 ADDRESS
 4198               	
 4199               	*        PRINTER DRIVER
 4200               	*
 4201               	*    SEND BUFFER TO PRINTER
 4202               	*
 4203               	PRCRLF:  .align  2
 4204               	
 4205 81da6 48E7 0006 	         MOVEM.L %A5-%A6,-(%A7) | SAVE REGISTERS
 4206               	*
 4207               	*   SEND LINE
 4208               	*
 4209 81daa BBCE      	LIST:    CMP.L   %A6,%A5        | SEE IF AT END OF BUFFER
 4210 81dac 6B06      	         BMI.S   LIST1
 4211 81dae 4CDF 6000 	         MOVEM.L (%A7)+,%A5-%A6 | RESTORE REGISTERS
 4212 81db2 4E75      	         RTS
 4213               	*
 4214 81db4 101D      	LIST1:   MOVE.B  (%A5)+,%D0     | GRAB BYTE
 4215 81db6 6102      	         BSR.S   CHRPRINT       | PRINT CHAR
 4216 81db8 60F0      	         BRA.S   LIST
 4217               	
 4218               	* OUTPUT CHAR IN %D0 TO PRINTER
 4219 81dba 48E7 C186 	CHRPRINT:MOVEM.L %D0/%D1/%D7/%A0/%A5/%A6,-(%A7) | SAVE SOME REGISTERS
 4220 81dbe 6100 00D2 	LIST2:   BSR     CHKBRK         | CHECK FOR BREAK
68K GAS  tutor13.s 			page 80


 4221               	
 4222 81dc2 2078 064E 	         MOVE.L  PDIPORT,%A0    | A0 = ADDRESS OF PORT
 4223               	
 4224 81dc6 102F 0003 	         MOVE.B  3(%A7),%D0     | D0 = CHAR TO BE SENT
 4225               	* CHANGE CONTROL CHARS TO "."
 4226 81dca 0200 007F 	         ANDI.B  #0x7F,%D0
 4227 81dce 0C00 000D 	         CMPI.B  #CR,%D0
 4228 81dd2 6716      	         BEQ.S   LIST25         | OK CARRIAGE RETURN
 4229 81dd4 0C00 000A 	         CMPI.B  #LF,%D0
 4230 81dd8 6710      	         BEQ.S   LIST25         | OK LINE FEED
 4231 81dda 0C00 0020 	         CMPI.B  #0x20,%D0
 4232 81dde 6D06      	         BLT.S   LIST24
 4233 81de0 0C00 007F 	         CMPI.B  #0x7F,%D0
 4234 81de4 6D04      	         BLT.S   LIST25
 4235 81de6 103C 002E 	LIST24:  MOVE.B  #'.',%D0       | MAKE CHAR A PERIOD
 4236               	LIST25:  .align  2
 4237               	
 4238 81dea 1140 0001 	         MOVE.B  %D0,PDATA(%A0) | SEND DATA
 4239 81dee 13FC 0068 	         MOVE.B  #0x68,PDI1+13  | STROBE PRINTER
 4239      00F0 000D 
 4240               	
 4241 81df6 13FC 0060 	         MOVE.B  #0x60,PDI1+13
 4241      00F0 000D 
 4242               	
 4243               	*
 4244               	*
 4245 81dfe 6100 0092 	LIST3:   BSR     CHKBRK         | CHECK FOR BREAK
 4246 81e02 1028 0003 	         MOVE.B  PBDATA(%A0),%D0
 4247 81e06 0200 0003 	         ANDI.B  #3,%D0         | PAPER OUT? DESELECTED?
 4248 81e0a 5300      	         SUBQ.B  #1,%D0
 4249 81e0c 6728      	         BEQ.S   LIST5
 4250               	         CRTPNT = 0x0652
 4251 81e0e 3E38 0652 	         MOVE.W  CRTPNT,%D7
 4252 81e12 4278 0652 	         CLR.W   CRTPNT
 4253 81e16 4BFA 002C 	         LEA     MSG007(%PC),%A5
 4254 81e1a 6100 E2D6 	         BSR     FIXDATA
 4255 81e1e 6100 FE2A 	         BSR     OUTPUT
 4256               	*
 4257               	*   WAIT FOR BREAK OR PRINTER TO BE READY
 4258               	*
 4259 81e22 616E      	LERR1:   BSR.S   CHKBRK
 4260 81e24 1028 0003 	         MOVE.B  PBDATA(%A0),%D0
 4261 81e28 0200 0003 	         ANDI.B  #3,%D0
 4262 81e2c 5300      	         SUBQ.B  #1,%D0
 4263 81e2e 66F2      	         BNE.S   LERR1          | PRINTER NOT READY
 4264 81e30 31C7 0652 	         MOVE.W  %D7,CRTPNT     | RESTORE POSSIBLE "PA" SWITCH
 4265 81e34 6088      	         BRA.S   LIST2          | TRY AGAIN
 4266               	
 4267 81e36 0828 0000 	LIST5:   BTST.B  #0,PSTATUS(%A0) | ACKNOWLEDGE?
 4267      000B 
 4268 81e3c 67C0      	         BEQ.S   LIST3
 4269               	
 4270 81e3e 4CDF 6183 	         MOVEM.L (%A7)+,%D0/%D1/%D7/%A0/%A5/%A6 | RESTORE REGISTERS
 4271 81e42 4E75      	         RTS
 4272               	
 4273 81e44 0D0A      	MSG007:  DC.B    CR,LF
 4274 81e46 5052 494E 	         .ascii  "PRINTER NOT READY"
68K GAS  tutor13.s 			page 81


 4274      5445 5220 
 4274      4E4F 5420 
 4274      5245 4144 
 4274      59
 4275 81e57 0D0A 04   	         DC.B    CR,LF,EOT
 4276               	
 4277               	         .align  2
 4278               	
 4279               	*
 4280               	*       SEND CHARACTER IN D0.B TO SERIAL PORT IN (%A0) (NO NULL PADS)
 4281               	*
 4282 81e5a 6136      	OUTCH:   BSR.S   CHKBRK         | CHECK FOR BREAK
 4283 81e5c 1210      	         MOVE.B  (%A0),%D1      | READ STATUS AGAIN
 4284 81e5e 0201 0002 	         ANDI.B  #0x2,%D1       | CHECK FOR READY TO SEND
 4285 81e62 67F6      	         BEQ.S   OUTCH          | STILL NOT READY
 4286 81e64 1140 0002 	         MOVE.B  %D0,2(%A0)     | SEND CHARACTER  ****************
 4287               	
 4288               	* IF PRINT FLAG SET GOTO PRINTER
 4289 81e68 670A      	         BEQ.S   OUTCH21        | NULL; IGNORE SENDING TO PRINTER
 4290 81e6a 4A78 0652 	         TST.W   CRTPNT
 4291 81e6e 6704      	         BEQ.S   OUTCH21        | CRT ONLY
 4292 81e70 6100 FF48 	         BSR     CHRPRINT       | GOTO PRINTER
 4293               	OUTCH21: .align  2
 4294               	
 4295               	*   CHECK FOR CONTROL W
 4296 81e74 1210      	         MOVE.B  (%A0),%D1      | READ STATUS
 4297 81e76 0201 0001 	         ANDI.B  #1,%D1
 4298 81e7a 6714      	         BEQ.S   CTLW9          | CHAR NOT READY
 4299 81e7c 1228 0002 	         MOVE.B  2(%A0),%D1     | READ CHARACTER
 4300 81e80 0C01 0017 	         CMPI.B  #CTLW,%D1
 4301 81e84 660A      	         BNE.S   CTLW9          | NOT CNTL/W
 4302 81e86 610A      	CTLWH:   BSR.S   CHKBRK         | CHECK FOR BREAK
 4303 81e88 1210      	         MOVE.B  (%A0),%D1      | READ STATUS
 4304 81e8a 0201 0001 	         ANDI.B  #1,%D1
 4305 81e8e 67F6      	         BEQ.S   CTLWH          | WAIT FOR ANY CHAR TO CONTINUE
 4306 81e90 4E75      	CTLW9:   RTS
 4307               	*
 4308               	*   CHECK FOR BREAK ON PORT #1
 4309               	*
 4310 81e92 2F08      	CHKBRK:  MOVE.L  %A0,-(%A7)     | SAVE A0 * * *
 4311 81e94 6100 FE1C 	         BSR     GETSER1        | RETURNS ADDRESS IN A0
 4312 81e98 1210      	         MOVE.B  (%A0),%D1      | READ STATUS
 4313 81e9a 0201 0010 	         ANDI.B  #0x10,%D1
 4314 81e9e 661E      	         BNE.S   BREAK
 4315 81ea0 205F      	         MOVE.L  (%A7)+,%A0     | RESTORE A0 * * *
 4316 81ea2 4E75      	         RTS
 4317               	
 4318               	*    WHAT TO DO WHEN THE BREAK IS PRESSED
 4319               	*
 4320               	
 4321 81ea4 4228 0002 	BREAK2:  CLR.B   2(%A0)         | SEND NULL TO ACIA TO RESET
 4322 81ea8 0810 0001 	BREAK1:  BTST.B  #1,(%A0)       | CHECK IF "TRANSMIT READY"
 4323 81eac 67FA      	         BEQ.S   BREAK1         | WAIT FOR READY
 4324               	
 4325 81eae 1028 0002 	         MOVE.B  2(%A0),%D0     | READ TWO CHARS
 4326 81eb2 1028 0002 	         MOVE.B  2(%A0),%D0
 4327               	
68K GAS  tutor13.s 			page 82


 4328 81eb6 0810 0004 	         BTST.B  #4,(%A0)       | SEE IF BREAK BUTTON RELEASED
 4329 81eba 66E8      	         BNE.S   BREAK2         | NO... KEEP LOOPING
 4330 81ebc 4E75      	         RTS
 4331               	
 4332 81ebe 61E4      	BREAK:   BSR.S   BREAK2
 4333 81ec0 4BFA 000E 	         LEA     MSG013(%PC),%A5 | MSG:  "BREAK"
 4334               	
 4335 81ec4 6100 E240 	BREAK79: BSR     FIXDCRLF
 4336 81ec8 6100 FD80 	         BSR     OUTPUT         | PRINT MESSAGE
 4337 81ecc 6000 E364 	         BRA     MACSBUG        | AND REENTER MACSBUG
 4338               	
 4339 81ed0 0A0A      	MSG013:  DC.B    LF,LF
 4340 81ed2 4252 4541 	         .ascii  "BREAK"
 4340      4B
 4341 81ed7 0D0A 0A04 	         DC.B    CR,LF,LF,EOT
 4342               	
 4343 81edb 00        	         DC.B    0              | PAD BYTE
 4344               	
 4345               	***  OUTPUT BUFFER TO TAPE  ***
 4346 81edc 48E7 F8C0 	TAPEOUT: MOVEM.L %D0-%D4/%A0-%A1,-(%A7) | SAVE REGISTERS
 4347 81ee0 204D      	         MOVE.L  %A5,%A0        | REMEMBER WHERE BUFFER STARTS
 4348 81ee2 227C 00F0 	         MOVEA.L #PDI1,%A1
 4348      0000 
 4349 81ee8 4229 0021 	         CLR.B   0x21(%A1)
 4350 81eec 0C50 5330 	         CMPI.W  #0x5330,(%A0)  | "S0" HEADER RECORD?
 4351 81ef0 6612      	         BNE.S   TAPEOUT2       | NO
 4352 81ef2 137C 0002 	         MOVE.B  #2,9(%A1)      | YES, PC0 INPUT, PC1 OUTPUT
 4352      0009 
 4353 81ef8 363C 02BC 	         MOVE.W  #700,%D3       | OUTPUT NULLS (HEADER)
 4354 81efc 4200      	TAPEOUT1:CLR.B   %D0
 4355 81efe 6120      	         BSR.S   TAPEO
 4356 81f00 5343      	         SUBQ.W  #1,%D3
 4357 81f02 66F8      	         BNE.S   TAPEOUT1
 4358 81f04 BBCE      	TAPEOUT2:CMP.L   %A6,%A5        | SEE IF AT OR BEYOND END OF LINE
 4359 81f06 6512      	         BCS.S   TAPEOUT4       | NO. KEEP GOING.
 4360 81f08 1638 0654 	         MOVE.B  TAPENULS,%D3   | OUTPUT NULLS AFTER EACH RECORD
 4361 81f0c 4200      	TAPEOUT5:CLR.B   %D0            | YES. OUTPUT A NULL
 4362 81f0e 6110      	         BSR.S   TAPEO
 4363 81f10 5303      	         SUBQ.B  #1,%D3
 4364 81f12 66F8      	         BNE.S   TAPEOUT5
 4365 81f14 4CDF 031F 	         MOVEM.L (%A7)+,%D0-%D4/%A0-%A1 | RESTORE REGISTERS
 4366 81f18 4E75      	         RTS
 4367 81f1a 101D      	TAPEOUT4:MOVE.B  (%A5)+,%D0     | GRAB BYTE TO OUTPUT
 4368 81f1c 6102      	         BSR.S   TAPEO          | GO OUTPUT IT
 4369 81f1e 60E4      	         BRA.S   TAPEOUT2       | GO DO ANOTHER
 4370               	*
 4371               	* OUTPUTS THE CHARACTER IN D0.B TO TAPE
 4372               	* A LOGIC `0" IS RECORDED AS ONE SQUARE WAVE PERIOD OF
 4373               	*        1 MILLISEC DURATION, 50% DUTY CYCLE
 4374               	* A LOGIC `1" IS RECORDED AS ONE SQUARE WAVE PERIOD OF
 4375               	*        500 MICROSEC DURATION, 50% DUTY CYCLE
 4376               	*
 4377 81f20 003C 0010 	TAPEO:   ORI.B   #0b10000,%CCR | SET X BIT IN SR
 4378 81f24 E310      	         ROXL.B  #1,%D0        | DATA BIT INTO X
 4379 81f26 E312      	TAPEO1:  ROXL.B  #1,%D2        | DATA BIT INTO D2
 4380 81f28 613E      	         BSR.S   TIMERTST      | WAIT UNTIL LAST PULSE DONE
 4381 81f2a 08A9 0000 	         BCLR.B  #0,0x21(%A1)  | HALT TIMER
68K GAS  tutor13.s 			page 83


 4381      0021 
 4382 81f30 721E      	         MOVEQ   #30,%D1       | TIMER COUNT FOR A `1"
 4383 81f32 0802 0000 	         BTST.L  #0,%D2        | SENDING A `1"?
 4384 81f36 6606      	         BNE.S   TAPEO2        | YES.
 4385 81f38 0681 0000 	         ADDI.L  #32,%D1       | NO. TIMER COUNT FOR 0
 4385      0020 
 4386 81f3e 03C9 0025 	TAPEO2:  MOVEP.L %D1,0x25(%A1) | SET TIMER PRELOAD REGISTER
 4387 81f42 08E9 0001 	         BSET.B  #1,0x19(%A1)  | SEND 1 TO TAPE
 4387      0019 
 4388 81f48 08E9 0000 	         BSET.B  #0,0x21(%A1)  | START TIMER
 4388      0021 
 4389 81f4e 6118      	         BSR.S   TIMERTST      | WAIT UNTIL PULSE DONE
 4390 81f50 08A9 0000 	         BCLR.B  #0,0x21(%A1)  | HALT TIMER
 4390      0021 
 4391 81f56 08A9 0001 	         BCLR.B  #1,0x19(%A1)  | SEND 0 TO TAPE
 4391      0019 
 4392 81f5c 08E9 0000 	         BSET.B  #0,0x21(%A1)  | START TIMER
 4392      0021 
 4393 81f62 E300      	         ASL.B   #1,%D0        | SENT 8 BITS?
 4394 81f64 66C0      	         BNE.S   TAPEO1        | NO. CONTINUE
 4395 81f66 4E75      	         RTS
 4396               	*
 4397               	* WAITS UNTIL PROGRAMMED TIME DELAY HAS ELAPSED
 4398               	* (IF TIMER IS RUNNING)
 4399               	* ALSO CHECKS FOR BREAK
 4400               	* USES D1
 4401               	*
 4402 81f68 6100 FF28 	TIMERTST:BSR     CHKBRK         | CHECK FOR BREAK
 4403 81f6c 0829 0000 	         BTST.B  #0,0x21(%A1)   | IS TIMER RUNNING?
 4403      0021 
 4404 81f72 6708      	         BEQ.S   TIMERTS1       | NO. RETURN
 4405 81f74 0829 0000 	         BTST.B  #0,0x35(%A1)   | HAS TIME DELAY ELAPSED?
 4405      0035 
 4406 81f7a 67EC      	         BEQ.S   TIMERTST       | NO. WAIT
 4407 81f7c 4E75      	TIMERTS1:RTS
 4408               	
 4409               	*   IF FAULT THEN INITIALIZE AN ACIA
 4410               	*
 4411 81f7e 48E7 8080 	FAULTSER:MOVEM.L %D0/%A0,-(%A7) | FREE UP SOME WORKING REGISTERS
 4412               	
 4413               	* DELAY TO ALLOW ACIA TO FINISH TRANSMITTING
 4414               	*  LONGEST TIME FOR TWO CHARACTERS; 110 BAUD, 16MHZ NO WAIT STATES
 4415 81f82 203C 0000 	         MOVE.L  #50000,%D0     | DELAY A WHILE
 4415      C350 
 4416 81f88 5380      	FAULTAC4:SUBQ.L  #1,%D0         | LOOP AROUND
 4417 81f8a 66FC      	         BNE.S   FAULTAC4
 4418               	
 4419 81f8c 6100 FD24 	         BSR     GETSER1        | MOVE ADDRESS INTO A0
 4420 81f90 1010      	         MOVE.B  (%A0),%D0      | READ STATUS
 4421 81f92 0200 0070 	         ANDI.B  #0x70,%D0      | SEE IF FAULT
 4422 81f96 6708      	         BEQ.S   FAULTAC2
 4423 81f98 10BC 0043 	         MOVE.B  #RESET,(%A0)   | MASTER RESET
 4424 81f9c 10B8 064C 	         MOVE.B  MD1CON,(%A0)   | HOW TO PROGRAM IT
 4425               	
 4426 81fa0 6100 FD22 	FAULTAC2:BSR     GETSER2        | MOVE ADDRESS INTO A0
 4427 81fa4 1010      	         MOVE.B  (%A0),%D0
 4428 81fa6 0200 0070 	         ANDI.B  #0x70,%D0
68K GAS  tutor13.s 			page 84


 4429 81faa 6708      	         BEQ.S   FAULTAC3
 4430 81fac 10BC 0043 	         MOVE.B  #RESET,(%A0)   | MASTER RESET
 4431 81fb0 10B8 064D 	         MOVE.B  MD1CON+1,(%A0) | HOW TO PROGRAM IT
 4432               	FAULTAC3:
 4433 81fb4 4CDF 0101 	         MOVEM.L (%A7)+,%A0/%D0 | RESTORE REGISTERS
 4434 81fb8 4E75      	         RTS
 4435               	
 4436               	*   INITIALIZE BOTH ACIAs
 4437               	*
 4438 81fba 48E7 8080 	INITSER: MOVEM.L %D0/%A0,-(%A7) | FREE UP SOME WORKING REGISTERS
 4439               	
 4440               	* DELAY TO ALLOW ACIA TO FINISH TRANSMITTING
 4441               	*  LONGEST TIME FOR TWO CHARACTERS; 110 BAUD, 16MHZ NO WAIT STATES
 4442 81fbe 203C 0000 	         MOVE.L  #50000,%D0     | DELAY A WHILE
 4442      C350 
 4443 81fc4 5380      	INITAC3: SUBQ.L  #1,%D0         | LOOP AROUND
 4444 81fc6 66FC      	         BNE.S   INITAC3
 4445               	
 4446 81fc8 6100 FCE8 	         BSR     GETSER1        | MOVE ADDRESS INTO A0
 4447 81fcc 10BC 0043 	         MOVE.B  #RESET,(%A0)   | MASTER RESET
 4448 81fd0 10B8 064C 	         MOVE.B  MD1CON,(%A0)   | HOW TO PROGRAM IT
 4449 81fd4 6100 FCEE 	         BSR     GETSER2        | MOVE ADDRESS INTO A0
 4450 81fd8 10BC 0043 	         MOVE.B  #RESET,(%A0)   | MASTER RESET
 4451 81fdc 10B8 064D 	         MOVE.B  MD1CON+1,(%A0) | HOW TO PROGRAM IT
 4452 81fe0 4CDF 0101 	         MOVEM.L (%A7)+,%A0/%D0 | RESTORE REGISTERS
 4453 81fe4 4E75      	         RTS
 4454               	
 4455               	*    INPUT CHARACTER FROM PORT1
 4456               	*    ACIA ADDRESS IN (%A0)
 4457               	*
 4458               	
 4459 81fe6 1210      	INCHNE:  MOVE.B  (%A0),%D1      | (INCH NO ECHO) LOAD STATUS SIDE
 4460 81fe8 0201 0010 	         ANDI.B  #0x10,%D1      |              CHECK FOR BREAK
 4461 81fec 6600 FED0 	         BNE     BREAK          |              GO PROCESS IT
 4462               	
 4463 81ff0 1210      	         MOVE.B  (%A0),%D1      | LOAD STATUS SIDE
 4464 81ff2 0201 0001 	         ANDI.B  #1,%D1         | SEE IF READY
 4465 81ff6 67EE      	         BEQ.S   INCHNE         | IF NOT READY
 4466 81ff8 1028 0002 	         MOVE.B  2(%A0),%D0     | READ DATA SIDE   *****************
 4467 81ffc 0200 007F 	         ANDI.B  #0x7F,%D0      |  DROP PARITY BIT
 4468 82000 4E75      	         RTS
 4469               	
 4470               	*  INPUT A LINE FROM PORT2 (ACIA2)
 4471               	*   [ECHO TO PORT1 (ACIA1)]
 4472               	*                  XONOFF
 4473               	*                   0000     NULL  NULL    DO NOTHING
 4474               	*                   0817   BKSPACE CNTL/W
 4475               	*                   1214     X-ON  X-OFF   READER ON OFF
 4476               	*
 4477 82002 4AB8 0620 	PORTIN2: TST.L   INFROM         | SEE IF ALTERNATE ADDRESS
 4478 82006 6706      	         BEQ.S   PORTIN2X
 4479 82008 2F38 0620 	         MOVE.L  INFROM,-(%A7)
 4480 8200c 4E75      	         RTS                    | GO DO IT
 4481 8200e 2F38 0634 	PORTIN2X:MOVE.L  INPORT2,-(%A7) | GO TO IO ROUTINE
 4482 82012 4E75      	         RTS                    | (THIS NORMALLY GOES TO PORTIN20)
 4483               	*
 4484 82014 48E7 7090 	PORTIN20:MOVEM.L %D1-%D3/%A0/%A3,-(%A7) | SAVE WORKING REGISTERS
68K GAS  tutor13.s 			page 85


 4485               	
 4486 82018 6100 FCAA 	         BSR     GETSER2
 4487 8201c 2648      	         MOVE.L  %A0,%A3        | A3 = ADDRESS OF PORT 2
 4488 8201e 6100 FC92 	         BSR     GETSER1        | A0 = ADDRESS OF PORT 1
 4489               	
 4490 82022 243C 0003 	         MOVE.L  #LTIME,%D2     | D2 = 5 SEC DEADMAN @ 8MHZ
 4490      20C8 
 4491               	
 4492 82028 614A      	PORT2100:BSR.S   P2READY
 4493 8202a 6704      	         BEQ.S   PORT2120       | PORT2 DATA IN NOT-READY
 4494               	
 4495 8202c 615C      	         BSR.S   RES            | READ/ECHO/STORE CHAR
 4496 8202e 60F8      	         BRA.S   PORT2100
 4497               	
 4498 82030 7601      	PORT2120:MOVEQ   #1,%D3         | D3 = MLS TIMER (ONE TICK)
 4499 82032 6140      	PORT2130:BSR.S   P2READY
 4500 82034 6622      	         BNE.S   PORT2250       | PORT2 DATA IN READY
 4501               	
 4502 82036 5382      	         SUBQ.L  #1,%D2
 4503 82038 6B2A      	         BMI.S   PORT2300       | SECOND TIME OUT
 4504               	
 4505 8203a 5383      	         SUBQ.L  #1,%D3
 4506 8203c 66F4      	         BNE.S   PORT2130       | MLS TIMER
 4507               	
 4508 8203e 1038 04E6 	PORT2140:MOVE.B  XONOFF,%D0
 4509 82042 670C      	         BEQ.S   PORT2150       | NULL; IGNORE READER ON
 4510 82044 1213      	         MOVE.B  (%A3),%D1
 4511 82046 0201 0002 	         ANDI.B  #2,%D1
 4512 8204a 67E4      	         BEQ.S   PORT2120       | PORT2 DATA OUT NOT-READY
 4513 8204c 1740 0002 	         MOVE.B  %D0,2(%A3)     | SEND START READER CHAR
 4514               	PORT2150:
 4515               	
 4516 82050 263C 0000 	         MOVE.L  #STIME,%D3     | D3 = 100 MLS @ 8MHZ
 4516      A028 
 4517 82056 60DA      	         BRA.S   PORT2130
 4518               	
 4519 82058 611A      	PORT2250:BSR.S   P2READY
 4520 8205a 6702      	         BEQ.S   PORT2260      | PORT2 DATA IN NOT-READY
 4521 8205c 612C      	         BSR.S   RES           | READ/ECHO/STORE CHAR
 4522               	
 4523 8205e 5383      	PORT2260:SUBQ.L  #1,%D3
 4524 82060 6BDC      	         BMI.S   PORT2140      | CHARACTER TIME OUT
 4525 82062 60F4      	         BRA.S   PORT2250
 4526               	
 4527 82064 4BFA 0006 	PORT2300:LEA     MSG030(%PC),%A5 | TIMEOUT ERROR
 4528 82068 6000 FE5A 	         BRA     BREAK79
 4529               	
 4530 8206c 5449 4D45 	MSG030:  .ascii  "TIMEOUT"
 4530      4F55 54
 4531 82073 04        	         DC.B    EOT
 4532               	
 4533 82074 1210      	P2READY: MOVE.B  (%A0),%D1     | CHECK FOR ACTIVITY ON PORT1
 4534 82076 0201 0010 	         ANDI.B  #0x10,%D1     | CHECK FOR BREAK
 4535 8207a 6600 FE42 	         BNE     BREAK
 4536 8207e 1228 0002 	         MOVE.B  2(%A0),%D1    | READ POSSIBLE CHAR PORT 1; IGNORE
 4537               	
 4538 82082 1213      	         MOVE.B  (%A3),%D1     | READ STATUS OF PORT2
68K GAS  tutor13.s 			page 86


 4539 82084 0201 0001 	         ANDI.B  #1,%D1        | SEE IF CHARACTER SENT
 4540 82088 4E75      	         RTS
 4541               	
 4542 8208a 122B 0002 	RES:     MOVE.B  2(%A3),%D1    | D1 = CHAR READ FROM PORT2
 4543 8208e 0201 007F 	         ANDI.B  #0x7F,%D1     | DROP PARITY BIT
 4544               	
 4545 82092 4A78 04E2 	         TST.W   ECHOPT1       | SEE IF ECHO ON
 4546 82096 6704      	         BEQ.S   RES140
 4547 82098 1141 0002 	         MOVE.B  %D1,2(%A0)    | SEND TO DATA SIDE (PORT1)
 4548               	RES140:
 4549               	
 4550 8209c 0C01 000D 	         CMPI.B  #CR,%D1
 4551 820a0 671C      	         BEQ.S   RES190        | END OF LINE
 4552               	
 4553 820a2 0C01 0020 	         CMPI.B  #0x20,%D1     | IGNORE CONTROL CHARACTERS (NULLS)
 4554 820a6 6D14      	         BLT.S   RES150
 4555 820a8 1C81      	         MOVE.B  %D1,(%A6)     | SAVE CHAR IN BUFFER
 4556               	
 4557 820aa 263C 0001 	         MOVE.L  #LTIME/2,%D3  | D3 = 2 1/2 SEC @ 8MHZ (CHARATER  TIMER)
 4557      9064 
 4558               	
 4559 820b0 220E      	         MOVE.L  %A6,%D1       | CHECK BUFFER FULL
 4560 820b2 928D      	         SUB.L   %A5,%D1
 4561 820b4 0C41 0050 	         CMPI.W  #BUFSIZE,%D1
 4562 820b8 6A02      	         BPL.S   RES150        | FULL
 4563 820ba 528E      	         ADDQ.L  #1,%A6        | INCREMENT STORE POINTER
 4564 820bc 4E75      	RES150:  RTS
 4565               	
 4566 820be BDCD      	RES190:  CMP.L   %A5,%A6
 4567 820c0 67FA      	         BEQ.S   RES150        | NULL RECORD; IGNORE
 4568               	
 4569 820c2 588F      	         ADDQ.L  #4,%A7        | TRIM STACK
 4570               	
 4571 820c4 1038 04E7 	         MOVE.B  XONOFF+1,%D0
 4572 820c8 670C      	         BEQ.S   RES195        | XOFF = NULL CHAR; IGNORE
 4573 820ca 1213      	RES194:  MOVE.B  (%A3),%D1
 4574 820cc 0201 0002 	         ANDI.B  #2,%D1
 4575 820d0 67F8      	         BEQ.S   RES194        | PORT2 DATA OUT NOT-READY
 4576 820d2 1740 0002 	         MOVE.B  %D0,2(%A3)    | STOP READER
 4577               	RES195:
 4578               	
 4579 820d6 4CDF 090E 	         MOVEM.L (%A7)+,%D1-%D3/%A0/%A3 | RESTORE THE REGISTERS
 4580 820da 4E75      	         RTS
 4581               	
 4582               	*
 4583               	* INPUT A LINE FROM AUDIO TAPE (PI/T)
 4584               	* [ECHO TO PORT1 (ACIA1)]
 4585               	*
 4586 820dc 48E7 78F0 	TAPEIN:  MOVEM.L %D1-%D4/%A0-%A3,-(%A7) | SAVE WORKING REGISTERS
 4587 820e0 6100 FBD0 	         BSR     GETSER1        | ACIA1 ADDRESS INTO A0
 4588 820e4 227C 00F0 	         MOVEA.L #PDI1,%A1
 4588      0000 
 4589 820ea 13FC 0002 	         MOVE.B  #2,PITCDDR     | PC0 INPUT, PC1 OUTPUT.
 4589      00F0 0009 
 4590               	
 4591               	* SYNCHRONIZE ON S CHARACTER
 4592 820f2 4201      	         CLR.B   %D1
68K GAS  tutor13.s 			page 87


 4593 820f4 613C      	TAPEIN10:BSR.S   TAPEIN40       | GET TAPE
 4594 820f6 65FC      	         BCS.S   TAPEIN10       | WAIT FOR LOW
 4595 820f8 6138      	TAPEIN11:BSR.S   TAPEIN40       | GET TAPE
 4596 820fa 64FC      	         BCC.S   TAPEIN11       | WAIT FOR HIGH
 4597 820fc 6154      	         BSR.S   STARTIMR       | START TIMER
 4598 820fe E301      	TAPEIN12:ASL.B   #1,%D1
 4599 82100 6110      	         BSR.S   TAPEIN30       | GET ONE BIT FROM TAPE
 4600 82102 0C01 0053 	         CMPI.B  #'S',%D1       | S?
 4601 82106 66F6      	         BNE.S   TAPEIN12       | NO. GET NEXT BIT
 4602 82108 6072      	         BRA.S   TAPEIN51
 4603               	
 4604               	* GET ONE CHARACTER FROM THE TAPE
 4605 8210a 7202      	TAPEIN20:MOVEQ   #2,%D1         | SET STOP BIT
 4606 8210c 6104      	TAPEIN21:BSR.S   TAPEIN30       | GET 1 BIT FROM TAPE
 4607 8210e E301      	         ASL.B   #1,%D1         | STOP IN CARRY
 4608 82110 64FA      	         BCC.S   TAPEIN21       | NO
 4609               	*FALL INTO LOAD BIT ROUTINE FOR LAST BIT
 4610 82112 611E      	TAPEIN30:BSR.S   TAPEIN40       | GET TAPE
 4611 82114 65FC      	         BCS.S   TAPEIN30       | WAIT FOR LOW
 4612 82116 611A      	TAPEIN31:BSR.S   TAPEIN40       | GET TAPE
 4613 82118 64FC      	         BCC.S   TAPEIN31       | WAIT FOR HIGH
 4614 8211a 4239 00F0 	         CLR.B   PITTCR         | STOP TIMER
 4614      0021 
 4615 82120 0749 002D 	         MOVEP.L 0x2D(%A1),%D3  | GET PERIOD MEASUREMENT
 4616 82124 612C      	         BSR.S   STARTIMR       | START TIMER
 4617 82126 0483 00FF 	         SUBI.L  #0xFFFFFF-94,%D3 | IS IT A LOGIC 1?
 4617      FFA1 
 4618 8212c 6502      	         BLO.S   TAPEIN32       | NO
 4619 8212e 5201      	         ADDQ.B  #1,%D1         | YES. STORE LOGIC 1
 4620 82130 4E75      	TAPEIN32:RTS
 4621               	
 4622               	* READ THE TAPE LEVEL INTO THE CARRY AND CHECK FOR BREAK
 4623 82132 1410      	TAPEIN40:MOVE.B  (%A0),%D2      | CHECK FOR ACTIVITY ON PORT1
 4624 82134 0202 0010 	         ANDI.B  #0x10,%D2      | CHECK FOR BREAK
 4625 82138 6600 FD84 	         BNE     BREAK
 4626 8213c 1410      	         MOVE.B  (%A0),%D2      | SEE IF CHARACTER SENT
 4627 8213e 0202 0001 	         ANDI.B  #1,%D2
 4628 82142 6704      	         BEQ.S   TAPEIN41       | NONE SENT.
 4629 82144 1428 0002 	         MOVE.B  2(%A0),%D2     | READ WHAT WAS SENT
 4630 82148 1439 00F0 	TAPEIN41:MOVE.B  PITPCDR,%D2    | READ PI/T
 4630      0019 
 4631 8214e E202      	         ASR.B   #1,%D2         | DATA INTO CARRY
 4632 82150 4E75      	         RTS
 4633               	
 4634               	*STARTS PROGRAMMABLE TIMER
 4635 82152 283C 00FF 	STARTIMR:MOVE.L  #0x00FFFFFF,%D4 | INIT. COUNT. PRELOAD REG.
 4635      FFFF 
 4636 82158 09C9 0025 	         MOVEP.L %D4,0x25(%A1)
 4637 8215c 13FC 0001 	         MOVE.B  #1,PITTCR      | START TIMER
 4637      00F0 0021 
 4638               	
 4639 82164 4E75      	         RTS
 4640               	
 4641 82166 0C01 0020 	TAPEIN53:CMPI.B  #0x20,%D1
 4642 8216a 6D0E      	         BLT.S   TAPEIN50       | IGNORE CONTROL CHARACTERS
 4643 8216c 1C81      	         MOVE.B  %D1,(%A6)      | SAVE CHARACTER IN BUFFER
 4644 8216e 220E      	         MOVE.L  %A6,%D1        | CHECK BUFFER FULL
68K GAS  tutor13.s 			page 88


 4645 82170 928D      	         SUB.L   %A5,%D1
 4646 82172 0C41 0050 	         CMPI.W  #BUFSIZE,%D1
 4647 82176 6A02      	         BPL.S   TAPEIN50       | FULL
 4648 82178 528E      	         ADDQ.L  #1,%A6         | INCREMENT BUFFER POINTER
 4649               	
 4650 8217a 618E      	TAPEIN50:BSR.S   TAPEIN20       | GET ONE CHARACTER FROM TAPE
 4651 8217c 0201 007F 	TAPEIN51:ANDI.B  #0x7F,%D1      | DROP PARITY BIT
 4652 82180 4A78 04E2 	         TST.W   ECHOPT1        | SEE IF ECHO ON
 4653 82184 6704      	         BEQ.S   TAPEIN52
 4654 82186 1141 0002 	         MOVE.B  %D1,2(%A0)     | SEND TO PORT1
 4655 8218a 0C01 000A 	TAPEIN52:CMPI.B  #LF,%D1        | END OF LINE?
 4656 8218e 66D6      	         BNE.S   TAPEIN53       | NO.
 4657 82190 4CDF 0F1E 	         MOVEM.L (%A7)+,%D1-%D4/%A0-%A3 | RESTORE REGISTERS
 4658 82194 4E75      	         RTS
 4659               	
 4660               	*     SCAN COMMAND LINE FOR PORT NUMBER
 4661               	*     DU LO VE MD
 4662               	*
 4663 82196 42B8 0620 	SCANPORT:CLR.L   INFROM         | DEFAULT IS WHATEVER IS CALLED
 4664 8219a 42B8 061C 	         CLR.L   OUTTO
 4665 8219e 1015      	         MOVE.B  (%A5),%D0      | NO....GET CHARACTER
 4666 821a0 0C00 0020 	         CMPI.B  #BLANK,%D0     |     IS IT A BLANK?
 4667 821a4 6750      	         BEQ.S   SCANP6         |     YES..EXIT
 4668               	
 4669 821a6 0C00 0031 	         CMPI.B  #'1',%D0       | SEE IF PORT 1 OVERRIDE
 4670 821aa 660E      	         BNE.S   SCANP4
 4671 821ac 21F8 062C 	         MOVE.L  INPORT1,INFROM
 4671      0620 
 4672 821b2 21F8 0630 	         MOVE.L  OUTPORT1,OUTTO
 4672      061C 
 4673 821b8 603A      	         BRA.S   SCANP7
 4674               	
 4675 821ba 0C00 0032 	SCANP4:  CMPI.B  #'2',%D0       | SEE IF PORT 2 OVERRIDE
 4676 821be 660E      	         BNE.S   SCANP5
 4677 821c0 21F8 0634 	         MOVE.L  INPORT2,INFROM
 4677      0620 
 4678 821c6 21F8 0638 	         MOVE.L  OUTPORT2,OUTTO
 4678      061C 
 4679 821cc 6026      	         BRA.S   SCANP7
 4680               	
 4681 821ce 0C00 0033 	SCANP5:  CMPI.B  #'3',%D0       | SEE IF PORT3 OVERRIDE
 4682 821d2 660E      	         BNE.S   SCANP8
 4683 821d4 21F8 063C 	         MOVE.L  INPORT3,INFROM
 4683      0620 
 4684 821da 21F8 0640 	         MOVE.L  OUTPORT3,OUTTO
 4684      061C 
 4685 821e0 6012      	         BRA.S   SCANP7
 4686               	
 4687 821e2 0C00 0034 	SCANP8:  CMPI.B  #'4',%D0       | SEE IF PORT4 OVERRIDE
 4688 821e6 660E      	         BNE.S   SCANP6
 4689 821e8 21F8 0644 	         MOVE.L  INPORT4,INFROM
 4689      0620 
 4690 821ee 21F8 0648 	         MOVE.L  OUTPORT4,OUTTO
 4690      061C 
 4691               	
 4692 821f4 528D      	SCANP7:  ADDQ.L  #1,%A5         | ADJUST GET CHAR POINTER
 4693 821f6 4E75      	SCANP6:  RTS
68K GAS  tutor13.s 			page 89


 4694               	
 4695               	*       *  P A  *      "PRINTER ATTACH" COMMAND          *
 4696               	*                                                        *
 4697               	* IF THE "PRINTER" HAS BEEN ATTACHED, ALL CHARACTERS     *
 4698               	* ENTERED AND TRANSMITTED VIA THE CONSOLE WILL PRINT ON  *
 4699               	* THE HARD COPY PRINTER. -- TO TERMINATE, ENTER "NOPA"   *
 4700               	*                                                        *
 4701               	* THIS COMMAND MAKES USE OF THE "NO" OPTION.  THERE IS A *
 4702               	* 4 BYTE HARD BRANCH INFRONT OF THE REGULAR ENTRY POINT. *
 4703               	**********************************************************
 4704               	
 4705 821f8 6000 0006 	         BRA     NOPACMD        | ENTRY FOR "NOPA"
 4706               	
 4707               	*
 4708 821fc 70FF      	PACMD:   MOVEQ   #-1,%D0        | ENTRY FOR "PA" (D0=-1[CRT & PRINT])
 4709 821fe 6002      	         BRA.S   SETCRTPR       | GO ACTUALLY SET THE SWITCH
 4710 82200 4280      	NOPACMD: CLR.L   %D0            | D0 = ZEROS... "CRT" ONLY
 4711 82202 31C0 0652 	SETCRTPR:MOVE.W  %D0,CRTPNT     | SET THE "CRT" AND "PRINTER" SWITCH
 4712 82206 6000 E02A 	         BRA     MACSBUG        | GO BE "READY"
 4713               	
 4714               	*-------------------------------------------------------------------------
 4715               	* File CODE68K   68K ONE LINE ASSEMBLER                           07/23/82
 4716               	
 4717               	* EVALUATE EXPRESSION
 4718               	*  NUMBER PLUS OR MINUS NUMBER....
 4719               	*
 4720               	EV:      .align  2
 4721 8220a 2F07      	         MOVE.L  %D7,-(%A7)     | SAVE D7
 4722 8220c 4287      	         CLR.L   %D7
 4723 8220e 6120      	EV21:    BSR.S   GETFIELD       | GET NUMBER
 4724 82210 DE80      	         ADD.L   %D0,%D7        | D7 = NUMBER BEING BUILT
 4725 82212 121D      	EV15:    MOVE.B  (%A5)+,%D1     | D1 = TERMINATING CHAR
 4726 82214 4280      	         CLR.L   %D0            | D0 = NEXT NUMBER (=0 1ST TIME)
 4727 82216 0C01 002B 	         CMPI.B  #'+',%D1
 4728 8221a 67F2      	         BEQ.S   EV21           | PLUS
 4729 8221c 0C01 002D 	         CMPI.B  #'-',%D1
 4730 82220 6606      	         BNE.S   EV39           | NOT MINUS
 4731 82222 610C      	         BSR.S   GETFIELD       | GET NEXT NUMBER
 4732 82224 9E80      	         SUB.L   %D0,%D7
 4733 82226 60EA      	         BRA.S   EV15
 4734               	
 4735 82228 2007      	EV39:    MOVE.L  %D7,%D0        | D0 = VALUE BUILT
 4736 8222a 538D      	         SUBQ.L  #1,%A5         | A5 = CHAR AFTER EXPRESSION
 4737 8222c 2E1F      	         MOVE.L  (%A7)+,%D7     | RESTORE D7
 4738 8222e 4E75      	         RTS
 4739               	
 4740               	GETFIELD:.align  2
 4741 82230 0C15 002A 	         CMPI.B  #'*',(%A5)
 4742 82234 6606      	         BNE.S   GETF305
 4743               	
 4744 82236 2004      	         MOVE.L  %D4,%D0        | D0 = PROGRAM COUNTER
 4745 82238 528D      	         ADDQ.L  #1,%A5
 4746 8223a 6036      	         BRA.S   GETF333
 4747               	
 4748 8223c 0C15 0027 	GETF305: CMPI.B  #0x27,(%A5)
 4749 82240 662A      	         BNE.S   GETF325        | NOT LITERAL
 4750               	
68K GAS  tutor13.s 			page 90


 4751 82242 528D      	         ADDQ.L  #1,%A5
 4752 82244 4280      	         CLR.L   %D0
 4753               	
 4754 82246 3229 000C 	         MOVE.W  TLENGTH(%A1),%D1 | D1 = SIZE
 4755 8224a 6704      	         BEQ.S   GETF308        | .B = 0
 4756 8224c EA49      	         LSR.W   #5,%D1         | .W = 1
 4757 8224e 5381      	         SUBQ.L  #1,%D1         | .L = 3
 4758               	GETF308:
 4759               	
 4760 82250 E188      	GETF311: LSL.L   #8,%D0
 4761 82252 101D      	         MOVE.B  (%A5)+,%D0
 4762 82254 0C15 0027 	         CMPI.B  #0x27,(%A5)
 4763 82258 6706      	         BEQ.S   GETF312        | CLOSING QUOTE
 4764 8225a 51C9 FFF4 	         DBF     %D1,GETF311
 4765 8225e 6056      	         BRA.S   ER1            | OVERFLOW
 4766               	
 4767 82260 528D      	GETF312: ADDQ.L  #1,%A5         | MOVE PAST CLOSING QUOTE
 4768 82262 6002      	         BRA.S   GETF314
 4769               	
 4770 82264 E188      	GETF313: LSL.L   #8,%D0
 4771 82266 51C9 FFFC 	GETF314: DBF     %D1,GETF313    | LEFT NORNALIZE
 4772 8226a 6006      	         BRA.S   GETF333
 4773               	
 4774 8226c 6100 F8CC 	GETF325: BSR     GETDECNU       | GET DECIMAL NUMBER
 4775 82270 6644      	         BNE.S   ER1            | MESSED UP NUMBER
 4776               	
 4777 82272 4E75      	GETF333: RTS
 4778               	
 4779               	XBASE:   .align  2
 4780               	
 4781               	* FIND AND SET SIZE
 4782               	* BIT 5432109876543210
 4783               	*     ........00......  = BYTE
 4784               	*     ........01......  = WORD
 4785               	*     ........10......  = LONG
 4786               	*
 4787 82274 8469 000C 	FSIZE:   OR.W    TLENGTH(%A1),%D2 | SET SIZE BITS
 4788 82278 4E75      	         RTS
 4789               	
 4790               	*  %D0 = VALUE 0 - 7
 4791               	*  %D1 = 0 IF D@     = 1 IF A@
 4792 8227a 4281      	GETREGD: CLR.L   %D1
 4793 8227c 0C1D 0044 	         CMPI.B  #'D',(%A5)+
 4794 82280 6634      	         BNE.S   ER1
 4795 82282 4280      	GET41:   CLR.L   %D0
 4796 82284 101D      	         MOVE.B  (%A5)+,%D0
 4797 82286 0400 0030 	         SUBI.B  #'0',%D0
 4798 8228a 6B2A      	         BMI.S   ER1
 4799 8228c 0C00 0007 	         CMPI.B  #0x7,%D0
 4800 82290 6E24      	         BGT.S   ER1
 4801 82292 4E75      	         RTS
 4802               	
 4803 82294 4281      	GETREGA: CLR.L   %D1
 4804 82296 123C 0008 	         MOVE.B  #8,%D1
 4805 8229a 0C1D 0041 	         CMPI.B  #'A',(%A5)+
 4806 8229e 6616      	         BNE.S   ER1
 4807 822a0 60E0      	         BRA.S   GET41
68K GAS  tutor13.s 			page 91


 4808               	
 4809 822a2 4241      	GETREGAD:CLR     %D1
 4810 822a4 101D      	         MOVE.B  (%A5)+,%D0
 4811 822a6 0C00 0044 	         CMPI.B  #'D',%D0
 4812 822aa 67D6      	         BEQ.S   GET41
 4813 822ac 123C 0008 	         MOVE.B  #8,%D1
 4814 822b0 0C00 0041 	         CMPI.B  #'A',%D0
 4815 822b4 67CC      	         BEQ.S   GET41
 4816 822b6 6000 0874 	ER1:     BRA     ER
 4817               	
 4818 822ba 3E3C 01FD 	EADA:    MOVE.W  #0x1FD,%D7     | DATA ALTERABLE ONLY
 4819 822be 6022      	         BRA.S   EA
 4820               	
 4821 822c0 3E3C 07E4 	EAC:     MOVE.W  #0x7E4,%D7     | CONTROL ONLY
 4822 822c4 601C      	         BRA.S   EA
 4823               	
 4824 822c6 3E3C 01FC 	EAM:     MOVE.W  #0x1FC,%D7     | MEMORY ALTERABLE ONLY
 4825 822ca 6016      	         BRA.S   EA
 4826               	
 4827 822cc 3E3C 0800 	EAZ:     MOVE.W  #0x800,%D7     | IMMEDIATE ONLY
 4828 822d0 6010      	         BRA.S   EA
 4829               	
 4830 822d2 3E3C 0FFD 	EADADDR: MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 4831 822d6 600A      	         BRA.S   EA
 4832               	
 4833 822d8 3E3C 01FF 	EAA:     MOVE.W  #0x1FF,%D7     | ALTERABLE ADDRESSING
 4834 822dc 6004      	         BRA.S   EA
 4835               	
 4836 822de 3E3C 0FFF 	EAALL:   MOVE.W  #0xFFF,%D7     | ALL MODES
 4837               	
 4838               	*  ...............1  D@         | DATA REGISTER
 4839               	*  ..............1.  A@
 4840               	*  .............1..  (A@)
 4841               	*  ............1...  -(A@)
 4842               	*  ...........1....  (A@)+
 4843               	*  ..........1.....  DATA(A@)
 4844               	*  .........1......  DATA(A@,R@)
 4845               	*  ........1.......  DATA  (SHORT)
 4846               	*  .......1........  DATA  (LONG)
 4847               	*  ......1.........  DATA(%PC)
 4848               	*  .....1..........  DATA(PC,R@)
 4849               	*  ....1...........  #DATA
 4850               	*  1...............  SPECIAL CASE JMP.L
 4851               	
 4852               	* %D0 = VALUE CALCULATED
 4853               	* %D2 = MASK WORD (1ST WORD OF INSTRUCTION)
 4854               	* %D3 = OFFSET FOR DATA STORE (TDATA+..)
 4855               	* %D4 = EXTENSION WORD
 4856               	* %D5 = <DATA>
 4857               	* %D6 = MODE AS BUILT   .........XXXXXX
 4858               	* %D7 = MODES ALLOWED
 4859               	*
 4860               	* %A4 = BASE ADDRESS FOR DATA STORE (TDATA+..)[A4,%D3]
 4861               	EA:      .align  2
 4862 822e2 4285      	         CLR.L   %D5            | ZERO VALUE
 4863 822e4 4286      	         CLR.L   %D6            | MODE = 000000
 4864 822e6 1015      	         MOVE.B  (%A5),%D0
68K GAS  tutor13.s 			page 92


 4865 822e8 0C00 0023 	         CMPI.B  #'#',%D0
 4866 822ec 6646      	         BNE.S   EA10
 4867               	
 4868               	* IMMEDIATE MODE
 4869               	
 4870 822ee 0807 000B 	         BTST    #11,%D7
 4871 822f2 67C2      	         BEQ.S   ER1
 4872               	
 4873 822f4 1C3C 003C 	         MOVE.B  #0x3C,%D6      | D6 = MODE  111100
 4874 822f8 528D      	         ADDQ.L  #1,%A5
 4875               	
 4876 822fa 6100 FF0E 	         BSR     EV             | EVALUATE EXPRESSION
 4877 822fe 2A00      	         MOVE.L  %D0,%D5        | D5 = VALUE
 4878               	
 4879 82300 4A29 000B 	         TST.B   TLSPEC(%A1)
 4880 82304 670A      	         BEQ.S   EA0633         | .SIZE NOT SPECIFIED (.W ASSUMED)
 4881               	
 4882 82306 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0
 4883 8230a 6714      	         BEQ.S   EA0635         | .BYTE
 4884               	
 4885 8230c 4A00      	         TST.B   %D0
 4886 8230e 6B18      	         BMI.S   EA0637         | .LONG
 4887               	
 4888 82310 6100 0238 	EA0633:  BSR     EA16BIT        | .WORD     -32K TO +64K
 4889 82314 3985 3000 	EA0634:  MOVE.W  %D5,(%A4,%D3.W)
 4890 82318 5429 000A 	         ADDQ.B  #2,TNB(%A1)    | BYTE COUNT
 4891 8231c 5483      	         ADDQ.L  #2,%D3         | OFFSET
 4892 8231e 4E75      	         RTS
 4893               	
 4894 82320 6100 023E 	EA0635:  BSR     EA8BIT         | -127 TO +255
 4895 82324 6690      	         BNE.S   ER1
 4896 82326 60EC      	         BRA.S   EA0634
 4897               	
 4898 82328 2985 3000 	EA0637:  MOVE.L  %D5,(%A4,%D3.W)
 4899 8232c 5829 000A 	         ADDQ.B  #4,TNB(%A1)
 4900 82330 5883      	         ADDQ.L  #4,%D3
 4901 82332 4E75      	         RTS
 4902               	
 4903               	EA10:    .align  2
 4904 82334 0C15 002D 	         CMPI.B  #'-',(%A5)
 4905 82338 6626      	         BNE.S   EA11
 4906               	
 4907 8233a 0C2D 0028 	         CMPI.B  #'(',1(%A5)
 4907      0001 
 4908 82340 6600 0090 	         BNE     EA41           | MAY BE "-<DATA>
 4909               	
 4910 82344 548D      	         ADDQ.L  #2,%A5
 4911 82346 3C3C 0020 	         MOVE.W  #0x0020,%D6    | MODE = -(A@)    100AAA
 4912               	
 4913 8234a 0807 0004 	         BTST    #4,%D7
 4914 8234e 6700 FF66 	         BEQ     ER1            | THIS MODE NOT ALLOWED
 4915               	
 4916 82352 6100 FF40 	         BSR     GETREGA
 4917 82356 8C40      	         OR.W    %D0,%D6
 4918               	
 4919 82358 0C1D 0029 	         CMPI.B  #')',(%A5)+
 4920 8235c 6670      	         BNE.S   ER3            | NO CLOSING PAREN
68K GAS  tutor13.s 			page 93


 4921 8235e 4E75      	         RTS
 4922               	
 4923 82360 0C00 0041 	EA11:    CMPI.B  #'A',%D0
 4924 82364 6612      	         BNE.S   EA21
 4925               	
 4926 82366 1C3C 0008 	         MOVE.B  #0x08,%D6      | MODE = 001...
 4927 8236a 0807 0001 	         BTST    #1,%D7
 4928 8236e 675E      	         BEQ.S   ER3            | MODE NOT ALLOWED
 4929               	
 4930 82370 6100 FF22 	         BSR     GETREGA
 4931 82374 8C40      	         OR.W    %D0,%D6
 4932 82376 4E75      	         RTS
 4933               	
 4934 82378 0C00 0044 	EA21:    CMPI.B  #'D',%D0
 4935 8237c 660E      	         BNE.S   EA31
 4936               	
 4937 8237e 0807 0000 	         BTST    #0,%D7
 4938 82382 674A      	         BEQ.S   ER3            | MODE NOT ALLOWED
 4939               	
 4940 82384 6100 FEF4 	         BSR     GETREGD        | MODE = D@   000AAA
 4941 82388 8C40      	         OR.W    %D0,%D6
 4942 8238a 4E75      	         RTS
 4943               	
 4944 8238c 0C00 0028 	EA31:    CMPI.B  #'(',%D0
 4945 82390 6640      	         BNE.S   EA41
 4946               	
 4947               	* POSSIBLE
 4948               	*  (A@)
 4949               	*  (A@)+
 4950               	*  (A@,R@)  IMPLIED ZERO DISPLACEMENT
 4951               	*
 4952 82392 528D      	         ADDQ.L  #1,%A5
 4953 82394 6100 FEFE 	         BSR     GETREGA
 4954 82398 8C40      	         OR.W    %D0,%D6
 4955               	
 4956 8239a 101D      	         MOVE.B  (%A5)+,%D0
 4957 8239c 0C00 002C 	         CMPI.B  #',',%D0
 4958 823a0 6700 00D0 	         BEQ     EA5116         | MODE = (A@,R@)  ;IMPLIED D5 = 0 DATA
 4959               	
 4960 823a4 0C00 0029 	         CMPI.B  #')',%D0       | LOOK FOR CLOSING )
 4961 823a8 6624      	         BNE.S   ER3
 4962               	
 4963 823aa 0C15 0020 	         CMPI.B  #BLANK,(%A5)   | LOOK FOR BLANK
 4964 823ae 6714      	         BEQ.S   EA35           | MODE = (A@)
 4965               	
 4966 823b0 0C15 002B 	         CMPI.B  #'+',(%A5)
 4967 823b4 660E      	         BNE.S   EA35
 4968 823b6 528D      	         ADDQ.L  #1,%A5
 4969               	
 4970 823b8 0046 0018 	         ORI.W   #0x18,%D6      | MODE = 011...    (A@)+
 4971               	
 4972 823bc 0807 0003 	         BTST    #3,%D7
 4973 823c0 670C      	         BEQ.S   ER3            | MODE NOT ALLOWED
 4974               	
 4975 823c2 4E75      	EA34:    RTS
 4976               	
 4977 823c4 0046 0010 	EA35:    ORI.W   #0x10,%D6      | MODE = 010...   (A@)
68K GAS  tutor13.s 			page 94


 4978               	
 4979 823c8 0807 0002 	         BTST    #2,%D7
 4980 823cc 66F4      	         BNE.S   EA34           | MODE ALLOWED
 4981 823ce 6000 075C 	ER3:     BRA     ER             | MODE NOT ALLOWED
 4982               	
 4983               	* POSSIBLE
 4984               	*   <DATA>   SHORT
 4985               	*   <DATA>   LONG
 4986               	*   <DATA>(A@)
 4987               	*   <DATA>(A@,R@)
 4988               	*   <DATA>(A@,R@.W)
 4989               	*   <DATA>(A@,R@.L)
 4990               	*   <DATA>(%PC)
 4991               	*   <DATA>(PC,R@)
 4992               	*   <DATA>(PC,R@.W)
 4993               	*   <DATA>(PC,R@.L)
 4994               	*
 4995 823d2 6100 FE36 	EA41:    BSR     EV             | EVALUATE EXPRESSION
 4996 823d6 2A00      	         MOVE.L  %D0,%D5        | D5 = <DATA>
 4997               	
 4998 823d8 1015      	         MOVE.B  (%A5),%D0
 4999 823da 0C00 002C 	         CMPI.B  #',',%D0
 5000 823de 6706      	         BEQ.S   EA4102
 5001 823e0 0C00 0020 	         CMPI.B  #BLANK,%D0
 5002 823e4 6642      	         BNE.S   EA4120
 5003               	
 5004               	*  <DATA>         ONLY
 5005               	* CHECK IF NEGATIVE NUMBER
 5006               	
 5007 823e6 2005      	EA4102:  MOVE.L  %D5,%D0
 5008 823e8 6A02      	         BPL.S   EA4105         | POSITIVE NUMBER
 5009 823ea 4680      	         NOT.L   %D0
 5010 823ec 0240 8000 	EA4105:  ANDI.W  #0x8000,%D0
 5011 823f0 4A80      	         TST.L   %D0
 5012 823f2 661E      	         BNE.S   EA4135         | .LONG
 5013               	
 5014               	*  <DATA>.W
 5015 823f4 0807 0007 	         BTST    #7,%D7
 5016 823f8 6608      	         BNE.S   EA4127         | SHORT ALLOWED
 5017 823fa 0807 000F 	         BTST    #15,%D7
 5018 823fe 67CE      	         BEQ.S   ER3            | MODE NOT ALLOWED
 5019 82400 6010      	         BRA.S   EA4135         | SPECIAL CASE (JMP.L)
 5020               	
 5021 82402 0046 0038 	EA4127:  ORI.W   #0x38,%D6      | EA = ABSOULTE SHORT
 5022 82406 3985 3000 	         MOVE.W  %D5,(%A4,%D3.W) | D5 = DATA
 5023 8240a 5429 000A 	         ADDQ.B  #2,TNB(%A1)    | BYTE COUNT
 5024 8240e 5483      	         ADDQ.L  #2,%D3
 5025 82410 4E75      	         RTS
 5026               	
 5027               	*EA4134  CMPI.B  #'L',%D0
 5028               	*        BNE.S   ER3
 5029               	
 5030               	*  <DATA>.L
 5031 82412 0046 0039 	EA4135:  ORI.W   #0x39,%D6      | EA = ABSOLUTE LONG
 5032 82416 2985 3000 	         MOVE.L  %D5,(%A4,%D3.W)
 5033 8241a 5829 000A 	         ADDQ.B  #4,TNB(%A1)    | BYTE COUNT
 5034 8241e 5883      	         ADDQ.L  #4,%D3
68K GAS  tutor13.s 			page 95


 5035 82420 0807 0008 	         BTST    #8,%D7
 5036 82424 67A8      	         BEQ.S   ER3            | MODE NOT ALLOWED
 5037 82426 4E75      	         RTS
 5038               	
 5039 82428 528D      	EA4120:  ADDQ.L  #1,%A5
 5040 8242a 0C00 0028 	         CMPI.B  #'(',%D0
 5041 8242e 669E      	         BNE.S   ER3
 5042               	
 5043 82430 0C15 0050 	         CMPI.B  #'P',(%A5)
 5044 82434 6700 008E 	         BEQ     EA61
 5045               	
 5046               	* <DATA>(A@.......
 5047 82438 6100 011A 	         BSR     EA16BITS       | -32K TO +32K
 5048               	
 5049 8243c 6100 FE56 	         BSR     GETREGA
 5050 82440 8C40      	         OR.W    %D0,%D6
 5051               	
 5052 82442 1015      	         MOVE.B  (%A5),%D0
 5053 82444 0C00 0029 	         CMPI.B  #')',%D0
 5054 82448 6624      	         BNE.S   EA5115
 5055               	
 5056               	* <DATA>(A@)
 5057 8244a 528D      	         ADDQ.L  #1,%A5
 5058               	
 5059 8244c 0807 0005 	         BTST    #5,%D7
 5060 82450 6700 00A0 	         BEQ     ER4            | MODE NOT ALLOWED
 5061               	
 5062 82454 0046 0028 	         ORI.W   #0x0028,%D6    | MODE = 101AAA
 5063               	
 5064 82458 0C85 0001 	         CMPI.L  #0x10000,%D5
 5064      0000 
 5065 8245e 6A00 0092 	         BPL     ER4
 5066               	
 5067 82462 3985 3000 	         MOVE.W  %D5,(%A4,%D3.W)
 5068 82466 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 5069 8246a 5483      	         ADDQ.L  #2,%D3
 5070 8246c 4E75      	         RTS
 5071               	
 5072 8246e 6100 06A2 	EA5115:  BSR     COMMA
 5073               	
 5074               	*  <DATA>(A@,-----    ADDRESS REGISTER WITH INDEX
 5075 82472 48C5      	EA5116:  EXT.L   %D5
 5076 82474 6100 00F2 	         BSR     EA8BITS        | -128 TO +127
 5077 82478 6678      	         BNE.S   ER4
 5078 8247a 0245 00FF 	         ANDI.W  #0x00FF,%D5
 5079 8247e 0046 0030 	         ORI.W   #0x0030,%D6    | MODE  110---
 5080               	
 5081 82482 0807 0006 	         BTST    #6,%D7
 5082 82486 676A      	         BEQ.S   ER4            | MODE NOT ALLOWED
 5083               	
 5084 82488 6100 FE18 	         BSR     GETREGAD
 5085 8248c 8041      	         OR.W    %D1,%D0
 5086 8248e E858      	         ROR.W   #4,%D0
 5087 82490 8A40      	         OR.W    %D0,%D5        | EXTENSION WORD
 5088               	
 5089               	* BIT 11 EXTENSION WORD
 5090               	*   0 = SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REGISTER
68K GAS  tutor13.s 			page 96


 5091               	*   1 = LONG VALUE IN INDEX REGISTER  (DEFAULT)
 5092               	*
 5093 82492 101D      	         MOVE.B  (%A5)+,%D0
 5094 82494 0C00 0029 	         CMPI.B  #')',%D0
 5095 82498 671E      	         BEQ.S   EA5119         | DEFAULT   .W
 5096               	
 5097 8249a 0C00 002E 	         CMPI.B  #'.',%D0
 5098 8249e 6652      	         BNE.S   ER4
 5099               	
 5100 824a0 101D      	         MOVE.B  (%A5)+,%D0
 5101 824a2 0C00 0057 	         CMPI.B  #'W',%D0
 5102 824a6 670A      	         BEQ.S   EA5118
 5103               	
 5104 824a8 0C00 004C 	         CMPI.B  #'L',%D0
 5105 824ac 6644      	         BNE.S   ER4            | NEITHER .W NOR .L
 5106               	
 5107 824ae 0045 0800 	         ORI.W   #0x0800,%D5    | EXTENSION WORD, W/L BIT = .L
 5108               	
 5109 824b2 0C1D 0029 	EA5118:  CMPI.B  #')',(%A5)+
 5110 824b6 663A      	         BNE.S   ER4            | NO CLOSING ")"
 5111               	
 5112 824b8 3985 3000 	EA5119:  MOVE.W  %D5,(%A4,%D3.W)
 5113 824bc 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 5114 824c0 5483      	         ADDQ.L  #2,%D3
 5115 824c2 4E75      	EA5119E: RTS
 5116               	
 5117               	*  <DATA>(P-----
 5118 824c4 528D      	EA61:    ADDQ.L  #1,%A5
 5119 824c6 0C1D 0043 	         CMPI.B  #'C',(%A5)+
 5120 824ca 6600 0660 	         BNE     ER
 5121               	
 5122 824ce 9AA9 000E 	         SUB.L   PCOUNTER(%A1),%D5 | D5 = D5 - PC
 5123 824d2 5585      	         SUBQ.L  #2,%D5         | D5 = D5 - (PC + 2)
 5124               	
 5125 824d4 101D      	         MOVE.B  (%A5)+,%D0
 5126 824d6 0C00 0029 	         CMPI.B  #')',%D0
 5127 824da 661A      	         BNE.S   EA71
 5128               	
 5129               	*  <DATA>(%PC)
 5130 824dc 0046 003A 	         ORI.W   #0x3A,%D6      | MODE = 111010
 5131               	
 5132 824e0 6172      	         BSR.S   EA16BITS       | -32K TO +32K
 5133 824e2 3985 3000 	         MOVE.W  %D5,(%A4,%D3.W)
 5134 824e6 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 5135 824ea 5483      	         ADDQ.L  #2,%D3
 5136               	
 5137 824ec 0807 0009 	         BTST    #9,%D7
 5138 824f0 66D0      	         BNE.S   EA5119E
 5139 824f2 6000 0638 	ER4:     BRA     ER
 5140               	
 5141               	*  <DATA>(PC----          PROGRAM COUNTER WITH INDEX
 5142 824f6 3C3C 003B 	EA71:    MOVE.W  #0x003B,%D6    | MODE = 111011
 5143               	
 5144 824fa 0C00 002C 	         CMPI.B  #',',%D0
 5145 824fe 66F2      	         BNE.S   ER4
 5146               	
 5147 82500 0807 000A 	         BTST    #10,%D7
68K GAS  tutor13.s 			page 97


 5148 82504 67EC      	         BEQ.S   ER4            | MODE NOT ALLOWED
 5149               	
 5150 82506 6160      	         BSR.S   EA8BITS        | -128 TO +127
 5151 82508 66E8      	         BNE.S   ER4
 5152               	
 5153 8250a 0245 00FF 	         ANDI.W  #0x00FF,%D5    | D5 = VALUE
 5154 8250e 6100 FD92 	         BSR     GETREGAD
 5155 82512 8041      	         OR.W    %D1,%D0
 5156               	
 5157 82514 E858      	         ROR.W   #4,%D0
 5158 82516 8A40      	         OR.W    %D0,%D5        | D5 = EXTENSION WORD
 5159               	
 5160 82518 101D      	         MOVE.B  (%A5)+,%D0
 5161 8251a 0C00 0029 	         CMPI.B  #')',%D0
 5162 8251e 671E      	         BEQ.S   EA7115         | DEFAULT  .W
 5163               	
 5164 82520 0C00 002E 	         CMPI.B  #'.',%D0
 5165 82524 66CC      	         BNE.S   ER4
 5166               	
 5167 82526 101D      	         MOVE.B  (%A5)+,%D0
 5168 82528 0C00 0057 	         CMPI.B  #'W',%D0
 5169 8252c 670A      	         BEQ.S   EA7113
 5170               	
 5171 8252e 0C00 004C 	         CMPI.B  #'L',%D0
 5172 82532 66BE      	         BNE.S   ER4
 5173 82534 0045 0800 	         ORI.W   #0x0800,%D5    | EXTENSION WORD W/L = .L
 5174               	
 5175 82538 0C1D 0029 	EA7113:  CMPI.B  #')',(%A5)+
 5176 8253c 66B4      	         BNE.S   ER4            | NO CLOSING ")"
 5177               	
 5178 8253e 3985 3000 	EA7115:  MOVE.W  %D5,(%A4,%D3.W)
 5179 82542 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 5180 82546 5483      	         ADDQ.L  #2,%D3
 5181 82548 4E75      	         RTS
 5182               	
 5183               	****************************************************************************
 5184               	*
 5185               	*        ROUTINES TO TEST FOR VALID EFFECTIVE ADDRESSES
 5186               	*
 5187               	*        EA16BIT   tests that -32768 <= %D5 <= 65535.  (signed or unsigned)
 5188               	*        EA16BITS  tests that -32768 <= %D5 <= 32767.  (signed only)
 5189               	*        EA8BIT    tests that   -128 <= %D5 <=   255.  (signed or unsigned)
 5190               	*        EA8BITS   tests that   -128 <= %D5 <=   127.  (signed only)
 5191               	*
 5192               	*        The 16-bit tests branch to ER if invalid, else return.
 5193               	*        The  8-bit tests return condition codes <EQ> if valid, else <NE>.
 5194               	*        %D5 is preserved unless a branch to ER results.
 5195               	*        %D1 is destroyed.
 5196               	*
 5197               	****************************************************************************
 5198               	
 5199               	EA16BIT:
 5200 8254a 610C      	         BSR.S   EA16BITC       | CHECK RANGE -32768 TO 32767.  IF
 5201 8254c 2205      	         MOVE.L  %D5,%D1        | INVALID, CHECK WHETHER THE HIGH 16
 5202 8254e 4841      	         SWAP    %D1            | BITS ARE 0 (WHICH IMPLIES THAT
 5203 82550 4A41      	         TST.W   %D1            | D5 <= 65535).  IF NOT, FALL THRU TO
 5204 82552 6728      	         BEQ.S   EASEX          | THE 16-BIT SIGNED TEST--WE WILL
68K GAS  tutor13.s 			page 98


 5205               	*                               | FAIL AND GO TO ER.
 5206               	
 5207               	EA16BITS:
 5208 82554 487A 05D6 	         PEA     ER(%PC)        | SET UP TO RETURN TO ER IF INVALID.
 5209               	
 5210 82558 223C 0000 	EA16BITC:MOVE.L  #0x7FFF,%D1    | D1  <--  2^16-1.
 5210      7FFF 
 5211 8255e 600E      	         BRA.S   EAS            | GO TO THE COMMON TEST ROUTINE.
 5212               	
 5213               	EA8BIT:
 5214 82560 610A      	         BSR.S   EA8BITC        | CHECK RANGE -128 TO 127.  IF INVALID,
 5215 82562 2205      	         MOVE.L  %D5,%D1        | CHECK WHETHER THE HIGH 24 BITS ARE
 5216 82564 E089      	         LSR.L   #8,%D1         | 0 (WHICH IMPLIES THAT D5 <= 255).
 5217 82566 4E75      	         RTS
 5218               	
 5219               	EA8BITS:
 5220 82568 6102      	         BSR.S   EA8BITC        |JUST CHECK FOR -127 <= D5 <= 128.
 5221 8256a 4E75      	         RTS                    | (BSR PUTS NEEDED ADDRESS ON STACK!)
 5222               	
 5223 8256c 727F      	EA8BITC: MOVEQ   #0x7F,%D1      | D1  <--  2^8 - 1.
 5224               	
 5225               	*                  *** NOTE: THIS ROUTINE PLAYS WITH THE STACK ***
 5226 8256e BA81      	EAS:     CMP.L   %D1,%D5        | IF D5 > 2^N-1, RETURN WITH <NE> (INVAL).
 5227 82570 6E0A      	         BGT.S   EASEX
 5228 82572 4681      	         NOT.L   %D1            | IF D5 < -2^N,  RETURN WITH <NE> (INVAL).
 5229 82574 BA81      	         CMP.L   %D1,%D5
 5230 82576 6D04      	         BLT.S   EASEX
 5231               	
 5232 82578 588F      	         ADDQ.L  #4,%A7         | POP THE RETURN ADDRESS OFF THE STACK,
 5233 8257a 4281      	         CLR.L   %D1            | SET <EQ> (VALID), AND RETURN.
 5234               	
 5235 8257c 4E75      	EASEX:   RTS
 5236               	
 5237               	ADR:     .MACRO a1
 5238               	         DC.W    M\a1-XBASE
 5239               	         .ENDM
 5240               	
 5241               	TBLKEYS: .align  2              | INDEX
 5242               	         ADR     ABCD           |  0  ABCD SBCD
 5242 8257e 0438      	>  DC.W MABCD-XBASE
 5243               	         ADR     ADD            |  1  ADD  SUB
 5243 82580 0432      	>  DC.W MADD-XBASE
 5244               	         ADR     ADDA           |  2  ADDA CMPA SUBA
 5244 82582 042C      	>  DC.W MADDA-XBASE
 5245               	         ADR     ADDI           |  3  ADDI CMPI SUBI
 5245 82584 0426      	>  DC.W MADDI-XBASE
 5246               	         ADR     ADDQ           |  4  ADDQ SUBQ
 5246 82586 0420      	>  DC.W MADDQ-XBASE
 5247               	         ADR     ADDX           |  5  ADDX SUBX
 5247 82588 041A      	>  DC.W MADDX-XBASE
 5248               	         ADR     AND            |  6  AND  EOR OR
 5248 8258a 0414      	>  DC.W MAND-XBASE
 5249               	         ADR     ASL            |  7  ASL  LSL ROL ROXL
 5249 8258c 040E      	>  DC.W MASL-XBASE
 5250               	         ADR     DBCC           |  8  DBCC
 5250 8258e 0408      	>  DC.W MDBCC-XBASE
 5251               	         ADR     BCHG           |  9  BCHG
68K GAS  tutor13.s 			page 99


 5251 82590 0402      	>  DC.W MBCHG-XBASE
 5252               	         ADR     BRA            | 10  BRA BSR BCC
 5252 82592 03FC      	>  DC.W MBRA-XBASE
 5253               	         ADR     BSET           | 11  BSET
 5253 82594 03F6      	>  DC.W MBSET-XBASE
 5254               	         ADR     CHK            | 12  CHK  DIVS DIVU MILS MULU
 5254 82596 03F0      	>  DC.W MCHK-XBASE
 5255               	         ADR     CLR            | 13  CLR NEG NEGX NOT TST
 5255 82598 03EA      	>  DC.W MCLR-XBASE
 5256               	         ADR     CMPM           | 14  CMPM
 5256 8259a 03E4      	>  DC.W MCMPM-XBASE
 5257               	         ADR     MOVEQ          | 15  MOVEQ
 5257 8259c 03DE      	>  DC.W MMOVEQ-XBASE
 5258               	         ADR     EXG            | 16  EXG
 5258 8259e 03D8      	>  DC.W MEXG-XBASE
 5259               	         ADR     EXT            | 17  EXT
 5259 825a0 03D2      	>  DC.W MEXT-XBASE
 5260               	         ADR     JMP            | 18  JMP  JSR
 5260 825a2 03CC      	>  DC.W MJMP-XBASE
 5261               	         ADR     LEA            | 19  LEA
 5261 825a4 03C6      	>  DC.W MLEA-XBASE
 5262               	         ADR     LINK           | 20  LINK
 5262 825a6 03C0      	>  DC.W MLINK-XBASE
 5263               	         ADR     MOVE           | 21  MOVE
 5263 825a8 03BA      	>  DC.W MMOVE-XBASE
 5264               	         ADR     CMMD2          | 22  NOP RESET RTE RTR RTS TRAPV
 5264 825aa 03B4      	>  DC.W MCMMD2-XBASE
 5265               	         ADR     STOP           | 23  STOP
 5265 825ac 03AE      	>  DC.W MSTOP-XBASE
 5266               	         ADR     SWAP           | 24  SWAP
 5266 825ae 03A8      	>  DC.W MSWAP-XBASE
 5267               	         ADR     TRAP           | 25  TRAP
 5267 825b0 03A2      	>  DC.W MTRAP-XBASE
 5268               	         ADR     UNLK           | 26  UNLK
 5268 825b2 039C      	>  DC.W MUNLK-XBASE
 5269               	         ADR     MOVEM          | 27  MOVEM
 5269 825b4 0396      	>  DC.W MMOVEM-XBASE
 5270               	         ADR     ANDI           | 28  ANDI EORI ORI
 5270 825b6 0390      	>  DC.W MANDI-XBASE
 5271               	         ADR     SCC            | 29  NBCD SCC TAS
 5271 825b8 038A      	>  DC.W MSCC-XBASE
 5272               	         ADR     BCLR           | 30  BCLR
 5272 825ba 0384      	>  DC.W MBCLR-XBASE
 5273               	         ADR     BTST           | 31  BTST
 5273 825bc 037E      	>  DC.W MBTST-XBASE
 5274               	         ADR     MOVEA          | 32  MOVEA
 5274 825be 0378      	>  DC.W MMOVEA-XBASE
 5275               	         ADR     MOVEP          | 33  MOVEP
 5275 825c0 0372      	>  DC.W MMOVEP-XBASE
 5276               	         ADR     CMP            | 34  CMP
 5276 825c2 036C      	>  DC.W MCMP-XBASE
 5277               	         ADR     EOR            | 35  EOR
 5277 825c4 0366      	>  DC.W MEOR-XBASE
 5278               	         ADR     PEA            | 36  PEA
 5278 825c6 0360      	>  DC.W MPEA-XBASE
 5279               	         ADR     DC             | 37  DC.W
 5279 825c8 035A      	>  DC.W MDC-XBASE
68K GAS  tutor13.s 			page 100


 5280               	
 5281               	* \1,\2 = MNEMONIC (\2 SIGN BIT SET AS LAST CHARACTER)
 5282               	* \3    = INDEX TO TABLKEYS
 5283               	* \4,\5 = FIRST WORD MASK
 5284               	* \6    = NO OPERAND ALLOWED IF SIGN SET
 5285               	* \7    = .S ALLOWED (.W NOT ALLOWED)
 5286 825ca 6000 00E6 	OPC:     .MACRO a1,a2,a3,a4,a5,a6,a7
 5286      4EF9 0000 
 5286      0000 4EF9 
 5286      0000 0000 
 5286      4EF9 0000 
 5287               	         .ascii  "\a1"
 5288               	         DC.B    \a2
 5289               	         DC.B    \a3 + \a6 + \a7
 5290               	         DC.B    0x\a4
 5291               	         DC.B    0x\a5
 5292               	         .ENDM
 5293               	
 5294               	NOC      =       0x80           | (BIT 7 SET) NO OPERAND
 5295               	NW       =       0x40           | (BIT 6 SET) .W NOT ALLOWED
 5296               	
 5297               	TBLOPC:  OPC     ABC,0xc4,0,C1,00,0,0  | ABCD
 5297 826b2 4142 43   	>  .ascii "ABC"
 5297 826b5 C4        	>  DC.B 0xc4
 5297 826b6 00        	>  DC.B 0+0+0
 5297 826b7 C1        	>  DC.B 0xC1
 5297 826b8 00        	>  DC.B 0x00
 5298               	         OPC     ADD,0xc1,2,D0,C0,0,0  | ADDA
 5298 826b9 4144 44   	>  .ascii "ADD"
 5298 826bc C1        	>  DC.B 0xc1
 5298 826bd 02        	>  DC.B 2+0+0
 5298 826be D0        	>  DC.B 0xD0
 5298 826bf C0        	>  DC.B 0xC0
 5299               	         OPC     ADD,0xc9,3,06,00,0,0  | ADDI
 5299 826c0 4144 44   	>  .ascii "ADD"
 5299 826c3 C9        	>  DC.B 0xc9
 5299 826c4 03        	>  DC.B 3+0+0
 5299 826c5 06        	>  DC.B 0x06
 5299 826c6 00        	>  DC.B 0x00
 5300               	         OPC     ADD,0xd1,4,50,00,0,0  | ADDQ
 5300 826c7 4144 44   	>  .ascii "ADD"
 5300 826ca D1        	>  DC.B 0xd1
 5300 826cb 04        	>  DC.B 4+0+0
 5300 826cc 50        	>  DC.B 0x50
 5300 826cd 00        	>  DC.B 0x00
 5301               	         OPC     ADD,0xd8,5,D1,00,0,0  | ADDX
 5301 826ce 4144 44   	>  .ascii "ADD"
 5301 826d1 D8        	>  DC.B 0xd8
 5301 826d2 05        	>  DC.B 5+0+0
 5301 826d3 D1        	>  DC.B 0xD1
 5301 826d4 00        	>  DC.B 0x00
 5302               	         OPC     AD,0xc4,1,D0,00,0,0   | ADD
 5302 826d5 4144      	>  .ascii "AD"
 5302 826d7 C4        	>  DC.B 0xc4
 5302 826d8 01        	>  DC.B 1+0+0
 5302 826d9 D0        	>  DC.B 0xD0
 5302 826da 00        	>  DC.B 0x00
68K GAS  tutor13.s 			page 101


 5303               	         OPC     AND,0xc9,28,02,00,0,0 | ANDI
 5303 826db 414E 44   	>  .ascii "AND"
 5303 826de C9        	>  DC.B 0xc9
 5303 826df 1C        	>  DC.B 28+0+0
 5303 826e0 02        	>  DC.B 0x02
 5303 826e1 00        	>  DC.B 0x00
 5304               	         OPC     AN,0xc4,6,C0,00,0,0   | AND
 5304 826e2 414E      	>  .ascii "AN"
 5304 826e4 C4        	>  DC.B 0xc4
 5304 826e5 06        	>  DC.B 6+0+0
 5304 826e6 C0        	>  DC.B 0xC0
 5304 826e7 00        	>  DC.B 0x00
 5305               	         OPC     AS,0xcc,7,E1,00,0,0   | ASL
 5305 826e8 4153      	>  .ascii "AS"
 5305 826ea CC        	>  DC.B 0xcc
 5305 826eb 07        	>  DC.B 7+0+0
 5305 826ec E1        	>  DC.B 0xE1
 5305 826ed 00        	>  DC.B 0x00
 5306               	         OPC     AS,0xd2,07,E0,00,0,0  | ASR
 5306 826ee 4153      	>  .ascii "AS"
 5306 826f0 D2        	>  DC.B 0xd2
 5306 826f1 07        	>  DC.B 07+0+0
 5306 826f2 E0        	>  DC.B 0xE0
 5306 826f3 00        	>  DC.B 0x00
 5307               	         OPC     BR,0xc1,10,60,00,0,NW | BRA
 5307 826f4 4252      	>  .ascii "BR"
 5307 826f6 C1        	>  DC.B 0xc1
 5307 826f7 4A        	>  DC.B 10+0+NW
 5307 826f8 60        	>  DC.B 0x60
 5307 826f9 00        	>  DC.B 0x00
 5308               	         OPC     BH,0xc9,10,62,00,0,NW | BHI
 5308 826fa 4248      	>  .ascii "BH"
 5308 826fc C9        	>  DC.B 0xc9
 5308 826fd 4A        	>  DC.B 10+0+NW
 5308 826fe 62        	>  DC.B 0x62
 5308 826ff 00        	>  DC.B 0x00
 5309               	         OPC     BL,0xd3,10,63,00,0,NW | BLS
 5309 82700 424C      	>  .ascii "BL"
 5309 82702 D3        	>  DC.B 0xd3
 5309 82703 4A        	>  DC.B 10+0+NW
 5309 82704 63        	>  DC.B 0x63
 5309 82705 00        	>  DC.B 0x00
 5310               	         OPC     BC,0xc3,10,64,00,0,NW | BCC
 5310 82706 4243      	>  .ascii "BC"
 5310 82708 C3        	>  DC.B 0xc3
 5310 82709 4A        	>  DC.B 10+0+NW
 5310 8270a 64        	>  DC.B 0x64
 5310 8270b 00        	>  DC.B 0x00
 5311               	         OPC     BC,0xd3,10,65,00,0,NW | BCS
 5311 8270c 4243      	>  .ascii "BC"
 5311 8270e D3        	>  DC.B 0xd3
 5311 8270f 4A        	>  DC.B 10+0+NW
 5311 82710 65        	>  DC.B 0x65
 5311 82711 00        	>  DC.B 0x00
 5312               	         OPC     BN,0xc5,10,66,00,0,NW | BNE
 5312 82712 424E      	>  .ascii "BN"
 5312 82714 C5        	>  DC.B 0xc5
68K GAS  tutor13.s 			page 102


 5312 82715 4A        	>  DC.B 10+0+NW
 5312 82716 66        	>  DC.B 0x66
 5312 82717 00        	>  DC.B 0x00
 5313               	         OPC     BE,0xd1,10,67,00,0,NW | BEQ
 5313 82718 4245      	>  .ascii "BE"
 5313 8271a D1        	>  DC.B 0xd1
 5313 8271b 4A        	>  DC.B 10+0+NW
 5313 8271c 67        	>  DC.B 0x67
 5313 8271d 00        	>  DC.B 0x00
 5314               	         OPC     BV,0xc3,10,68,00,0,NW | BVC
 5314 8271e 4256      	>  .ascii "BV"
 5314 82720 C3        	>  DC.B 0xc3
 5314 82721 4A        	>  DC.B 10+0+NW
 5314 82722 68        	>  DC.B 0x68
 5314 82723 00        	>  DC.B 0x00
 5315               	         OPC     BV,0xd3,10,69,00,0,NW | BVS
 5315 82724 4256      	>  .ascii "BV"
 5315 82726 D3        	>  DC.B 0xd3
 5315 82727 4A        	>  DC.B 10+0+NW
 5315 82728 69        	>  DC.B 0x69
 5315 82729 00        	>  DC.B 0x00
 5316               	         OPC     BP,0xcc,10,6A,00,0,NW | BPL
 5316 8272a 4250      	>  .ascii "BP"
 5316 8272c CC        	>  DC.B 0xcc
 5316 8272d 4A        	>  DC.B 10+0+NW
 5316 8272e 6A        	>  DC.B 0x6A
 5316 8272f 00        	>  DC.B 0x00
 5317               	         OPC     BM,0xc9,10,6B,00,0,NW | BMI
 5317 82730 424D      	>  .ascii "BM"
 5317 82732 C9        	>  DC.B 0xc9
 5317 82733 4A        	>  DC.B 10+0+NW
 5317 82734 6B        	>  DC.B 0x6B
 5317 82735 00        	>  DC.B 0x00
 5318               	         OPC     BG,0xc5,10,6C,00,0,NW | BGE
 5318 82736 4247      	>  .ascii "BG"
 5318 82738 C5        	>  DC.B 0xc5
 5318 82739 4A        	>  DC.B 10+0+NW
 5318 8273a 6C        	>  DC.B 0x6C
 5318 8273b 00        	>  DC.B 0x00
 5319               	         OPC     BL,0xd4,10,6D,00,0,NW | BLT
 5319 8273c 424C      	>  .ascii "BL"
 5319 8273e D4        	>  DC.B 0xd4
 5319 8273f 4A        	>  DC.B 10+0+NW
 5319 82740 6D        	>  DC.B 0x6D
 5319 82741 00        	>  DC.B 0x00
 5320               	         OPC     BG,0xd4,10,6E,00,0,NW | BGT
 5320 82742 4247      	>  .ascii "BG"
 5320 82744 D4        	>  DC.B 0xd4
 5320 82745 4A        	>  DC.B 10+0+NW
 5320 82746 6E        	>  DC.B 0x6E
 5320 82747 00        	>  DC.B 0x00
 5321               	         OPC     BL,0xc5,10,6F,00,0,NW | BLE
 5321 82748 424C      	>  .ascii "BL"
 5321 8274a C5        	>  DC.B 0xc5
 5321 8274b 4A        	>  DC.B 10+0+NW
 5321 8274c 6F        	>  DC.B 0x6F
 5321 8274d 00        	>  DC.B 0x00
68K GAS  tutor13.s 			page 103


 5322               	         OPC     BCH,0xc7,9,01,40,0,0  | BCHG
 5322 8274e 4243 48   	>  .ascii "BCH"
 5322 82751 C7        	>  DC.B 0xc7
 5322 82752 09        	>  DC.B 9+0+0
 5322 82753 01        	>  DC.B 0x01
 5322 82754 40        	>  DC.B 0x40
 5323               	         OPC     BCL,0xd2,30,01,80,0,0 | BCLR      DYNAMIC
 5323 82755 4243 4C   	>  .ascii "BCL"
 5323 82758 D2        	>  DC.B 0xd2
 5323 82759 1E        	>  DC.B 30+0+0
 5323 8275a 01        	>  DC.B 0x01
 5323 8275b 80        	>  DC.B 0x80
 5324               	         OPC     BSE,0xd4,11,01,C0,0,0 | BSET
 5324 8275c 4253 45   	>  .ascii "BSE"
 5324 8275f D4        	>  DC.B 0xd4
 5324 82760 0B        	>  DC.B 11+0+0
 5324 82761 01        	>  DC.B 0x01
 5324 82762 C0        	>  DC.B 0xC0
 5325               	         OPC     BS,0xd2,10,61,00,0,NW | BSR
 5325 82763 4253      	>  .ascii "BS"
 5325 82765 D2        	>  DC.B 0xd2
 5325 82766 4A        	>  DC.B 10+0+NW
 5325 82767 61        	>  DC.B 0x61
 5325 82768 00        	>  DC.B 0x00
 5326               	         OPC     BTS,0xd4,31,01,00,0,0 | BTST
 5326 82769 4254 53   	>  .ascii "BTS"
 5326 8276c D4        	>  DC.B 0xd4
 5326 8276d 1F        	>  DC.B 31+0+0
 5326 8276e 01        	>  DC.B 0x01
 5326 8276f 00        	>  DC.B 0x00
 5327               	         OPC     B,0xd4,10,60,00,0,NW  | BT
 5327 82770 42        	>  .ascii "B"
 5327 82771 D4        	>  DC.B 0xd4
 5327 82772 4A        	>  DC.B 10+0+NW
 5327 82773 60        	>  DC.B 0x60
 5327 82774 00        	>  DC.B 0x00
 5328               	         OPC     CH,0xcb,12,41,80,0,0  | CHK
 5328 82775 4348      	>  .ascii "CH"
 5328 82777 CB        	>  DC.B 0xcb
 5328 82778 0C        	>  DC.B 12+0+0
 5328 82779 41        	>  DC.B 0x41
 5328 8277a 80        	>  DC.B 0x80
 5329               	         OPC     CL,0xd2,13,42,00,0,0  | CLR
 5329 8277b 434C      	>  .ascii "CL"
 5329 8277d D2        	>  DC.B 0xd2
 5329 8277e 0D        	>  DC.B 13+0+0
 5329 8277f 42        	>  DC.B 0x42
 5329 82780 00        	>  DC.B 0x00
 5330               	         OPC     CMP,0xc1,2,B0,C0,0,0  | CMPA
 5330 82781 434D 50   	>  .ascii "CMP"
 5330 82784 C1        	>  DC.B 0xc1
 5330 82785 02        	>  DC.B 2+0+0
 5330 82786 B0        	>  DC.B 0xB0
 5330 82787 C0        	>  DC.B 0xC0
 5331               	         OPC     CMP,0xc9,3,0C,00,0,0  | CMPI
 5331 82788 434D 50   	>  .ascii "CMP"
 5331 8278b C9        	>  DC.B 0xc9
68K GAS  tutor13.s 			page 104


 5331 8278c 03        	>  DC.B 3+0+0
 5331 8278d 0C        	>  DC.B 0x0C
 5331 8278e 00        	>  DC.B 0x00
 5332               	         OPC     CMP,0xcd,14,B1,08,0,0 | CMPM
 5332 8278f 434D 50   	>  .ascii "CMP"
 5332 82792 CD        	>  DC.B 0xcd
 5332 82793 0E        	>  DC.B 14+0+0
 5332 82794 B1        	>  DC.B 0xB1
 5332 82795 08        	>  DC.B 0x08
 5333               	         OPC     CM,0xd0,34,B0,00,0,0  | CMP
 5333 82796 434D      	>  .ascii "CM"
 5333 82798 D0        	>  DC.B 0xd0
 5333 82799 22        	>  DC.B 34+0+0
 5333 8279a B0        	>  DC.B 0xB0
 5333 8279b 00        	>  DC.B 0x00
 5334               	         OPC     DB,0xd4,8,50,C8,0,NW  | DBT
 5334 8279c 4442      	>  .ascii "DB"
 5334 8279e D4        	>  DC.B 0xd4
 5334 8279f 48        	>  DC.B 8+0+NW
 5334 827a0 50        	>  DC.B 0x50
 5334 827a1 C8        	>  DC.B 0xC8
 5335               	         OPC     DB,0xc6,8,51,C8,0,NW  | DBF
 5335 827a2 4442      	>  .ascii "DB"
 5335 827a4 C6        	>  DC.B 0xc6
 5335 827a5 48        	>  DC.B 8+0+NW
 5335 827a6 51        	>  DC.B 0x51
 5335 827a7 C8        	>  DC.B 0xC8
 5336               	         OPC     DBR,0xc1,8,51,C8,0,NW | DBRA
 5336 827a8 4442 52   	>  .ascii "DBR"
 5336 827ab C1        	>  DC.B 0xc1
 5336 827ac 48        	>  DC.B 8+0+NW
 5336 827ad 51        	>  DC.B 0x51
 5336 827ae C8        	>  DC.B 0xC8
 5337               	         OPC     DBH,0xc9,8,52,C8,0,NW | DBHI
 5337 827af 4442 48   	>  .ascii "DBH"
 5337 827b2 C9        	>  DC.B 0xc9
 5337 827b3 48        	>  DC.B 8+0+NW
 5337 827b4 52        	>  DC.B 0x52
 5337 827b5 C8        	>  DC.B 0xC8
 5338               	         OPC     DBL,0xd3,8,53,C8,0,NW | DBLS
 5338 827b6 4442 4C   	>  .ascii "DBL"
 5338 827b9 D3        	>  DC.B 0xd3
 5338 827ba 48        	>  DC.B 8+0+NW
 5338 827bb 53        	>  DC.B 0x53
 5338 827bc C8        	>  DC.B 0xC8
 5339               	         OPC     DBC,0xc3,8,54,C8,0,NW | DBCC
 5339 827bd 4442 43   	>  .ascii "DBC"
 5339 827c0 C3        	>  DC.B 0xc3
 5339 827c1 48        	>  DC.B 8+0+NW
 5339 827c2 54        	>  DC.B 0x54
 5339 827c3 C8        	>  DC.B 0xC8
 5340               	         OPC     DBC,0xd3,8,55,C8,0,NW | DBCS
 5340 827c4 4442 43   	>  .ascii "DBC"
 5340 827c7 D3        	>  DC.B 0xd3
 5340 827c8 48        	>  DC.B 8+0+NW
 5340 827c9 55        	>  DC.B 0x55
 5340 827ca C8        	>  DC.B 0xC8
68K GAS  tutor13.s 			page 105


 5341               	         OPC     DBN,0xc5,8,56,C8,0,NW | DBNE
 5341 827cb 4442 4E   	>  .ascii "DBN"
 5341 827ce C5        	>  DC.B 0xc5
 5341 827cf 48        	>  DC.B 8+0+NW
 5341 827d0 56        	>  DC.B 0x56
 5341 827d1 C8        	>  DC.B 0xC8
 5342               	         OPC     DBE,0xd1,8,57,C8,0,NW | DBEQ
 5342 827d2 4442 45   	>  .ascii "DBE"
 5342 827d5 D1        	>  DC.B 0xd1
 5342 827d6 48        	>  DC.B 8+0+NW
 5342 827d7 57        	>  DC.B 0x57
 5342 827d8 C8        	>  DC.B 0xC8
 5343               	         OPC     DBV,0xc3,8,58,C8,0,NW | DBVC
 5343 827d9 4442 56   	>  .ascii "DBV"
 5343 827dc C3        	>  DC.B 0xc3
 5343 827dd 48        	>  DC.B 8+0+NW
 5343 827de 58        	>  DC.B 0x58
 5343 827df C8        	>  DC.B 0xC8
 5344               	         OPC     DBV,0xd3,8,59,C8,0,NW | DBVS
 5344 827e0 4442 56   	>  .ascii "DBV"
 5344 827e3 D3        	>  DC.B 0xd3
 5344 827e4 48        	>  DC.B 8+0+NW
 5344 827e5 59        	>  DC.B 0x59
 5344 827e6 C8        	>  DC.B 0xC8
 5345               	         OPC     DBP,0xcc,8,5A,C8,0,NW | DBPL
 5345 827e7 4442 50   	>  .ascii "DBP"
 5345 827ea CC        	>  DC.B 0xcc
 5345 827eb 48        	>  DC.B 8+0+NW
 5345 827ec 5A        	>  DC.B 0x5A
 5345 827ed C8        	>  DC.B 0xC8
 5346               	         OPC     DBM,0xc9,8,5B,C8,0,NW | DBMI
 5346 827ee 4442 4D   	>  .ascii "DBM"
 5346 827f1 C9        	>  DC.B 0xc9
 5346 827f2 48        	>  DC.B 8+0+NW
 5346 827f3 5B        	>  DC.B 0x5B
 5346 827f4 C8        	>  DC.B 0xC8
 5347               	         OPC     DBG,0xc5,8,5C,C8,0,NW | DBGE
 5347 827f5 4442 47   	>  .ascii "DBG"
 5347 827f8 C5        	>  DC.B 0xc5
 5347 827f9 48        	>  DC.B 8+0+NW
 5347 827fa 5C        	>  DC.B 0x5C
 5347 827fb C8        	>  DC.B 0xC8
 5348               	         OPC     DBL,0xd4,8,5D,C8,0,NW | DBLT
 5348 827fc 4442 4C   	>  .ascii "DBL"
 5348 827ff D4        	>  DC.B 0xd4
 5348 82800 48        	>  DC.B 8+0+NW
 5348 82801 5D        	>  DC.B 0x5D
 5348 82802 C8        	>  DC.B 0xC8
 5349               	         OPC     DBG,0xd4,8,5E,C8,0,NW | DBGT
 5349 82803 4442 47   	>  .ascii "DBG"
 5349 82806 D4        	>  DC.B 0xd4
 5349 82807 48        	>  DC.B 8+0+NW
 5349 82808 5E        	>  DC.B 0x5E
 5349 82809 C8        	>  DC.B 0xC8
 5350               	         OPC     DBL,0xc5,8,5F,C8,0,NW | DBLE
 5350 8280a 4442 4C   	>  .ascii "DBL"
 5350 8280d C5        	>  DC.B 0xc5
68K GAS  tutor13.s 			page 106


 5350 8280e 48        	>  DC.B 8+0+NW
 5350 8280f 5F        	>  DC.B 0x5F
 5350 82810 C8        	>  DC.B 0xC8
 5351               	         OPC     DC.,0xd7,37,00,00,0,0 | DC.W  (WORD ONLY)
 5351 82811 4443 2E   	>  .ascii "DC."
 5351 82814 D7        	>  DC.B 0xd7
 5351 82815 25        	>  DC.B 37+0+0
 5351 82816 00        	>  DC.B 0x00
 5351 82817 00        	>  DC.B 0x00
 5352               	         OPC     DIV,0xd3,12,81,C0,0,0 | DIVS
 5352 82818 4449 56   	>  .ascii "DIV"
 5352 8281b D3        	>  DC.B 0xd3
 5352 8281c 0C        	>  DC.B 12+0+0
 5352 8281d 81        	>  DC.B 0x81
 5352 8281e C0        	>  DC.B 0xC0
 5353               	         OPC     DIV,0xd5,12,80,C0,0,0 | DIVU
 5353 8281f 4449 56   	>  .ascii "DIV"
 5353 82822 D5        	>  DC.B 0xd5
 5353 82823 0C        	>  DC.B 12+0+0
 5353 82824 80        	>  DC.B 0x80
 5353 82825 C0        	>  DC.B 0xC0
 5354               	         OPC     EOR,0xc9,28,0A,00,0,0 | EORI
 5354 82826 454F 52   	>  .ascii "EOR"
 5354 82829 C9        	>  DC.B 0xc9
 5354 8282a 1C        	>  DC.B 28+0+0
 5354 8282b 0A        	>  DC.B 0x0A
 5354 8282c 00        	>  DC.B 0x00
 5355               	         OPC     EO,0xd2,35,B1,00,0,0  | EOR
 5355 8282d 454F      	>  .ascii "EO"
 5355 8282f D2        	>  DC.B 0xd2
 5355 82830 23        	>  DC.B 35+0+0
 5355 82831 B1        	>  DC.B 0xB1
 5355 82832 00        	>  DC.B 0x00
 5356               	         OPC     EX,0xc7,16,C1,00,0,0  | EXG
 5356 82833 4558      	>  .ascii "EX"
 5356 82835 C7        	>  DC.B 0xc7
 5356 82836 10        	>  DC.B 16+0+0
 5356 82837 C1        	>  DC.B 0xC1
 5356 82838 00        	>  DC.B 0x00
 5357               	         OPC     EX,0xd4,17,48,00,0,0  | EXT
 5357 82839 4558      	>  .ascii "EX"
 5357 8283b D4        	>  DC.B 0xd4
 5357 8283c 11        	>  DC.B 17+0+0
 5357 8283d 48        	>  DC.B 0x48
 5357 8283e 00        	>  DC.B 0x00
 5358               	         OPC     JM,0xd0,18,4E,C0,0,NW | JMP
 5358 8283f 4A4D      	>  .ascii "JM"
 5358 82841 D0        	>  DC.B 0xd0
 5358 82842 52        	>  DC.B 18+0+NW
 5358 82843 4E        	>  DC.B 0x4E
 5358 82844 C0        	>  DC.B 0xC0
 5359               	         OPC     JS,0xd2,18,4E,80,0,NW | JSR
 5359 82845 4A53      	>  .ascii "JS"
 5359 82847 D2        	>  DC.B 0xd2
 5359 82848 52        	>  DC.B 18+0+NW
 5359 82849 4E        	>  DC.B 0x4E
 5359 8284a 80        	>  DC.B 0x80
68K GAS  tutor13.s 			page 107


 5360               	         OPC     LE,0xc1,19,41,C0,0,0  | LEA
 5360 8284b 4C45      	>  .ascii "LE"
 5360 8284d C1        	>  DC.B 0xc1
 5360 8284e 13        	>  DC.B 19+0+0
 5360 8284f 41        	>  DC.B 0x41
 5360 82850 C0        	>  DC.B 0xC0
 5361               	         OPC     LIN,0xcb,20,4E,50,0,0 | LINK
 5361 82851 4C49 4E   	>  .ascii "LIN"
 5361 82854 CB        	>  DC.B 0xcb
 5361 82855 14        	>  DC.B 20+0+0
 5361 82856 4E        	>  DC.B 0x4E
 5361 82857 50        	>  DC.B 0x50
 5362               	         OPC     LS,0xcc,7,E3,08,0,0   | LSL
 5362 82858 4C53      	>  .ascii "LS"
 5362 8285a CC        	>  DC.B 0xcc
 5362 8285b 07        	>  DC.B 7+0+0
 5362 8285c E3        	>  DC.B 0xE3
 5362 8285d 08        	>  DC.B 0x08
 5363               	         OPC     LS,0xd2,07,E2,08,0,0  | LSR
 5363 8285e 4C53      	>  .ascii "LS"
 5363 82860 D2        	>  DC.B 0xd2
 5363 82861 07        	>  DC.B 07+0+0
 5363 82862 E2        	>  DC.B 0xE2
 5363 82863 08        	>  DC.B 0x08
 5364               	         OPC     MOVE,0xc1,32,00,04,0,0| MOVEA
 5364 82864 4D4F 5645 	>  .ascii "MOVE"
 5364 82868 C1        	>  DC.B 0xc1
 5364 82869 20        	>  DC.B 32+0+0
 5364 8286a 00        	>  DC.B 0x00
 5364 8286b 04        	>  DC.B 0x04
 5365               	         OPC     MOVE,0xcd,27,48,80,0,0| MOVEM
 5365 8286c 4D4F 5645 	>  .ascii "MOVE"
 5365 82870 CD        	>  DC.B 0xcd
 5365 82871 1B        	>  DC.B 27+0+0
 5365 82872 48        	>  DC.B 0x48
 5365 82873 80        	>  DC.B 0x80
 5366               	         OPC     MOVE,0xd0,33,01,08,0,0| MOVEP
 5366 82874 4D4F 5645 	>  .ascii "MOVE"
 5366 82878 D0        	>  DC.B 0xd0
 5366 82879 21        	>  DC.B 33+0+0
 5366 8287a 01        	>  DC.B 0x01
 5366 8287b 08        	>  DC.B 0x08
 5367               	         OPC     MOVE,0xd1,15,70,00,0,0| MOVEQ
 5367 8287c 4D4F 5645 	>  .ascii "MOVE"
 5367 82880 D1        	>  DC.B 0xd1
 5367 82881 0F        	>  DC.B 15+0+0
 5367 82882 70        	>  DC.B 0x70
 5367 82883 00        	>  DC.B 0x00
 5368               	         OPC     MOV,0xc5,21,00,00,0,0 | MOVE
 5368 82884 4D4F 56   	>  .ascii "MOV"
 5368 82887 C5        	>  DC.B 0xc5
 5368 82888 15        	>  DC.B 21+0+0
 5368 82889 00        	>  DC.B 0x00
 5368 8288a 00        	>  DC.B 0x00
 5369               	         OPC     MUL,0xd3,12,C1,C0,0,0 | MULS
 5369 8288b 4D55 4C   	>  .ascii "MUL"
 5369 8288e D3        	>  DC.B 0xd3
68K GAS  tutor13.s 			page 108


 5369 8288f 0C        	>  DC.B 12+0+0
 5369 82890 C1        	>  DC.B 0xC1
 5369 82891 C0        	>  DC.B 0xC0
 5370               	         OPC     MUL,0xd5,12,C0,C0,0,0 | MULU
 5370 82892 4D55 4C   	>  .ascii "MUL"
 5370 82895 D5        	>  DC.B 0xd5
 5370 82896 0C        	>  DC.B 12+0+0
 5370 82897 C0        	>  DC.B 0xC0
 5370 82898 C0        	>  DC.B 0xC0
 5371               	         OPC     NBC,0xc4,29,48,0,0,0  | NBCD
 5371 82899 4E42 43   	>  .ascii "NBC"
 5371 8289c C4        	>  DC.B 0xc4
 5371 8289d 1D        	>  DC.B 29+0+0
 5371 8289e 48        	>  DC.B 0x48
 5371 8289f 00        	>  DC.B 0x0
 5372               	         OPC     NEG,0xd8,13,40,00,0,0 | NEGX
 5372 828a0 4E45 47   	>  .ascii "NEG"
 5372 828a3 D8        	>  DC.B 0xd8
 5372 828a4 0D        	>  DC.B 13+0+0
 5372 828a5 40        	>  DC.B 0x40
 5372 828a6 00        	>  DC.B 0x00
 5373               	         OPC     NE,0xc7,13,44,00,0,0  | NEG
 5373 828a7 4E45      	>  .ascii "NE"
 5373 828a9 C7        	>  DC.B 0xc7
 5373 828aa 0D        	>  DC.B 13+0+0
 5373 828ab 44        	>  DC.B 0x44
 5373 828ac 00        	>  DC.B 0x00
 5374               	         OPC     NO,0xd0,22,4E,71,NOC,0| NOP
 5374 828ad 4E4F      	>  .ascii "NO"
 5374 828af D0        	>  DC.B 0xd0
 5374 828b0 96        	>  DC.B 22+NOC+0
 5374 828b1 4E        	>  DC.B 0x4E
 5374 828b2 71        	>  DC.B 0x71
 5375               	         OPC     NO,0xd4,13,46,00,0,0  | NOT
 5375 828b3 4E4F      	>  .ascii "NO"
 5375 828b5 D4        	>  DC.B 0xd4
 5375 828b6 0D        	>  DC.B 13+0+0
 5375 828b7 46        	>  DC.B 0x46
 5375 828b8 00        	>  DC.B 0x00
 5376               	         OPC     OR,0xc9,28,00,00,0,0  | ORI
 5376 828b9 4F52      	>  .ascii "OR"
 5376 828bb C9        	>  DC.B 0xc9
 5376 828bc 1C        	>  DC.B 28+0+0
 5376 828bd 00        	>  DC.B 0x00
 5376 828be 00        	>  DC.B 0x00
 5377               	         OPC     O,0xd2,6,80,00,0,0    | OR
 5377 828bf 4F        	>  .ascii "O"
 5377 828c0 D2        	>  DC.B 0xd2
 5377 828c1 06        	>  DC.B 6+0+0
 5377 828c2 80        	>  DC.B 0x80
 5377 828c3 00        	>  DC.B 0x00
 5378               	         OPC     PE,0xc1,36,48,40,0,0  | PEA
 5378 828c4 5045      	>  .ascii "PE"
 5378 828c6 C1        	>  DC.B 0xc1
 5378 828c7 24        	>  DC.B 36+0+0
 5378 828c8 48        	>  DC.B 0x48
 5378 828c9 40        	>  DC.B 0x40
68K GAS  tutor13.s 			page 109


 5379               	         OPC     RESE,0xd4,22,4E,70,NOC,0 | RESET
 5379 828ca 5245 5345 	>  .ascii "RESE"
 5379 828ce D4        	>  DC.B 0xd4
 5379 828cf 96        	>  DC.B 22+NOC+0
 5379 828d0 4E        	>  DC.B 0x4E
 5379 828d1 70        	>  DC.B 0x70
 5380               	         OPC     RO,0xcc,7,E7,18,0,0   | ROL
 5380 828d2 524F      	>  .ascii "RO"
 5380 828d4 CC        	>  DC.B 0xcc
 5380 828d5 07        	>  DC.B 7+0+0
 5380 828d6 E7        	>  DC.B 0xE7
 5380 828d7 18        	>  DC.B 0x18
 5381               	         OPC     RO,0xd2,07,E6,18,0,0  | ROR
 5381 828d8 524F      	>  .ascii "RO"
 5381 828da D2        	>  DC.B 0xd2
 5381 828db 07        	>  DC.B 07+0+0
 5381 828dc E6        	>  DC.B 0xE6
 5381 828dd 18        	>  DC.B 0x18
 5382               	         OPC     ROX,0xcc,7,E5,10,0,0  | ROXL
 5382 828de 524F 58   	>  .ascii "ROX"
 5382 828e1 CC        	>  DC.B 0xcc
 5382 828e2 07        	>  DC.B 7+0+0
 5382 828e3 E5        	>  DC.B 0xE5
 5382 828e4 10        	>  DC.B 0x10
 5383               	         OPC     ROX,0xd2,07,E4,10,0,0 | ROXR
 5383 828e5 524F 58   	>  .ascii "ROX"
 5383 828e8 D2        	>  DC.B 0xd2
 5383 828e9 07        	>  DC.B 07+0+0
 5383 828ea E4        	>  DC.B 0xE4
 5383 828eb 10        	>  DC.B 0x10
 5384               	         OPC     RT,0xc5,22,4E,73,NOC,0| RTE
 5384 828ec 5254      	>  .ascii "RT"
 5384 828ee C5        	>  DC.B 0xc5
 5384 828ef 96        	>  DC.B 22+NOC+0
 5384 828f0 4E        	>  DC.B 0x4E
 5384 828f1 73        	>  DC.B 0x73
 5385               	         OPC     RT,0xd2,22,4E,77,NOC,0| RTR
 5385 828f2 5254      	>  .ascii "RT"
 5385 828f4 D2        	>  DC.B 0xd2
 5385 828f5 96        	>  DC.B 22+NOC+0
 5385 828f6 4E        	>  DC.B 0x4E
 5385 828f7 77        	>  DC.B 0x77
 5386               	         OPC     RT,0xd3,22,4E,75,NOC,0| RTS
 5386 828f8 5254      	>  .ascii "RT"
 5386 828fa D3        	>  DC.B 0xd3
 5386 828fb 96        	>  DC.B 22+NOC+0
 5386 828fc 4E        	>  DC.B 0x4E
 5386 828fd 75        	>  DC.B 0x75
 5387               	         OPC     SBC,0xc4,0,81,00,0,0  | SBCD
 5387 828fe 5342 43   	>  .ascii "SBC"
 5387 82901 C4        	>  DC.B 0xc4
 5387 82902 00        	>  DC.B 0+0+0
 5387 82903 81        	>  DC.B 0x81
 5387 82904 00        	>  DC.B 0x00
 5388               	         OPC     S,0xc6,29,51,C0,0,0   | SF
 5388 82905 53        	>  .ascii "S"
 5388 82906 C6        	>  DC.B 0xc6
68K GAS  tutor13.s 			page 110


 5388 82907 1D        	>  DC.B 29+0+0
 5388 82908 51        	>  DC.B 0x51
 5388 82909 C0        	>  DC.B 0xC0
 5389               	         OPC     SH,0xc9,29,52,C0,0,0  | SHI
 5389 8290a 5348      	>  .ascii "SH"
 5389 8290c C9        	>  DC.B 0xc9
 5389 8290d 1D        	>  DC.B 29+0+0
 5389 8290e 52        	>  DC.B 0x52
 5389 8290f C0        	>  DC.B 0xC0
 5390               	         OPC     SL,0xd3,29,53,C0,0,0  | SLS
 5390 82910 534C      	>  .ascii "SL"
 5390 82912 D3        	>  DC.B 0xd3
 5390 82913 1D        	>  DC.B 29+0+0
 5390 82914 53        	>  DC.B 0x53
 5390 82915 C0        	>  DC.B 0xC0
 5391               	         OPC     SC,0xc3,29,54,C0,0,0  | SCC
 5391 82916 5343      	>  .ascii "SC"
 5391 82918 C3        	>  DC.B 0xc3
 5391 82919 1D        	>  DC.B 29+0+0
 5391 8291a 54        	>  DC.B 0x54
 5391 8291b C0        	>  DC.B 0xC0
 5392               	         OPC     SC,0xd3,29,55,C0,0,0  | SCS
 5392 8291c 5343      	>  .ascii "SC"
 5392 8291e D3        	>  DC.B 0xd3
 5392 8291f 1D        	>  DC.B 29+0+0
 5392 82920 55        	>  DC.B 0x55
 5392 82921 C0        	>  DC.B 0xC0
 5393               	         OPC     SN,0xc5,29,56,C0,0,0  | SNE
 5393 82922 534E      	>  .ascii "SN"
 5393 82924 C5        	>  DC.B 0xc5
 5393 82925 1D        	>  DC.B 29+0+0
 5393 82926 56        	>  DC.B 0x56
 5393 82927 C0        	>  DC.B 0xC0
 5394               	         OPC     SE,0xd1,29,57,C0,0,0  | SEQ
 5394 82928 5345      	>  .ascii "SE"
 5394 8292a D1        	>  DC.B 0xd1
 5394 8292b 1D        	>  DC.B 29+0+0
 5394 8292c 57        	>  DC.B 0x57
 5394 8292d C0        	>  DC.B 0xC0
 5395               	         OPC     SV,0xc3,29,58,C0,0,0  | SVC
 5395 8292e 5356      	>  .ascii "SV"
 5395 82930 C3        	>  DC.B 0xc3
 5395 82931 1D        	>  DC.B 29+0+0
 5395 82932 58        	>  DC.B 0x58
 5395 82933 C0        	>  DC.B 0xC0
 5396               	         OPC     SV,0xd3,29,59,C0,0,0  | SVS
 5396 82934 5356      	>  .ascii "SV"
 5396 82936 D3        	>  DC.B 0xd3
 5396 82937 1D        	>  DC.B 29+0+0
 5396 82938 59        	>  DC.B 0x59
 5396 82939 C0        	>  DC.B 0xC0
 5397               	         OPC     SP,0xcc,29,5A,C0,0,0  | SPL
 5397 8293a 5350      	>  .ascii "SP"
 5397 8293c CC        	>  DC.B 0xcc
 5397 8293d 1D        	>  DC.B 29+0+0
 5397 8293e 5A        	>  DC.B 0x5A
 5397 8293f C0        	>  DC.B 0xC0
68K GAS  tutor13.s 			page 111


 5398               	         OPC     SM,0xc9,29,5B,C0,0,0  | SMI
 5398 82940 534D      	>  .ascii "SM"
 5398 82942 C9        	>  DC.B 0xc9
 5398 82943 1D        	>  DC.B 29+0+0
 5398 82944 5B        	>  DC.B 0x5B
 5398 82945 C0        	>  DC.B 0xC0
 5399               	         OPC     SG,0xc5,29,5C,C0,0,0  | SGE
 5399 82946 5347      	>  .ascii "SG"
 5399 82948 C5        	>  DC.B 0xc5
 5399 82949 1D        	>  DC.B 29+0+0
 5399 8294a 5C        	>  DC.B 0x5C
 5399 8294b C0        	>  DC.B 0xC0
 5400               	         OPC     SL,0xd4,29,5D,C0,0,0  | SLT
 5400 8294c 534C      	>  .ascii "SL"
 5400 8294e D4        	>  DC.B 0xd4
 5400 8294f 1D        	>  DC.B 29+0+0
 5400 82950 5D        	>  DC.B 0x5D
 5400 82951 C0        	>  DC.B 0xC0
 5401               	         OPC     SG,0xd4,29,5E,C0,0,0  | SGT
 5401 82952 5347      	>  .ascii "SG"
 5401 82954 D4        	>  DC.B 0xd4
 5401 82955 1D        	>  DC.B 29+0+0
 5401 82956 5E        	>  DC.B 0x5E
 5401 82957 C0        	>  DC.B 0xC0
 5402               	         OPC     SL,0xc5,29,5F,C0,0,0  | SLE
 5402 82958 534C      	>  .ascii "SL"
 5402 8295a C5        	>  DC.B 0xc5
 5402 8295b 1D        	>  DC.B 29+0+0
 5402 8295c 5F        	>  DC.B 0x5F
 5402 8295d C0        	>  DC.B 0xC0
 5403               	         OPC     STO,0xd0,23,4E,72,0,0 | STOP
 5403 8295e 5354 4F   	>  .ascii "STO"
 5403 82961 D0        	>  DC.B 0xd0
 5403 82962 17        	>  DC.B 23+0+0
 5403 82963 4E        	>  DC.B 0x4E
 5403 82964 72        	>  DC.B 0x72
 5404               	         OPC     S,0xd4,29,50,C0,0,0   | ST
 5404 82965 53        	>  .ascii "S"
 5404 82966 D4        	>  DC.B 0xd4
 5404 82967 1D        	>  DC.B 29+0+0
 5404 82968 50        	>  DC.B 0x50
 5404 82969 C0        	>  DC.B 0xC0
 5405               	         OPC     SUB,0xc1,2,90,C0,0,0  | SUBA
 5405 8296a 5355 42   	>  .ascii "SUB"
 5405 8296d C1        	>  DC.B 0xc1
 5405 8296e 02        	>  DC.B 2+0+0
 5405 8296f 90        	>  DC.B 0x90
 5405 82970 C0        	>  DC.B 0xC0
 5406               	         OPC     SUB,0xc9,3,04,00,0,0  | SUBI
 5406 82971 5355 42   	>  .ascii "SUB"
 5406 82974 C9        	>  DC.B 0xc9
 5406 82975 03        	>  DC.B 3+0+0
 5406 82976 04        	>  DC.B 0x04
 5406 82977 00        	>  DC.B 0x00
 5407               	         OPC     SUB,0xd1,4,51,00,0,0  | SUBQ
 5407 82978 5355 42   	>  .ascii "SUB"
 5407 8297b D1        	>  DC.B 0xd1
68K GAS  tutor13.s 			page 112


 5407 8297c 04        	>  DC.B 4+0+0
 5407 8297d 51        	>  DC.B 0x51
 5407 8297e 00        	>  DC.B 0x00
 5408               	         OPC     SUB,0xd8,5,91,00,0,0  | SUBX
 5408 8297f 5355 42   	>  .ascii "SUB"
 5408 82982 D8        	>  DC.B 0xd8
 5408 82983 05        	>  DC.B 5+0+0
 5408 82984 91        	>  DC.B 0x91
 5408 82985 00        	>  DC.B 0x00
 5409               	         OPC     SU,0xc2,1,90,00,0,0   | SUB
 5409 82986 5355      	>  .ascii "SU"
 5409 82988 C2        	>  DC.B 0xc2
 5409 82989 01        	>  DC.B 1+0+0
 5409 8298a 90        	>  DC.B 0x90
 5409 8298b 00        	>  DC.B 0x00
 5410               	         OPC     SWA,0xd0,24,48,40,0,0 | SWAP
 5410 8298c 5357 41   	>  .ascii "SWA"
 5410 8298f D0        	>  DC.B 0xd0
 5410 82990 18        	>  DC.B 24+0+0
 5410 82991 48        	>  DC.B 0x48
 5410 82992 40        	>  DC.B 0x40
 5411               	         OPC     TA,0xd3,29,4A,C0,0,0  | TAS
 5411 82993 5441      	>  .ascii "TA"
 5411 82995 D3        	>  DC.B 0xd3
 5411 82996 1D        	>  DC.B 29+0+0
 5411 82997 4A        	>  DC.B 0x4A
 5411 82998 C0        	>  DC.B 0xC0
 5412               	         OPC     TRAP,0xd6,22,4E,76,NOC,0 | TRAPV
 5412 82999 5452 4150 	>  .ascii "TRAP"
 5412 8299d D6        	>  DC.B 0xd6
 5412 8299e 96        	>  DC.B 22+NOC+0
 5412 8299f 4E        	>  DC.B 0x4E
 5412 829a0 76        	>  DC.B 0x76
 5413               	         OPC     TRA,0xd0,25,4E,40,0,0 | TRAP
 5413 829a1 5452 41   	>  .ascii "TRA"
 5413 829a4 D0        	>  DC.B 0xd0
 5413 829a5 19        	>  DC.B 25+0+0
 5413 829a6 4E        	>  DC.B 0x4E
 5413 829a7 40        	>  DC.B 0x40
 5414               	         OPC     TS,0xd4,13,4A,00,0,0  | TST
 5414 829a8 5453      	>  .ascii "TS"
 5414 829aa D4        	>  DC.B 0xd4
 5414 829ab 0D        	>  DC.B 13+0+0
 5414 829ac 4A        	>  DC.B 0x4A
 5414 829ad 00        	>  DC.B 0x00
 5415               	         OPC     UNL,0xcb,26,4E,58,0,0 | UNLK
 5415 829ae 554E 4C   	>  .ascii "UNL"
 5415 829b1 CB        	>  DC.B 0xcb
 5415 829b2 1A        	>  DC.B 26+0+0
 5415 829b3 4E        	>  DC.B 0x4E
 5415 829b4 58        	>  DC.B 0x58
 5416               	
 5417 829b5 00        	         DC.B    0              | PAD BYTE
 5418               	
 5419               	TBLOPCE: .align  2
 5420               	
 5421               	* WITHOUT LABEL FIELD
68K GAS  tutor13.s 			page 113


 5422               	* 012345678901234567890123456789012345678901234567890
 5423               	* AAAAAA DDDDDDDDDDDDDDDDDDDD OPCODE  OPERAND
 5424               	*        FDATA                FOC     FOP
 5425               	
 5426               	* 012345678901234567890123456789012345678901234567890
 5427               	* AAAAAA DDDDDDDDDDDDDDDDDDDD LLLLLLLL OPCODE  OPERAND
 5428               	*        FDATA                FOL      FOC     FOP
 5429               	
 5430               	* %A3 = STORE POINTER
 5431               	* %A4 = PROGRAM COUNTER
 5432               	* %A5 = SOURCE PTR BEGINNING
 5433               	* %A6 = SOURCE PTR END+1
 5434               	*
 5435               	OUTBSIZE =       80        | BUFFER SIZE
 5436               	FDATA    =       10        | OFFSET TO DATA
 5437               	FOL      =       31        | OFFSET TO LABEL
 5438               	FOC      =       31        | OFFSET TO OP-CODE (NO LABEL FIELD)
 5439               	FOP      =       39        | OFFSET TO OPERAND (NO LABEL FIELD)
 5440               	
 5441 829b6 4E51 FFDE 	CODE68K: LINK    %A1,#0-(ESKE-ESKB)
 5442 829ba 2F49 001E 	         MOVE.L  %A1,LINK(%A7)   | SAVE LINKAGE
 5443 829be 224F      	         MOVE.L  %A7,%A1         | A1 = BASE REGISTER TO DATA
 5444               	
 5445 829c0 1CBC 0020 	         MOVE.B  #BLANK,(%A6)    | INSURE LAST CHAR IS SPACE
 5446               	
 5447 829c4 204B      	         MOVE.L  %A3,%A0
 5448 829c6 704F      	         MOVEQ   #OUTBSIZE-1,%D0
 5449 829c8 10FC 0020 	M300:    MOVE.B  #BLANK,(%A0)+   | SPACE FILL BUFFER
 5450 829cc 51C8 FFFA 	         DBRA    %D0,M300
 5451 829d0 5588      	         SUBQ.L  #2,%A0
 5452 829d2 2348 001A 	         MOVE.L  %A0,PTRBUFE(%A1) | PTR TO END OF BUFFER
 5453               	
 5454 829d6 234C 000E 	         MOVE.L  %A4,PCOUNTER(%A1)| FORMAT PC
 5455 829da 280C      	         MOVE.L  %A4,%D4          | D4 = P-COUNTER
 5456 829dc 200C      	         MOVE.L  %A4,%D0
 5457               	
 5458 829de 2F0E      	         MOVE.L  %A6,-(%A7)       | SAVE A6
 5459 829e0 2C4B      	         MOVE.L  %A3,%A6
 5460 829e2 6100 F030 	         BSR     FRELADDR       | FORM RELATIVE ADDRESS
 5461 829e6 2C5F      	         MOVE.L  (%A7)+,%A6     | RESTORE A6
 5462               	
 5463 829e8 7E01      	         MOVEQ   #1,%D7         | POSSIBLE ERROR CODE
 5464 829ea 200C      	         MOVE.L  %A4,%D0
 5465 829ec E298      	         ROR.L   #1,%D0
 5466 829ee 6B00 0140 	         BMI     ERDONE         | PC ODD ADDRESS
 5467               	
 5468 829f2 7E1F      	         MOVEQ   #FOL,%D7       | POSSIBLE ERROR CODE
 5469 829f4 0C1D 0020 	         CMPI.B  #BLANK,(%A5)+
 5470 829f8 6600 0136 	         BNE     ERDONE         | 1ST CHAR NOT SPACE
 5471               	
 5472 829fc 137C 0002 	         MOVE.B  #2,TNB(%A1)    | INZ # OF BYTES
 5472      000A 
 5473 82a02 337C 0040 	         MOVE.W  #0x40,TLENGTH(%A1) |SIZE = .W (DEFAULT)
 5473      000C 
 5474 82a08 4229 000B 	         CLR.B   TLSPEC(%A1)    | DEFAULT (SIZE NOT SPECIFIED)
 5475               	
 5476 82a0c 204B      	         MOVE.L  %A3,%A0        | A0 = STORE ADDRESS
68K GAS  tutor13.s 			page 114


 5477 82a0e D1FC 0000 	         ADD.L   #FOC,%A0
 5477      001F 
 5478               	
 5479 82a14 6100 010C 	M340:    BSR     GETCHARF       | GET PAST SPACES
 5480 82a18 0C00 0020 	         CMPI.B  #BLANK,%D0
 5481 82a1c 67F6      	         BEQ.S   M340
 5482               	
 5483 82a1e 538D      	         SUBQ.L  #1,%A5         | FORMAT OP-CODE
 5484 82a20 6100 0100 	M350:    BSR     GETCHARF
 5485 82a24 10C0      	         MOVE.B  %D0,(%A0)+
 5486 82a26 0C00 002E 	         CMPI.B  #'.',%D0
 5487 82a2a 6628      	         BNE.S   M352
 5488               	
 5489 82a2c 1355 000B 	         MOVE.B  (%A5),TLSPEC(%A1) | NOT DEFAULT
 5490 82a30 0C15 0057 	         CMPI.B  #'W',(%A5)
 5491 82a34 671E      	         BEQ.S   M352
 5492 82a36 0C15 0053 	         CMPI.B  #'S',(%A5)
 5493 82a3a 6718      	         BEQ.S   M352           | .SHORT = .WORD
 5494 82a3c 4269 000C 	         CLR.W   TLENGTH(%A1)
 5495 82a40 0C15 0042 	         CMPI.B  #'B',(%A5)
 5496 82a44 670E      	         BEQ.S   M352           | SIZE = .W
 5497 82a46 337C 0080 	         MOVE.W  #0x80,TLENGTH(%A1)
 5497      000C 
 5498 82a4c 0C15 004C 	         CMPI.B  #'L',(%A5)
 5499 82a50 6600 00D8 	         BNE     ERF
 5500               	
 5501 82a54 0C00 0020 	M352:    CMPI.B  #BLANK,%D0
 5502 82a58 66C6      	         BNE.S   M350           | NOT SPACE CONTINUE
 5503               	
 5504               	* SEARCH OP-CODE TABLE
 5505 82a5a 41FA FC56 	         LEA     TBLOPC(%PC),%A0 | A0 = PTR TO TABLE OF CODES
 5506 82a5e 244B      	M410:    MOVE.L  %A3,%A2        | A3 = START OF STORE BUFFER
 5507 82a60 D5FC 0000 	         ADD.L   #FOC,%A2       | A2 = PTR TO OP-CODE JUST FORMATTED
 5507      001F 
 5508               	
 5509 82a66 1018      	M415:    MOVE.B  (%A0)+,%D0     |  XXXXXXDD
 5510 82a68 4880      	         EXT.W   %D0            | XXXXSSDD  SIGN EXTENDED
 5511 82a6a 0200 007F 	         ANDI.B  #0x7F,%D0
 5512 82a6e B01A      	         CMP.B   (%A2)+,%D0
 5513 82a70 6606      	         BNE.S   M420           | NON-MATCH
 5514 82a72 4A40      	         TST.W   %D0
 5515 82a74 6AF0      	         BPL.S   M415           | SIGN RESET; CONTINUE
 5516 82a76 6018      	         BRA.S   M430           | MATCH COMPLETE
 5517               	
 5518 82a78 4A40      	M420:    TST.W   %D0            | SEQUENCE TO NEXT CODE
 5519 82a7a 6B04      	         BMI.S   M426
 5520 82a7c 1018      	M424:    MOVE.B  (%A0)+,%D0
 5521 82a7e 6AFC      	         BPL.S   M424           | FINISH THIS OP-CODE
 5522 82a80 5688      	M426:    ADDQ.L  #3,%A0         | ADJUST PTR TO TABLE
 5523 82a82 45FA FF32 	         LEA     TBLOPCE(%PC),%A2
 5524 82a86 B5C8      	         CMP.L   %A0,%A2
 5525 82a88 66D4      	         BNE.S   M410
 5526               	
 5527 82a8a 7E1F      	M428:    MOVEQ   #FOC,%D7       | ERROR CODE
 5528 82a8c 6000 00A2 	         BRA     ERDONE
 5529               	
 5530               	* GET GOTO INDEX
68K GAS  tutor13.s 			page 115


 5531               	* GET FIRST WORD MASK
 5532 82a90 1012      	M430:    MOVE.B  (%A2),%D0      | MUST TERMINATE OP-CODE
 5533 82a92 0C00 0020 	         CMPI.B  #BLANK,%D0     | WITH SPACE OR PERIOD
 5534 82a96 6706      	         BEQ.S   M432
 5535 82a98 0C00 002E 	         CMPI.B  #'.',%D0
 5536 82a9c 66EC      	         BNE.S   M428           | ERROR
 5537               	M432:
 5538               	
 5539 82a9e 4280      	         CLR.L   %D0
 5540 82aa0 1018      	         MOVE.B  (%A0)+,%D0     | D0 =  KEYS  INDEX
 5541 82aa2 1200      	         MOVE.B  %D0,%D1        | D1 =  KEYS (INDEX)
 5542 82aa4 0200 003F 	         ANDI.B  #0x3F,%D0      | D0 =        INDEX
 5543 82aa8 E380      	         ASL.L   #1,%D0         | INDEX * TWO
 5544 82aaa 1418      	         MOVE.B  (%A0)+,%D2
 5545 82aac E14A      	         LSL.W   #8,%D2
 5546 82aae 1418      	         MOVE.B  (%A0)+,%D2     | D2 = FIRST WORD MASK
 5547 82ab0 3282      	         MOVE.W  %D2,(%A1)      | *D2,TDATA(A1)
 5548               	
 5549               	* INSURE .S .W MATCH OP-CODE
 5550               	
 5551 82ab2 1629 000B 	         MOVE.B  TLSPEC(%A1),%D3 | D3 = .n SPECIFIED
 5552 82ab6 671A      	         BEQ.S   M4326          | NOT SPECIFIED
 5553 82ab8 0801 0006 	         BTST    #6,%D1
 5554 82abc 670E      	         BEQ.S   M4324          | .W ALLOWED (.S NOT ALLOWED)
 5555 82abe 0C03 0057 	         CMPI.B  #'W',%D3
 5556 82ac2 67C6      	         BEQ.S   M428           | .W NOT ALLOWED
 5557 82ac4 0C03 0042 	         CMPI.B  #'B',%D3
 5558 82ac8 67C0      	         BEQ.S   M428           | .B NOT ALLOWED
 5559 82aca 6006      	         BRA.S   M4326
 5560               	
 5561 82acc 0C03 0053 	M4324:   CMPI.B  #'S',%D3
 5562 82ad0 67B8      	         BEQ.S   M428           | .S NOT ALLOWED
 5563               	M4326:
 5564               	
 5565               	* CALCULATE GOTO ADDRESS
 5566               	
 5567 82ad2 41FA FAAA 	         LEA     TBLKEYS(%PC),%A0 | A0 = PTR TO KEYS
 5568 82ad6 3030 0000 	         MOVE.W  (%A0,%D0.W),%D0  | D0 = 16 BIT OFFSET
 5569 82ada 45FA F798 	         LEA     XBASE(%PC),%A2   | A2 = BASE ADDRESS
 5570 82ade D5C0      	         ADD.L   %D0,%A2          | A2 = COMPUTED GO TO  ADDRESS
 5571               	
 5572               	* FORMAT OPERAND IF REGUIRED
 5573               	
 5574 82ae0 4A01      	         TST.B   %D1            | LOOK AT KEY
 5575 82ae2 6B22      	         BMI.S   M440           | OPERAND NOT REQUIRED
 5576               	
 5577 82ae4 204B      	         MOVE.L  %A3,%A0
 5578 82ae6 D1FC 0000 	         ADD.L   #FOP,%A0       | STORE POINTER
 5578      0027 
 5579 82aec 2348 0012 	         MOVE.L  %A0,PTROP(%A1) |  POINTER TO OPERAND (FORMATED)
 5580 82af0 6130      	M435:    BSR.S   GETCHARF       | D0 = CHAR
 5581 82af2 0C00 0020 	         CMPI.B  #BLANK,%D0
 5582 82af6 67F8      	         BEQ.S   M435           | SKIP SPACES
 5583               	
 5584 82af8 10C0      	M437:    MOVE.B  %D0,(%A0)+     | MOVE REST OF SOURCE LINE
 5585 82afa 6126      	         BSR.S   GETCHARF       | D0 = CHAR
 5586 82afc BDCD      	         CMP.L   %A5,%A6
68K GAS  tutor13.s 			page 116


 5587 82afe 6AF8      	         BPL.S   M437
 5588 82b00 2348 001A 	         MOVE.L  %A0,PTRBUFE(%A1) | POINTER TO END FORMATED SOURCE
 5589 82b04 2C48      	         MOVE.L  %A0,%A6        | A6 = POINTER TO END OF SOURCE
 5590               	M440:
 5591               	
 5592 82b06 2A69 0012 	         MOVE.L  PTROP(%A1),%A5 | A5 = PTR TO OPERAND
 5593 82b0a 49E9 0002 	         LEA     TDATA+2(%A1),%A4 | A4 = BASE ADDR FOR DATA STORE
 5594 82b0e 4283      	         CLR.L   %D3            | D3 = OFFSET FOR DATA STORE
 5595 82b10 4ED2      	         JMP     (%A2)          | GOTO ROUTINE
 5596               	*                               | D2 = MASK
 5597               	*                               | D4 = P-COUNTER
 5598               	
 5599 82b12 0C1D 002C 	COMMA:   CMPI.B  #',',(%A5)+
 5600 82b16 6614      	         BNE.S   ER             | NOT COMMA
 5601 82b18 4E75      	         RTS
 5602               	
 5603 82b1a BDCD      	GETCHAR: CMP.L   %A5,%A6
 5604 82b1c 6B0E      	         BMI.S   ER
 5605 82b1e 101D      	         MOVE.B  (%A5)+,%D0
 5606 82b20 4E75      	         RTS
 5607               	
 5608 82b22 BDCD      	GETCHARF:CMP.L   %A5,%A6
 5609 82b24 6B04      	         BMI.S   ERF
 5610 82b26 101D      	         MOVE.B  (%A5)+,%D0
 5611 82b28 4E75      	         RTS
 5612               	
 5613 82b2a 2A48      	ERF:     MOVE.L  %A0,%A5
 5614               	
 5615 82b2c 2E0D      	ER:      MOVE.L  %A5,%D7        | D7 = ERROR FLAG
 5616 82b2e 9E8B      	         SUB.L   %A3,%D7        | ..& POSITION OF ERROR
 5617 82b30 4286      	ERDONE:  CLR.L   %D6            | D6 = (ZERO) BYTE COUNT
 5618 82b32 6024      	         BRA.S   CMMD35
 5619               	
 5620 82b34 0C15 0020 	CMMD2:   CMPI.B  #BLANK,(%A5)
 5621 82b38 66F2      	         BNE.S   ER             | OPERAND DID NOT END WITH SPACE
 5622               	
 5623               	MCMMD2:  .align  2              | NO OPERAND SEQUENCE
 5624 82b3a 3282      	         MOVE.W  %D2,(%A1)      | *D2,TDATA(A1)
 5625               	
 5626 82b3c 1629 000A 	         MOVE.B  TNB(%A1),%D3   | FORMAT DATA
 5627 82b40 2C03      	         MOVE.L  %D3,%D6        | D7 = NUMBER OF BYTES
 5628 82b42 45D1      	         LEA     (%A1),%A2      | A2 = PTR TO HEX DATA  *TDATA(A1),A2
 5629 82b44 2C4B      	         MOVE.L  %A3,%A6        | D3 = NUMBER OF BYTES
 5630 82b46 DDFC 0000 	         ADD.L   #FDATA,%A6     | A6 = STORE PTR
 5630      000A 
 5631 82b4c 101A      	FPR315:  MOVE.B  (%A2)+,%D0
 5632 82b4e 6100 EEA8 	         BSR     PNT2HX
 5633 82b52 5383      	         SUBQ.L  #1,%D3
 5634 82b54 66F6      	         BNE.S   FPR315         | MORE BYTES
 5635               	
 5636 82b56 4287      	         CLR.L   %D7            | RESET ERROR FLAG
 5637               	
 5638 82b58 4CD1 0007 	CMMD35:  MOVEM.L (%A1),%D0-%D2  | D0-D2 = DATA   *TDATA(A1),D0-D2
 5639               	
 5640 82b5c 2C69 001A 	         MOVE.L  PTRBUFE(%A1),%A6 | A6 = POINTER TO END OF BUFFER
 5641               	
 5642 82b60 2869 000E 	         MOVE.L  PCOUNTER(%A1),%A4 | A4 = ORGINAL PC
68K GAS  tutor13.s 			page 117


 5643               	
 5644 82b64 2269 001E 	         MOVE.L  LINK(%A1),%A1
 5645 82b68 4E59      	         UNLK    %A1
 5646 82b6a 4E75      	         RTS                    | RETURN TO REQUESTOR
 5647               	*                               | A3 = POINTER TO START OF BUFFER
 5648               	*                               | D6 = NUMBER OF BYTES ASSEMBLED
 5649               	*                               | D7 = ERROR FLAG (POSITION)
 5650               	
 5651               	*  SIZE = BYTE
 5652               	*    DY,DX
 5653               	*    -(AY),-(AX)
 5654               	*    ....RX@.SS...RY@
 5655               	MABCD:   .align  2              | (INDEX 0) ABCD SBCD
 5656 82b6c 4A29 000B 	         TST.B   TLSPEC(%A1)
 5657 82b70 6708      	         BEQ.S   MABCD9         | DEFAULT SIZE = BYTE
 5658 82b72 0C69 0000 	         CMPI.W  #0x00,TLENGTH(%A1)
 5658      000C 
 5659 82b78 66B2      	         BNE.S   ER             | NOT .B
 5660               	MABCD9:
 5661               	
 5662 82b7a 3E3C 0011 	         MOVE.W  #0x11,%D7
 5663 82b7e 6100 F762 	         BSR     EA
 5664               	
 5665 82b82 618E      	         BSR.S   COMMA
 5666               	
 5667 82b84 2006      	         MOVE.L  %D6,%D0
 5668 82b86 0240 0007 	         ANDI.W  #7,%D0
 5669 82b8a 8440      	         OR.W    %D0,%D2
 5670               	
 5671 82b8c 0806 0005 	         BTST    #5,%D6
 5672 82b90 6716      	         BEQ.S   MABCD55        | D@,D@ MODE
 5673               	
 5674 82b92 0042 0008 	         ORI.W   #0x0008,%D2    | -(A@),-(A@) MODE
 5675               	
 5676 82b96 3E3C 0010 	         MOVE.W  #0x10,%D7
 5677 82b9a 6100 F746 	         BSR     EA
 5678               	
 5679 82b9e 0246 0007 	         ANDI.W  #7,%D6
 5680 82ba2 EE5E      	         ROR.W   #7,%D6
 5681 82ba4 8446      	         OR.W    %D6,%D2
 5682 82ba6 608C      	         BRA.S   CMMD2
 5683               	
 5684 82ba8 6100 F6D0 	MABCD55: BSR     GETREGD        | D@,D@
 5685 82bac EE58      	         ROR.W   #7,%D0
 5686 82bae 8440      	         OR.W    %D0,%D2
 5687 82bb0 6082      	CMMD2S10:BRA.S   CMMD2
 5688               	
 5689               	MCMP:    .align  2              | (INDEX 34)
 5690 82bb2 6100 F72A 	         BSR     EAALL
 5691 82bb6 2806      	         MOVE.L  %D6,%D4        | D4 = SOURCE MODE
 5692               	
 5693 82bb8 6166      	         BSR.S   COMMAS20
 5694               	
 5695 82bba 0C15 0041 	         CMPI.B  #'A',(%A5)
 5696 82bbe 6700 0116 	         BEQ     MADDA21        | DESTINATION = A@
 5697               	
 5698 82bc2 0C04 003C 	         CMPI.B  #0x3C,%D4
68K GAS  tutor13.s 			page 118


 5699 82bc6 6748      	         BEQ.S   MCMP56         | SOURCE  ....I  #<DATA>,...
 5700               	
 5701 82bc8 6100 F6AA 	         BSR     FSIZE
 5702               	
 5703 82bcc 3E3C 0009 	         MOVE.W  #0x009,%D7
 5704 82bd0 6100 F710 	         BSR     EA             | D@ + (A@)+
 5705 82bd4 2006      	         MOVE.L  %D6,%D0        | MMMRRR
 5706 82bd6 0240 0038 	         ANDI.W  #0x38,%D0      | MMM...
 5707               	
 5708 82bda 672C      	         BEQ.S   MCMP39         | DESTINATION  D@
 5709               	
 5710 82bdc 0C00 0018 	         CMPI.B  #0x18,%D0
 5711 82be0 6600 FF4A 	         BNE     ER
 5712               	
 5713 82be4 0246 000F 	         ANDI.W  #0xF,%D6       | (AY)+,(AX)+
 5714 82be8 EE5E      	         ROR.W   #7,%D6
 5715 82bea 8446      	         OR.W    %D6,%D2        | ....AX@.........
 5716 82bec 0042 0100 	         ORI.W   #0x0100,%D2    | ...1AX@.........
 5717               	
 5718 82bf0 2004      	         MOVE.L  %D4,%D0
 5719 82bf2 0240 0038 	         ANDI.W  #0x38,%D0
 5720 82bf6 0C40 0018 	         CMPI.W  #0x18,%D0
 5721 82bfa 6600 FF30 	         BNE     ER             | NOT (A@)+
 5722 82bfe 0244 000F 	         ANDI.W  #0xF,%D4       | ............1AY@
 5723 82c02 8444      	         OR.W    %D4,%D2
 5724 82c04 6000 FF2E 	         BRA     CMMD2
 5725               	
 5726               	*  <EA>,D@
 5727 82c08 EE5E      	MCMP39:  ROR.W   #7,%D6
 5728 82c0a 8446      	         OR.W    %D6,%D2
 5729               	
 5730 82c0c 8444      	         OR.W    %D4,%D2
 5731 82c0e 600E      	         BRA.S   CMMD2S11
 5732               	
 5733 82c10 343C 0C00 	MCMP56:  MOVE.W  #0x0C00,%D2    | #<DATA>,<EA>      MASK = CMPI
 5734               	
 5735 82c14 6100 F65E 	         BSR     FSIZE
 5736               	
 5737 82c18 6100 F6A0 	         BSR     EADA
 5738 82c1c 8446      	         OR.W    %D6,%D2
 5739 82c1e 6090      	CMMD2S11:BRA.S   CMMD2S10
 5740               	
 5741 82c20 6000 FEF0 	COMMAS20:BRA     COMMA
 5742               	
 5743               	MADD:    .align  2              | (INDEX 1)
 5744 82c24 6100 F6B8 	         BSR     EAALL
 5745 82c28 2806      	         MOVE.L  %D6,%D4        | D4 = SOURCE MODE
 5746               	
 5747 82c2a 61F4      	         BSR.S   COMMAS20
 5748               	
 5749 82c2c 0C15 0041 	         CMPI.B  #'A',(%A5)
 5750 82c30 6700 00A4 	         BEQ     MADDA21        | DESTINATION = A@
 5751               	
 5752 82c34 0C04 003C 	         CMPI.B  #0x3C,%D4
 5753 82c38 6728      	         BEQ.S   MADD56         | SOURCE  ....I  #<DATA>,...
 5754               	
 5755 82c3a 6100 F638 	         BSR     FSIZE
68K GAS  tutor13.s 			page 119


 5756               	
 5757 82c3e 3E3C 01FF 	         MOVE.W  #0x1FF,%D7
 5758 82c42 6100 F69E 	         BSR     EA             | ALTERABLE + D@
 5759 82c46 2006      	         MOVE.L  %D6,%D0        | MMMRRR
 5760 82c48 0240 0038 	         ANDI.W  #0x38,%D0      | MMM...
 5761 82c4c 6608      	         BNE.S   MADD46         | DESTINATION NOT  D@
 5762               	
 5763               	*  <EA>,D@
 5764 82c4e EE5E      	         ROR.W   #7,%D6
 5765 82c50 8446      	         OR.W    %D6,%D2
 5766               	
 5767 82c52 8444      	         OR.W    %D4,%D2
 5768 82c54 60C8      	         BRA.S   CMMD2S11
 5769               	
 5770               	MADD46:  .align  2              | D@,<EA>
 5771 82c56 0042 0100 	         ORI.W   #0x100,%D2
 5772               	
 5773 82c5a EE5C      	         ROR.W   #7,%D4
 5774 82c5c 8444      	         OR.W    %D4,%D2        | <EA> AS DESTINATION
 5775               	
 5776 82c5e 8446      	         OR.W    %D6,%D2        | D@  AS SOURCE
 5777 82c60 60BC      	         BRA.S   CMMD2S11
 5778               	
 5779 82c62 2002      	MADD56:  MOVE.L  %D2,%D0        | #<DATA>,<EA>
 5780 82c64 343C 0600 	         MOVE.W  #0x0600,%D2    | MASK = ADDI
 5781               	
 5782 82c68 0C40 D000 	         CMPI.W  #0xD000,%D0
 5783 82c6c 6704      	         BEQ.S   MADD58
 5784 82c6e 343C 0400 	         MOVE.W  #0x400,%D2     | MASK = SUBI
 5785               	MADD58:
 5786               	
 5787 82c72 6100 F600 	         BSR     FSIZE
 5788               	
 5789 82c76 6100 F642 	         BSR     EADA           | DATA ALTERABLE ONLY
 5790 82c7a 8446      	         OR.W    %D6,%D2
 5791 82c7c 60A0      	         BRA.S   CMMD2S11
 5792               	
 5793 82c7e 2A69 0012 	MADDI:   MOVE.L  PTROP(%A1),%A5 | (INDEX 3) CMPI
 5794 82c82 6100 F5F0 	         BSR     FSIZE
 5795               	
 5796 82c86 6100 F644 	         BSR     EAZ
 5797               	
 5798 82c8a 6194      	         BSR.S   COMMAS20
 5799               	
 5800 82c8c 6100 F62C 	         BSR     EADA           | DATA ALTERABLE ONLY
 5801 82c90 8446      	         OR.W    %D6,%D2
 5802 82c92 608A      	         BRA.S   CMMD2S11
 5803               	
 5804               	*  SIZE =  BYTE, WORD, LONG
 5805               	*  #<DATA>,SR
 5806               	*  #<DATA>,<EA>    DATA ALTERABLE ONLY
 5807               	MANDI:   .align  2              | (INDEX 28) ANDI EORI ORI
 5808 82c94 6100 F5DE 	         BSR     FSIZE
 5809               	
 5810 82c98 6100 F632 	         BSR     EAZ
 5811               	
 5812 82c9c 6182      	         BSR.S   COMMAS20
68K GAS  tutor13.s 			page 120


 5813               	
 5814 82c9e 0C15 0053 	         CMPI.B  #'S',(%A5)
 5815 82ca2 670A      	         BEQ.S   MANDI23
 5816               	
 5817 82ca4 6100 F614 	         BSR     EADA
 5818 82ca8 8446      	         OR.W    %D6,%D2
 5819 82caa 6000 FF72 	         BRA     CMMD2S11
 5820               	
 5821 82cae 0C2D 0052 	MANDI23: CMPI.B  #'R',1(%A5)    | #<DATA>,SR
 5821      0001 
 5822 82cb4 6600 FE76 	         BNE     ER
 5823 82cb8 0C69 0080 	         CMPI.W  #0x0080,TLENGTH(%A1)
 5823      000C 
 5824 82cbe 6700 FE6C 	         BEQ     ER             | .L NOT ALLOWED WITH SR
 5825 82cc2 0042 003C 	         ORI.W   #0x003C,%D2
 5826 82cc6 548D      	         ADDQ.L  #2,%A5         | POINTER TO END OF OPERAND
 5827 82cc8 6000 FE6A 	         BRA     CMMD2
 5828               	
 5829               	MADDA:   .align  2              | (INDEX 2)
 5830 82ccc 6100 F610 	         BSR     EAALL
 5831 82cd0 8446      	         OR.W    %D6,%D2
 5832               	
 5833 82cd2 6100 FE3E 	         BSR     COMMA
 5834               	
 5835 82cd6 8446      	MADDA21: OR.W    %D6,%D2
 5836 82cd8 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0
 5837 82cdc 6700 FE4E 	         BEQ     ER             | .BYTE NOT ALLOWED
 5838 82ce0 E348      	         LSL.W   #1,%D0         | .W = 011......
 5839 82ce2 0040 00C0 	         ORI.W   #0x00C0,%D0    | .L = 111......
 5840 82ce6 8440      	         OR.W    %D0,%D2
 5841               	
 5842 82ce8 6100 F5AA 	         BSR     GETREGA
 5843 82cec EE58      	         ROR.W   #7,%D0
 5844 82cee 8440      	         OR.W    %D0,%D2
 5845 82cf0 6000 FE42 	         BRA     CMMD2
 5846               	
 5847               	MADDQ:   .align  2              | (INDEX 4)
 5848 82cf4 6100 F57E 	         BSR     FSIZE
 5849               	
 5850 82cf8 6100 0682 	         BSR     GETIMM
 5851               	
 5852 82cfc 4A80      	         TST.L   %D0
 5853 82cfe 6700 FE2C 	         BEQ     ER             | DATA = ZERO
 5854 82d02 0C00 0009 	         CMPI.B  #9,%D0
 5855 82d06 6A00 FE24 	         BPL     ER             | VALUE TOO BIG
 5856 82d0a 0240 0007 	         ANDI.W  #0x7,%D0       | MAKE 8 = 0
 5857 82d0e EE58      	         ROR.W   #7,%D0         | SHIFT DATA TO BITS 9-11
 5858 82d10 8440      	         OR.W    %D0,%D2
 5859               	
 5860 82d12 6100 FDFE 	         BSR     COMMA
 5861               	
 5862 82d16 6100 F5C0 	         BSR     EAA            | ALTERABLE ADDRESSING
 5863               	
 5864 82d1a 8446      	         OR.W    %D6,%D2
 5865 82d1c 2002      	         MOVE.L  %D2,%D0
 5866 82d1e 0240 00C0 	         ANDI.W  #0xC0,%D0
 5867 82d22 660E      	         BNE.S   MADDQ25
68K GAS  tutor13.s 			page 121


 5868               	
 5869               	* BYTE SIZE; ADDRESS REGISTER DIRECT NOT ALLOWED
 5870 82d24 2002      	         MOVE.L  %D2,%D0
 5871 82d26 0240 0038 	         ANDI.W  #0x38,%D0
 5872 82d2a 0C00 0008 	         CMPI.B  #0x08,%D0
 5873 82d2e 6700 FDFC 	         BEQ     ER
 5874 82d32 6000 FE00 	MADDQ25: BRA     CMMD2
 5875               	
 5876               	* SIZE = BYTE, WORD, LONG
 5877               	*    DY,DX
 5878               	*    -(AY),-(AX)
 5879               	*    ....RX@.SS...RY@
 5880               	MADDX:   .align  2              | (INDEX 5)
 5881 82d36 6100 F53C 	         BSR     FSIZE
 5882               	
 5883 82d3a 3E3C 0011 	         MOVE.W  #0x11,%D7
 5884 82d3e 6100 F5A2 	         BSR     EA
 5885               	
 5886 82d42 6100 FDCE 	         BSR     COMMA
 5887               	
 5888 82d46 2006      	         MOVE.L  %D6,%D0
 5889 82d48 0240 0007 	         ANDI.W  #7,%D0
 5890 82d4c 8440      	         OR.W    %D0,%D2
 5891               	
 5892 82d4e 0806 0005 	         BTST    #5,%D6
 5893 82d52 6718      	         BEQ.S   MADDX5         | D@,D@ MODE
 5894               	
 5895 82d54 0042 0008 	         ORI.W   #0x0008,%D2    | -(A@),-(A@) MODE
 5896               	
 5897 82d58 3E3C 0010 	         MOVE.W  #0x10,%D7
 5898 82d5c 6100 F584 	         BSR     EA
 5899               	
 5900 82d60 0246 0007 	         ANDI.W  #7,%D6
 5901 82d64 EE5E      	         ROR.W   #7,%D6
 5902 82d66 8446      	         OR.W    %D6,%D2
 5903 82d68 6000 FDCA 	         BRA     CMMD2
 5904               	
 5905 82d6c 6100 F50C 	MADDX5:  BSR     GETREGD        | D@,D@
 5906 82d70 EE58      	         ROR.W   #7,%D0
 5907 82d72 8440      	         OR.W    %D0,%D2
 5908 82d74 6000 FDBE 	         BRA     CMMD2
 5909               	
 5910               	*  SIZE = BYTE, WORD, LONG
 5911               	*         <EA>,D@
 5912               	*         D@,<EA>
 5913 82d78 6100 F4FA 	MAND:    BSR     FSIZE          | (INDEX 6)
 5914               	
 5915 82d7c 0C15 0023 	         CMPI.B  #'#',(%A5)
 5916 82d80 6740      	         BEQ.S   MAND90
 5917               	
 5918 82d82 6100 0082 	         BSR     A5TODEST       | MOVE A5 TO DESTINATION
 5919               	
 5920 82d86 1015      	         MOVE.B  (%A5),%D0      | D0 = 1ST CHAR OF DESTINATION
 5921 82d88 2A69 0012 	         MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO OPERAND
 5922 82d8c 0C00 0044 	         CMPI.B  #'D',%D0
 5923 82d90 671A      	         BEQ.S   MAND77
 5924               	
68K GAS  tutor13.s 			page 122


 5925 82d92 0042 0100 	         ORI.W   #0x0100,%D2    | D@,<EA>
 5926               	
 5927 82d96 6100 F4E2 	         BSR     GETREGD
 5928 82d9a EE58      	         ROR.W   #7,%D0
 5929 82d9c 8440      	         OR.W    %D0,%D2
 5930               	
 5931 82d9e 6100 FD72 	         BSR     COMMA
 5932               	
 5933 82da2 6100 F522 	         BSR     EAM            | ALTERABLE MEMORY
 5934 82da6 8446      	         OR.W    %D6,%D2
 5935 82da8 6000 FD8A 	         BRA     CMMD2
 5936               	
 5937 82dac 6100 F524 	MAND77:  BSR     EADADDR        | <EA>,D@
 5938 82db0 8446      	         OR.W    %D6,%D2
 5939               	
 5940 82db2 6100 FD5E 	         BSR     COMMA
 5941               	
 5942 82db6 6100 F4C2 	         BSR     GETREGD
 5943 82dba EE58      	         ROR.W   #7,%D0
 5944 82dbc 8440      	         OR.W    %D0,%D2
 5945 82dbe 6000 FD74 	         BRA     CMMD2
 5946               	
 5947 82dc2 0242 F000 	MAND90:  ANDI.W  #0xF000,%D2
 5948 82dc6 0C42 C000 	         CMPI.W  #0xC000,%D2
 5949 82dca 6708      	         BEQ.S   MAND97         | AND
 5950 82dcc 343C 0000 	         MOVE.W  #0x0000,%D2    | CHANGE TO "ORI"
 5951 82dd0 6000 FEC2 	MAND91:  BRA     MANDI
 5952 82dd4 343C 0200 	MAND97:  MOVE.W  #0x0200,%D2    | CHANGE TO "ADDI"
 5953 82dd8 60F6      	         BRA.S   MAND91
 5954               	
 5955 82dda 6100 F498 	MEOR:    BSR     FSIZE          | (INDEX 35)
 5956               	
 5957 82dde 0C15 0023 	         CMPI.B  #'#',(%A5)
 5958 82de2 6716      	         BEQ.S   MEOR90
 5959               	
 5960 82de4 6100 F494 	         BSR     GETREGD
 5961 82de8 EE58      	         ROR.W   #7,%D0
 5962 82dea 8440      	         OR.W    %D0,%D2
 5963               	
 5964 82dec 6100 FD24 	         BSR     COMMA
 5965               	
 5966 82df0 6100 F4C8 	         BSR     EADA           | DATA ALTERABLE ADDRESSING
 5967 82df4 8446      	         OR.W    %D6,%D2
 5968 82df6 6000 FD3C 	         BRA     CMMD2
 5969               	
 5970 82dfa 2A69 0012 	MEOR90:  MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO OPERAND
 5971 82dfe 343C 0A00 	         MOVE.W  #0x0A00,%D2    | CHANGE TO "EORI"
 5972 82e02 6000 FE90 	         BRA     MANDI
 5973               	
 5974 82e06 4281      	A5TODEST:CLR.L   %D1            | MOVE A5 TO DESTINATION
 5975 82e08 6100 FD10 	A5300:   BSR     GETCHAR
 5976 82e0c 0C00 0028 	         CMPI.B  #'(',%D0
 5977 82e10 6602      	         BNE.S   A5305
 5978 82e12 2200      	         MOVE.L  %D0,%D1
 5979 82e14 0C00 0029 	A5305:   CMPI.B  #')',%D0
 5980 82e18 67EC      	         BEQ.S   A5TODEST
 5981 82e1a 0C00 002C 	         CMPI.B  #',',%D0
68K GAS  tutor13.s 			page 123


 5982 82e1e 66E8      	         BNE.S   A5300
 5983 82e20 4A41      	         TST     %D1
 5984 82e22 66E4      	         BNE.S   A5300
 5985 82e24 4E75      	         RTS
 5986               	
 5987               	MASL:    .align  2              | (INDEX 7)
 5988               	
 5989               	*         ASL     LSL     ROL     ROXL
 5990               	*  MASKS  E000    E008    E018    E010
 5991               	*         E0C0    E2C0    E6C0    E4C0   SHIFT MEMORY
 5992               	
 5993 82e26 6100 F44C 	         BSR     FSIZE
 5994               	
 5995 82e2a 101D      	         MOVE.B  (%A5)+,%D0
 5996 82e2c 0C00 0023 	         CMPI.B  #'#',%D0
 5997 82e30 6628      	         BNE.S   MSL200
 5998               	
 5999               	*  #<COUNT>,D@
 6000 82e32 6100 F3D6 	         BSR     EV
 6001 82e36 0C80 0000 	         CMPI.L  #8,%D0
 6001      0008 
 6002 82e3c 6E00 FCEE 	         BGT     ER             | GREATER THAN 8
 6003               	
 6004 82e40 0200 0007 	         ANDI.B  #0x7,%D0       | MAKE 8 INTO 0
 6005 82e44 EE58      	MSL150:  ROR.W   #7,%D0
 6006 82e46 0242 F1FF 	         ANDI.W  #0xF1FF,%D2
 6007 82e4a 8440      	         OR.W    %D0,%D2        | COUNT/REG
 6008               	
 6009 82e4c 6100 FCC4 	         BSR     COMMA
 6010               	
 6011 82e50 6100 F428 	         BSR     GETREGD
 6012 82e54 8440      	         OR.W    %D0,%D2
 6013 82e56 6000 FCDC 	         BRA     CMMD2
 6014               	
 6015               	MSL200:  .align  2              | D@,D@
 6016 82e5a 0C00 0044 	         CMPI.B  #'D',%D0
 6017 82e5e 660C      	         BNE.S   MSL300
 6018               	
 6019               	*        D@,D@
 6020 82e60 0042 0020 	         ORI.W   #0x20,%D2
 6021 82e64 538D      	         SUBQ.L  #1,%A5
 6022 82e66 6100 F412 	         BSR     GETREGD
 6023 82e6a 60D8      	         BRA.S   MSL150
 6024               	
 6025               	MSL300:  .align  2              | <EA>      SHIFT MEMORY
 6026 82e6c 538D      	         SUBQ.L  #1,%A5
 6027 82e6e 0042 00C0 	         ORI.W   #0x00C0,%D2    | SIZE = MEMORY
 6028               	
 6029 82e72 0242 FFC0 	         ANDI.W  #0xFFC0,%D2    | REMOVE "SHIFT MEMORY" BITS
 6030               	
 6031 82e76 0C69 0040 	         CMPI.W  #0x0040,TLENGTH(%A1)
 6031      000C 
 6032 82e7c 6658      	         BNE.S   ER2            | NOT .WORD
 6033               	
 6034 82e7e 6100 F446 	         BSR     EAM
 6035 82e82 8446      	         OR.W    %D6,%D2
 6036 82e84 6000 FCAE 	         BRA     CMMD2
68K GAS  tutor13.s 			page 124


 6037               	
 6038 82e88 6100 0334 	MSCC:    BSR     SIZEBYTE       | (INDEX 29) NBCD SCC TAS
 6039               	
 6040 82e8c 6100 F42C 	         BSR     EADA           | DATA ALTERABLE ONLY
 6041 82e90 8446      	         OR.W    %D6,%D2
 6042 82e92 6000 FCA0 	         BRA     CMMD2
 6043               	
 6044               	MBCHG:   .align  2              | (9)
 6045 82e96 0C15 0023 	         CMPI.B  #'#',(%A5)
 6046 82e9a 6648      	         BNE.S   MB200
 6047               	
 6048 82e9c 343C 0840 	         MOVE.W  #0x0840,%D2    | NEW OP-CODE MASK
 6049               	
 6050 82ea0 528D      	MB100:   ADDQ.L  #1,%A5
 6051 82ea2 6100 F366 	         BSR     EV             | EVALUATE EXPRESSION
 6052 82ea6 0C80 0000 	         CMPI.L  #33,%D0
 6052      0021 
 6053 82eac 6E28      	         BGT.S   ER2            | (MODULO 32)
 6054 82eae 3340 0002 	         MOVE.W  %D0,TDATA+2(%A1)
 6055 82eb2 5483      	         ADDQ.L  #2,%D3         | STORE POINTER
 6056               	
 6057 82eb4 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 6058               	
 6059 82eb8 6100 FC58 	MB105:   BSR     COMMA
 6060               	
 6061 82ebc 6100 F3FC 	         BSR     EADA           | DESTINATION
 6062 82ec0 8446      	         OR.W    %D6,%D2
 6063               	
 6064 82ec2 4A29 000B 	         TST.B   TLSPEC(%A1)    | ..
 6065 82ec6 6718      	         BEQ.S   MB185          | DEFAULT
 6066               	
 6067 82ec8 0246 0038 	         ANDI.W  #0x0038,%D6
 6068 82ecc 660C      	         BNE.S   MB145          | DESTINATION <EA> WAS NOT D@
 6069               	
 6070 82ece 0C69 0080 	         CMPI.W  #0x80,TLENGTH(%A1) | DESTINATION <EA> WAS D@
 6070      000C 
 6071 82ed4 670A      	         BEQ.S   MB185          | LENGTH IS .L
 6072 82ed6 6000 FC54 	ER2:     BRA     ER
 6073               	
 6074 82eda 4A69 000C 	MB145:   TST.W   TLENGTH(%A1)
 6075 82ede 66F6      	         BNE.S   ER2            | NOT BYTE LENGTH
 6076               	
 6077 82ee0 6000 FC52 	MB185:   BRA     CMMD2
 6078               	
 6079 82ee4 6100 F394 	MB200:   BSR     GETREGD        | DYNAMIC
 6080 82ee8 EE58      	         ROR.W   #7,%D0
 6081 82eea 8440      	         OR.W    %D0,%D2
 6082               	
 6083 82eec 60CA      	         BRA.S   MB105
 6084               	
 6085 82eee 0C15 0023 	MBSET:   CMPI.B  #'#',(%A5)     | (INDEX 11) BCLR BSET
 6086 82ef2 66F0      	         BNE.S   MB200
 6087               	
 6088 82ef4 343C 08C0 	         MOVE.W  #0x08C0,%D2
 6089 82ef8 60A6      	         BRA.S   MB100
 6090               	
 6091 82efa 0C15 0023 	MBCLR:   CMPI.B  #'#',(%A5)     | (INDEX 30)
68K GAS  tutor13.s 			page 125


 6092 82efe 66E4      	         BNE.S   MB200
 6093               	
 6094 82f00 343C 0880 	         MOVE.W  #0x0880,%D2
 6095 82f04 609A      	         BRA.S   MB100
 6096               	
 6097 82f06 0C15 0023 	MBTST:   CMPI.B  #'#',(%A5)     | (INDEX 31)
 6098 82f0a 66D8      	         BNE.S   MB200
 6099               	
 6100 82f0c 343C 0800 	         MOVE.W  #0x0800,%D2
 6101 82f10 608E      	         BRA.S   MB100
 6102               	
 6103               	MDBCC:   .align  2              | (INDEX 8)
 6104 82f12 6100 F366 	         BSR     GETREGD
 6105 82f16 8440      	         OR.W    %D0,%D2
 6106               	
 6107 82f18 6100 FBF8 	         BSR     COMMA
 6108 82f1c 613C      	         BSR.S   EVSR
 6109 82f1e 601A      	         BRA.S   MBRA23
 6110               	
 6111               	*  SIZE   .S  =  .W   (DEFAULT)
 6112               	*         .L  =  .L
 6113               	MBRA:    .align  2              | (INDEX 10)
 6114 82f20 6138      	         BSR.S   EVSR
 6115               	
 6116 82f22 0C69 0080 	         CMPI.W  #0x0080,TLENGTH(%A1)
 6116      000C 
 6117 82f28 6710      	         BEQ.S   MBRA23         | FORCED LONG
 6118               	
 6119 82f2a 6100 F63C 	         BSR     EA8BITS        | -128 TO +127
 6120 82f2e 660A      	         BNE.S   MBRA23         | NOT 8 BIT VALUE
 6121               	
 6122 82f30 8405      	         OR.B    %D5,%D2
 6123 82f32 6000 FC00 	         BRA     CMMD2          | .SHORT
 6124               	
 6125 82f36 6000 FBF4 	EVER:    BRA     ER             | ERROR HANDLER
 6126               	
 6127 82f3a 4A29 000B 	MBRA23:  TST.B   TLSPEC(%A1)
 6128 82f3e 6708      	         BEQ.S   MBRA27
 6129 82f40 0C69 0040 	         CMPI.W  #0x0040,TLENGTH(%A1)
 6129      000C 
 6130 82f46 67EE      	         BEQ.S   EVER           | .S SPECIFIED
 6131               	MBRA27:
 6132               	
 6133 82f48 2A04      	         MOVE.L  %D4,%D5        | RESTORE D5
 6134 82f4a 6100 F608 	         BSR     EA16BITS       | -32K TO +32K
 6135 82f4e 3345 0002 	         MOVE.W  %D5,TDATA+2(%A1)
 6136 82f52 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 6137 82f56 6000 FBDC 	         BRA     CMMD2
 6138               	
 6139 82f5a 6100 F2AE 	EVSR:    BSR     EV
 6140 82f5e 0C15 0020 	         CMPI.B  #BLANK,(%A5)
 6141 82f62 66D2      	         BNE.S   EVER           | DID NOT TERMINATE WITH SPACE
 6142               	
 6143 82f64 2A00      	         MOVE.L  %D0,%D5
 6144 82f66 E280      	         ASR.L   #1,%D0
 6145 82f68 65CC      	         BCS.S   EVER           | ODD VALUE
 6146 82f6a 2829 000E 	         MOVE.L  PCOUNTER(%A1),%D4
68K GAS  tutor13.s 			page 126


 6147 82f6e 5484      	         ADDQ.L  #2,%D4         | D4 = PC + 2
 6148 82f70 9A84      	         SUB.L   %D4,%D5
 6149 82f72 67C2      	         BEQ.S   EVER           | ZERO; SPECIAL CASE ERROR
 6150 82f74 2805      	         MOVE.L  %D5,%D4
 6151 82f76 4E75      	         RTS
 6152               	
 6153               	MCHK:    .align  2              | (INDEX 12) CHK DIV MUL
 6154 82f78 6100 0238 	         BSR     SIZEWORD
 6155               	
 6156 82f7c 6100 F354 	         BSR     EADADDR        | DATA ADDRESSING ONLY
 6157 82f80 8446      	         OR.W    %D6,%D2
 6158               	
 6159 82f82 6100 FB8E 	         BSR     COMMA
 6160               	
 6161 82f86 6100 F2F2 	         BSR     GETREGD
 6162 82f8a EE58      	         ROR.W   #7,%D0
 6163 82f8c 8440      	         OR.W    %D0,%D2
 6164               	
 6165 82f8e 6000 FBA4 	         BRA     CMMD2
 6166               	
 6167               	MCLR:    .align  2              | (INDEX 13)
 6168 82f92 6100 F2E0 	         BSR     FSIZE
 6169               	
 6170 82f96 6100 F322 	         BSR     EADA           | DATA ALTERABLE ONLY
 6171 82f9a 8446      	         OR.W    %D6,%D2
 6172 82f9c 6000 FB96 	         BRA     CMMD2
 6173               	
 6174               	* SIZE = BYTE, WORD, LONG
 6175               	MCMPM:   .align  2              | (INDEX 14)
 6176 82fa0 6100 F2D2 	         BSR     FSIZE
 6177               	
 6178 82fa4 3E3C 0008 	         MOVE.W  #0x0008,%D7
 6179 82fa8 6100 F338 	         BSR     EA             | -(A@)   ONLY
 6180 82fac 0246 0007 	         ANDI.W  #7,%D6
 6181 82fb0 8446      	         OR.W    %D6,%D2
 6182               	
 6183 82fb2 6100 FB5E 	         BSR     COMMA
 6184               	
 6185 82fb6 3E3C 0008 	         MOVE.W  #0x0008,%D7
 6186 82fba 6100 F326 	         BSR     EA
 6187 82fbe 0246 0007 	         ANDI.W  #7,%D6
 6188 82fc2 EE5E      	         ROR.W   #7,%D6
 6189 82fc4 8446      	         OR.W    %D6,%D2
 6190 82fc6 6000 FB6C 	         BRA     CMMD2
 6191               	
 6192               	MEXG:    .align  2              | (INDEX 16)
 6193 82fca 6100 01D6 	         BSR     SIZELONG
 6194               	
 6195 82fce 6100 F2D2 	         BSR     GETREGAD
 6196 82fd2 2800      	         MOVE.L  %D0,%D4        | D4 = REG NUMBER
 6197 82fd4 2A01      	         MOVE.L  %D1,%D5        | D5 = REG TYPE
 6198               	
 6199 82fd6 6100 FB3A 	         BSR     COMMA          | TEST FOR COMMA
 6200               	
 6201 82fda 6100 F2C6 	         BSR     GETREGAD
 6202               	
 6203 82fde BA81      	         CMP.L   %D1,%D5
68K GAS  tutor13.s 			page 127


 6204 82fe0 6714      	         BEQ.S   MEXG35         | BOTH REGS THE SAME
 6205               	
 6206               	*  DX,AY  OR  AY,DX
 6207 82fe2 0042 0088 	         ORI.W   #0x88,%D2      | MODE
 6208 82fe6 4A01      	         TST.B   %D1
 6209 82fe8 6602      	         BNE.S   MEXG25
 6210               	
 6211 82fea C144      	         EXG     %D0,%D4        | SWAP SOURCE & DESTINATION
 6212               	
 6213 82fec 8440      	MEXG25:  OR.W    %D0,%D2        | .......MMMMMYYY
 6214 82fee EE5C      	         ROR.W   #7,%D4
 6215 82ff0 8444      	         OR.W    %D4,%D2        | ....XXXMMMMMYYY
 6216 82ff2 6000 FB40 	         BRA     CMMD2
 6217               	
 6218 82ff6 0042 0040 	MEXG35:  ORI.W   #0x0040,%D2    | OP-MODE
 6219 82ffa 4A01      	         TST.B   %D1
 6220 82ffc 67EE      	         BEQ.S   MEXG25         | DX,DY
 6221               	
 6222 82ffe 0042 0048 	         ORI.W   #0x0048,%D2    | AX,AY
 6223 83002 60E8      	         BRA.S   MEXG25
 6224               	
 6225               	MEXT:    .align  2              | (INDEX 17)
 6226 83004 4A69 000C 	         TST.W   TLENGTH(%A1)
 6227 83008 6700 FB22 	         BEQ     ER             | BYTE SIZE NOT ALLOWED
 6228               	
 6229 8300c 6100 F266 	         BSR     FSIZE          | .W = ........10......
 6230 83010 0642 0040 	         ADDI.W  #0x0040,%D2    | .L = ........11......
 6231               	
 6232 83014 6100 F264 	         BSR     GETREGD
 6233 83018 8440      	         OR.W    %D0,%D2
 6234 8301a 6000 FB18 	         BRA     CMMD2
 6235               	
 6236               	MMOVEM:  .align  2              | (INDEX 27)
 6237 8301e 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0 | SIZE BITS  76 TO 6
 6238 83022 6700 FB08 	         BEQ     ER             | BYTE       00  ERROR
 6239 83026 E248      	         LSR.W   #1,%D0         | WORD       01    0
 6240 83028 0240 0040 	         ANDI.W  #0x0040,%D0    | LONG       10    1
 6241 8302c 8440      	         OR.W    %D0,%D2
 6242               	
 6243 8302e 5429 000A 	         ADDQ.B  #2,TNB(%A1)    | NUMBER OF BYTES
 6244 83032 5483      	         ADDQ.L  #2,%D3         | FORCE STORE PTR PAST MASK
 6245               	
 6246 83034 0C15 0041 	         CMPI.B  #'A',(%A5)
 6247 83038 671E      	         BEQ.S   MMM44
 6248 8303a 0C15 0044 	         CMPI.B  #'D',(%A5)
 6249 8303e 6718      	         BEQ.S   MMM44
 6250               	
 6251               	*    <EA>,<REGISTER LIST>       | MEMORY TO REGISTER
 6252 83040 0042 0400 	         ORI.W   #0x0400,%D2    | DIRECTION BIT
 6253               	
 6254 83044 3E3C 07EC 	         MOVE.W  #0x7EC,%D7     | MODES ALLOWED
 6255 83048 6100 F298 	         BSR     EA
 6256 8304c 8446      	         OR.W    %D6,%D2
 6257               	
 6258 8304e 6100 FAC2 	         BSR     COMMA
 6259               	
 6260 83052 612A      	         BSR.S   MMM48
68K GAS  tutor13.s 			page 128


 6261 83054 6000 FADE 	         BRA     CMMD2
 6262               	
 6263               	*   <REGISTER LIST>,<EA>        | REGISTER TO MEMORY
 6264               	MMM44:   .align  2
 6265               	
 6266               	* EVALUATE DESTINATION FIRST
 6267 83058 6100 FAC0 	MMM46:   BSR     GETCHAR
 6268 8305c 0C00 002C 	         CMPI.B  #',',%D0       | FIND COMMA
 6269 83060 66F6      	         BNE.S   MMM46
 6270               	
 6271 83062 3E3C 01F4 	         MOVE.W  #0x1F4,%D7     | MODES ALLOWED
 6272 83066 6100 F27A 	         BSR     EA
 6273 8306a 8446      	         OR.W    %D6,%D2
 6274 8306c 234D 0016 	         MOVE.L  %A5,PENDOP(%A1) | END OF OPERAND
 6275 83070 2A69 0012 	         MOVE.L  PTROP(%A1),%A5
 6276 83074 6108      	         BSR.S   MMM48          | EVALUATE REGISTERS
 6277 83076 2A69 0016 	         MOVE.L  PENDOP(%A1),%A5 | POINTER TO END OF OPERAND
 6278 8307a 6000 FAB8 	         BRA     CMMD2
 6279               	
 6280               	*        %D6 = CORRESPONDENCE MASK
 6281               	*        %D4 = CONTROL  0xFF "-BLANK/"
 6282 8307e 4286      	MMM48:   CLR.L   %D6            | MASK
 6283 83080 78FF      	         MOVEQ   #-1,%D4        | CONTROL = $FF
 6284               	
 6285 83082 6100 FA96 	RL111:   BSR     GETCHAR
 6286 83086 0C00 002C 	         CMPI.B  #',',%D0
 6287 8308a 6706      	         BEQ.S   RL114          | DONE; FOUND COMMA
 6288 8308c 0C00 0020 	         CMPI.B  #BLANK,%D0
 6289 83090 6602      	         BNE.S   RL115          | NOT SPACE
 6290 83092 4E75      	RL114:   RTS                    | DONE
 6291               	
 6292 83094 0C00 002F 	RL115:   CMPI.B  #'/',%D0
 6293 83098 6614      	         BNE.S   RL444
 6294               	
 6295 8309a 4A04      	         TST.B   %D4            | CONTROL
 6296 8309c 6B00 FA8E 	         BMI     ER
 6297 830a0 2800      	         MOVE.L  %D0,%D4        | CONTROL = "/"
 6298 830a2 6100 F1FE 	RL333:   BSR     GETREGAD
 6299 830a6 8200      	         OR.B    %D0,%D1        | D1 = BIT POSITION
 6300 830a8 1A01      	         MOVE.B  %D1,%D5        | D5 = LAST REGISTER ENTERED
 6301 830aa 6146      	         BSR.S   SETBIT
 6302 830ac 60D4      	         BRA.S   RL111
 6303               	
 6304 830ae 0C00 002D 	RL444:   CMPI.B  #'-',%D0
 6305 830b2 6630      	         BNE.S   RL666
 6306               	
 6307 830b4 0C04 002F 	         CMPI.B  #'/',%D4       | CONTROL
 6308 830b8 6600 FA72 	         BNE     ER
 6309 830bc 2800      	         MOVE.L  %D0,%D4        | CONTROL = "-"
 6310 830be 6100 F1E2 	         BSR     GETREGAD
 6311 830c2 8200      	         OR.B    %D0,%D1
 6312 830c4 2E01      	         MOVE.L  %D1,%D7        | D7 = NOW REGISTER
 6313 830c6 1005      	         MOVE.B  %D5,%D0        | D5 = LAST REG
 6314 830c8 B300      	         EOR.B   %D1,%D0
 6315 830ca 0200 0038 	         ANDI.B  #0x38,%D0
 6316 830ce 6600 FA5C 	         BNE     ER             | NOT MATCED SET
 6317 830d2 BA01      	         CMP.B   %D1,%D5
68K GAS  tutor13.s 			page 129


 6318 830d4 6A00 FA56 	         BPL     ER
 6319               	
 6320 830d8 5285      	RL555:   ADDQ.L  #1,%D5
 6321 830da 2205      	         MOVE.L  %D5,%D1
 6322 830dc 6114      	         BSR.S   SETBIT
 6323 830de BA07      	         CMP.B   %D7,%D5
 6324 830e0 6BF6      	         BMI.S   RL555
 6325 830e2 609E      	         BRA.S   RL111
 6326               	
 6327 830e4 4A04      	RL666:   TST.B   %D4
 6328 830e6 6A00 FA44 	         BPL     ER
 6329 830ea 183C 002F 	         MOVE.B  #'/',%D4       | CONTROL = "/"
 6330 830ee 538D      	         SUBQ.L  #1,%A5
 6331 830f0 60B0      	         BRA.S   RL333
 6332               	
 6333 830f2 41FA 001A 	SETBIT:  LEA     MTBL(%PC),%A0  | SET BIT IN CORRESPONDENCE MASK
 6334 830f6 2002      	         MOVE.L  %D2,%D0
 6335 830f8 0240 0038 	         ANDI.W  #0x38,%D0
 6336 830fc 0C40 0020 	         CMPI.W  #0x20,%D0
 6337 83100 6604      	         BNE.S   RL30           | NOT PREDECREMENT
 6338 83102 1230 1000 	         MOVE.B  (%A0,%D1.W),%D1 | D1 = BIT  (FOR SURE)
 6339 83106 03C6      	RL30:    BSET    %D1,%D6
 6340               	
 6341 83108 3346 0002 	         MOVE.W  %D6,TDATA+2(%A1) | SAVE CORRESPONDENCE MASK
 6342 8310c 4E75      	         RTS
 6343               	
 6344 8310e 0F0E 0D0C 	MTBL:    DC.B    15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
 6344      0B0A 0908 
 6344      0706 0504 
 6344      0302 0100 
 6345               	
 6346               	*   D@,<DATA>(A@)
 6347               	*   <DATA>(A@),D@
 6348               	*         (A@),D@            FORCED TO 0(A@),%D0
 6349               	*         D@,(A@)            FORCED TO %D0,0(A@)
 6350               	*
 6351               	*  SIZE = WORD, LONG
 6352               	MMOVEP:  .align  2              | (INDEX 33)
 6353 8311e 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0
 6354 83122 6700 FA08 	         BEQ     ER             | .BYTE NOT ALLOWED
 6355 83126 E248      	         LSR.W   #1,%D0
 6356 83128 0240 0040 	         ANDI.W  #0x0040,%D0
 6357 8312c 8440      	         OR.W    %D0,%D2        | SIZE
 6358               	
 6359 8312e 3E3C 0025 	         MOVE.W  #0x25,%D7
 6360 83132 6100 F1AE 	         BSR     EA             | D6 = MODE
 6361               	
 6362 83136 6100 F9DA 	         BSR     COMMA
 6363               	
 6364 8313a 2006      	         MOVE.L  %D6,%D0
 6365 8313c 0240 0038 	         ANDI.W  #0x38,%D0
 6366 83140 0C00 0000 	         CMPI.B  #0x0,%D0
 6367 83144 670A      	         BEQ.S   MMP344         | D@,<DATA>(A@)
 6368               	
 6369               	*    <DATA>(A@),D@
 6370 83146 6100 F132 	         BSR     GETREGD
 6371 8314a EE58      	         ROR.W   #7,%D0
68K GAS  tutor13.s 			page 130


 6372 8314c 8440      	         OR.W    %D0,%D2        | D@
 6373 8314e 6010      	         BRA.S   MMP348
 6374               	
 6375 83150 0042 0080 	MMP344:  ORI.W   #0x0080,%D2    | REGISTER TO MEMORY
 6376               	
 6377 83154 EE5E      	         ROR.W   #7,%D6
 6378 83156 8446      	         OR.W    %D6,%D2        | D@
 6379               	
 6380 83158 3E3C 0024 	         MOVE.W  #0x24,%D7
 6381 8315c 6100 F184 	         BSR     EA
 6382 83160 2006      	MMP348:  MOVE.L  %D6,%D0
 6383 83162 0246 0007 	         ANDI.W  #7,%D6
 6384 83166 8446      	         OR.W    %D6,%D2        | A@
 6385               	
 6386 83168 0240 0038 	         ANDI.W  #0x38,%D0
 6387 8316c 0C00 0010 	         CMPI.B  #0x10,%D0
 6388 83170 660A      	         BNE.S   MMP368         | <DATA>(A@)
 6389               	
 6390 83172 4269 0002 	         CLR.W   TDATA+2(%A1)   | <DATA> FORCED TO ZERO;  "(A@)"
 6391 83176 5429 000A 	         ADDQ.B  #2,TNB(%A1)    | NUMBER OF BYTES
 6392 8317a 5483      	         ADDQ.L  #2,%D3         | STORE POINTER
 6393 8317c 6000 F9B6 	MMP368:  BRA     CMMD2
 6394               	
 6395               	MMOVEQ:  .align  2              | (INDEX 34)
 6396 83180 6100 01FA 	         BSR     GETIMM
 6397 83184 2A00      	         MOVE.L  %D0,%D5
 6398               	
 6399 83186 6100 F3E0 	         BSR     EA8BITS        | -128 TO +127
 6400 8318a 6600 F9A0 	         BNE     ER
 6401 8318e 8405      	         OR.B    %D5,%D2        | D5 = VALUE
 6402               	
 6403 83190 6100 F980 	         BSR     COMMA
 6404               	
 6405 83194 6100 F0E4 	         BSR     GETREGD        | D@
 6406 83198 EE58      	         ROR.W   #7,%D0
 6407               	
 6408 8319a 8440      	MMQ20:   OR.W    %D0,%D2
 6409 8319c 6104      	         BSR.S   SIZELONG
 6410 8319e 6000 F994 	         BRA     CMMD2
 6411               	
 6412 831a2 4A29 000B 	SIZELONG:TST.B   TLSPEC(%A1)    | MUST BE .LONG
 6413 831a6 6708      	         BEQ.S   SI201          | DEFAULT SIZE OK
 6414 831a8 0C69 0080 	         CMPI.W  #0x0080,TLENGTH(%A1)
 6414      000C 
 6415 831ae 660A      	         BNE.S   ER10           | NOT .LONG
 6416 831b0 4E75      	SI201:   RTS
 6417               	
 6418 831b2 0C69 0040 	SIZEWORD:CMPI.W  #0x0040,TLENGTH(%A1) | MUST BE .WORD
 6418      000C 
 6419 831b8 67F6      	         BEQ.S   SI201          | [RTS]
 6420 831ba 6000 F970 	ER10:    BRA     ER
 6421               	
 6422 831be 4A29 000B 	SIZEBYTE:TST.B   TLSPEC(%A1)
 6423 831c2 6706      	         BEQ.S   SI222          | DEFAULT SIZE OK
 6424 831c4 4A69 000C 	         TST.W   TLENGTH(%A1)
 6425 831c8 66F0      	         BNE.S   ER10
 6426 831ca 4E75      	SI222:   RTS
68K GAS  tutor13.s 			page 131


 6427               	
 6428               	MMOVE:   .align  2              | (INDEX 21)
 6429 831cc 0C15 0053 	         CMPI.B  #'S',(%A5)
 6430 831d0 661C      	         BNE.S   MMM40
 6431 831d2 343C 40C0 	         MOVE.W  #0x40C0,%D2    | SR,<EA>
 6432 831d6 528D      	         ADDQ.L  #1,%A5
 6433 831d8 0C1D 0052 	         CMPI.B  #'R',(%A5)+
 6434 831dc 66DC      	         BNE.S   ER10
 6435               	
 6436 831de 6100 F932 	         BSR     COMMA
 6437               	
 6438 831e2 6100 F0D6 	         BSR     EADA           | DATA ALTERABLE ONLY (DESTINATION)
 6439               	
 6440 831e6 8446      	MM315:   OR.W    %D6,%D2
 6441 831e8 61C8      	         BSR.S   SIZEWORD
 6442 831ea 6000 F948 	         BRA     CMMD2
 6443               	
 6444 831ee 0C15 0055 	MMM40:   CMPI.B  #'U',(%A5)
 6445 831f2 661C      	         BNE.S   MMM50
 6446 831f4 528D      	         ADDQ.L  #1,%A5
 6447 831f6 0C1D 0053 	         CMPI.B  #'S',(%A5)+
 6448 831fa 66BE      	         BNE.S   ER10
 6449 831fc 0C1D 0050 	         CMPI.B  #'P',(%A5)+
 6450 83200 66B8      	         BNE.S   ER10
 6451               	
 6452 83202 6100 F90E 	         BSR     COMMA
 6453               	
 6454 83206 343C 4E68 	         MOVE.W  #0x4E68,%D2    | USP,A@
 6455 8320a 6100 F088 	         BSR     GETREGA
 6456 8320e 608A      	         BRA.S   MMQ20
 6457               	
 6458               	* GET EXCEPTIONS FROM DESTINATION
 6459               	MMM50:   .align  2
 6460               	
 6461 83210 6100 FBF4 	         BSR     A5TODEST       | MOVE A5 TO DESTINATION
 6462               	
 6463 83214 101D      	         MOVE.B  (%A5)+,%D0
 6464 83216 0C00 0043 	         CMPI.B  #'C',%D0
 6465 8321a 6622      	         BNE.S   MMM60
 6466 8321c 0C1D 0043 	         CMPI.B  #'C',(%A5)+
 6467 83220 6698      	         BNE.S   ER10
 6468 83222 0C1D 0052 	         CMPI.B  #'R',(%A5)+
 6469 83226 6692      	         BNE.S   ER10
 6470 83228 343C 44C0 	         MOVE.W  #0x44C0,%D2    | <EA>,CCR
 6471               	
 6472 8322c 234D 0016 	MM508:   MOVE.L  %A5,PENDOP(%A1) | SAVE POINTER
 6473 83230 2A69 0012 	         MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO OPERAND
 6474               	
 6475 83234 6100 F09C 	         BSR     EADADDR        | DATA ADDRESSING ONLY (SOURCE)
 6476 83238 2A69 0016 	         MOVE.L  PENDOP(%A1),%A5
 6477 8323c 60A8      	         BRA.S   MM315
 6478               	
 6479 8323e 0C00 0053 	MMM60:   CMPI.B  #'S',%D0
 6480 83242 660E      	         BNE.S   MM70
 6481 83244 343C 46C0 	         MOVE.W  #0x46C0,%D2    | <EA>,SR
 6482 83248 0C1D 0052 	         CMPI.B  #'R',(%A5)+
 6483 8324c 6600 F8DE 	         BNE     ER
68K GAS  tutor13.s 			page 132


 6484 83250 60DA      	         BRA.S   MM508
 6485               	
 6486 83252 0C00 0055 	MM70:    CMPI.B  #'U',%D0
 6487 83256 6628      	         BNE.S   MM80
 6488 83258 343C 4E60 	         MOVE.W  #0x4E60,%D2    | A@,USP
 6489 8325c 0C1D 0053 	         CMPI.B  #'S',(%A5)+
 6490 83260 6600 F8CA 	         BNE     ER
 6491 83264 0C1D 0050 	         CMPI.B  #'P',(%A5)+
 6492 83268 6600 F8C2 	         BNE     ER
 6493               	
 6494 8326c 234D 0016 	         MOVE.L  %A5,PENDOP(%A1)
 6495 83270 2A69 0012 	         MOVE.L  PTROP(%A1),%A5
 6496 83274 6100 F01E 	         BSR     GETREGA
 6497 83278 2A69 0016 	         MOVE.L  PENDOP(%A1),%A5 | RESTORE A5
 6498 8327c 6000 FF1C 	         BRA     MMQ20
 6499               	
 6500 83280 2A69 0012 	MM80:    MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO SOURCE FIELD
 6501 83284 6100 EFEE 	         BSR     FSIZE          | GET SIZE (BITS  7 - 6)
 6502 83288 ED4A      	         LSL.W   #6,%D2         | ADJUST TO(BITS 13-12)
 6503 8328a 0802 000D 	         BTST    #13,%D2
 6504 8328e 6608      	         BNE.S   MM804          | .L 10 TO 10
 6505 83290 0642 1000 	         ADDI.W  #0x1000,%D2    | .W 01 TO 11
 6506 83294 0042 1000 	         ORI.W   #0x1000,%D2    | .B 00 TO 01
 6507 83298 6100 F044 	MM804:   BSR     EAALL          | SOURCE; ALL MODES ALLOWED
 6508 8329c 8446      	         OR.W    %D6,%D2
 6509               	
 6510               	* IF BYTE SIZE; "ADDRESS REGISTER DIRECT" NOT ALLOWED
 6511               	
 6512 8329e 2002      	         MOVE.L  %D2,%D0
 6513 832a0 0240 3000 	         ANDI.W  #0x3000,%D0
 6514 832a4 0C40 1000 	         CMPI.W  #0x1000,%D0
 6515 832a8 660C      	         BNE.S   MM806          | NOT .B SIZE
 6516 832aa 0206 0038 	         ANDI.B  #0x38,%D6
 6517 832ae 0C06 0008 	         CMPI.B  #0x08,%D6
 6518 832b2 6700 F878 	         BEQ     ER
 6519               	MM806:   .align  2
 6520               	
 6521 832b6 6100 F85A 	         BSR     COMMA
 6522               	
 6523 832ba 3E3C 01FF 	         MOVE.W  #0x1FF,%D7     | DATA ALTERABLE + A@
 6524 832be 6100 F022 	         BSR     EA
 6525               	
 6526 832c2 2006      	         MOVE.L  %D6,%D0        | DESTINATION
 6527 832c4 0240 0038 	         ANDI.W  #0x0038,%D0
 6528 832c8 0C40 0008 	         CMPI.W  #0x0008,%D0
 6529 832cc 6712      	         BEQ.S   MMOVEA1        | A@ MAKE MOVEA
 6530               	
 6531               	* POSITION REGISTER AND MODE OF DESTINATION
 6532               	
 6533 832ce E69E      	MM825:   ROR.L   #3,%D6         | RRR............. .............MMM
 6534 832d0 E65E      	         ROR.W   #3,%D6         |                  MMM.............
 6535 832d2 4846      	         SWAP    %D6            | MMM............. RRR.............
 6536 832d4 E75E      	         ROL.W   #3,%D6         |                  .............RRR
 6537 832d6 E39E      	         ROL.L   #1,%D6         | MM.............. ............RRRM
 6538 832d8 E19E      	         ROL.L   #8,%D6         | ................ ....RRRMMM......
 6539 832da 8446      	         OR.W    %D6,%D2
 6540 832dc 6000 F856 	         BRA     CMMD2
68K GAS  tutor13.s 			page 133


 6541               	
 6542 832e0 4283      	MMOVEA1: CLR.L   %D3
 6543 832e2 137C 0002 	         MOVE.B  #2,TNB(%A1)
 6543      000A 
 6544               	
 6545               	MMOVEA:  .align  2              | (INDEX 32)
 6546 832e8 2A69 0012 	         MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO OPERAND
 6547               	
 6548 832ec 3429 000C 	         MOVE.W  TLENGTH(%A1),%D2 | D0 = SIZE
 6549 832f0 6700 F83A 	         BEQ     ER             | .BYTE NOT ALLOWED
 6550               	
 6551 832f4 ED4A      	         LSL.W   #6,%D2         | .SIZE
 6552 832f6 0802 000C 	         BTST    #12,%D2
 6553 832fa 6704      	         BEQ.S   MMA225         | .L = ..10
 6554 832fc 0042 3000 	         ORI.W   #0x3000,%D2    | .W = ..11
 6555               	MMA225:
 6556               	
 6557 83300 6100 EFDC 	         BSR     EAALL          | ALL MODES ALLOWED
 6558 83304 8446      	         OR.W    %D6,%D2
 6559               	
 6560 83306 6100 F80A 	         BSR     COMMA
 6561               	
 6562 8330a 3E3C 0002 	         MOVE.W  #0x0002,%D7    | A@ ONLY
 6563 8330e 6100 EFD2 	         BSR     EA
 6564 83312 60BA      	         BRA.S   MM825
 6565               	
 6566               	MJMP:    .align  2              | (INDEX 18)
 6567 83314 4A29 000B 	         TST.B   TLSPEC(%A1)
 6568 83318 671C      	         BEQ.S   MJMP32         | DEFAULT (ALLOW EITHER .S OR .L)
 6569 8331a 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0
 6570 8331e 6700 F80C 	         BEQ     ER             | .B NOT ALLOWED
 6571 83322 3E3C 06E4 	         MOVE.W  #0x6E4,%D7     | D7 = MODES ALLOWED
 6572 83326 0C40 0040 	         CMPI.W  #0x40,%D0
 6573 8332a 6704      	         BEQ.S   MJMP22         | .S SPECIFIED (.W ACCEPTED)
 6574 8332c 3E3C 8764 	         MOVE.W  #0x8764,%D7    | MODE FOR .L
 6575 83330 6100 EFB0 	MJMP22:  BSR     EA
 6576 83334 6004      	         BRA.S   MJMP42
 6577               	
 6578 83336 6100 EF88 	MJMP32:  BSR     EAC            | CONTROL ADDRESSING ONLY
 6579 8333a 8446      	MJMP42:  OR.W    %D6,%D2
 6580 8333c 6000 F7F6 	         BRA     CMMD2
 6581               	
 6582               	* SIZE = LONG
 6583               	MLEA:    .align  2              | (INDEX 19)
 6584 83340 6100 FE60 	         BSR     SIZELONG
 6585               	
 6586 83344 6100 EF7A 	         BSR     EAC            | CONTROL ADDRESSING ONLY
 6587 83348 8446      	         OR.W    %D6,%D2
 6588               	
 6589 8334a 6100 F7C6 	         BSR     COMMA
 6590               	
 6591 8334e 6100 EF44 	         BSR     GETREGA
 6592 83352 EE58      	         ROR.W   #7,%D0
 6593 83354 8440      	         OR.W    %D0,%D2
 6594 83356 6000 F7DC 	         BRA     CMMD2
 6595               	
 6596               	* SIZE = LONG
68K GAS  tutor13.s 			page 134


 6597               	MPEA:    .align  2              | (INDEX 36)
 6598 8335a 6100 FE46 	         BSR     SIZELONG
 6599               	
 6600 8335e 6100 EF60 	         BSR     EAC            | CONTROL ADDRESSING ONLY
 6601 83362 8446      	         OR.W    %D6,%D2
 6602 83364 6000 F7CE 	         BRA     CMMD2
 6603               	
 6604               	MSWAP:   .align  2              | (INDEX 24)
 6605               	* SIZE WORD
 6606 83368 0C69 0040 	         CMPI.W  #0x0040,TLENGTH(%A1)
 6606      000C 
 6607 8336e 6600 F7BC 	         BNE     ER             | NOT .W
 6608               	
 6609 83372 6100 EF06 	         BSR     GETREGD        | D@ ONLY
 6610 83376 8440      	         OR.W    %D0,%D2
 6611 83378 6000 F7BA 	         BRA     CMMD2
 6612               	
 6613 8337c 0C1D 0023 	GETIMM:  CMPI.B  #'#',(%A5)+
 6614 83380 6600 F7AA 	         BNE     ER
 6615               	
 6616 83384 6100 EE84 	         BSR     EV             | EVALUATE EXPRESSION
 6617 83388 4E75      	         RTS                    | D0 = VALUE
 6618               	
 6619 8338a 6100 EF08 	MLINK:   BSR     GETREGA        | (INDEX 20)
 6620 8338e 8440      	         OR.W    %D0,%D2
 6621               	
 6622 83390 6100 F780 	         BSR     COMMA
 6623               	
 6624 83394 61E6      	         BSR.S   GETIMM
 6625 83396 2A00      	         MOVE.L  %D0,%D5
 6626 83398 6100 F1BA 	         BSR     EA16BITS       | -32K TO +32K
 6627 8339c 3340 0002 	         MOVE.W  %D0,TDATA+2(%A1)
 6628               	
 6629 833a0 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 6630 833a4 6000 F78E 	         BRA     CMMD2
 6631               	
 6632               	MSTOP:   .align  2              | (INDEX 23)
 6633               	* UNSIZED
 6634 833a8 61D2      	         BSR.S   GETIMM
 6635 833aa 0C80 0001 	         CMPI.L  #0x00010000,%D0
 6635      0000 
 6636 833b0 6400 F77A 	         BCC     ER
 6637 833b4 3340 0002 	         MOVE.W  %D0,TDATA+2(%A1)
 6638 833b8 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 6639 833bc 6000 F776 	         BRA     CMMD2
 6640               	
 6641               	MTRAP:   .align  2              | (INDEX 25)
 6642 833c0 61BA      	         BSR.S   GETIMM
 6643 833c2 0C80 0000 	         CMPI.L  #16,%D0
 6643      0010 
 6644 833c8 6400 F762 	         BCC     ER
 6645 833cc 8440      	         OR.W    %D0,%D2
 6646 833ce 6000 F764 	         BRA     CMMD2
 6647               	
 6648               	MUNLK:   .align  2              | (INDEX 26)
 6649               	* UNSIZED
 6650 833d2 6100 EEC0 	         BSR     GETREGA
68K GAS  tutor13.s 			page 135


 6651 833d6 8440      	         OR.W    %D0,%D2
 6652 833d8 6000 F75A 	         BRA     CMMD2
 6653               	
 6654               	MDC:     .align  2              | (INDEX 37) .W ONLY ALLOWED
 6655 833dc 6100 EE2C 	         BSR     EV
 6656 833e0 2A00      	         MOVE.L  %D0,%D5
 6657 833e2 6100 F166 	         BSR     EA16BIT        | ONLY .W ALLOWED     -32K TO +64K
 6658 833e6 3405      	         MOVE.W  %D5,%D2
 6659 833e8 6000 F74A 	         BRA     CMMD2
 6660               	
 6661               	*-------------------------------------------------------------------------
 6662               	* File DCODE68K  68K ONE LINE DISASSEMBLER                        07/28/82
 6663               	
 6664               	*        CALLING SEQUENCE:
 6665               	*   %D0,%D1,%D2 = CODE TO BE DISASSEMBLED
 6666               	*   %A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
 6667               	*   %A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
 6668               	*        JSR       DCODE68K
 6669               	
 6670               	*        RETURN:
 6671               	*   %A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
 6672               	*   %A5 = POINTER TO LINE AS DISASSEMBLED
 6673               	*   %A6 = POINTER TO END OF LINE
 6674               	*
 6675               	* 01234567890123456789012345678901234567890123456789
 6676               	* AAAAAA FDATA.DDDDDDDDDDDDDD FOC.... FOP.....
 6677               	
 6678               	*FDATA   =       10             DATA FIELD
 6679               	*FOC     =       31             OP-CODE FIELD
 6680               	*FOP     =       39             OPERAND FIELD
 6681               	
 6682               	* CAUSES ORGIN MODULO 4
 6683               	*LONG:    .MACRO
 6684               	*         .align  2
 6685               	*         DS.B    (*-X)&2
 6686               	*         .ENDM
 6687               	
 6688               	X:       .align  4              | BASE ADDRESS THIS MODULE
 6689               	                                | LONG
 6690               	
 6691               	*  MOVEM REGISTERS TO EA
 6692               	*
 6693               	*        01001D001S......
 6694               	*        ..........XXXXXX       EFFECTIVE ADDRESS
 6695               	*        .........0......       WORD
 6696               	*        .........1......       LONG
 6697               	*        .....0..........       REGISTER TO MEMORY
 6698               	*        .....1..........       MEMORY TO REGISTER
 6699               	*
 6700               	
 6701               	IMOVEMFR:.align  2
 6702 833ec 6100 071E 	         BSR     MOVEMS         | SIZE
 6703               	
 6704 833f0 7C38      	         MOVEQ   #0x0038,%D6
 6705 833f2 CC54      	         AND.W   (%A4),%D6
 6706 833f4 0C46 0020 	         CMPI.W  #0x0020,%D6
 6707 833f8 6706      	         BEQ.S   IM7788         | PREDECREMENT MODE
68K GAS  tutor13.s 			page 136


 6708               	
 6709 833fa 7C01      	         MOVEQ   #1,%D6         | D6 = INCREMENTER (BIT POSITION)
 6710 833fc 7200      	         MOVEQ   #0,%D1         | D1 = BIT POSITION
 6711 833fe 6004      	         BRA.S   IM7799
 6712               	
 6713 83400 7CFF      	IM7788:  MOVEQ   #-1,%D6        | D6 = DECREMENTER (BIT POSITION)
 6714 83402 720F      	         MOVEQ   #15,%D1        | D1 = BIT POSITION
 6715 83404 6100 071A 	IM7799:  BSR     MOVEMR         | BUILD MASK WORD
 6716               	
 6717 83408 1CFC 002C 	         MOVE.B  #',',(%A6)+    | STORE COMMA
 6718               	
 6719 8340c 5483      	         ADDQ.L  #2,%D3
 6720 8340e 3814      	         MOVE.W  (%A4),%D4
 6721 83410 3E3C 01F4 	         MOVE.W  #0x1F4,%D7     | CONTROL + PREDECREMENT
 6722 83414 6100 0534 	         BSR     EEA
 6723 83418 601C      	         BRA.S   CS16           | COMMON
 6724               	
 6725 8341a 0000      	         .align  4
 6726               	
 6727               	* MOVEM  EA  TO REGISTERS
 6728               	*
 6729 8341c 6100 06EE 	IMOVEMTR:BSR     MOVEMS         | SIZE
 6730 83420 5483      	         ADDQ.L  #2,%D3
 6731 83422 3E3C 07EC 	         MOVE.W  #0x7EC,%D7     | CONTROL + POSTINCREMENT
 6732 83426 6100 0522 	         BSR     EEA
 6733               	
 6734 8342a 1CFC 002C 	         MOVE.B  #',',(%A6)+    | STORE COMMA
 6735               	
 6736 8342e 7C01      	         MOVEQ   #1,%D6         | D6 = BIT POSITION INCREMENTER
 6737 83430 7200      	         MOVEQ   #0,%D1         | D1 = BIT POSITION
 6738 83432 6100 06EC 	         BSR     MOVEMR
 6739               	
 6740 83436 606C      	CS16:    BRA.S   CS15           | COMMON
 6741               	
 6742               	         .align 4
 6743               	
 6744               	ISTOP:   .align  2
 6745 83438 302C 0002 	         MOVE.W  2(%A4),%D0
 6746 8343c 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 6747 83440 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX
 6748 83444 6100 E5AA 	         BSR     PNT4HX         | VALUE
 6749 83448 6000 07EE 	         BRA     COMMON4
 6750               	
 6751               	         .align  4
 6752               	
 6753               	IMMED:   .align  2              | ADD  AND  CMP #  EOR  OR  SUB
 6754 8344c 6100 0472 	         BSR     FORMSIZE
 6755 83450 5483      	         ADDQ.L  #2,%D3         | SIZE = 4
 6756 83452 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 6757               	
 6758 83456 4280      	         CLR.L   %D0
 6759 83458 302C 0002 	         MOVE.W  2(%A4),%D0     | D0 = EXTENSION WORD
 6760 8345c 3214      	         MOVE.W  (%A4),%D1
 6761 8345e EC49      	         LSR.W   #6,%D1
 6762 83460 0241 0003 	         ANDI.W  #3,%D1
 6763 83464 6746      	         BEQ.S   IMMED65        | .BYTE
 6764               	
68K GAS  tutor13.s 			page 137


 6765 83466 0C01 0001 	         CMPI.B  #1,%D1
 6766 8346a 6750      	         BEQ.S   IMMED75        | .WORD
 6767               	
 6768 8346c 5483      	         ADDQ.L  #2,%D3         | .LONG    SIZE = 6
 6769 8346e 202C 0002 	         MOVE.L  2(%A4),%D0     | D0 = LONG EXTENSION WORD
 6770               	
 6771 83472 6100 DAE8 	IMMED45: BSR     HEX2DEC        | DECIMAL
 6772               	
 6773 83476 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 6774               	
 6775 83478 3014      	         MOVE    (%A4),%D0
 6776 8347a 0240 003F 	         ANDI.W  #0x003F,%D0
 6777 8347e 0C40 003C 	         CMPI.W  #0x003C,%D0    | DESTINATION ADDRESS MODE 111100  "SR"
 6778 83482 6622      	         BNE.S   IMMED55        | NOT FOUND
 6779               	
 6780 83484 3014      	         MOVE.W  (%A4),%D0      | "SR"  ILLEGAL FOR
 6781 83486 0240 4000 	         ANDI.W  #0x4000,%D0    | ADDI   SUBI  CMPI
 6782 8348a 6600 07D6 	         BNE     FERROR         | 0600   0400  0C00
 6783               	
 6784 8348e 3214      	         MOVE.W  (%A4),%D1
 6785 83490 0241 00C0 	         ANDI.W  #0x00C0,%D1
 6786 83494 0C41 0080 	         CMPI.W  #0x0080,%D1
 6787 83498 6700 07C8 	         BEQ     FERROR         | .LONG NOT ALLOWED
 6788               	
 6789 8349c 1CFC 0053 	         MOVE.B  #'S',(%A6)+    | #,SR FOR ANDI, EORI, ORI
 6790 834a0 1CFC 0052 	         MOVE.B  #'R',(%A6)+
 6791 834a4 603E      	CS15:    BRA.S   CS14           | COMMON
 6792               	
 6793 834a6 6100 04A2 	IMMED55: BSR     EEA
 6794 834aa 6038      	         BRA.S   CS14           | COMMON
 6795               	
 6796 834ac 2200      	IMMED65: MOVE.L  %D0,%D1        | D1 = XXXXXXXX........
 6797 834ae E049      	         LSR.W   #8,%D1         | D1 = 00000000xXXXXXXX
 6798 834b0 670A      	         BEQ.S   IMMED75
 6799 834b2 2200      	         MOVE.L  %D0,%D1
 6800 834b4 EE41      	         ASR.W   #7,%D1
 6801 834b6 5241      	         ADDQ.W  #1,%D1         | CHECK FOR NEGATIVE
 6802 834b8 6600 07A8 	         BNE     FERROR
 6803               	
 6804 834bc 48C0      	IMMED75: EXT.L   %D0
 6805 834be 60B2      	         BRA.S   IMMED45
 6806               	
 6807               	*  BIT   5432109876543210
 6808               	*        ....RRRMMM......       | DESTINATION REGISTER MODE
 6809               	*        ..........MMMRRR       | SOURCE MODE REGISTER
 6810               	*        0001............       | .BYTE
 6811               	*        0011............       | .WORD
 6812               	*        0010............       | .LONG
 6813               	*
 6814               	* IF BYTE SIZE; DESTINATION ADDRESS DIRECT NOT ALLOWED
 6815               	
 6816               	IMOVE:   .align  4
 6817 834c0 6000 03A2 	         BRA     IMOVEA1
 6818               	
 6819               	         .align  4
 6820               	
 6821               	ILINK:   .align  2
68K GAS  tutor13.s 			page 138


 6822 834c4 615E      	         BSR.S   FORMREGA
 6823               	
 6824 834c6 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SERARATOR
 6825               	
 6826 834c8 1CFC 0023 	         MOVE.B  #'#',(%A6)+
 6827 834cc 302C 0002 	         MOVE.W  2(%A4),%D0
 6828 834d0 48C0      	         EXT.L   %D0
 6829 834d2 6100 DA88 	         BSR     HEX2DEC        | DECIMAL DISPLACEMENT
 6830 834d6 6000 0760 	         BRA     COMMON4
 6831               	
 6832 834da 0000      	         .align  4
 6833               	FORM1:   .align  2              | CLR  NEG  NEGX  NOT TST
 6834 834dc 6100 03E2 	         BSR     FORMSIZE
 6835               	
 6836               	*                               | NBCD TAS
 6837 834e0 6100 0468 	FORM1A:  BSR     EEA            | DATA ALTERABLE ONLY
 6838 834e4 606E      	CS14:    BRA.S   CS13           | COMMON
 6839               	
 6840 834e6 0000      	         .align  4
 6841               	
 6842               	FORM3:   .align  2              | EXT  SWAP
 6843 834e8 614A      	         BSR.S   FORMREGD
 6844 834ea 6068      	         BRA.S   CS13           | COMMON
 6845               	
 6846               	         .align  4
 6847               	
 6848               	FORM4:   .align  2              | TRAP
 6849 834ec 1CFC 0023 	         MOVE.B  #'#',(%A6)+
 6850 834f0 3014      	         MOVE.W  (%A4),%D0
 6851 834f2 0280 0000 	         ANDI.L  #0x0F,%D0
 6851      000F 
 6852 834f8 6100 DA62 	         BSR     HEX2DEC        | DECIMAL
 6853 834fc 6056      	         BRA.S   CS13           | COMMON
 6854               	
 6855 834fe 0000      	         .align  4
 6856               	
 6857               	FORM5:   .align  2              | UNLNK
 6858 83500 6122      	         BSR.S   FORMREGA
 6859 83502 6050      	         BRA.S   CS13           | COMMON
 6860               	
 6861               	*  BIT   5432109876543210
 6862               	*        ....RRR.........       | ADDRESS REGISTER
 6863               	*        ..........XXXXXX       | EFFECTIVE ADDRESS
 6864               	*
 6865               	         .align  4
 6866               	
 6867               	FORM6A:  .align  2              | LEA
 6868 83504 3E3C 07E4 	         MOVE.W  #0x7E4,%D7     | CONTROL ADDRESSING
 6869 83508 6154      	         BSR.S   EEA10
 6870               	
 6871 8350a 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 6872               	
 6873 8350c 3814      	         MOVE.W  (%A4),%D4
 6874 8350e EF5C      	         ROL.W   #7,%D4
 6875 83510 6112      	         BSR.S   FORMREGA
 6876 83512 6040      	         BRA.S   CS13           | COMMON
 6877               	
68K GAS  tutor13.s 			page 139


 6878               	*  BIT   5432109876543210
 6879               	*        ....DDD.........       | DATA REGISTER
 6880               	*        ..........XXXXXX       | EFFECTIVE ADDRESS
 6881               	*
 6882               	         .align  4
 6883               	
 6884               	FORM6D:  .align  2              | CHK  DIVS  DIVU  MULS  MULU
 6885 83514 3E3C 0FFD 	         MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 6886 83518 6144      	         BSR.S   EEA10
 6887               	
 6888 8351a 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 6889               	
 6890 8351c 3814      	         MOVE.W  (%A4),%D4
 6891 8351e EF5C      	         ROL.W   #7,%D4
 6892 83520 6112      	         BSR.S   FORMREGD
 6893 83522 6030      	         BRA.S   CS13           | COMMON
 6894               	
 6895 83524 1CFC 0041 	FORMREGA:MOVE.B  #'A',(%A6)+    | FORMAT A@
 6896 83528 0204 0007 	FORMREG5:ANDI.B  #0x07,%D4
 6897 8352c 0004 0030 	         ORI.B   #'0',%D4
 6898 83530 1CC4      	         MOVE.B  %D4,(%A6)+
 6899 83532 4E75      	         RTS
 6900               	
 6901 83534 1CFC 0044 	FORMREGD:MOVE.B  #'D',(%A6)+    | FORMAT D@
 6902 83538 60EE      	         BRA.S   FORMREG5
 6903               	
 6904               	*  BIT   5432109876543210
 6905               	*        ....DDD......DDD       | DATA REGISTERS
 6906               	*
 6907 8353a 0000      	         .align  4
 6908               	
 6909               	FORM7:   .align  2              | EXG
 6910 8353c EF5C      	         ROL.W   #7,%D4
 6911 8353e 61F4      	         BSR.S   FORMREGD
 6912               	
 6913 83540 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 6914               	
 6915 83542 3814      	         MOVE.W  (%A4),%D4
 6916 83544 61EE      	         BSR.S   FORMREGD
 6917 83546 600C      	         BRA.S   CS13           | COMMON
 6918               	
 6919               	*  BIT   5432109876543210
 6920               	*        ....AAA......AAA       | ADDRESS REGISTERS
 6921               	*
 6922               	         .align  4
 6923               	
 6924               	FORM8:   .align  2              | EXG
 6925 83548 EF5C      	         ROL.W   #7,%D4
 6926 8354a 61D8      	         BSR.S   FORMREGA
 6927               	
 6928 8354c 1CFC 002C 	FORM815: MOVE.B  #',',(%A6)+    | COMMA SEPARATOR
 6929               	
 6930 83550 3814      	         MOVE.W  (%A4),%D4
 6931 83552 61D0      	         BSR.S   FORMREGA
 6932 83554 6000 0080 	CS13:    BRA     CS12           | COMMON
 6933               	
 6934               	*  BIT   5432109876543210
68K GAS  tutor13.s 			page 140


 6935               	*        ....DDD.........       | DATA REGISTER
 6936               	*        .............AAA       | ADDRESS REGISTER
 6937               	*
 6938               	         .align  4
 6939               	
 6940               	FORM9:   .align  2              | EXG
 6941 83558 EF5C      	         ROL.W   #7,%D4
 6942 8355a 61D8      	         BSR.S   FORMREGD       | DATA REGISTER
 6943 8355c 60EE      	         BRA.S   FORM815
 6944               	
 6945 8355e 6000 03EA 	EEA10:   BRA     EEA
 6946               	
 6947               	*  BIT   5432109876543210
 6948               	*        ..........AAAAAA         EFFECTIVE ADDRESS
 6949               	*        .......MMM......         OP-MODE
 6950               	*        ....RRR.........         D-REGISTER
 6951               	*        .......011......         WORD  EA,A@
 6952               	*        .......111......         LONG  EA,A@
 6953               	*        .......000......         EA,D@ BYTE (ADDRESS REGISTER DIRECT NOT ALLOWED)
 6954               	*        .......0........         EA,D@
 6955               	*        .......1........         D@,EA
 6956               	*        ........00......         BYTE
 6957               	*        ........01......         WORD
 6958               	*        ........10......         LONG
 6959               	*
 6960 83562 0000      	         .align  4
 6961               	
 6962               	*                               ADD <EA>,A@   CMP <EA>,A@   SUB <EA>,A@
 6963               	FORM10EX:.align  2              | ADD  CMP  SUB
 6964 83564 3E3C 0FFF 	         MOVE.W  #0xFFF,%D7     | ALL MODES ALLOWED
 6965 83568 2004      	         MOVE.L  %D4,%D0
 6966 8356a 0240 01C0 	         ANDI.W  #0x01C0,%D0
 6967 8356e 673A      	         BEQ.S   FORM103        | .......000......
 6968 83570 0C40 01C0 	         CMPI.W  #0x01C0,%D0
 6969 83574 6710      	         BEQ.S   FORM10E3       | .......111......
 6970 83576 0C40 00C0 	         CMPI.W  #0x00C0,%D0
 6971 8357a 661E      	         BNE.S   FORM10E6
 6972               	
 6973 8357c 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | .......011......       STORE PERIOD
 6974 83580 1AFC 0057 	         MOVE.B  #'W',(%A5)+
 6975 83584 6008      	         BRA.S   FORM10E4
 6976               	
 6977 83586 1AFC 002E 	FORM10E3:MOVE.B  #'.',(%A5)+
 6978 8358a 1AFC 004C 	         MOVE.B  #'L',(%A5)+
 6979               	
 6980 8358e 61CE      	FORM10E4:BSR.S   EEA10
 6981               	
 6982 83590 1CC5      	         MOVE.B  %D5,(%A6)+     | STORE COMMA SEPARATOR
 6983               	
 6984 83592 3814      	         MOVE.W  (%A4),%D4
 6985 83594 EF5C      	         ROL.W   #7,%D4
 6986 83596 618C      	         BSR.S   FORMREGA       | <EA>,A@
 6987 83598 603C      	         BRA.S   CS12           | COMMON
 6988               	
 6989 8359a 0814 0000 	FORM10E6:BTST.B  #0,(%A4)
 6990 8359e 6620      	         BNE.S   FORM105        | .......1........    D@,<EA>
 6991 835a0 600C      	         BRA.S   FORM104        | .......0........    <EA>,D@
68K GAS  tutor13.s 			page 141


 6992               	
 6993               	*  BIT   5432109876543210
 6994               	*        ..........AAAAAA       EFFECTIVE ADDRESS
 6995               	*        .......MMM......       OP-MODE
 6996               	*        ....RRR.........       D-REGISTER
 6997               	*        .......0........       EA,D@
 6998               	*        .......1........       D@,EA
 6999               	*        ........00......       BYTE
 7000               	*        ........01......       WORD
 7001               	*        ........10......       LONG
 7002               	
 7003 835a2 0000      	         .align  4
 7004               	
 7005               	FORM10:  .align  2              | AND  EOR  OR
 7006 835a4 0814 0000 	         BTST.B  #0,(%A4)
 7007 835a8 6616      	         BNE.S   FORM105
 7008               	
 7009 835aa 3E3C 0FFD 	FORM103: MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 7010 835ae 6100 0310 	FORM104: BSR     FORMSIZE
 7011 835b2 61AA      	         BSR.S   EEA10          | <EA>,D@
 7012               	
 7013 835b4 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7014               	
 7015 835b6 1814      	         MOVE.B  (%A4),%D4
 7016 835b8 E20C      	         LSR.B   #1,%D4
 7017 835ba 6100 FF78 	         BSR     FORMREGD
 7018 835be 6016      	         BRA.S   CS12           | COMMON
 7019               	
 7020 835c0 6100 02FE 	FORM105: BSR     FORMSIZE       | D@,<EA>
 7021 835c4 1814      	         MOVE.B  (%A4),%D4
 7022 835c6 E20C      	         LSR.B   #1,%D4
 7023 835c8 6100 FF6A 	         BSR     FORMREGD
 7024               	
 7025 835cc 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7026               	
 7027 835ce 3814      	         MOVE.W  (%A4),%D4
 7028 835d0 3E3C 01FD 	         MOVE.W  #0x1FD,%D7     | ALTERABLE MEMORY ADDRESSING
 7029 835d4 6188      	         BSR.S   EEA10
 7030 835d6 6000 0662 	CS12:    BRA     COMMON
 7031               	
 7032 835da 0000      	         .align  4
 7033               	
 7034               	*                               PEA     (JMP  JSR)
 7035 835dc 3E3C 07E4 	FORM11:  MOVE.W  #0x7E4,%D7     | CONTROL ADDERSSING
 7036 835e0 6100 FF7C 	         BSR     EEA10
 7037 835e4 60F0      	         BRA.S   CS12           | COMMON
 7038               	
 7039 835e6 0000      	         .align  4
 7040               	
 7041               	*                               | JMP  JSR
 7042 835e8 2004      	FORM11SL:MOVE.L  %D4,%D0        | LOOK FOR .S  OR  .L
 7043 835ea 0240 003F 	         ANDI.W  #0x3F,%D0
 7044 835ee 0C40 0038 	         CMPI.W  #0x38,%D0
 7045 835f2 6608      	         BNE.S   FORM112        | NOT .S
 7046 835f4 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | PERIOD
 7047 835f8 1AFC 0053 	         MOVE.B  #'S',(%A5)+    | S
 7048 835fc 0C40 0039 	FORM112: CMPI.W  #0x39,%D0
68K GAS  tutor13.s 			page 142


 7049 83600 6608      	         BNE.S   FORM114
 7050 83602 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | PERIOD
 7051 83606 1AFC 004C 	         MOVE.B  #'L',(%A5)+    | L
 7052 8360a 60D0      	FORM114: BRA.S   FORM11
 7053               	
 7054               	*  BIT   5432109876543210
 7055               	*        ....XXX.....0...       DATA DESTINATION REGISTER
 7056               	*        ....XXX.....1...       ADDRESS REGISTER
 7057               	*        ....XXX.00......       BYTE
 7058               	*        ........01......       WORD
 7059               	*        ........10......       LONG
 7060               	*        ............0...       DATA REGISTER TO DATA REGISTER
 7061               	*        ............1...       MEMORY TO MEMORY
 7062               	*        ............0xXX       DATA SOURCE REGISTER
 7063               	*        ............1XXX       ADDRESS SOURCE REGISTER
 7064               	*
 7065               	         .align  4
 7066               	
 7067               	FORM12:  .align  2              | ABCD  ADDX  SBCD  SUBX
 7068 8360c 6100 02B2 	         BSR     FORMSIZE
 7069               	
 7070 83610 0804 0003 	         BTST    #3,%D4
 7071 83614 6610      	         BNE.S   FORM125
 7072               	
 7073 83616 6100 FF1C 	         BSR     FORMREGD       | D@,D@;   FORMAT SOURCE
 7074               	
 7075 8361a 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7076               	
 7077 8361c 1814      	         MOVE.B  (%A4),%D4
 7078 8361e E20C      	         LSR.B   #1,%D4
 7079 83620 6100 FF12 	         BSR     FORMREGD       | FORMAT DESTINATION
 7080 83624 6046      	         BRA.S   CS11           | COMMON
 7081               	
 7082 83626 1CFC 002D 	FORM125: MOVE.B  #'-',(%A6)+    | -
 7083 8362a 1CFC 0028 	         MOVE.B  #'(',(%A6)+    | (
 7084 8362e 6100 FEF4 	         BSR     FORMREGA       | A@    SOURCE
 7085               	
 7086 83632 203C 282D 	         MOVE.L  #0x282d2c29,%D0 | ),-(
 7086      2C29 
 7087 83638 6152      	         BSR.S   SCHR           | STORE CHARS
 7088               	
 7089 8363a 1814      	         MOVE.B  (%A4),%D4
 7090 8363c E20C      	         LSR.B   #1,%D4
 7091 8363e 6100 FEE4 	         BSR     FORMREGA       | A@   DESTINATION
 7092 83642 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7093 83646 6024      	         BRA.S   CS11           | COMMON
 7094               	
 7095               	*  BIT   5432109876543210
 7096               	*        ....XXX.....1...       ADDRESS REGISTER    DESTINATION
 7097               	*        ....XXX.00......       BYTE
 7098               	*        ........01......       WORD
 7099               	*        ........10......       LONG
 7100               	*        ............1...       MEMORY TO MEMORY
 7101               	*        ............1XXX       ADDRESS SOURCE REGISTER
 7102               	*
 7103               	         .align  4
 7104               	
68K GAS  tutor13.s 			page 143


 7105               	FORM12A: .align  2              | CMPM
 7106 83648 6100 0276 	         BSR     FORMSIZE
 7107               	
 7108 8364c 1CFC 0028 	         MOVE.B  #'(',(%A6)+    | (
 7109 83650 6100 FED2 	         BSR     FORMREGA       | A@
 7110               	
 7111 83654 203C 282C 	         MOVE.L  #0x282c2b29,%D0  | )+,(
 7111      2B29 
 7112 8365a 6130      	         BSR.S   SCHR           | STORE CHARS
 7113               	
 7114 8365c 1814      	         MOVE.B  (%A4),%D4
 7115 8365e E20C      	         LSR.B   #1,%D4
 7116 83660 6100 FEC2 	         BSR     FORMREGA       | A@
 7117 83664 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7118 83668 1CFC 002B 	         MOVE.B  #'+',(%A6)+
 7119 8366c 6000 05CC 	CS11:    BRA     COMMON
 7120               	
 7121               	         .align  4
 7122               	
 7123 83670 6000 021E 	IQUICK:  BRA     IQUICKA        | ADDQ  SUBQ
 7124               	
 7125               	*  BIT   5432109876543210
 7126               	*        0111...0........       FIXED
 7127               	*        ....RRR.........       DATA REGISTER
 7128               	*        ........DDDDDDDD       SIGN EXTENDED DATA
 7129               	*
 7130               	         .align  4
 7131               	
 7132               	IMOVEQ:  .align  2
 7133 83674 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 7134               	
 7135 83678 3014      	         MOVE.W  (%A4),%D0
 7136 8367a 4880      	         EXT.W   %D0
 7137 8367c 48C0      	         EXT.L   %D0
 7138 8367e 6100 D8DC 	         BSR     HEX2DEC        | DECIMAL
 7139               	
 7140 83682 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7141               	
 7142 83684 EF5C      	         ROL.W   #7,%D4
 7143 83686 6100 FEAC 	         BSR     FORMREGD
 7144 8368a 60E0      	         BRA.S   CS11           | COMMON
 7145               	
 7146 8368c 1CC0      	SCHR:    MOVE.B  %D0,(%A6)+     | OUTPUT STRING
 7147 8368e E088      	         LSR.L   #8,%D0
 7148 83690 66FA      	         BNE.S   SCHR           | MORE TO OUTPUT
 7149 83692 4E75      	         RTS
 7150               	
 7151               	* MOVE FROM SR  (STATUS REGISTER)
 7152               	*
 7153               	         .align  4
 7154               	
 7155 83694 203C 002C 	IMVFSR:  MOVE.L  #0x002c5253,%D0 | SR,
 7155      5253 
 7156               	
 7157 8369a 61F0      	         BSR.S   SCHR
 7158 8369c 6100 02AC 	         BSR     EEA            | DATA ALTERABLE
 7159 836a0 60CA      	         BRA.S   CS11           | COMMON
68K GAS  tutor13.s 			page 144


 7160               	
 7161               	* MOVE FROM USP (USER STACK POINTER)
 7162               	*
 7163 836a2 0000      	         .align  4
 7164               	
 7165 836a4 203C 2C50 	IMVFUSP: MOVE.L  #0x2c505355,%D0 | USP,
 7165      5355 
 7166 836aa 61E0      	         BSR.S   SCHR
 7167 836ac 6100 FE76 	         BSR     FORMREGA
 7168 836b0 60BA      	         BRA.S   CS11           | COMMON
 7169               	
 7170               	* MOVE TO SR (STATUS REGISTER)
 7171               	*
 7172 836b2 0000      	         .align  4
 7173               	
 7174 836b4 3E3C 0FFD 	IMVTSR:  MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 7175 836b8 6100 0290 	         BSR     EEA
 7176 836bc 203C 0052 	         MOVE.L  #0x0052532c,%D0 | ,SR
 7176      532C 
 7177 836c2 61C8      	IMVT44:  BSR.S   SCHR
 7178 836c4 60A6      	         BRA.S   CS11           | COMMON
 7179               	
 7180               	* MOVE TO USP (USER STACK POINTER)
 7181               	*
 7182 836c6 0000      	         .align  4
 7183               	
 7184 836c8 6100 FE5A 	IMVTUSP: BSR     FORMREGA
 7185 836cc 203C 5053 	         MOVE.L  #0x5053552c,%D0 | ,USP
 7185      552C 
 7186 836d2 60EE      	         BRA.S   IMVT44
 7187               	
 7188               	*  MOVE TO CCR (CONDITION CODE REGISTER)
 7189               	*
 7190               	         .align  4
 7191               	
 7192 836d4 3E3C 0FFD 	IMVTCCR: MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 7193 836d8 6100 0270 	         BSR     EEA
 7194 836dc 203C 5243 	         MOVE.L  #0x5243432c,%D0 | ,CCR
 7194      432C 
 7195 836e2 60DE      	         BRA.S   IMVT44
 7196               	
 7197               	*  BIT   5432109876543210
 7198               	*        0000...1..001...       FIXED
 7199               	*        ....XXX.........       DATA REGISTER
 7200               	*        ........0.......       MEMORY TO REGISTER
 7201               	*        ........1.......       REGISTER TO MEMORY
 7202               	*        .........0......       WORD
 7203               	*        .........1......       LONG
 7204               	*        .............XXX       ADDRESS REGISTER
 7205               	*
 7206               	         .align  4
 7207               	
 7208               	IMOVEP:  .align  2
 7209 836e4 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | D@,#(A@)
 7210 836e8 303C 4C57 	         MOVE.W  #0x4c57,%D0    | "LW"
 7211 836ec 0804 0006 	         BTST    #6,%D4
 7212 836f0 6702      	         BEQ.S   IMOVEP11       | USE "W"
68K GAS  tutor13.s 			page 145


 7213 836f2 E048      	         LSR.W   #8,%D0         | USE "L"
 7214 836f4 1AC0      	IMOVEP11:MOVE.B  %D0,(%A5)+     | LENGTH
 7215               	
 7216 836f6 1814      	         MOVE.B  (%A4),%D4
 7217 836f8 E20C      	         LSR.B   #1,%D4
 7218               	
 7219 836fa 082C 0007 	         BTST.B  #7,1(%A4)
 7219      0001 
 7220 83700 670E      	         BEQ.S   IMOVEP35
 7221               	
 7222 83702 6100 FE30 	         BSR     FORMREGD       | D@,0xHHHH(A@)
 7223               	
 7224 83706 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7225               	
 7226 83708 3814      	         MOVE.W  (%A4),%D4
 7227 8370a 6112      	         BSR.S   IMOVEP66
 7228 8370c 6000 052A 	CS20:    BRA     COMMON4
 7229               	
 7230 83710 610C      	IMOVEP35:BSR.S   IMOVEP66       | $HHHH(A@),D@
 7231               	
 7232 83712 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7233               	
 7234 83714 1814      	         MOVE.B  (%A4),%D4
 7235 83716 E20C      	         LSR.B   #1,%D4
 7236 83718 6100 FE1A 	         BSR     FORMREGD
 7237 8371c 60EE      	         BRA.S   CS20           | COMMON4
 7238               	
 7239 8371e 1CFC 0024 	IMOVEP66:MOVE.B  #'$',(%A6)+    | FORMAT DISPLACEMENT
 7240 83722 302C 0002 	         MOVE.W  2(%A4),%D0
 7241 83726 6100 E2C8 	         BSR     PNT4HX
 7242               	
 7243 8372a 1CFC 0028 	         MOVE.B  #'(',(%A6)+
 7244               	
 7245 8372e 3814      	         MOVE.W  (%A4),%D4
 7246 83730 6100 FDF2 	         BSR     FORMREGA
 7247 83734 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7248 83738 4E75      	         RTS
 7249               	
 7250 8373a 0000      	         .align  4
 7251               	
 7252 8373c 6000 04FC 	SCOMMON: BRA     COMMON         | NOP RESET RTE RTR RTS TRAPV
 7253               	
 7254               	         .align  4
 7255               	
 7256 83740 6100 00EA 	ISCC:    BSR     ICCCC          | GET REST OF OP-CODE
 7257 83744 6100 0204 	         BSR     EEA            | DATA ALTERABLE
 7258 83748 60F2      	         BRA.S   SCOMMON
 7259               	
 7260 8374a 0000      	         .align  4
 7261               	
 7262               	IDBCC:   .align  2              | DB--
 7263 8374c 3814      	         MOVE.W  (%A4),%D4
 7264 8374e 6100 FDE4 	         BSR     FORMREGD
 7265               	
 7266 83752 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7267 83754 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX FIELD TO FOLLOW
 7268               	
68K GAS  tutor13.s 			page 146


 7269 83758 6100 00D2 	         BSR     ICCCC
 7270 8375c 602E      	         BRA.S   ICC55
 7271               	
 7272               	*  BIT   5432109876543210
 7273               	*        0110............       FIXED
 7274               	*        ....CCCC........       CONDITION
 7275               	*        ........DDDDDDD0       DISPLACEMENT
 7276               	*        ...............1       ERROR (ODD BOUNDRY DISPLACEMENT)
 7277               	*
 7278 8375e 0000      	         .align  4
 7279               	
 7280               	ICC:     .align  2              | B--
 7281 83760 6100 00CA 	         BSR     ICCCC
 7282               	
 7283 83764 1CFC 0024 	IBSR:    MOVE.B  #'$',(%A6)+    | BSR.S BRA
 7284               	
 7285 83768 4A04      	         TST.B   %D4
 7286 8376a 6720      	         BEQ.S   ICC55          | 16 BIT DISPLACEMENT
 7287               	
 7288 8376c 1AFC 002E 	         MOVE.B  #'.',(%A5)+
 7289 83770 1AFC 0053 	         MOVE.B  #'S',(%A5)+
 7290 83774 4884      	         EXT.W   %D4            | 8 BIT DISPLACEMENT
 7291               	
 7292 83776 48C4      	ICC35:   EXT.L   %D4            | SIGN-EXTENDED DISPLACEMENT
 7293 83778 D8A9 FFFC 	         ADD.L   HISPC(%A1),%D4 | + PROGRAM COUNTER
 7294 8377c 5484      	         ADDQ.L  #2,%D4         | + TWO
 7295 8377e 2004      	         MOVE.L  %D4,%D0
 7296               	
 7297 83780 E284      	         ASR.L   #1,%D4
 7298 83782 6500 04DE 	         BCS     FERROR         | ODD BOUNDRY DISPLACEMENT
 7299               	
 7300 83786 6100 E262 	         BSR     PNT6HX
 7301 8378a 60B0      	         BRA.S   SCOMMON
 7302               	
 7303 8378c 5483      	ICC55:   ADDQ.L  #2,%D3         | SIZE
 7304 8378e 382C 0002 	         MOVE.W  2(%A4),%D4
 7305 83792 1AFC 002E 	         MOVE.B  #'.',(%A5)+
 7306 83796 1AFC 004C 	         MOVE.B  #'L',(%A5)+    | .L FOR 16 BIT DISPLACEMENT
 7307 8379a 60DA      	         BRA.S   ICC35
 7308               	
 7309               	         .align  4
 7310               	*                               | BCHG  BCLR  BSET  BTST
 7311               	ISETD:   .align  2              | DYNAMIC BIT
 7312 8379c EF5C      	         ROL.W   #7,%D4
 7313 8379e 6100 FD94 	         BSR     FORMREGD       | DATA REGISTER
 7314               	
 7315 837a2 1CC5      	ISETD12: MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7316               	
 7317 837a4 3814      	         MOVE.W  (%A4),%D4
 7318 837a6 6100 01A2 	         BSR     EEA            | DATA ALTERABLE
 7319 837aa 6090      	CS18:    BRA.S   SCOMMON
 7320               	
 7321               	         .align   4
 7322               	
 7323               	*                            BCHG  BCLR  BSET  BTST
 7324               	*  1ST WORD     .... .... ..XX XXXX    EA   DATA ALTERABLE ONLY
 7325               	*  2ND WORD     0000 0000 000Y YYYY    BIT NUMBER
68K GAS  tutor13.s 			page 147


 7326               	*
 7327               	ISETS:   .align  2              | STATIC BIT
 7328 837ac 5483      	         ADDQ.L  #2,%D3         | SIZE
 7329 837ae 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 7330               	
 7331 837b2 4280      	         CLR.L   %D0
 7332 837b4 302C 0002 	         MOVE.W  2(%A4),%D0     | GET BIT POSITION FROM 2ND WORD
 7333 837b8 2200      	         MOVE.L  %D0,%D1
 7334 837ba EA89      	         LSR.L   #5,%D1
 7335 837bc 6600 04A4 	         BNE     FERROR
 7336 837c0 6100 D79A 	         BSR     HEX2DEC        | DECIMAL
 7337               	
 7338 837c4 60DC      	         BRA.S   ISETD12
 7339               	
 7340               	*   BIT  5432109876543210
 7341               	*        ....XXX.........       IMMEDIATE COUNT/REGISTER
 7342               	*        .......0........       RIGHT SHIFT
 7343               	*        .......1........       LEFT SHIFT
 7344               	*        ........00......       BYTE
 7345               	*        ........01......       WORD
 7346               	*        ........10......       LONG
 7347               	*        ....0...11......       WORD (MEMORY)
 7348               	*        ....0...11AAAAAA       EFFECTIVE ADDRESS
 7349               	*        ..........0.....       SHIFT IMMEDIATE COUNT
 7350               	*        ..........1.....       SHIFT COUNT (MODULO 64) IN DATA REGISTER
 7351               	*
 7352 837c6 0000      	         .align   4
 7353               	
 7354               	ISHIFT:  .align   2             | AS-  LS-  RO-  ROX-
 7355 837c8 303C 4C52 	         MOVE.W  #0x4c52,%D0    | "LR"
 7356 837cc 0804 0008 	         BTST    #8,%D4         | DIRECTION BIT
 7357 837d0 6702      	         BEQ.S   ISHIFT13       | RIGHT
 7358 837d2 E048      	         LSR.W   #8,%D0         | LEFT
 7359 837d4 1AC0      	ISHIFT13:MOVE.B  %D0,(%A5)+     | DIRECTION; "L" OR "R"
 7360               	
 7361 837d6 3014      	         MOVE.W  (%A4),%D0
 7362 837d8 0240 00C0 	         ANDI.W  #0x00C0,%D0
 7363 837dc 0C40 00C0 	         CMPI.W  #0x00C0,%D0
 7364 837e0 6730      	         BEQ.S   ISHIFTM1       | MEMORY SHIFT
 7365               	
 7366 837e2 6100 00DC 	         BSR     FORMSIZE
 7367               	
 7368 837e6 EF5C      	         ROL.W   #7,%D4
 7369 837e8 0804 000C 	         BTST    #12,%D4        | I/R BIT
 7370 837ec 6616      	         BNE.S   ISHIFT33       | COUNT IN REGISTER
 7371               	
 7372 837ee 0204 0007 	         ANDI.B  #0x07,%D4      | IMMEDIATE COUNT
 7373 837f2 6604      	         BNE.S   ISHIFT23
 7374 837f4 0004 0008 	         ORI.B   #0x08,%D4      | CHANGE ZERO TO EIGHT
 7375 837f8 0004 0030 	ISHIFT23:ORI.B   #'0',%D4
 7376 837fc 1CFC 0023 	         MOVE.B  #'#',(%A6)+
 7377 83800 1CC4      	         MOVE.B  %D4,(%A6)+
 7378 83802 6004      	         BRA.S   ISHIFT44
 7379               	
 7380 83804 6100 FD2E 	ISHIFT33:BSR     FORMREGD
 7381               	
 7382 83808 1CC5      	ISHIFT44:MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
68K GAS  tutor13.s 			page 148


 7383               	
 7384 8380a 3814      	         MOVE.W  (%A4),%D4
 7385 8380c 6100 FD26 	         BSR     FORMREGD
 7386 83810 6098      	CS17:    BRA.S   CS18           | COMMON
 7387               	
 7388 83812 1AFC 002E 	ISHIFTM1:MOVE.B  #'.',(%A5)+    | PERIOD
 7389 83816 1AFC 0057 	         MOVE.B  #'W',(%A5)+    | .WORD
 7390               	
 7391 8381a 0804 000B 	         BTST    #11,%D4
 7392 8381e 6600 0442 	         BNE     FERROR         | BIT 11 MUST BE ZERO
 7393               	
 7394 83822 3E3C 01FC 	         MOVE.W  #0x1FC,%D7     | MEMORY ALTERABLE ADDRESSING
 7395 83826 6100 0122 	         BSR     EEA
 7396 8382a 60E4      	         BRA.S   CS17           | COMMON
 7397               	
 7398 8382c 700F      	ICCCC:   MOVEQ   #0x0F,%D0      | APPEND CONDITION CODE
 7399 8382e C014      	         AND.B   (%A4),%D0      | D0 = CCC
 7400 83830 E388      	         LSL.L   #1,%D0         | D0 = CCC*2
 7401               	
 7402 83832 323B 0010 	         MOVE.W  BRTBL(%PC,%D0.W),%D1 | GET BRANCH MNEMONIC
 7403 83836 1AC1      	         MOVE.B  %D1,(%A5)+     | (REVERSED) FROM THE TABLE
 7404 83838 E049      	         LSR.W   #8,%D1         | AND ADD THE NONBLANK PORTION
 7405 8383a 0C01 0020 	         CMPI.B  #BLANK,%D1     | TO THE BUFFER.
 7406 8383e 6702      	         BEQ.S   ICCCC9
 7407 83840 1AC1      	         MOVE.B  %D1,(%A5)+
 7408 83842 4E75      	ICCCC9:  RTS
 7409               	
 7410 83844 2054      	BRTBL:   .ascii  " T"           | "T " BRA ACCEPTED
 7411 83846 2046      	         .ascii  " F"           | "F "
 7412 83848 4948      	         .ascii  "IH"           | "HI"
 7413 8384a 534C      	         .ascii  "SL"           | "LS"
 7414 8384c 4343      	         .ascii  "CC"           | "CC"
 7415 8384e 5343      	         .ASCII  "SC"           | "CS"
 7416 83850 454E      	         .ASCII  "EN"           | "NE"
 7417 83852 5145      	         .ASCII  "QE"           | "EQ"
 7418 83854 4356      	         .ASCII  "CV"           | "VC"
 7419 83856 5356      	         .ASCII  "SV"           | "VS"
 7420 83858 4C50      	         .ASCII  "LP"           | "PL"
 7421 8385a 494D      	         .ASCII  "IM"           | "MI"
 7422 8385c 4547      	         .ASCII  "EG"           | "GE"
 7423 8385e 544C      	         .ASCII  "TL"           | "LT"
 7424 83860 5447      	         .ASCII  "TG"           | "GT"
 7425 83862 454C      	         .ASCII  "EL"           | "LE"
 7426               	
 7427               	*   BIT  5432109876543210
 7428               	*        ....RRRMMM......    DESTINATION REGISTER MODE
 7429               	*        ..........MMMRRR    SOURCE MODE REGISTER
 7430               	*
 7431               	* IF BYTE SIZE; ADDRESS DIRECT NOT ALLOWED AS SOURCE
 7432               	*
 7433               	IMOVEA1: .align  2
 7434 83864 3E3C 0FFF 	         MOVE.W  #0xFFF,%D7     | ALL MODES
 7435 83868 6100 00E0 	         BSR     EEA
 7436               	
 7437 8386c 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7438               	
 7439 8386e 3814      	         MOVE.W  (%A4),%D4      | ....RRRMMM......
68K GAS  tutor13.s 			page 149


 7440 83870 E24C      	         LSR.W   #1,%D4         | .....RRRMMM.....
 7441 83872 EA0C      	         LSR.B   #5,%D4         | .....RRR.....MMM
 7442 83874 E05C      	         ROR.W   #8,%D4         | .....MMM.....RRR
 7443 83876 EB0C      	         LSL.B   #5,%D4         | .....MMMRRR.....
 7444 83878 EA4C      	         LSR.W   #5,%D4         | ..........MMMRRR
 7445               	
 7446               	* IF .BYTE DESTINATION A@ NOT ALLOWED
 7447 8387a 3E3C 01FF 	         MOVE.W  #0x1FF,%D7     | DATA ALTERABLE + A@
 7448 8387e 1014      	         MOVE.B  (%A4),%D0
 7449 83880 0C00 0001 	         CMPI.B  #0x01,%D0
 7450 83884 6604      	         BNE.S   IMOVE19        | NOT BYTE SIZE
 7451               	
 7452 83886 3E3C 01FD 	         MOVE.W  #0x1FD,%D7     | DATA ALTERABLE
 7453               	IMOVE19:
 7454               	
 7455 8388a 6100 00BE 	         BSR     EEA
 7456 8388e 602C      	         BRA.S   CS19           | COMMON
 7457               	
 7458               	*  IF BYTE; ADDRESS REGISTER DIRECT NOT ALLOWED
 7459               	IQUICKA: .align  2              | ADDQ  SUBQ
 7460 83890 612E      	         BSR.S   FORMSIZE
 7461               	
 7462 83892 1CFC 0023 	         MOVE.B  #'#',(%A6)+
 7463 83896 EF5C      	         ROL.W   #7,%D4
 7464 83898 0204 0007 	         ANDI.B  #7,%D4
 7465 8389c 6604      	         BNE.S   IQUICK21
 7466 8389e 0004 0008 	         ORI.B   #8,%D4         | MAKE ZERO INTO EIGHT
 7467 838a2 0004 0030 	IQUICK21:ORI.B   #'0',%D4       | MAKE ASCII
 7468 838a6 1CC4      	         MOVE.B  %D4,(%A6)+
 7469               	
 7470 838a8 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7471               	
 7472 838aa 3814      	         MOVE.W  (%A4),%D4
 7473               	
 7474 838ac 3014      	         MOVE.W  (%A4),%D0
 7475 838ae 0240 00C0 	         ANDI.W  #0x00C0,%D0
 7476 838b2 6704      	         BEQ.S   IQUICK31       | DATA ALTERABLE
 7477 838b4 3E3C 01FF 	         MOVE.W  #0x1FF,%D7     | ALTERABLE ADDRESSING
 7478 838b8 6100 0090 	IQUICK31:BSR     EEA
 7479 838bc 6000 037C 	CS19:    BRA     COMMON
 7480               	
 7481               	*  BIT   5432109876543210
 7482               	*        ........00......       BYTE
 7483               	*        ........01......       WORD
 7484               	*        ........10......       LONG
 7485               	*        ........11......       ERROR
 7486               	*
 7487               	FORMSIZE:.align  2
 7488 838c0 3414      	         MOVE.W  (%A4),%D2
 7489 838c2 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | STORE PERIOD
 7490 838c6 EC4A      	         LSR.W   #6,%D2
 7491 838c8 0242 0003 	         ANDI.W  #0x03,%D2
 7492 838cc 6606      	         BNE.S   FORM91
 7493 838ce 1AFC 0042 	         MOVE.B  #'B',(%A5)+    | STORE "B"
 7494 838d2 6016      	         BRA.S   FORM95
 7495               	
 7496 838d4 103C 0057 	FORM91:  MOVE.B  #'W',%D0
68K GAS  tutor13.s 			page 150


 7497 838d8 0C02 0001 	         CMPI.B  #1,%D2
 7498 838dc 670A      	         BEQ.S   FORM93
 7499 838de 103C 004C 	         MOVE.B  #'L',%D0
 7500 838e2 0C02 0002 	         CMPI.B  #2,%D2
 7501 838e6 665E      	         BNE.S   FE10           | FERROR
 7502 838e8 1AC0      	FORM93:  MOVE.B  %D0,(%A5)+     | STORE "W" OR "L"
 7503 838ea 4E75      	FORM95:  RTS
 7504               	
 7505 838ec 6100 FC46 	EA000:   BSR     FORMREGD
 7506 838f0 0807 0000 	         BTST    #0,%D7
 7507 838f4 6750      	         BEQ.S   FE10           | FERROR
 7508 838f6 4E75      	         RTS
 7509               	
 7510 838f8 6100 FC2A 	EA001:   BSR     FORMREGA
 7511 838fc 0807 0001 	         BTST    #1,%D7
 7512 83900 6744      	         BEQ.S   FE10           | FERROR  THIS MODE NOT ALLOWED
 7513 83902 4E75      	         RTS
 7514               	
 7515 83904 1CFC 0028 	EA010:   MOVE.B  #'(',(%A6)+
 7516 83908 6100 FC1A 	         BSR     FORMREGA
 7517 8390c 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7518 83910 0807 0002 	         BTST    #2,%D7
 7519 83914 6730      	         BEQ.S   FE10           | FERROR  THIS MODE NOT ALLOWED
 7520 83916 4E75      	         RTS
 7521               	
 7522 83918 1CFC 0028 	EA011:   MOVE.B  #'(',(%A6)+
 7523 8391c 6100 FC06 	         BSR     FORMREGA
 7524 83920 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7525 83924 1CFC 002B 	         MOVE.B  #'+',(%A6)+
 7526 83928 0807 0003 	         BTST    #3,%D7
 7527 8392c 6718      	         BEQ.S   FE10           | FERROR  THIS MODE NOT ALLOWED
 7528 8392e 4E75      	EA011RTS:RTS
 7529               	
 7530 83930 1CFC 002D 	EA100:   MOVE.B  #'-',(%A6)+
 7531 83934 1CFC 0028 	         MOVE.B  #'(',(%A6)+
 7532 83938 6100 FBEA 	         BSR     FORMREGA
 7533 8393c 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7534 83940 0807 0004 	         BTST    #4,%D7
 7535 83944 66E8      	         BNE.S   EA011RTS
 7536 83946 6000 031A 	FE10:    BRA     FERROR         | THIS MODE NOT ALLOWED
 7537               	
 7538               	*  ENTER       %A4 = POINTER TO FIRST WORD
 7539               	*              %D3 = OFFSET TO EXTENSION
 7540               	*              %D4 = VALUE TO PROCESS
 7541               	*              %D7 = MODES ALLOWED MASK
 7542               	*
 7543               	EEA:     .align  2
 7544 8394a 2004      	         MOVE.L  %D4,%D0
 7545 8394c E648      	         LSR.W   #3,%D0
 7546 8394e 0240 0007 	         ANDI.W  #0x7,%D0
 7547 83952 6798      	         BEQ.S   EA000
 7548               	
 7549 83954 0C00 0001 	         CMPI.B  #1,%D0
 7550 83958 679E      	         BEQ.S   EA001
 7551               	
 7552 8395a 0C00 0002 	         CMPI.B  #2,%D0
 7553 8395e 67A4      	         BEQ.S   EA010
68K GAS  tutor13.s 			page 151


 7554               	
 7555 83960 0C00 0003 	         CMPI.B  #3,%D0
 7556 83964 67B2      	         BEQ.S   EA011
 7557               	
 7558 83966 0C00 0004 	         CMPI.B  #4,%D0
 7559 8396a 67C4      	         BEQ.S   EA100
 7560               	
 7561 8396c 0C00 0005 	         CMPI.B  #5,%D0
 7562 83970 6760      	         BEQ.S   EA101
 7563               	
 7564 83972 0C00 0007 	         CMPI.B  #7,%D0
 7565 83976 6770      	         BEQ.S   EA111
 7566               	
 7567               	*    EXTENSION WORD
 7568               	*   BIT  5432109876543210
 7569               	*        0...............    DATA REGISTER
 7570               	*        1...............    ADDRESS REGISTER
 7571               	*        .RRR............    REGISTER
 7572               	*        ....0...........    SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REG
 7573               	*        ....1...........    LONG VALUE IN INDEX REGISTER
 7574               	*        .....000........
 7575               	*        ........DDDDDDDD    DISPLACEMENT INTEGER
 7576               	*
 7577               	* EA110            ADDRESS REGISTER INDIRECT WITH INDEX
 7578               	
 7579 83978 0807 0006 	         BTST    #6,%D7
 7580 8397c 67C8      	         BEQ.S   FE10           | FERROR  THIS MODE NOT ALLOWED
 7581               	
 7582 8397e 3234 3000 	         MOVE.W  (%A4,%D3.W),%D1
 7583 83982 0241 0700 	         ANDI.W  #0x0700,%D1
 7584 83986 66BE      	         BNE.S   FE10           | FERROR  BITS 10-8 MUST BE ZERO
 7585               	
 7586 83988 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0  | D0 = DISPLACEMENT
 7587 8398c 4880      	         EXT.W   %D0
 7588 8398e 48C0      	         EXT.L   %D0
 7589 83990 6100 D5CA 	         BSR     HEX2DEC        | DECIMAL
 7590 83994 1CFC 0028 	         MOVE.B  #'(',(%A6)+    | (
 7591               	
 7592 83998 6100 FB8A 	         BSR     FORMREGA       | XX(A@
 7593               	
 7594 8399c 1CFC 002C 	         MOVE.B  #',',(%A6)+    | XX(A@,
 7595               	
 7596 839a0 1834 3000 	         MOVE.B  (%A4,%D3.W),%D4
 7597 839a4 E804      	         ASR.B   #4,%D4
 7598 839a6 6A06      	         BPL.S   EA1105
 7599 839a8 6100 FB7A 	         BSR     FORMREGA
 7600 839ac 6004      	         BRA.S   EA1107
 7601               	
 7602 839ae 6100 FB84 	EA1105:  BSR     FORMREGD
 7603 839b2 1CFC 002E 	EA1107:  MOVE.B  #'.',(%A6)+    | XX(A@,X@.
 7604               	
 7605 839b6 3834 3000 	         MOVE.W  (%A4,%D3.W),%D4 | D4 = R@
 7606 839ba 103C 0057 	         MOVE.B  #'W',%D0       | ..........W
 7607 839be 0804 000B 	         BTST    #11,%D4
 7608 839c2 6704      	         BEQ.S   EA1109
 7609 839c4 103C 004C 	         MOVE.B  #'L',%D0       | ..........L
 7610 839c8 1CC0      	EA1109:  MOVE.B  %D0,(%A6)+
68K GAS  tutor13.s 			page 152


 7611 839ca 1CFC 0029 	         MOVE.B  #')',(%A6)+    | ...........)
 7612 839ce 5483      	         ADDQ.L  #2,%D3
 7613 839d0 4E75      	         RTS
 7614               	
 7615               	* ADDRESS REGISTER INDIRECT WITH DISPLACEMENT
 7616               	*
 7617 839d2 0807 0005 	EA101:   BTST    #5,%D7         | 101000;   DIS(A@)
 7618 839d6 6756      	         BEQ.S   FE11           | FERROR;  THIS MODE NOT ALLOWED
 7619               	
 7620 839d8 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0
 7621 839dc 48C0      	         EXT.L   %D0
 7622 839de 6100 D57C 	         BSR     HEX2DEC        | DECIMAL
 7623 839e2 5483      	         ADDQ.L  #2,%D3         | SIZE
 7624 839e4 6000 FF1E 	         BRA     EA010
 7625               	
 7626               	*  111000        ABSOLUTE SHORT
 7627               	*  111001        ABSOLUTE LONG
 7628               	*  111010        PROGRAM COUNTER WITH DISPLACEMENT
 7629               	*  111011        PROGRAM COUNTER WITH INDEX
 7630               	*  111100        IMMEDIATE OR STATUS REG
 7631               	*
 7632               	EA111:
 7633 839e8 0244 0007 	         ANDI.W  #7,%D4
 7634 839ec 6618      	         BNE.S   EA1112
 7635               	
 7636 839ee 0807 0007 	         BTST    #7,%D7
 7637 839f2 673A      	         BEQ.S   FE11           | FERROR;  THIS MODE NOT ALLOWED
 7638               	
 7639 839f4 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0 | 111000;   ABSOLUTE SHORT
 7640 839f8 48C0      	         EXT.L   %D0
 7641 839fa 1CFC 0024 	         MOVE.B  #'$',(%A6)+
 7642 839fe 6100 DFE2 	         BSR     PNT8HX         | SIGN EXTENDED VALUE
 7643 83a02 5483      	         ADDQ.L  #2,%D3         | SIZE + 2
 7644 83a04 4E75      	         RTS
 7645               	
 7646 83a06 0C04 0001 	EA1112:  CMPI.B  #1,%D4
 7647 83a0a 6616      	         BNE.S   EA1113
 7648               	
 7649 83a0c 0807 0008 	         BTST    #8,%D7
 7650 83a10 671C      	         BEQ.S   FE11           | FERROR;  THIS MODE NOT ALLOWED
 7651               	
 7652 83a12 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX
 7653 83a16 2034 3000 	         MOVE.L  (%A4,%D3.W),%D0  | 111001;     ABSOLUTE LONG
 7654 83a1a 6100 DFC6 	         BSR     PNT8HX
 7655               	*-       MOVE.B  #'.',(%A6)+    | FORCE LONG FORMAT
 7656               	*-       MOVE.B  #'L',(%A6)+    | IE   .L
 7657 83a1e 5883      	         ADDQ.L  #4,%D3
 7658 83a20 4E75      	         RTS
 7659               	
 7660 83a22 0C04 0002 	EA1113:  CMPI.B  #2,%D4
 7661 83a26 662C      	         BNE.S   EA1114
 7662               	
 7663 83a28 0807 0009 	         BTST    #9,%D7
 7664 83a2c 6604      	         BNE.S   EA1113A
 7665 83a2e 6000 0232 	FE11:    BRA     FERROR         | THIS MODE NOT ALLOWED
 7666               	EA1113A:
 7667               	
68K GAS  tutor13.s 			page 153


 7668 83a32 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0  | 111010;  PC + DISPLACEMENT  DESTINATION(PC)
 7669 83a36 48C0      	         EXT.L   %D0
 7670 83a38 D0A9 FFFC 	         ADD.L   HISPC(%A1),%D0
 7671 83a3c 5480      	         ADDQ.L  #2,%D0
 7672 83a3e 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX "$"
 7673 83a42 6100 DF9E 	         BSR     PNT8HX         | DESTINATION
 7674 83a46 203C 2943 	         MOVE.L  #0x29435028,%D0  | (PC)
 7674      5028 
 7675 83a4c 6100 FC3E 	         BSR     SCHR           | STORE WORD
 7676 83a50 5483      	         ADDQ.L  #2,%D3         | SIZE
 7677 83a52 4E75      	         RTS
 7678               	
 7679 83a54 0C04 0003 	EA1114:  CMPI.B  #3,%D4
 7680 83a58 6664      	         BNE.S   EA1115
 7681               	
 7682               	* PROGRAM COUNTER WITH INDEX    DESTINATION(PC,R@.X)
 7683               	*
 7684               	*        5432109876543210       SECOND WORD
 7685               	*        0...............       DATA REGISTER
 7686               	*        1...............       ADDRESS REGISTER
 7687               	*        .XXX............       REGISTER
 7688               	*        ....0...........       SIGN-EXTENDED, LOW ORDER WORD INTEGER
 7689               	*                               ..IN INDEX REGISTER
 7690               	*        ....1...........       LONG VALUE IN INDEX REGISTER
 7691               	*        .....000........
 7692               	*        ........XXXXXXXX       DISPLACEMENT INTEGER
 7693               	*
 7694 83a5a 0807 000A 	         BTST    #10,%D7
 7695 83a5e 67CE      	         BEQ.S   FE11           | FERROR  THIS MODE NOT ASLLOWED
 7696               	
 7697 83a60 3234 3000 	         MOVE.W  (%A4,%D3.W),%D1
 7698 83a64 0241 0700 	         ANDI.W  #0x0700,%D1
 7699 83a68 66C4      	         BNE.S   FE11           | FERROR;  BITS 10-8 MUST BE ZERO
 7700               	
 7701 83a6a 1034 3001 	         MOVE.B  1(%A4,%D3.W),%D0 | 111100;   DESTINATION(PC,R@.X)
 7702 83a6e 4880      	         EXT.W   %D0
 7703 83a70 48C0      	         EXT.L   %D0
 7704 83a72 D0A9 FFFC 	         ADD.L   HISPC(%A1),%D0
 7705 83a76 5480      	         ADDQ.L  #2,%D0
 7706 83a78 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX "$"
 7707 83a7c 6100 DF64 	         BSR     PNT8HX         | DESTINATION
 7708               	
 7709 83a80 203C 2C43 	         MOVE.L  #0x2c435028,%D0
 7709      5028 
 7710 83a86 6100 FC04 	         BSR     SCHR           | DES(PC,
 7711               	
 7712 83a8a 3834 3000 	         MOVE.W  (%A4,%D3.W),%D4
 7713 83a8e E95C      	         ROL.W   #4,%D4
 7714 83a90 0804 0003 	         BTST    #3,%D4
 7715 83a94 6706      	         BEQ.S   EAF25
 7716 83a96 6100 FA8C 	         BSR     FORMREGA
 7717 83a9a 6004      	         BRA.S   EAF27
 7718 83a9c 6100 FA96 	EAF25:   BSR     FORMREGD       | DES(PC,R@
 7719               	EAF27:
 7720               	
 7721 83aa0 1CFC 002E 	         MOVE.B  #'.',(%A6)+    | DES(PC,R@.
 7722               	
68K GAS  tutor13.s 			page 154


 7723 83aa4 3834 3000 	         MOVE.W  (%A4,%D3.W),%D4
 7724 83aa8 303C 4C57 	         MOVE.W  #0x4c57,%D0    | "LW"
 7725 83aac 0804 000B 	         BTST    #11,%D4
 7726 83ab0 6702      	         BEQ.S   EAF35
 7727 83ab2 E048      	         LSR.W   #8,%D0
 7728 83ab4 1CC0      	EAF35:   MOVE.B  %D0,(%A6)+     | DES(PC,R@.X
 7729               	
 7730 83ab6 1CFC 0029 	         MOVE.B  #')',(%A6)+    | DES(PC,R@.X)
 7731 83aba 5483      	         ADDQ.L  #2,%D3
 7732 83abc 4E75      	         RTS
 7733               	
 7734               	*   BIT  5432109876543210
 7735               	*        ..........111100       | FIRST WORD;  #<IMMEDIATE>
 7736               	*
 7737 83abe 0C04 0004 	EA1115:  CMPI.B  #4,%D4
 7738 83ac2 6600 FF6A 	         BNE     FE11           | FERROR
 7739               	
 7740 83ac6 0807 000B 	         BTST    #11,%D7
 7741 83aca 6700 FF62 	         BEQ     FE11           | FERROR;  THIS MODE NOT ALLOWED
 7742               	
 7743 83ace 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 7744               	
 7745 83ad2 122D FFFF 	         MOVE.B  -1(%A5),%D1
 7746 83ad6 0C01 004C 	         CMPI.B  #'L',%D1
 7747 83ada 6724      	         BEQ.S   EA11155        | LONG
 7748               	
 7749 83adc 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0
 7750               	
 7751 83ae0 0C01 0042 	         CMPI.B  #'B',%D1
 7752 83ae4 6610      	         BNE.S   EA11153        | .WORD
 7753               	
 7754               	* BYTE SIZE; DATA ALLOWED
 7755               	*  0000 0000 XXXX XXXX
 7756               	*  1111 1111 1XXX XXXX
 7757 83ae6 2200      	         MOVE.L  %D0,%D1
 7758 83ae8 E049      	         LSR.W   #8,%D1
 7759 83aea 670A      	         BEQ.S   EA11153
 7760 83aec 2200      	         MOVE.L  %D0,%D1
 7761 83aee EE41      	         ASR.W   #7,%D1
 7762 83af0 5241      	         ADDQ.W  #1,%D1
 7763 83af2 6600 FF3A 	         BNE     FE11           | FERROR
 7764               	
 7765 83af6 48C0      	EA11153: EXT.L   %D0
 7766 83af8 6100 D462 	         BSR     HEX2DEC
 7767 83afc 5483      	         ADDQ.L  #2,%D3
 7768 83afe 4E75      	         RTS
 7769               	
 7770 83b00 2034 3000 	EA11155: MOVE.L  (%A4,%D3.W),%D0
 7771 83b04 6100 D456 	         BSR     HEX2DEC
 7772 83b08 5883      	         ADDQ.L  #4,%D3         | SIZE
 7773 83b0a 4E75      	         RTS
 7774               	
 7775 83b0c 1AFC 002E 	MOVEMS:  MOVE.B  #'.',(%A5)+    | PERIOD
 7776 83b10 303C 4C57 	         MOVE.W  #0x4c57,%D0    | "LW"
 7777 83b14 0804 0006 	         BTST    #6,%D4
 7778 83b18 6702      	         BEQ.S   MOVEMS2
 7779 83b1a E048      	         LSR.W   #8,%D0
68K GAS  tutor13.s 			page 155


 7780 83b1c 1AC0      	MOVEMS2: MOVE.B  %D0,(%A5)+     | SIZE
 7781 83b1e 4E75      	         RTS
 7782               	
 7783               	* MOVEM - REGISTER EXPANSION
 7784               	*
 7785               	MOVEMR:  .align  2
 7786 83b20 342C 0002 	         MOVE.W  2(%A4),%D2     | D2 = SECOND WORD
 7787 83b24 7020      	         MOVEQ   #0x20,%D0      | D0 = SPACE
 7788 83b26 7E2F      	         MOVEQ   #0x2F,%D7      | D7 = /
 7789 83b28 538E      	         SUBQ.L  #1,%A6         | ADJUST STORE POINTER
 7790 83b2a 7A30      	         MOVEQ   #0x30,%D5      | D5 = REGISTER #
 7791 83b2c 383C 4144 	         MOVE.W  #0x4144,%D4    | "AD" D4 = REG CLASS
 7792               	
 7793 83b30 0302      	MOVEMR11:BTST    %D1,%D2
 7794 83b32 6730      	         BEQ.S   MOVEMR77       | BIT RESET
 7795               	
 7796 83b34 B016      	         CMP.B   (%A6),%D0      | BIT SET
 7797 83b36 6612      	         BNE.S   MOVEMR44       | NOT SPACE
 7798               	
 7799 83b38 1D44 0001 	MOVEMR33:MOVE.B  %D4,1(%A6)     | REG TYPE
 7800 83b3c 1D45 0002 	         MOVE.B  %D5,2(%A6)     | REG #
 7801 83b40 1D7C 002D 	         MOVE.B  #'-',3(%A6)    | -
 7801      0003 
 7802 83b46 568E      	         ADDQ.L  #3,%A6
 7803 83b48 602E      	         BRA.S   MOVEMR88
 7804               	
 7805 83b4a 0C16 002C 	MOVEMR44:CMPI.B  #',',(%A6)
 7806 83b4e 67E8      	         BEQ.S   MOVEMR33       | COMMA SEPARATOR
 7807               	
 7808 83b50 BE16      	         CMP.B   (%A6),%D7      | / SEPARATOR
 7809 83b52 67E4      	         BEQ.S   MOVEMR33
 7810               	
 7811 83b54 1D44 0001 	         MOVE.B  %D4,1(%A6)     | REG TYPE
 7812 83b58 1D45 0002 	         MOVE.B  %D5,2(%A6)     | REG #
 7813 83b5c 1D7C 002D 	         MOVE.B  #'-',3(%A6)    | - SEPARATOR
 7813      0003 
 7814 83b62 6014      	         BRA.S   MOVEMR88
 7815               	
 7816 83b64 0C16 002C 	MOVEMR77:CMPI.B  #',',(%A6)
 7817 83b68 670E      	         BEQ.S   MOVEMR88       | COMMA
 7818               	
 7819 83b6a B016      	         CMP.B   (%A6),%D0
 7820 83b6c 670A      	         BEQ.S   MOVEMR88       | SPACE
 7821 83b6e B02E 0001 	         CMP.B   1(%A6),%D0
 7822 83b72 6702      	         BEQ.S   MOVEMR79       | SPACE
 7823 83b74 568E      	         ADDQ.L  #3,%A6
 7824 83b76 1C87      	MOVEMR79:MOVE.B  %D7,(%A6)      | / SEPARATOR
 7825               	
 7826 83b78 5285      	MOVEMR88:ADDQ.L  #1,%D5
 7827 83b7a D286      	         ADD.L   %D6,%D1        | D1 = BIT POSITION
 7828 83b7c 0C05 0038 	         CMPI.B  #'8',%D5
 7829 83b80 66AE      	         BNE.S   MOVEMR11
 7830               	
 7831 83b82 B016      	         CMP.B   (%A6),%D0      | SPACE
 7832 83b84 670A      	         BEQ.S   MOVEMR94
 7833               	
 7834 83b86 B02E 0001 	         CMP.B   1(%A6),%D0     | SPACE
68K GAS  tutor13.s 			page 156


 7835 83b8a 6704      	         BEQ.S   MOVEMR94
 7836 83b8c 568E      	         ADDQ.L  #3,%A6
 7837 83b8e 1C87      	         MOVE.B  %D7,(%A6)      | /   SEPARATOR
 7838               	
 7839 83b90 1A3C 0030 	MOVEMR94:MOVE.B  #'0',%D5       | RESET REG TO ZERO
 7840 83b94 E04C      	         LSR.W   #8,%D4         | CHANGE REG TYPE
 7841 83b96 6698      	         BNE.S   MOVEMR11       | MORE
 7842               	
 7843 83b98 1C80      	         MOVE.B  %D0,(%A6)      | SPACE
 7844 83b9a 4E75      	         RTS
 7845               	
 7846               	DCODE68K:.align  2
 7847 83b9c 4E51 FFF0 	         LINK    %A1,#-LOCVARSZ | CREATE A FRAME FOR THE
 7848 83ba0 48E9 1007 	         MOVEM.L %D0-%D2/%A4,DDATA(%A1)  | CODE AND ITS PC.  A4
 7848      FFF0 
 7849 83ba6 49E9 FFF0 	         LEA     DDATA(%A1),%A4 | POINTS TO THE CODE.
 7850               	
 7851 83baa 264D      	         MOVE.L  %A5,%A3        | A3 = START OF OUTPUT BUFFER
 7852 83bac 7050      	         MOVEQ   #BUFSIZE,%D0
 7853 83bae 2C4B      	         MOVE.L  %A3,%A6
 7854 83bb0 1CFC 0020 	DEC311:  MOVE.B  #BLANK,(%A6)+  | SPACE FILL BUFFER
 7855 83bb4 5380      	         SUBQ.L  #1,%D0
 7856 83bb6 66F8      	         BNE.S   DEC311
 7857               	
 7858 83bb8 2C4B      	         MOVE.L  %A3,%A6        | FORMAT ADDRESS
 7859 83bba 2029 FFFC 	         MOVE.L  HISPC(%A1),%D0
 7860 83bbe 6100 DE54 	         BSR     FRELADDR
 7861               	
 7862               	* CHECK FOR KNOWN ILLEGAL CODES
 7863 83bc2 3014      	         MOVE.W  (%A4),%D0
 7864               	
 7865 83bc4 4BFA 00C6 	         LEA     KI(%PC),%A5
 7866 83bc8 2C4D      	         MOVE.L  %A5,%A6
 7867 83bca DDFC 0000 	         ADD.L   #KIEND-KI,%A6
 7867      0002 
 7868 83bd0 B05D      	DEC404:  CMP.W   (%A5)+,%D0
 7869 83bd2 671A      	         BEQ.S   FE12           | FERROR;  ILLEGAL CODE
 7870 83bd4 BBCE      	         CMP.L   %A6,%A5
 7871 83bd6 66F8      	         BNE.S   DEC404
 7872               	
 7873               	* LOOK FOR MATCH OF OP-CODE
 7874               	*
 7875 83bd8 4BFA 00B4 	         LEA     TBL(%PC),%A5   | A5 = POINTER TO DECODE TABLE
 7876 83bdc 4DFA 02BA 	         LEA     TBLE(%PC),%A6  | A6 = POINTER TO END OF TABLE
 7877 83be0 3014      	DEC411:  MOVE.W  (%A4),%D0      |  FIRST WORD
 7878 83be2 C05D      	         AND.W   (%A5)+,%D0     |  MASK
 7879 83be4 B05D      	         CMP.W   (%A5)+,%D0
 7880 83be6 6708      	         BEQ.S   DEC425         | FOUND MATCH
 7881 83be8 548D      	         ADDQ.L  #2,%A5         | UPDATE POINTER
 7882 83bea BBCE      	         CMP.L   %A6,%A5
 7883 83bec 66F2      	         BNE.S   DEC411         | MORE TABLE
 7884 83bee 6072      	FE12:    BRA.S   FERROR         | ILLEGAL INSTRUCTION
 7885               	
 7886 83bf0 4286      	DEC425:  CLR.L   %D6
 7887 83bf2 1C1D      	         MOVE.B  (%A5)+,%D6     | D6 = (GOTO OFFSET)/4
 7888 83bf4 E58E      	         LSL.L   #2,%D6
 7889               	
68K GAS  tutor13.s 			page 157


 7890 83bf6 4287      	         CLR.L   %D7
 7891 83bf8 1E1D      	         MOVE.B  (%A5)+,%D7     | D7 = INDEX TO OP-CODE
 7892               	
 7893               	* MOVE OP-CODE TO BUFFER
 7894               	*
 7895 83bfa 41FA 029C 	         LEA     OPCTBL(%PC),%A0
 7896 83bfe 4A47      	DEC510:  TST     %D7
 7897 83c00 6708      	         BEQ.S   DEC530         | AT INDEX
 7898 83c02 4A18      	DEC515:  TST.B   (%A0)+
 7899 83c04 6AFC      	         BPL.S   DEC515         | MOVE THROUGH FIELD
 7900 83c06 5387      	         SUBQ.L  #1,%D7
 7901 83c08 60F4      	         BRA.S   DEC510
 7902               	
 7903 83c0a 701F      	DEC530:  MOVEQ   #FOC,%D0
 7904 83c0c 4BF3 0000 	         LEA.L   (%A3,%D0.W),%A5 | A5 = STORE POINTER  OP-CODE
 7905 83c10 1018      	DEC535:  MOVE.B  (%A0)+,%D0
 7906 83c12 0880 0007 	         BCLR    #7,%D0
 7907 83c16 6604      	         BNE.S   DEC537         | END OF MOVE
 7908 83c18 1AC0      	         MOVE.B  %D0,(%A5)+
 7909 83c1a 60F4      	         BRA.S   DEC535
 7910 83c1c 1AC0      	DEC537:  MOVE.B  %D0,(%A5)+
 7911               	
 7912               	* CALCULATE GOTO AND GO
 7913               	*
 7914 83c1e 7602      	         MOVEQ   #2,%D3         | D3= SIZE
 7915 83c20 41FA F7CA 	         LEA     X(%PC),%A0
 7916 83c24 D1C6      	         ADD.L   %D6,%A0
 7917               	
 7918 83c26 7027      	         MOVEQ   #FOP,%D0
 7919 83c28 4DF3 0000 	         LEA.L   (%A3,%D0.W),%A6 | A6 = POINTER FOR OPERAND
 7920               	
 7921 83c2c 3814      	         MOVE.W  (%A4),%D4      | D4 = FIRST WORD
 7922               	
 7923 83c2e 1A3C 002C 	         MOVE.B  #',',%D5       | D5 = CONTAINS ASCII COMMA
 7924               	
 7925 83c32 3E3C 01FD 	         MOVE.W  #0x1FD,%D7     | D7 = DATA ALTERABLE MODES ALLOWED
 7926               	
 7927 83c36 4ED0      	         JMP     (%A0)
 7928               	*
 7929               	*  A4 = POINTER TO DATA IN FRAME CREATED BY "LINK A1,..."
 7930               	*  A5 = POINTER STORE OP-CODE
 7931               	*  A6 = POINTER STORE OPERAND
 7932               	*  D3 = SIZE = 2 BYTES
 7933               	*  D4 = FIRST WORD
 7934               	*  D7 = ADDRESS MODES ALLOWED ($1FD) DATA ALTERABLE
 7935               	
 7936 83c38 5483      	COMMON4: ADDQ.L  #2,%D3         | SIZE = 4
 7937               	
 7938 83c3a 2C03      	COMMON:  MOVE.L  %D3,%D6        | D6 = SIZE
 7939 83c3c 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE AS LAST CHAR
 7940               	
 7941 83c40 2A4E      	         MOVE.L  %A6,%A5        | SAVE END OF BUFFER POINTER
 7942 83c42 700A      	         MOVEQ   #FDATA,%D0
 7943 83c44 4DF3 0000 	         LEA.L   (%A3,%D0.W),%A6
 7944               	
 7945 83c48 301C      	COMMON35:MOVE.W  (%A4)+,%D0     | GET NEXT WORD OF DATA.
 7946 83c4a 54A9 FFFC 	         ADDQ.L  #2,HISPC(%A1)  | ADJUST PROG COUNTER.
68K GAS  tutor13.s 			page 158


 7947 83c4e 6100 DDA0 	         BSR     PNT4HX         | FORMAT DATA. (A6)+
 7948 83c52 5503      	         SUBQ.B  #2,%D3
 7949 83c54 66F2      	         BNE.S   COMMON35
 7950               	
 7951 83c56 2C4D      	         MOVE.L  %A5,%A6        | A6 = RESTORE END POINTER
 7952               	
 7953 83c58 2A4B      	         MOVE.L  %A3,%A5        | A5 =  BEGINNING OF BUFFER
 7954               	
 7955 83c5a 2869 FFFC 	         MOVE.L  HISPC(%A1),%A4 | MOVE THE UPDATED PC
 7956 83c5e 4E59      	         UNLK    %A1            | TO A4 AND UNDO FRAME.
 7957               	
 7958 83c60 4E75      	         RTS
 7959               	
 7960               	FERROR:  .align  2
 7961               	* ILLEGAL INSTRUCTION
 7962               	*
 7963 83c62 701F      	         MOVEQ   #FOC,%D0
 7964 83c64 4DF3 0000 	         LEA.L   (%A3,%D0.W),%A6
 7965 83c68 4BFA 0018 	         LEA     MSG111(%PC),%A5
 7966 83c6c 101D      	FERROR35:MOVE.B  (%A5)+,%D0
 7967 83c6e 0C00 0004 	         CMPI.B  #EOT,%D0
 7968 83c72 6704      	         BEQ.S   FERROR39
 7969 83c74 1CC0      	         MOVE.B  %D0,(%A6)+
 7970 83c76 60F4      	         BRA.S   FERROR35
 7971               	FERROR39:.align  2
 7972               	
 7973 83c78 3014      	         MOVE.W  (%A4),%D0
 7974 83c7a 6100 DD74 	         BSR     PNT4HX
 7975               	
 7976 83c7e 7602      	         MOVEQ   #2,%D3         | SIZE
 7977               	
 7978 83c80 60B8      	         BRA.S   COMMON
 7979               	
 7980 83c82 4443 2E57 	MSG111:  .ascii "DC.W    $"
 7980      2020 2020 
 7980      24
 7981 83c8b 04        	         DC.B    EOT
 7982               	
 7983 83c8c 4AFB      	KI:      DC.W    0x4AFB         | KNOWN ILLEGAL CODES
 7984               	KIEND:   .align  2
 7985               	
 7986               	*  \1   MASK
 7987               	*  \2   OP-CODE PATTERN
 7988               	*  \3   GOTO OFFSET
 7989               	*  \4   INDEX TO OP-CODE
 7990               	C68:     .MACRO a1,a2,a3,a4
 7991               	         DC.W    0x\a1
 7992               	         DC.W    0x\a2
 7993               	         DC.B    (\a3-X)>>2
 7994               	         DC.B    \a4
 7995               	         .ENDM
 7996               	
 7997               	TBL:     .align  2
 7998               	         C68     FEC0,E6C0,ISHIFT,56           | RO
 7998 83c8e FEC0      	>  DC.W 0xFEC0
 7998 83c90 E6C0      	>  DC.W 0xE6C0
 7998 83c92 F7        	>  DC.B (ISHIFT-X)>>2
68K GAS  tutor13.s 			page 159


 7998 83c93 38        	>  DC.B 56
 7999               	         C68     FEC0,E4C0,ISHIFT,57           | ROX
 7999 83c94 FEC0      	>  DC.W 0xFEC0
 7999 83c96 E4C0      	>  DC.W 0xE4C0
 7999 83c98 F7        	>  DC.B (ISHIFT-X)>>2
 7999 83c99 39        	>  DC.B 57
 8000               	         C68     FEC0,E2C0,ISHIFT,55           | LS
 8000 83c9a FEC0      	>  DC.W 0xFEC0
 8000 83c9c E2C0      	>  DC.W 0xE2C0
 8000 83c9e F7        	>  DC.B (ISHIFT-X)>>2
 8000 83c9f 37        	>  DC.B 55
 8001               	         C68     FEC0,E0C0,ISHIFT,54           | AS
 8001 83ca0 FEC0      	>  DC.W 0xFEC0
 8001 83ca2 E0C0      	>  DC.W 0xE0C0
 8001 83ca4 F7        	>  DC.B (ISHIFT-X)>>2
 8001 83ca5 36        	>  DC.B 54
 8002               	         C68     F018,E018,ISHIFT,56           | RO
 8002 83ca6 F018      	>  DC.W 0xF018
 8002 83ca8 E018      	>  DC.W 0xE018
 8002 83caa F7        	>  DC.B (ISHIFT-X)>>2
 8002 83cab 38        	>  DC.B 56
 8003               	         C68     F018,E010,ISHIFT,57           | ROX
 8003 83cac F018      	>  DC.W 0xF018
 8003 83cae E010      	>  DC.W 0xE010
 8003 83cb0 F7        	>  DC.B (ISHIFT-X)>>2
 8003 83cb1 39        	>  DC.B 57
 8004               	         C68     F018,E008,ISHIFT,55           | LS
 8004 83cb2 F018      	>  DC.W 0xF018
 8004 83cb4 E008      	>  DC.W 0xE008
 8004 83cb6 F7        	>  DC.B (ISHIFT-X)>>2
 8004 83cb7 37        	>  DC.B 55
 8005               	         C68     F018,E000,ISHIFT,54           | AS
 8005 83cb8 F018      	>  DC.W 0xF018
 8005 83cba E000      	>  DC.W 0xE000
 8005 83cbc F7        	>  DC.B (ISHIFT-X)>>2
 8005 83cbd 36        	>  DC.B 54
 8006               	         C68     F0C0,D0C0,FORM10EX,4          | ADD       <EA>,A@
 8006 83cbe F0C0      	>  DC.W 0xF0C0
 8006 83cc0 D0C0      	>  DC.W 0xD0C0
 8006 83cc2 5E        	>  DC.B (FORM10EX-X)>>2
 8006 83cc3 04        	>  DC.B 4
 8007               	         C68     F130,D100,FORM12,53           | ADDX
 8007 83cc4 F130      	>  DC.W 0xF130
 8007 83cc6 D100      	>  DC.W 0xD100
 8007 83cc8 88        	>  DC.B (FORM12-X)>>2
 8007 83cc9 35        	>  DC.B 53
 8008               	         C68     F000,D000,FORM10EX,4          | ADD
 8008 83cca F000      	>  DC.W 0xF000
 8008 83ccc D000      	>  DC.W 0xD000
 8008 83cce 5E        	>  DC.B (FORM10EX-X)>>2
 8008 83ccf 04        	>  DC.B 4
 8009               	         C68     F1F8,C188,FORM9,50            | EXG
 8009 83cd0 F1F8      	>  DC.W 0xF1F8
 8009 83cd2 C188      	>  DC.W 0xC188
 8009 83cd4 5B        	>  DC.B (FORM9-X)>>2
 8009 83cd5 32        	>  DC.B 50
 8010               	         C68     F1F8,C148,FORM8,50            | EXG
68K GAS  tutor13.s 			page 160


 8010 83cd6 F1F8      	>  DC.W 0xF1F8
 8010 83cd8 C148      	>  DC.W 0xC148
 8010 83cda 57        	>  DC.B (FORM8-X)>>2
 8010 83cdb 32        	>  DC.B 50
 8011               	         C68     F1F8,C140,FORM7,50            | EXG
 8011 83cdc F1F8      	>  DC.W 0xF1F8
 8011 83cde C140      	>  DC.W 0xC140
 8011 83ce0 54        	>  DC.B (FORM7-X)>>2
 8011 83ce1 32        	>  DC.B 50
 8012               	         C68     F1F0,C100,FORM12,49           | ABCD
 8012 83ce2 F1F0      	>  DC.W 0xF1F0
 8012 83ce4 C100      	>  DC.W 0xC100
 8012 83ce6 88        	>  DC.B (FORM12-X)>>2
 8012 83ce7 31        	>  DC.B 49
 8013               	         C68     F1C0,C1C0,FORM6D,48           | MULS
 8013 83ce8 F1C0      	>  DC.W 0xF1C0
 8013 83cea C1C0      	>  DC.W 0xC1C0
 8013 83cec 4A        	>  DC.B (FORM6D-X)>>2
 8013 83ced 30        	>  DC.B 48
 8014               	         C68     F1C0,C0C0,FORM6D,47           | MULU
 8014 83cee F1C0      	>  DC.W 0xF1C0
 8014 83cf0 C0C0      	>  DC.W 0xC0C0
 8014 83cf2 4A        	>  DC.B (FORM6D-X)>>2
 8014 83cf3 2F        	>  DC.B 47
 8015               	         C68     F000,C000,FORM10,2            | AND
 8015 83cf4 F000      	>  DC.W 0xF000
 8015 83cf6 C000      	>  DC.W 0xC000
 8015 83cf8 6E        	>  DC.B (FORM10-X)>>2
 8015 83cf9 02        	>  DC.B 2
 8016               	         C68     F0C0,B0C0,FORM10EX,6          | CMP     <EA>,A@
 8016 83cfa F0C0      	>  DC.W 0xF0C0
 8016 83cfc B0C0      	>  DC.W 0xB0C0
 8016 83cfe 5E        	>  DC.B (FORM10EX-X)>>2
 8016 83cff 06        	>  DC.B 6
 8017               	         C68     F138,B108,FORM12A,46          | CMPM
 8017 83d00 F138      	>  DC.W 0xF138
 8017 83d02 B108      	>  DC.W 0xB108
 8017 83d04 97        	>  DC.B (FORM12A-X)>>2
 8017 83d05 2E        	>  DC.B 46
 8018               	         C68     F100,B100,FORM10,5            | EOR
 8018 83d06 F100      	>  DC.W 0xF100
 8018 83d08 B100      	>  DC.W 0xB100
 8018 83d0a 6E        	>  DC.B (FORM10-X)>>2
 8018 83d0b 05        	>  DC.B 5
 8019               	         C68     F000,B000,FORM10EX,6          | CMP
 8019 83d0c F000      	>  DC.W 0xF000
 8019 83d0e B000      	>  DC.W 0xB000
 8019 83d10 5E        	>  DC.B (FORM10EX-X)>>2
 8019 83d11 06        	>  DC.B 6
 8020               	         C68     F0C0,90C0,FORM10EX,44         | SUB       <EA>,A@
 8020 83d12 F0C0      	>  DC.W 0xF0C0
 8020 83d14 90C0      	>  DC.W 0x90C0
 8020 83d16 5E        	>  DC.B (FORM10EX-X)>>2
 8020 83d17 2C        	>  DC.B 44
 8021               	         C68     F130,9100,FORM12,45           | SUBX
 8021 83d18 F130      	>  DC.W 0xF130
 8021 83d1a 9100      	>  DC.W 0x9100
68K GAS  tutor13.s 			page 161


 8021 83d1c 88        	>  DC.B (FORM12-X)>>2
 8021 83d1d 2D        	>  DC.B 45
 8022               	         C68     F000,9000,FORM10EX,44         | SUB
 8022 83d1e F000      	>  DC.W 0xF000
 8022 83d20 9000      	>  DC.W 0x9000
 8022 83d22 5E        	>  DC.B (FORM10EX-X)>>2
 8022 83d23 2C        	>  DC.B 44
 8023               	         C68     F1F0,8100,FORM12,43           | SBCD
 8023 83d24 F1F0      	>  DC.W 0xF1F0
 8023 83d26 8100      	>  DC.W 0x8100
 8023 83d28 88        	>  DC.B (FORM12-X)>>2
 8023 83d29 2B        	>  DC.B 43
 8024               	         C68     F1C0,81C0,FORM6D,42           | DIVS
 8024 83d2a F1C0      	>  DC.W 0xF1C0
 8024 83d2c 81C0      	>  DC.W 0x81C0
 8024 83d2e 4A        	>  DC.B (FORM6D-X)>>2
 8024 83d2f 2A        	>  DC.B 42
 8025               	         C68     F1C0,80C0,FORM6D,41           | DIVU
 8025 83d30 F1C0      	>  DC.W 0xF1C0
 8025 83d32 80C0      	>  DC.W 0x80C0
 8025 83d34 4A        	>  DC.B (FORM6D-X)>>2
 8025 83d35 29        	>  DC.B 41
 8026               	         C68     F000,8000,FORM10,40           | OR
 8026 83d36 F000      	>  DC.W 0xF000
 8026 83d38 8000      	>  DC.W 0x8000
 8026 83d3a 6E        	>  DC.B (FORM10-X)>>2
 8026 83d3b 28        	>  DC.B 40
 8027               	         C68     F100,7000,IMOVEQ,39           | MOVEQ
 8027 83d3c F100      	>  DC.W 0xF100
 8027 83d3e 7000      	>  DC.W 0x7000
 8027 83d40 A2        	>  DC.B (IMOVEQ-X)>>2
 8027 83d41 27        	>  DC.B 39
 8028               	         C68     FF00,6100,IBSR,51             | BSR
 8028 83d42 FF00      	>  DC.W 0xFF00
 8028 83d44 6100      	>  DC.W 0x6100
 8028 83d46 DE        	>  DC.B (IBSR-X)>>2
 8028 83d47 33        	>  DC.B 51
 8029               	         C68     FF00,6000,IBSR,65             | BRA
 8029 83d48 FF00      	>  DC.W 0xFF00
 8029 83d4a 6000      	>  DC.W 0x6000
 8029 83d4c DE        	>  DC.B (IBSR-X)>>2
 8029 83d4d 41        	>  DC.B 65
 8030               	         C68     F000,6000,ICC,38              | B
 8030 83d4e F000      	>  DC.W 0xF000
 8030 83d50 6000      	>  DC.W 0x6000
 8030 83d52 DD        	>  DC.B (ICC-X)>>2
 8030 83d53 26        	>  DC.B 38
 8031               	         C68     F0F8,50C8,IDBCC,37            | DB
 8031 83d54 F0F8      	>  DC.W 0xF0F8
 8031 83d56 50C8      	>  DC.W 0x50C8
 8031 83d58 D8        	>  DC.B (IDBCC-X)>>2
 8031 83d59 25        	>  DC.B 37
 8032               	         C68     F0C0,50C0,ISCC,36             | S
 8032 83d5a F0C0      	>  DC.W 0xF0C0
 8032 83d5c 50C0      	>  DC.W 0x50C0
 8032 83d5e D5        	>  DC.B (ISCC-X)>>2
 8032 83d5f 24        	>  DC.B 36
68K GAS  tutor13.s 			page 162


 8033               	         C68     F100,5100,IQUICK,35           | SUBQ
 8033 83d60 F100      	>  DC.W 0xF100
 8033 83d62 5100      	>  DC.W 0x5100
 8033 83d64 A1        	>  DC.B (IQUICK-X)>>2
 8033 83d65 23        	>  DC.B 35
 8034               	         C68     F100,5000,IQUICK,34           | ADDQ
 8034 83d66 F100      	>  DC.W 0xF100
 8034 83d68 5000      	>  DC.W 0x5000
 8034 83d6a A1        	>  DC.B (IQUICK-X)>>2
 8034 83d6b 22        	>  DC.B 34
 8035               	         C68     F1C0,41C0,FORM6A,33           | LEA
 8035 83d6c F1C0      	>  DC.W 0xF1C0
 8035 83d6e 41C0      	>  DC.W 0x41C0
 8035 83d70 46        	>  DC.B (FORM6A-X)>>2
 8035 83d71 21        	>  DC.B 33
 8036               	         C68     F1C0,4180,FORM6D,32           | CHK
 8036 83d72 F1C0      	>  DC.W 0xF1C0
 8036 83d74 4180      	>  DC.W 0x4180
 8036 83d76 4A        	>  DC.B (FORM6D-X)>>2
 8036 83d77 20        	>  DC.B 32
 8037               	         C68     FFC0,4EC0,FORM11SL,31         | JMP
 8037 83d78 FFC0      	>  DC.W 0xFFC0
 8037 83d7a 4EC0      	>  DC.W 0x4EC0
 8037 83d7c 7F        	>  DC.B (FORM11SL-X)>>2
 8037 83d7d 1F        	>  DC.B 31
 8038               	         C68     FFC0,4E80,FORM11SL,30         | JSR
 8038 83d7e FFC0      	>  DC.W 0xFFC0
 8038 83d80 4E80      	>  DC.W 0x4E80
 8038 83d82 7F        	>  DC.B (FORM11SL-X)>>2
 8038 83d83 1E        	>  DC.B 30
 8039               	         C68     FFFF,4E77,SCOMMON,29          | RTR
 8039 83d84 FFFF      	>  DC.W 0xFFFF
 8039 83d86 4E77      	>  DC.W 0x4E77
 8039 83d88 D4        	>  DC.B (SCOMMON-X)>>2
 8039 83d89 1D        	>  DC.B 29
 8040               	         C68     FFFF,4E76,SCOMMON,28          | TRAPV
 8040 83d8a FFFF      	>  DC.W 0xFFFF
 8040 83d8c 4E76      	>  DC.W 0x4E76
 8040 83d8e D4        	>  DC.B (SCOMMON-X)>>2
 8040 83d8f 1C        	>  DC.B 28
 8041               	         C68     FFFF,4E75,SCOMMON,27          | RTS
 8041 83d90 FFFF      	>  DC.W 0xFFFF
 8041 83d92 4E75      	>  DC.W 0x4E75
 8041 83d94 D4        	>  DC.B (SCOMMON-X)>>2
 8041 83d95 1B        	>  DC.B 27
 8042               	         C68     FFFF,4E73,SCOMMON,26          | RTE
 8042 83d96 FFFF      	>  DC.W 0xFFFF
 8042 83d98 4E73      	>  DC.W 0x4E73
 8042 83d9a D4        	>  DC.B (SCOMMON-X)>>2
 8042 83d9b 1A        	>  DC.B 26
 8043               	         C68     FFFF,4E72,ISTOP,25            | STOP
 8043 83d9c FFFF      	>  DC.W 0xFFFF
 8043 83d9e 4E72      	>  DC.W 0x4E72
 8043 83da0 13        	>  DC.B (ISTOP-X)>>2
 8043 83da1 19        	>  DC.B 25
 8044               	         C68     FFFF,4E71,SCOMMON,24          | NOP
 8044 83da2 FFFF      	>  DC.W 0xFFFF
68K GAS  tutor13.s 			page 163


 8044 83da4 4E71      	>  DC.W 0x4E71
 8044 83da6 D4        	>  DC.B (SCOMMON-X)>>2
 8044 83da7 18        	>  DC.B 24
 8045               	         C68     FFFF,4E70,SCOMMON,23          | RESET
 8045 83da8 FFFF      	>  DC.W 0xFFFF
 8045 83daa 4E70      	>  DC.W 0x4E70
 8045 83dac D4        	>  DC.B (SCOMMON-X)>>2
 8045 83dad 17        	>  DC.B 23
 8046               	         C68     FFF8,4E68,IMVFUSP,60          | MOVE FROM USP
 8046 83dae FFF8      	>  DC.W 0xFFF8
 8046 83db0 4E68      	>  DC.W 0x4E68
 8046 83db2 AE        	>  DC.B (IMVFUSP-X)>>2
 8046 83db3 3C        	>  DC.B 60
 8047               	         C68     FFF8,4E60,IMVTUSP,60          | MOVE TO USP
 8047 83db4 FFF8      	>  DC.W 0xFFF8
 8047 83db6 4E60      	>  DC.W 0x4E60
 8047 83db8 B7        	>  DC.B (IMVTUSP-X)>>2
 8047 83db9 3C        	>  DC.B 60
 8048               	         C68     FFF8,4E58,FORM5,22            | UNLINK
 8048 83dba FFF8      	>  DC.W 0xFFF8
 8048 83dbc 4E58      	>  DC.W 0x4E58
 8048 83dbe 45        	>  DC.B (FORM5-X)>>2
 8048 83dbf 16        	>  DC.B 22
 8049               	         C68     FFF8,4E50,ILINK,21            | LINK
 8049 83dc0 FFF8      	>  DC.W 0xFFF8
 8049 83dc2 4E50      	>  DC.W 0x4E50
 8049 83dc4 36        	>  DC.B (ILINK-X)>>2
 8049 83dc5 15        	>  DC.B 21
 8050               	         C68     FFF0,4E40,FORM4,20            | TRAP
 8050 83dc6 FFF0      	>  DC.W 0xFFF0
 8050 83dc8 4E40      	>  DC.W 0x4E40
 8050 83dca 40        	>  DC.B (FORM4-X)>>2
 8050 83dcb 14        	>  DC.B 20
 8051               	         C68     FF80,4C80,IMOVEMTR,15         | MOVEM FROM REGISTERS
 8051 83dcc FF80      	>  DC.W 0xFF80
 8051 83dce 4C80      	>  DC.W 0x4C80
 8051 83dd0 0C        	>  DC.B (IMOVEMTR-X)>>2
 8051 83dd1 0F        	>  DC.B 15
 8052               	         C68     FFC0,4AC0,FORM1A,19           | TAS
 8052 83dd2 FFC0      	>  DC.W 0xFFC0
 8052 83dd4 4AC0      	>  DC.W 0x4AC0
 8052 83dd6 3D        	>  DC.B (FORM1A-X)>>2
 8052 83dd7 13        	>  DC.B 19
 8053               	         C68     FF00,4A00,FORM1,18            | TST
 8053 83dd8 FF00      	>  DC.W 0xFF00
 8053 83dda 4A00      	>  DC.W 0x4A00
 8053 83ddc 3C        	>  DC.B (FORM1-X)>>2
 8053 83ddd 12        	>  DC.B 18
 8054               	         C68     FFF8,48C0,FORM3,17            | EXT.L
 8054 83dde FFF8      	>  DC.W 0xFFF8
 8054 83de0 48C0      	>  DC.W 0x48C0
 8054 83de2 3F        	>  DC.B (FORM3-X)>>2
 8054 83de3 11        	>  DC.B 17
 8055               	         C68     FFF8,4880,FORM3,16            | EXT.W
 8055 83de4 FFF8      	>  DC.W 0xFFF8
 8055 83de6 4880      	>  DC.W 0x4880
 8055 83de8 3F        	>  DC.B (FORM3-X)>>2
68K GAS  tutor13.s 			page 164


 8055 83de9 10        	>  DC.B 16
 8056               	         C68     FF80,4880,IMOVEMFR,15         | MOVEA TO REGISTERS
 8056 83dea FF80      	>  DC.W 0xFF80
 8056 83dec 4880      	>  DC.W 0x4880
 8056 83dee 00        	>  DC.B (IMOVEMFR-X)>>2
 8056 83def 0F        	>  DC.B 15
 8057               	         C68     FFF8,4840,FORM3,14            | SWAP
 8057 83df0 FFF8      	>  DC.W 0xFFF8
 8057 83df2 4840      	>  DC.W 0x4840
 8057 83df4 3F        	>  DC.B (FORM3-X)>>2
 8057 83df5 0E        	>  DC.B 14
 8058               	         C68     FFC0,4840,FORM11,13           | PEA
 8058 83df6 FFC0      	>  DC.W 0xFFC0
 8058 83df8 4840      	>  DC.W 0x4840
 8058 83dfa 7C        	>  DC.B (FORM11-X)>>2
 8058 83dfb 0D        	>  DC.B 13
 8059               	         C68     FFC0,4800,FORM1A,12           | NBCD
 8059 83dfc FFC0      	>  DC.W 0xFFC0
 8059 83dfe 4800      	>  DC.W 0x4800
 8059 83e00 3D        	>  DC.B (FORM1A-X)>>2
 8059 83e01 0C        	>  DC.B 12
 8060               	         C68     FFC0,46C0,IMVTSR,59           | MOVE TO SR
 8060 83e02 FFC0      	>  DC.W 0xFFC0
 8060 83e04 46C0      	>  DC.W 0x46C0
 8060 83e06 B2        	>  DC.B (IMVTSR-X)>>2
 8060 83e07 3B        	>  DC.B 59
 8061               	         C68     FF00,4600,FORM1,11            | NOT
 8061 83e08 FF00      	>  DC.W 0xFF00
 8061 83e0a 4600      	>  DC.W 0x4600
 8061 83e0c 3C        	>  DC.B (FORM1-X)>>2
 8061 83e0d 0B        	>  DC.B 11
 8062               	         C68     FFC0,44C0,IMVTCCR,59          | MOVE TO CCR
 8062 83e0e FFC0      	>  DC.W 0xFFC0
 8062 83e10 44C0      	>  DC.W 0x44C0
 8062 83e12 BA        	>  DC.B (IMVTCCR-X)>>2
 8062 83e13 3B        	>  DC.B 59
 8063               	         C68     FF00,4400,FORM1,10            | NEG
 8063 83e14 FF00      	>  DC.W 0xFF00
 8063 83e16 4400      	>  DC.W 0x4400
 8063 83e18 3C        	>  DC.B (FORM1-X)>>2
 8063 83e19 0A        	>  DC.B 10
 8064               	         C68     FF00,4200,FORM1,9             | CLR
 8064 83e1a FF00      	>  DC.W 0xFF00
 8064 83e1c 4200      	>  DC.W 0x4200
 8064 83e1e 3C        	>  DC.B (FORM1-X)>>2
 8064 83e1f 09        	>  DC.B 9
 8065               	         C68     FFC0,40C0,IMVFSR,59           | MOVE.W  FROM  SR
 8065 83e20 FFC0      	>  DC.W 0xFFC0
 8065 83e22 40C0      	>  DC.W 0x40C0
 8065 83e24 AA        	>  DC.B (IMVFSR-X)>>2
 8065 83e25 3B        	>  DC.B 59
 8066               	         C68     FF00,4000,FORM1,8             | NEGX
 8066 83e26 FF00      	>  DC.W 0xFF00
 8066 83e28 4000      	>  DC.W 0x4000
 8066 83e2a 3C        	>  DC.B (FORM1-X)>>2
 8066 83e2b 08        	>  DC.B 8
 8067               	         C68     F000,3000,IMOVE,59            | MOVE.W
68K GAS  tutor13.s 			page 165


 8067 83e2c F000      	>  DC.W 0xF000
 8067 83e2e 3000      	>  DC.W 0x3000
 8067 83e30 35        	>  DC.B (IMOVE-X)>>2
 8067 83e31 3B        	>  DC.B 59
 8068               	         C68     F000,2000,IMOVE,60            | MOVE.L
 8068 83e32 F000      	>  DC.W 0xF000
 8068 83e34 2000      	>  DC.W 0x2000
 8068 83e36 35        	>  DC.B (IMOVE-X)>>2
 8068 83e37 3C        	>  DC.B 60
 8069               	         C68     F000,1000,IMOVE,58            | MOVE.B
 8069 83e38 F000      	>  DC.W 0xF000
 8069 83e3a 1000      	>  DC.W 0x1000
 8069 83e3c 35        	>  DC.B (IMOVE-X)>>2
 8069 83e3d 3A        	>  DC.B 58
 8070               	         C68     FF00,0C00,IMMED,6             | CMP       #
 8070 83e3e FF00      	>  DC.W 0xFF00
 8070 83e40 0C00      	>  DC.W 0x0C00
 8070 83e42 18        	>  DC.B (IMMED-X)>>2
 8070 83e43 06        	>  DC.B 6
 8071               	         C68     FF00,0A00,IMMED,5             | EOR       #
 8071 83e44 FF00      	>  DC.W 0xFF00
 8071 83e46 0A00      	>  DC.W 0x0A00
 8071 83e48 18        	>  DC.B (IMMED-X)>>2
 8071 83e49 05        	>  DC.B 5
 8072               	         C68     FF00,0600,IMMED,4             | ADD       #
 8072 83e4a FF00      	>  DC.W 0xFF00
 8072 83e4c 0600      	>  DC.W 0x0600
 8072 83e4e 18        	>  DC.B (IMMED-X)>>2
 8072 83e4f 04        	>  DC.B 4
 8073               	         C68     FF00,0400,IMMED,3             | SUB       #
 8073 83e50 FF00      	>  DC.W 0xFF00
 8073 83e52 0400      	>  DC.W 0x0400
 8073 83e54 18        	>  DC.B (IMMED-X)>>2
 8073 83e55 03        	>  DC.B 3
 8074               	         C68     FF00,0200,IMMED,2             | AND       #
 8074 83e56 FF00      	>  DC.W 0xFF00
 8074 83e58 0200      	>  DC.W 0x0200
 8074 83e5a 18        	>  DC.B (IMMED-X)>>2
 8074 83e5b 02        	>  DC.B 2
 8075               	         C68     FF00,0000,IMMED,1             | OR        #
 8075 83e5c FF00      	>  DC.W 0xFF00
 8075 83e5e 0000      	>  DC.W 0x0000
 8075 83e60 18        	>  DC.B (IMMED-X)>>2
 8075 83e61 01        	>  DC.B 1
 8076               	         C68     F138,0108,IMOVEP,0            | MOVEP
 8076 83e62 F138      	>  DC.W 0xF138
 8076 83e64 0108      	>  DC.W 0x0108
 8076 83e66 BE        	>  DC.B (IMOVEP-X)>>2
 8076 83e67 00        	>  DC.B 0
 8077               	         C68     FFC0,08C0,ISETS,64            | BSET
 8077 83e68 FFC0      	>  DC.W 0xFFC0
 8077 83e6a 08C0      	>  DC.W 0x08C0
 8077 83e6c F0        	>  DC.B (ISETS-X)>>2
 8077 83e6d 40        	>  DC.B 64
 8078               	         C68     FFC0,0880,ISETS,63            | BCLR
 8078 83e6e FFC0      	>  DC.W 0xFFC0
 8078 83e70 0880      	>  DC.W 0x0880
68K GAS  tutor13.s 			page 166


 8078 83e72 F0        	>  DC.B (ISETS-X)>>2
 8078 83e73 3F        	>  DC.B 63
 8079               	         C68     FFC0,0840,ISETS,62            | BCHG
 8079 83e74 FFC0      	>  DC.W 0xFFC0
 8079 83e76 0840      	>  DC.W 0x0840
 8079 83e78 F0        	>  DC.B (ISETS-X)>>2
 8079 83e79 3E        	>  DC.B 62
 8080               	         C68     FFC0,0800,ISETS,61            | BTST
 8080 83e7a FFC0      	>  DC.W 0xFFC0
 8080 83e7c 0800      	>  DC.W 0x0800
 8080 83e7e F0        	>  DC.B (ISETS-X)>>2
 8080 83e7f 3D        	>  DC.B 61
 8081               	         C68     F1C0,01C0,ISETD,64            | BSET
 8081 83e80 F1C0      	>  DC.W 0xF1C0
 8081 83e82 01C0      	>  DC.W 0x01C0
 8081 83e84 EC        	>  DC.B (ISETD-X)>>2
 8081 83e85 40        	>  DC.B 64
 8082               	         C68     F1C0,0180,ISETD,63            | BCLR
 8082 83e86 F1C0      	>  DC.W 0xF1C0
 8082 83e88 0180      	>  DC.W 0x0180
 8082 83e8a EC        	>  DC.B (ISETD-X)>>2
 8082 83e8b 3F        	>  DC.B 63
 8083               	         C68     F1C0,0140,ISETD,62            | BCHG
 8083 83e8c F1C0      	>  DC.W 0xF1C0
 8083 83e8e 0140      	>  DC.W 0x0140
 8083 83e90 EC        	>  DC.B (ISETD-X)>>2
 8083 83e91 3E        	>  DC.B 62
 8084               	         C68     F1C0,0100,ISETD,61            | BTST
 8084 83e92 F1C0      	>  DC.W 0xF1C0
 8084 83e94 0100      	>  DC.W 0x0100
 8084 83e96 EC        	>  DC.B (ISETD-X)>>2
 8084 83e97 3D        	>  DC.B 61
 8085               	TBLE:    .align  2
 8086               	
 8087               	N68:     .MACRO a1,a2
 8088               	         .ascii  "\a1"
 8089               	         dc.b    \a2
 8090               	         .ENDM
 8091               	
 8092               	OPCTBL:  .align  2
 8093               	         N68     MOVE,0xd0    | 0
 8093 83e98 4D4F 5645 	>  .ascii "MOVE"
 8093 83e9c D0        	>  dc.b 0xd0
 8094               	         N68     O,0xd2       | 1
 8094 83e9d 4F        	>  .ascii "O"
 8094 83e9e D2        	>  dc.b 0xd2
 8095               	         N68     AN,0xc4      | 2
 8095 83e9f 414E      	>  .ascii "AN"
 8095 83ea1 C4        	>  dc.b 0xc4
 8096               	         N68     SU,0xc2      | 3
 8096 83ea2 5355      	>  .ascii "SU"
 8096 83ea4 C2        	>  dc.b 0xc2
 8097               	         N68     AD,0xc4      | 4
 8097 83ea5 4144      	>  .ascii "AD"
 8097 83ea7 C4        	>  dc.b 0xc4
 8098               	         N68     EO,0xd2      | 5
 8098 83ea8 454F      	>  .ascii "EO"
68K GAS  tutor13.s 			page 167


 8098 83eaa D2        	>  dc.b 0xd2
 8099               	         N68     CM,0xd0      | 6
 8099 83eab 434D      	>  .ascii "CM"
 8099 83ead D0        	>  dc.b 0xd0
 8100               	         N68     MOV,0xc5     | 7
 8100 83eae 4D4F 56   	>  .ascii "MOV"
 8100 83eb1 C5        	>  dc.b 0xc5
 8101               	         N68     NEG,0xd8     | 8
 8101 83eb2 4E45 47   	>  .ascii "NEG"
 8101 83eb5 D8        	>  dc.b 0xd8
 8102               	         N68     CL,0xd2      | 9
 8102 83eb6 434C      	>  .ascii "CL"
 8102 83eb8 D2        	>  dc.b 0xd2
 8103               	         N68     NE,0Xc7      | 10
 8103 83eb9 4E45      	>  .ascii "NE"
 8103 83ebb C7        	>  dc.b 0Xc7
 8104               	         N68     NO,0xd4      | 11
 8104 83ebc 4E4F      	>  .ascii "NO"
 8104 83ebe D4        	>  dc.b 0xd4
 8105               	         N68     NBC,0xc4     | 12
 8105 83ebf 4E42 43   	>  .ascii "NBC"
 8105 83ec2 C4        	>  dc.b 0xc4
 8106               	         N68     PEA.,0xcc    | 13
 8106 83ec3 5045 412E 	>  .ascii "PEA."
 8106 83ec7 CC        	>  dc.b 0xcc
 8107               	         N68     SWAP.,0xd7   | 14
 8107 83ec8 5357 4150 	>  .ascii "SWAP."
 8107      2E
 8107 83ecd D7        	>  dc.b 0xd7
 8108               	         N68     MOVE,0xcd    | 15
 8108 83ece 4D4F 5645 	>  .ascii "MOVE"
 8108 83ed2 CD        	>  dc.b 0xcd
 8109               	         N68     EXT.,0xd7    | 16
 8109 83ed3 4558 542E 	>  .ascii "EXT."
 8109 83ed7 D7        	>  dc.b 0xd7
 8110               	         N68     EXT.,0xcc    | 17
 8110 83ed8 4558 542E 	>  .ascii "EXT."
 8110 83edc CC        	>  dc.b 0xcc
 8111               	         N68     TS,0xd4      | 18
 8111 83edd 5453      	>  .ascii "TS"
 8111 83edf D4        	>  dc.b 0xd4
 8112               	         N68     TAS.,0xc2    | 19
 8112 83ee0 5441 532E 	>  .ascii "TAS."
 8112 83ee4 C2        	>  dc.b 0xc2
 8113               	         N68     TRA,0xd0     | 20
 8113 83ee5 5452 41   	>  .ascii "TRA"
 8113 83ee8 D0        	>  dc.b 0xd0
 8114               	         N68     LIN,0xcb     | 21
 8114 83ee9 4C49 4E   	>  .ascii "LIN"
 8114 83eec CB        	>  dc.b 0xcb
 8115               	         N68     UNL,0xcb     | 22
 8115 83eed 554E 4C   	>  .ascii "UNL"
 8115 83ef0 CB        	>  dc.b 0xcb
 8116               	         N68     RESE,0xd4    | 23
 8116 83ef1 5245 5345 	>  .ascii "RESE"
 8116 83ef5 D4        	>  dc.b 0xd4
 8117               	         N68     NO,0xd0      | 24
68K GAS  tutor13.s 			page 168


 8117 83ef6 4E4F      	>  .ascii "NO"
 8117 83ef8 D0        	>  dc.b 0xd0
 8118               	         N68     STO,0xd0     | 25
 8118 83ef9 5354 4F   	>  .ascii "STO"
 8118 83efc D0        	>  dc.b 0xd0
 8119               	         N68     RT,0xc5      | 26
 8119 83efd 5254      	>  .ascii "RT"
 8119 83eff C5        	>  dc.b 0xc5
 8120               	         N68     RT,0xd3      | 27
 8120 83f00 5254      	>  .ascii "RT"
 8120 83f02 D3        	>  dc.b 0xd3
 8121               	         N68     TRAP,0xd6    | 28
 8121 83f03 5452 4150 	>  .ascii "TRAP"
 8121 83f07 D6        	>  dc.b 0xd6
 8122               	         N68     RT,0xd2      | 29
 8122 83f08 5254      	>  .ascii "RT"
 8122 83f0a D2        	>  dc.b 0xd2
 8123               	         N68     JS,0xd2      | 30
 8123 83f0b 4A53      	>  .ascii "JS"
 8123 83f0d D2        	>  dc.b 0xd2
 8124               	         N68     JM,0xd0      | 31
 8124 83f0e 4A4D      	>  .ascii "JM"
 8124 83f10 D0        	>  dc.b 0xd0
 8125               	         N68     CHK.,0xd7    | 32
 8125 83f11 4348 4B2E 	>  .ascii "CHK."
 8125 83f15 D7        	>  dc.b 0xd7
 8126               	         N68     LEA.,0xcc    | 33
 8126 83f16 4C45 412E 	>  .ascii "LEA."
 8126 83f1a CC        	>  dc.b 0xcc
 8127               	         N68     ADD,0xd1     | 34
 8127 83f1b 4144 44   	>  .ascii "ADD"
 8127 83f1e D1        	>  dc.b 0xd1
 8128               	         N68     SUB,0xd1     | 35
 8128 83f1f 5355 42   	>  .ascii "SUB"
 8128 83f22 D1        	>  dc.b 0xd1
 8129 83f23 D3        	         DC.B    0xd3         | 36
 8130               	         N68     D,0xc2       | 37
 8130 83f24 44        	>  .ascii "D"
 8130 83f25 C2        	>  dc.b 0xc2
 8131 83f26 C2        	         DC.B    0xc2         | 38
 8132               	         N68     MOVEQ.,0xcc  | .....39
 8132 83f27 4D4F 5645 	>  .ascii "MOVEQ."
 8132      512E 
 8132 83f2d CC        	>  dc.b 0xcc
 8133               	         N68     O,0xd2       | 40
 8133 83f2e 4F        	>  .ascii "O"
 8133 83f2f D2        	>  dc.b 0xd2
 8134               	         N68     DIVU.,0xd7   | 41
 8134 83f30 4449 5655 	>  .ascii "DIVU."
 8134      2E
 8134 83f35 D7        	>  dc.b 0xd7
 8135               	         N68     DIVS.,0xd7   | 42
 8135 83f36 4449 5653 	>  .ascii "DIVS."
 8135      2E
 8135 83f3b D7        	>  dc.b 0xd7
 8136               	         N68     SBC,0xc4     | 43
 8136 83f3c 5342 43   	>  .ascii "SBC"
68K GAS  tutor13.s 			page 169


 8136 83f3f C4        	>  dc.b 0xc4
 8137               	         N68     SU,0xc2      | 44
 8137 83f40 5355      	>  .ascii "SU"
 8137 83f42 C2        	>  dc.b 0xc2
 8138               	         N68     SUB,0xd8     | 45
 8138 83f43 5355 42   	>  .ascii "SUB"
 8138 83f46 D8        	>  dc.b 0xd8
 8139               	         N68     CMP,0xcd     | 46
 8139 83f47 434D 50   	>  .ascii "CMP"
 8139 83f4a CD        	>  dc.b 0xcd
 8140               	         N68     MULU.,0xd7   | 47
 8140 83f4b 4D55 4C55 	>  .ascii "MULU."
 8140      2E
 8140 83f50 D7        	>  dc.b 0xd7
 8141               	         N68     MULS.,0xd7   | 48
 8141 83f51 4D55 4C53 	>  .ascii "MULS."
 8141      2E
 8141 83f56 D7        	>  dc.b 0xd7
 8142               	         N68     ABC,0xc4     | 49
 8142 83f57 4142 43   	>  .ascii "ABC"
 8142 83f5a C4        	>  dc.b 0xc4
 8143               	         N68     EX,0Xc7      | 50
 8143 83f5b 4558      	>  .ascii "EX"
 8143 83f5d C7        	>  dc.b 0Xc7
 8144               	         N68     BS,0xd2      | .....51
 8144 83f5e 4253      	>  .ascii "BS"
 8144 83f60 D2        	>  dc.b 0xd2
 8145               	         N68     NUL,0xcc     | .....52
 8145 83f61 4E55 4C   	>  .ascii "NUL"
 8145 83f64 CC        	>  dc.b 0xcc
 8146               	         N68     ADD,0xd8     | 53
 8146 83f65 4144 44   	>  .ascii "ADD"
 8146 83f68 D8        	>  dc.b 0xd8
 8147               	         N68     A,0xd3       | 54
 8147 83f69 41        	>  .ascii "A"
 8147 83f6a D3        	>  dc.b 0xd3
 8148               	         N68     L,0xd3       | 55
 8148 83f6b 4C        	>  .ascii "L"
 8148 83f6c D3        	>  dc.b 0xd3
 8149               	         N68     R,0xcf       | 56
 8149 83f6d 52        	>  .ascii "R"
 8149 83f6e CF        	>  dc.b 0xcf
 8150               	         N68     RO,0xd8      | 57
 8150 83f6f 524F      	>  .ascii "RO"
 8150 83f71 D8        	>  dc.b 0xd8
 8151               	         N68     MOVE.,0xc2   | 58
 8151 83f72 4D4F 5645 	>  .ascii "MOVE."
 8151      2E
 8151 83f77 C2        	>  dc.b 0xc2
 8152               	         N68     MOVE.,0xd7   | 59
 8152 83f78 4D4F 5645 	>  .ascii "MOVE."
 8152      2E
 8152 83f7d D7        	>  dc.b 0xd7
 8153               	         N68     MOVE.,0xcc   | 60
 8153 83f7e 4D4F 5645 	>  .ascii "MOVE."
 8153      2E
 8153 83f83 CC        	>  dc.b 0xcc
68K GAS  tutor13.s 			page 170


 8154               	         N68     BTS,0xd4     | 61
 8154 83f84 4254 53   	>  .ascii "BTS"
 8154 83f87 D4        	>  dc.b 0xd4
 8155               	         N68     BCH,0Xc7     | 62
 8155 83f88 4243 48   	>  .ascii "BCH"
 8155 83f8b C7        	>  dc.b 0Xc7
 8156               	         N68     BCL,0xd2     | 63
 8156 83f8c 4243 4C   	>  .ascii "BCL"
 8156 83f8f D2        	>  dc.b 0xd2
 8157               	         N68     BSE,0xd4     | 64
 8157 83f90 4253 45   	>  .ascii "BSE"
 8157 83f93 D4        	>  dc.b 0xd4
 8158               	         N68     BR,0xc1      | 65
 8158 83f94 4252      	>  .ascii "BR"
 8158 83f96 C1        	>  dc.b 0xc1
 8159               	
 8160 83f97 00        	         DC.B    0         | PAD BYTE
 8161               	
 8162               	*-------------------------------------------------------------------------
 8163               	* File TRAP14    Trap 14 handler of "TUTOR"                       06/25/82
 8164               	
 8165               	*        CALLING SEQUENCE
 8166               	*                  %D7 = XXXXXXFF   WHERE "FF" IF FUNCTION NUMBER
 8167               	*                  TRAP      #14
 8168               	
 8169               	TRAP14:
 8170 83f98 48E7 4160 	         MOVEM.L %D1/%D7/%A1-%A2,-(%A7)
 8171               	
 8172 83f9c 2278 0656 	         MOVE.L  CTLINK,%A1
 8173 83fa0 1211      	T100:    MOVE.B  (%A1),%D1      | D1 = FUNCTION FROM TABLE
 8174 83fa2 0C01 00FF 	         CMPI.B  #0xFF,%D1
 8175 83fa6 6740      	         BEQ.S   T500           | END OF TABLE
 8176               	
 8177 83fa8 0C01 00FE 	         CMPI.B  #0xFE,%D1
 8178 83fac 6774      	         BEQ.S   T600           | LINK IN LIST
 8179               	
 8180 83fae B207      	         CMP.B   %D7,%D1
 8181 83fb0 6704      	         BEQ.S   T400           | FOUND MATCH
 8182               	
 8183 83fb2 5889      	         ADDQ.L  #4,%A1
 8184 83fb4 60EA      	         BRA.S   T100
 8185               	
 8186 83fb6 2211      	T400:    MOVE.L  (%A1),%D1      | FFAAAAAA
 8187 83fb8 E181      	         ASL.L   #8,%D1         | AAAAAA..
 8188 83fba E089      	         LSR.L   #8,%D1         | 00AAAAAA  GO TO ADDRESS
 8189               	
 8190 83fbc 082F 0005 	         BTST.B  #5,16(%A7)
 8190      0010 
 8191 83fc2 6710      	         BEQ.S   T450           | CALL FROM USER MODE
 8192               	
 8193               	*  CALL FROM SUPERVISOR MODE
 8194               	* STACK (WORDS)
 8195               	*   +0   %D1 HIGH
 8196               	*   +2   %D1 LOW
 8197               	*   +4   %D7 HIGH
 8198               	*   +6   %D7 LOW
 8199               	*   +8   %A1 HIGH
68K GAS  tutor13.s 			page 171


 8200               	*   +10  %A1 LOW
 8201               	*   +12  %A2 HIGH              STATUS REG
 8202               	*   +14  %A2 LOW               GOTO HIGH
 8203               	*   +16  STATUS REG           GOTO LOW
 8204               	*   +18  RETURN HIGH        RETURN HIGH
 8205               	*   +20  RETURN LOW         RETURN LOW
 8206               	*
 8207 83fc4 2F6F 0010 	         MOVE.L  16(%A7),12(%A7) | SR
 8207      000C 
 8208 83fca 2F41 000E 	         MOVE.L  %D1,14(%A7)    | GOTO ADDRESS
 8209 83fce 4CDF 0282 	         MOVEM.L (%A7)+,%D1/%D7/%A1 | RESTORE REGISTERS
 8210 83fd2 4E73      	         RTE                    | GOTO (AND TRIM STACK)
 8211               	
 8212               	* STACK (WORDS)
 8213               	*   +0   %D1 HIGH
 8214               	*   +2   %D1 LOW
 8215               	*   +4   %D7 HIGH
 8216               	*   +6   %D7 LOW
 8217               	*   +8   %A1 HIGH
 8218               	*   +10  %A1 LOW
 8219               	*   +12  %A2 HIGH                                 (USER STACK)
 8220               	*   +14  %A2 LOW
 8221               	*   +16  STATUS REG         STATUS REG
 8222               	*   +18  RETURN HIGH        GOTO HIGH            RETURN HIGH
 8223               	*   +20  RETURN LOW         GOTO LOW             RETURN LOW
 8224               	*
 8225               	* CALL FROM USER MODE
 8226 83fd4 2E2F 0012 	T450:    MOVE.L  18(%A7),%D7    | RETURN PC
 8227 83fd8 2F41 0012 	         MOVE.L  %D1,18(%A7)    | GOTO ADDRESS
 8228 83fdc 4E69      	         MOVE.L  %USP,%A1       | POINTER TO USER STACK
 8229 83fde 2307      	         MOVE.L  %D7,-(%A1)     | RETURN PC TO USER STACK
 8230 83fe0 4E61      	         MOVE.L  %A1,%USP       | UPDATED USER STACK POINTER
 8231 83fe2 4CDF 0682 	         MOVEM.L (%A7)+,%D1/%D7/%A1/%A2
 8232 83fe6 4E73      	         RTE
 8233               	
 8234 83fe8 4CDF 0682 	T500:    MOVEM.L (%A7)+,%D1/%D7/%A1/%A2
 8235               	         SAVEREGS
 8235               	>  TEMP =0x04d6
 8235 83fec 21CF 0444 	>  MOVE.L %A7,REGA7
 8235 83ff0 4FFA 000A 	>  LEA SV327(%PC),%A7
 8235 83ff4 21CF 04D6 	>  MOVE.L %A7,TEMP
 8235 83ff8 6000 CC92 	>  JRA SAVE
 8235               	> SV327:
 8236 83ffc 4BFA 0012 	         LEA     MSGT14(%PC),%A5
 8237 84000 6100 C0F0 	         BSR     FIXDATA
 8238 84004 6100 DC2A 	         BSR     OUT1CR
 8239 84008 6100 C8FA 	         BSR     TDISPLY
 8240 8400c 6000 C224 	         BRA     MACSBUG
 8241               	
 8242 84010 554E 4445 	MSGT14:  .ascii  "UNDEFINED TRAP 14"
 8242      4649 4E45 
 8242      4420 5452 
 8242      4150 2031 
 8242      34
 8243 84021 04        	         DC.B    EOT
 8244               	
 8245 84022 2251      	T600:    MOVE.L  (%A1),%A1
68K GAS  tutor13.s 			page 172


 8246 84024 6000 FF7A 	         BRA     T100
 8247               	
 8248               	T700:    .align  2              | 253 APPEND NEW TABLE
 8249 84028 2208      	         MOVE.L  %A0,%D1        |  ..AAAAAA
 8250 8402a 2078 0656 	         MOVE.L  CTLINK,%A0     | A0 = LINK TO BE RETURNED
 8251 8402e E199      	         ROL.L   #8,%D1         | AAAAAA..
 8252 84030 123C 00FE 	         MOVE.B  #0xFE,%D1      | AAAAAAFE
 8253 84034 E099      	         ROR.L   #8,%D1         | FEAAAAAA
 8254 84036 21C1 0656 	         MOVE.L  %D1,CTLINK
 8255 8403a 4E75      	         RTS
 8256               	
 8257               	*  CREATE ENTRY TO FUNCTION/ADDRESS TABLE
 8258               	*    FFAAAAAA
 8259               	*    FF......      FUNCTION NUMBER
 8260               	*    ..AAAAAA      ADDRESS OF FUNCTION
 8261               	
 8262               	FADDR:   .MACRO   a1,a2
 8263               	         DC.B     \a1
 8264               	         DC.B     0
 8265               	         DC.W     \a2
 8266               	         .ENDM
 8267               	
 8268               	CT:
 8269               	*        FADDR   253,T700       | APPEND NEW TABLE
 8270 8403c FD00 BF00 	         DC.L    0xFD00BF00
 8271               	*        FADDR   252,FIXDADD    | APPEND DATA (A5) TO BUFFER (A6)+
 8272 84040 FC00 80F6 	         DC.L    0xFC0080F6
 8273               	*        FADDR   251,FIXBUF     | SET A5 & A6 AS POINTERS TO BUFFER
 8274 84044 FB00 9C96 	         DC.L    0xFB009C96
 8275               	*        FADDR   250,FIXDATA    | MOVE DATA (A5) TO BUFFER; A5=BUFFER A6
 8276 84048 FA00 80F2 	         DC.L    0xFA0080F2
 8277               	*        FADDR   249,FIXDCRLF
 8278 8404c F900 8106 	         DC.L    0xF9008106
 8279               	*        FADDR   248,F100       | OUTPUT CHAR PORT1  D0=CHAR
 8280 84050 F800 BF88 	         DC.L    0xF800BF88
 8281               	*        FADDR   247,F110       | INPUT CHAR PORT1  D0=CHAR
 8282 84054 F700 BF90 	         DC.L    0xF700BF90
 8283               	*        FADDR   244,CHRPRINT   | OUTPUT CHAR PORT3 D0=CHAR
 8284 84058 F400 9D7A 	         DC.L    0xF4009D7A
 8285               	*        FADDR   243,OUTPUT     | OUTPUT STRING PORT1 (A5) (A6)
 8286 8405c F300 9C0A 	         DC.L    0xF3009C0A
 8287               	*        FADDR   242,OUTPUT21   | OUTPUT STRING PORT2 (A5) (A6)
 8288 84060 F200 9C2A 	         DC.L    0xF2009C2A
 8289               	*        FADDR   241,PORTIN1    | INPUT STRING PORT1  (A5) (A6)
 8290 84064 F100 9C9E 	         DC.L    0xF1009C9E
 8291               	*        FADDR   240,PORTIN20   | INPUT STRING PORT2  (A5) (A6)
 8292 84068 F000 9FD4 	         DC.L    0xF0009FD4
 8293               	*        FADDR   239,TAPEOUT    | OUTPUT STRING TO PORT4 (A5) (A6)
 8294 8406c EF00 9E9C 	         DC.L    0xEF009E9C
 8295               	*        FADDR   238,TAPEIN     | INPUT STRING FROM PORT4 (A5) (A6)
 8296 84070 EE00 A09C 	         DC.L    0xEE00A09C
 8297               	*        FADDR   237,PRCRLF     | OUTPUT STRING TO PORT3 (A5) (A6)
 8298 84074 ED00 9D66 	         DC.L    0xED009D66
 8299               	*        FADDR   236,HEX2DEC    | CONVERT HEX D0 TO DECIMAL (A6)+
 8300 84078 EC00 8F5C 	         DC.L    0xEC008F5C
 8301               	*        FADDR   235,GETHEX     | GET HEX CHAR INTO D0 FROM (A5)+
 8302 8407c EB00 9BA6 	         DC.L    0xEB009BA6
68K GAS  tutor13.s 			page 173


 8303               	*        FADDR   234,PUTHEX     | FORMAT HEX CHAR FROM D0 TO (A6)+
 8304 84080 EA00 99C0 	         DC.L    0xEA0099C0
 8305               	*        FADDR   233,PNT2HX     | FORMAT 2 HEX CHAR FROM D0 TO (A6)+
 8306 84084 E900 99B8 	         DC.L    0xE90099B8
 8307               	*        FADDR   232,PNT4HX     | FORMAT 4 HEX CHAR FROM D0 TO (A6)+
 8308 84088 E800 99B0 	         DC.L    0xE80099B0
 8309               	*        FADDR   231,PNT6HX     | FORMAT 6 HEX CHAR FROM D0 TO (A6)+
 8310 8408c E700 99AA 	         DC.L    0xE70099AA
 8311               	*        FADDR   230,PNT8HX     | FORMAT 8 HEX CHAR FROM D0 TO (A6)+
 8312 84090 E600 99A2 	         DC.L    0xE60099A2
 8313               	*        FADDR   229,START      | RESTART TUTOR INITIALIZE EVERYTHING
 8314 84094 E500 8146 	         DC.L    0xE5008146
 8315               	*        FADDR   228,MACSBUG    | GOTO TUTOR;   PRINT PROMPT
 8316 84098 E400 8232 	         DC.L    0xE4008232
 8317               	*        FADDR   227,F120       | OUTPUT STRING,CR,LF PORT1 (A5) (A6)
 8318 8409c E300 BF98 	         DC.L    0xE300BF98
 8319               	*        FADDR   226,GETNUMA    | GET HEX NUMBER (A5)+ INTO D0
 8320 840a0 E200 9AF6 	         DC.L    0xE2009AF6
 8321               	*        FADDR   225,GETNUMD    | GET DECIMAL NUMBER (A5)+ INTO D0
 8322 840a4 E100 9AEE 	         DC.L    0xE1009AEE
 8323               	*        FADDR   224,PORTIN1N   | INPUT STRING PORT1 (NO AUTO LF)
 8324 840a8 E000 9CB0 	         DC.L    0xE0009CB0
 8325               	*        FADDR   255,0xFFFFFF   | END KEY
 8326 840ac FFFF FFFF 	         DC.L    0xFFFFFFFF
 8327               	
 8328 840b0 6100 DC00 	F100:    BSR     GETSER1        | A0 = PORT1 ADDRESS
 8329 840b4 6000 DDA4 	         BRA     OUTCH
 8330               	
 8331 840b8 6100 DBF8 	F110:    BSR     GETSER1        | A0 = PORT1 ADDRESS
 8332 840bc 6000 DF28 	         BRA     INCHNE
 8333               	
 8334 840c0 6100 DB88 	F120:    BSR     OUTPUT         | OUTPUT STRING,CR,LF PORT1 (A5) (A6)
 8335 840c4 700D      	         MOVEQ   #CR,%D0
 8336 840c6 61E8      	         BSR.S   F100           | OUTPUT CHAR
 8337 840c8 700A      	         MOVEQ   #LF,%D0
 8338 840ca 61E4      	         BSR.S   F100           | OUTPUT CHAR
 8339 840cc 4E75      	         RTS
 8340               	
 8341 840ce 0000 0000 	         .fill   0x54,1,0       | PAD BYTES
 8341      0000 0000 
 8341      0000 0000 
 8341      0000 0000 
 8341      0000 0000 
 8342               	
 8343               	*-------------------------------------------------------------------------
 8344               	* File YROM      Version/checksum/identification                  07/29/82
 8345               	
 8346               	VERSION =        4         | BINARY FOR VERSION 1.3
 8347               	*                3         .                  1.2; CKSUM= $44,$DB
 8348               	*                2         .                  1.1; CKSUM= $66,$C1
 8349               	*                1         .                  1.0
 8350               	
 8351 84122 0404      	         DC.B    VERSION,VERSION
 8352 84124 2EBA      	         DC.B    0x2E,0xBA       | CHECKSUM
 8353 84126 1110      	         DC.B    0x11,0x10       | SOCKET I. D.
 8354               	LAST:    .align  2               | LAST ADDRESS+1
 8355               	
68K GAS  tutor13.s 			page 174


 8356               	         .END    START
68K GAS  tutor13.s 			page 175


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ADDR2MEM
                            *ABS*:0000000000000000 SAVEREGS
           tutor13.s:39     *ABS*:0000000000000007 BELL
           tutor13.s:40     *ABS*:0000000000000020 BLANK
           tutor13.s:41     *ABS*:0000000000004afb BKPOINT
           tutor13.s:42     *ABS*:0000000000000080 BUFFSIZE
           tutor13.s:43     *ABS*:0000000000000050 BUFSIZE
           tutor13.s:44     *ABS*:000000000000000d CR
           tutor13.s:45     *ABS*:0000000000000004 CTLD
           tutor13.s:46     *ABS*:0000000000000008 CTLH
           tutor13.s:47     *ABS*:0000000000000017 CTLW
           tutor13.s:48     *ABS*:0000000000000018 CTLX
           tutor13.s:49     *ABS*:000000000000007f DEL
           tutor13.s:50     *ABS*:0000000000001000 DELAYC1
           tutor13.s:51     *ABS*:0000000000000004 EOT
           tutor13.s:52     *ABS*:000000000000000a LF
           tutor13.s:53     *ABS*:0000000000000010 LOCVARSZ
           tutor13.s:54     *ABS*:0000000000000043 RESET
           tutor13.s:69     .text:0000000000000008 _AV2
           tutor13.s:70     .text:000000000000000c _AV3
           tutor13.s:71     .text:0000000000000010 _AV4
           tutor13.s:75     .text:0000000000000020 AV8
           tutor13.s:76     .text:0000000000000024 _AV9
           tutor13.s:78     .text:000000000000002c _AV11
           tutor13.s:79     .text:0000000000000030 _AV12
           tutor13.s:91     .text:0000000000000060 _AV24
           tutor13.s:98     .text:000000000000007c _AV31
           tutor13.s:113    .text:00000000000000b8 _AV46
           tutor13.s:114    .text:00000000000000bc AV47
           tutor13.s:115    .text:00000000000000c0 _AV48
           tutor13.s:326    .text:0000000000000400 _REGPC
           tutor13.s:327    .text:0000000000000404 _REGSR
           tutor13.s:329    .text:0000000000000408 _REGS
           tutor13.s:331    .text:0000000000000444 _REGA7
           tutor13.s:332    .text:0000000000000448 _REGUS
           tutor13.s:340    .text:000000000000044c _BEGHRAM
           tutor13.s:342    .text:000000000000044c _OFFSET
           tutor13.s:343    .text:000000000000046c MEMSIZE
           tutor13.s:344    .text:0000000000000470 _BPADD
           tutor13.s:345    .text:0000000000000490 _BPTILL
           tutor13.s:346    .text:0000000000000494 _BPCNT
           tutor13.s:347    .text:00000000000004b8 _BPDATA
           tutor13.s:348    .text:00000000000004ca _BERRD
           tutor13.s:349    .text:00000000000004d2 _SAVEAV4
           tutor13.s:350    .text:00000000000004d6 _TEMP
           tutor13.s:351    .text:00000000000004da _TRACECNT
           tutor13.s:352    .text:00000000000004de _TRACEON
           tutor13.s:353    .text:00000000000004e0 _BPSTATUS
           tutor13.s:354    .text:00000000000004e2 _ECHOPT1
           tutor13.s:359    .text:00000000000004e6 _OPTIONS
           tutor13.s:366    *ABS*:00000000000004e6 _XONOFF
                            *ABS*:00000000000004e6 OPTIONS
           tutor13.s:367    *ABS*:00000000000004ea _TMCHARS
           tutor13.s:376    .text:000000000000053c SSA7
           tutor13.s:382    .text:0000000000000540 _BUFFER
           tutor13.s:384    .text:00000000000005c0 _DUMPTEMP
68K GAS  tutor13.s 			page 176


           tutor13.s:386    .text:0000000000000610 _SCREEN1
           tutor13.s:387    .text:0000000000000614 _SCREEN2
           tutor13.s:389    .text:0000000000000618 _NULLPADS
           tutor13.s:390    .text:000000000000061a _CRPADS
           tutor13.s:392    .text:000000000000061c _OUTTO
           tutor13.s:393    .text:0000000000000620 _INFROM
           tutor13.s:394    .text:0000000000000624 _ALTSER1
           tutor13.s:395    .text:0000000000000628 _ALTSER2
           tutor13.s:396    .text:000000000000062c _INPORT1
           tutor13.s:397    .text:0000000000000630 _OUTPORT1
           tutor13.s:398    .text:0000000000000634 _INPORT2
           tutor13.s:399    .text:0000000000000638 _OUTPORT2
           tutor13.s:400    .text:000000000000063c _INPORT3
           tutor13.s:401    .text:0000000000000640 _OUTPORT3
           tutor13.s:402    .text:0000000000000644 _INPORT4
           tutor13.s:403    .text:0000000000000648 _OUTPORT4
           tutor13.s:404    .text:000000000000064c _MD1CON
           tutor13.s:405    .text:000000000000064e _PDIPORT
           tutor13.s:406    .text:0000000000000652 _CRTPNT
           tutor13.s:407    .text:0000000000000654 _TAPENULS
           tutor13.s:411    .text:0000000000000656 _CTLINK
           tutor13.s:413    .text:000000000000065a _ENDHRAM
           tutor13.s:421    .text:0000000000000786 _SYSTACK
           tutor13.s:432    *ABS*:0000000000000000 ESKB
           tutor13.s:433    *ABS*:0000000000000000 TDATA
           tutor13.s:434    *ABS*:000000000000000a TNB
           tutor13.s:435    *ABS*:000000000000000b TLSPEC
           tutor13.s:436    *ABS*:000000000000000c TLENGTH
           tutor13.s:437    *ABS*:000000000000000e PCOUNTER
           tutor13.s:438    *ABS*:0000000000000012 PTROP
           tutor13.s:439    *ABS*:0000000000000016 PENDOP
           tutor13.s:440    *ABS*:000000000000001a PTRBUFE
           tutor13.s:441    *ABS*:000000000000001e LINK
           tutor13.s:442    *ABS*:0000000000000022 ESKE
           tutor13.s:446    *ABS*:00000000fffffff0 DDATA
           tutor13.s:447    *ABS*:00000000fffffffc HISPC
           tutor13.s:451    *ABS*:00000000ffffffbc CC
           tutor13.s:452    *ABS*:00000000ffffffc0 ADDRESS
           tutor13.s:453    *ABS*:00000000ffffffc4 LDATA
           tutor13.s:460    *ABS*:0000000000000444 REGA7
           tutor13.s:461    .text:0000000000080000 FIRST
           tutor13.s:462    *ABS*:0000000000008146 PC_START
           tutor13.s:464    .text:0000000000080008 V2
           tutor13.s:2088   .text:0000000000080cba TRACE
           tutor13.s:470    *ABS*:000000000000044c BEGHRAM
           tutor13.s:471    *ABS*:000000000000065a ENDHRAM
           tutor13.s:472    .text:000000000008000c INITHRAM
           tutor13.s:475    .text:0000000000080018 INIT
           tutor13.s:479    *ABS*:0000000000000008 AV2
           tutor13.s:491    .text:0000000000080030 BERRMSG
           tutor13.s:482    *ABS*:000000000000000c AV3
           tutor13.s:495    .text:000000000008003a ADDRMSG
           tutor13.s:498    .text:0000000000080042 VECTBE
           tutor13.s:497    *ABS*:00000000000004ca BERRD
           tutor13.s:501    *ABS*:00000000000004d6 TEMP
           tutor13.s:501    .text:000000000008005a SV2
           tutor13.s:2055   .text:0000000000080c8c SAVE
68K GAS  tutor13.s 			page 177


           tutor13.s:4090   .text:0000000000081cd6 FIXBUF
           tutor13.s:3685   .text:00000000000819f0 PNT4HX
           tutor13.s:3676   .text:00000000000819e2 PNT8HX
           tutor13.s:4006   .text:0000000000081c4a OUTPUT
           tutor13.s:3656   .text:00000000000819be EVECT2
           tutor13.s:518    .text:000000000008008a MSG008
           tutor13.s:520    .text:0000000000080091 MSG008E
           tutor13.s:522    .text:0000000000080097 MSGEOT
           tutor13.s:524    .text:0000000000080098 MSG021
           tutor13.s:531    .text:000000000008009e WHAT
           tutor13.s:532    .text:00000000000800a2 WHAT93
           tutor13.s:574    .text:00000000000800f2 FIXDATA
           tutor13.s:533    *ABS*:00000000000004de TRACEON
           tutor13.s:535    .text:00000000000800a8 MSG
           tutor13.s:3992   .text:0000000000081c30 OUT1CR
           tutor13.s:728    .text:0000000000080232 MACSBUG
           tutor13.s:540    .text:00000000000800b0 ERROR
           tutor13.s:543    .text:00000000000800b6 SYNTAX
           tutor13.s:547    .text:00000000000800bc PPHY
           tutor13.s:562    .text:00000000000800e0 MSG019
           tutor13.s:558    .text:00000000000800d6 P2PHY2
           tutor13.s:552    .text:00000000000800c4 P2PHY
           tutor13.s:573    *ABS*:0000000000000540 BUFFER
           tutor13.s:575    .text:00000000000800f6 FIXDADD
           tutor13.s:579    .text:0000000000080100 FIXD2
           tutor13.s:589    .text:0000000000080106 FIXDCRLF
           tutor13.s:600    .text:0000000000080110 INITVECT
           tutor13.s:3649   .text:00000000000819a2 ABORTE
           tutor13.s:603    .text:0000000000080118 INIT0
           tutor13.s:610    *ABS*:0000000000000404 REGSR
           tutor13.s:611    .text:0000000000080124 START1S
           tutor13.s:614    *ABS*:0000000000000400 REGPC
           tutor13.s:618    *ABS*:0000000000000786 SYSTACK
           tutor13.s:641    .text:0000000000080164 START11
           tutor13.s:629    .text:0000000000080146 START
           tutor13.s:644    *ABS*:0000000000000448 REGUS
           tutor13.s:938    .text:000000000008037a INITVMSG
           tutor13.s:653    *ABS*:0000000000000010 AV4
           tutor13.s:2226   .text:0000000000080de4 CHKBP
           tutor13.s:657    *ABS*:00000000000004ea TMCHARS
           tutor13.s:661    *ABS*:000000000000007c AV31
           tutor13.s:3631   .text:000000000008195e ABORTB
           tutor13.s:665    *ABS*:0000000000000630 OUTPORT1
           tutor13.s:4002   .text:0000000000081c4a OUT1CR0
           tutor13.s:667    *ABS*:0000000000000638 OUTPORT2
           tutor13.s:4022   .text:0000000000081c6a OUTPUT20
           tutor13.s:669    *ABS*:0000000000000640 OUTPORT3
           tutor13.s:4203   .text:0000000000081da6 PRCRLF
           tutor13.s:671    *ABS*:0000000000000648 OUTPORT4
           tutor13.s:4346   .text:0000000000081edc TAPEOUT
           tutor13.s:673    *ABS*:000000000000062c INPORT1
           tutor13.s:4110   .text:0000000000081cfe PORTIN10
           tutor13.s:675    *ABS*:0000000000000634 INPORT2
           tutor13.s:4484   .text:0000000000082014 PORTIN20
           tutor13.s:677    *ABS*:000000000000063c INPORT3
           tutor13.s:679    *ABS*:0000000000000644 INPORT4
           tutor13.s:4586   .text:00000000000820dc TAPEIN
68K GAS  tutor13.s 			page 178


           tutor13.s:682    *ABS*:0000000000000654 TAPENULS
           tutor13.s:684    *ABS*:000000000000064e PDIPORT
                            *ABS*:0000000000f00000 PDI1
           tutor13.s:707    *ABS*:000000000000064c MD1CON
           tutor13.s:4438   .text:0000000000081fba INITSER
           tutor13.s:714    *ABS*:00000000000004e6 XONOFF
           tutor13.s:718    *ABS*:00000000000000b8 AV46
           tutor13.s:8169   .text:0000000000083f98 TRAP14
           tutor13.s:720    *ABS*:0000000000000656 CTLINK
           tutor13.s:2188   .text:0000000000080d9c SWAPOUT
           tutor13.s:732    *ABS*:0000000000000490 BPTILL
           tutor13.s:734    *ABS*:000000000000061c OUTTO
           tutor13.s:736    *ABS*:0000000000000620 INFROM
           tutor13.s:738    *ABS*:00000000000004e2 ECHOPT1
           tutor13.s:832    .text:00000000000802fa MSG001
           tutor13.s:747    .text:0000000000080260 MACSBUG1
           tutor13.s:4096   .text:0000000000081cde PORTIN1
           tutor13.s:754    .text:0000000000080274 DECODE6
           tutor13.s:768    .text:0000000000080284 DECODE1
           tutor13.s:1154   .text:000000000008059c TCMDHOT
           tutor13.s:777    .text:000000000008029a DECODE10
           tutor13.s:4013   .text:0000000000081c54 OUTPUT2
           tutor13.s:782    .text:00000000000802a4 DECODE2
           tutor13.s:787    .text:00000000000802ae DECODE21
           tutor13.s:870    .text:0000000000080308 SOLIST
           tutor13.s:788    .text:00000000000802b2 DECODE4
           tutor13.s:797    .text:00000000000802c0 DECODE41
           tutor13.s:805    .text:00000000000802d4 DECODE3
           tutor13.s:823    .text:00000000000802ee NOCMD
                            *ABS*:0000000000000000 CMD
           tutor13.s:960    .text:00000000000803a2 VECT
           tutor13.s:941    .text:0000000000080384 VECTI
           tutor13.s:943    *ABS*:000000000000002c AV11
           tutor13.s:947    *ABS*:0000000000000060 AV24
           tutor13.s:949    .text:0000000000080394 VECTI2
           tutor13.s:951    *ABS*:00000000000000c0 AV48
           tutor13.s:986    .text:00000000000803fa EVECT5
           tutor13.s:1007   .text:0000000000080440 EVECT6
           tutor13.s:1031   .text:0000000000080490 EVECT7
           tutor13.s:1058   .text:00000000000804e0 EVECT
           tutor13.s:3654   .text:00000000000819aa EVECTL
           tutor13.s:1065   .text:00000000000804e4 BFCMD
           tutor13.s:3795   .text:0000000000081ab4 FNEXTF
           tutor13.s:1858   .text:0000000000080b3a GETA
           tutor13.s:3815   .text:0000000000081ad2 CKWADR
           tutor13.s:3870   .text:0000000000081b36 GETNUMA
           tutor13.s:1088   .text:0000000000080524 BFCMD11
           tutor13.s:3048   .text:0000000000081486 MM90
           tutor13.s:1103   .text:0000000000080536 BMCMD
           tutor13.s:1134   .text:000000000008057a BM122
           tutor13.s:1129   .text:0000000000080572 BM112
           tutor13.s:1139   .text:0000000000080584 BM142
           tutor13.s:1136   .text:000000000008057e BM132
           tutor13.s:1146   .text:0000000000080588 TCMD
           tutor13.s:1147   .text:0000000000080588 TRCMD
           tutor13.s:3819   .text:0000000000081ad8 CKADDR
           tutor13.s:1157   .text:000000000008059e TCMD15
68K GAS  tutor13.s 			page 179


           tutor13.s:1156   *ABS*:00000000000004da TRACECNT
           tutor13.s:1175   .text:00000000000805c6 TRACE2
           tutor13.s:1164   .text:00000000000805a4 TTCMD
           tutor13.s:2151   .text:0000000000080d4e UNTRACE
           tutor13.s:1185   .text:00000000000805d8 GTCMD
           tutor13.s:1194   *ABS*:0000000000000470 BPADD
           tutor13.s:1197   .text:00000000000805f4 GT21
           tutor13.s:1281   .text:0000000000080698 BCMD55
           tutor13.s:1212   .text:000000000008061a GOCMD1A
           tutor13.s:1218   .text:0000000000080626 GOCMD1
           tutor13.s:1206   .text:0000000000080606 GOSET1
           tutor13.s:1216   .text:0000000000080624 GCMD
           tutor13.s:1217   .text:0000000000080624 GOCMD
           tutor13.s:1222   .text:0000000000080632 GDCMD
           tutor13.s:2155   .text:0000000000080d5c UNSTACK
           tutor13.s:1229   .text:0000000000080638 NOBRCMD
           tutor13.s:1235   .text:0000000000080642 FIXBP
           tutor13.s:1230   .text:000000000008063a BCMD01
           tutor13.s:1285   .text:00000000000806a2 BCMD7
           tutor13.s:1237   *ABS*:0000000000000494 BPCNT
           tutor13.s:1314   .text:00000000000806ea NOBR0
           tutor13.s:1248   .text:0000000000080652 BRCMD
           tutor13.s:1249   .text:0000000000080656 BCMD0
           tutor13.s:1254   .text:0000000000080664 BCMD00
           tutor13.s:1265   .text:0000000000080678 BCMD33
           tutor13.s:1262   .text:0000000000080672 BCMD3
           tutor13.s:1276   .text:0000000000080690 BCMD5
           tutor13.s:1273   .text:000000000008068a BCMD6
           tutor13.s:1287   .text:00000000000806aa BCMD77
           tutor13.s:1309   .text:00000000000806de MSGBR
           tutor13.s:1290   .text:00000000000806b0 BCMD8
           tutor13.s:1304   .text:00000000000806d4 BCMD9
           tutor13.s:3708   .text:0000000000081a14 FRELADDR
           tutor13.s:3681   .text:00000000000819ea PNT6HX
           tutor13.s:1303   .text:00000000000806d0 BCMD81
           tutor13.s:3757   .text:0000000000081a6e PNTZHX
           tutor13.s:1315   .text:00000000000806ee NOBR1
           tutor13.s:1323   .text:0000000000080704 NOBR3
           tutor13.s:1329   .text:0000000000080710 NOBR4
           tutor13.s:1340   .text:0000000000080718 BSCMD
           tutor13.s:1448   .text:00000000000807ec BS311
           tutor13.s:1358   .text:0000000000080748 BS91
           tutor13.s:1379   .text:0000000000080772 BS97
           tutor13.s:1386   .text:0000000000080782 BS101
           tutor13.s:1394   .text:000000000008078e BS200
           tutor13.s:1434   .text:00000000000807da BS225
           tutor13.s:1424   .text:00000000000807c8 BS219
           tutor13.s:1421   .text:00000000000807c4 BS215
           tutor13.s:1419   .text:00000000000807c0 BS213
           tutor13.s:3690   .text:00000000000819f8 PNT2HX
           tutor13.s:1447   *ABS*:00000000000005c0 DUMPTEMP
           tutor13.s:1449   .text:00000000000807f0 BS313
           tutor13.s:1466   .text:0000000000080810 BS323
           tutor13.s:1468   .text:0000000000080816 BS325
           tutor13.s:1492   .text:0000000000080848 BS365
           tutor13.s:1486   .text:000000000008083e BS355
           tutor13.s:1502   .text:0000000000080852 BTCMD
68K GAS  tutor13.s 			page 180


           tutor13.s:3143   .text:0000000000081554 MTSETUP
           tutor13.s:3502   .text:000000000008185c RAMTEST
           tutor13.s:1534   .text:00000000000808a4 DCCMD
           tutor13.s:1535   .text:00000000000808a4 NUMCON0
           tutor13.s:1547   .text:00000000000808c8 NUMCON1
           tutor13.s:1552   .text:00000000000808d4 NUMCON2
           tutor13.s:1560   .text:00000000000808ec NUMCON3
           tutor13.s:2345   .text:0000000000080f5c HEX2DEC
           tutor13.s:1567   .text:00000000000808f8 REGNAMES
           tutor13.s:1571   .text:0000000000080902 DFCMD
           tutor13.s:1578   .text:000000000008090e TD07
           tutor13.s:1574   .text:0000000000080904 TDISPLY
           tutor13.s:1611   .text:0000000000080960 TD25
           tutor13.s:1580   *ABS*:0000000000000610 SCREEN1
           tutor13.s:1584   .text:0000000000080920 TD09
           tutor13.s:1590   .text:000000000008092c TD1
           tutor13.s:1626   .text:0000000000080986 TD4
           tutor13.s:1597   *ABS*:0000000000000408 REGS
           tutor13.s:3360   .text:000000000008171e PNTCLS
           tutor13.s:1607   .text:0000000000080958 TD27
           tutor13.s:7846   .text:0000000000083b9c DCODE68K
           tutor13.s:1620   *ABS*:0000000000000614 SCREEN2
           tutor13.s:1624   .text:0000000000080984 TD39
           tutor13.s:1637   .text:00000000000809a0 T44
           tutor13.s:1645   .text:00000000000809b4 T449
           tutor13.s:1642   .text:00000000000809ac T448
           tutor13.s:1651   .text:00000000000809c0 TDCC
           tutor13.s:1646   .text:00000000000809b8 TD9
           tutor13.s:1674   .text:0000000000080a10 TDCC9
           tutor13.s:3696   .text:0000000000081a00 PUTHEX
           tutor13.s:1679   .text:0000000000080a1c TDCC91
           tutor13.s:1688   .text:0000000000080a20 DUCMD
           tutor13.s:4663   .text:0000000000082196 SCANPORT
           tutor13.s:1705   .text:0000000000080a4c PUNCH5
           tutor13.s:1710   .text:0000000000080a52 PUM11
           tutor13.s:1714   .text:0000000000080a5a PUM13
           tutor13.s:1734   .text:0000000000080a82 MORES0
           tutor13.s:1743   .text:0000000000080a92 ENDS0
           tutor13.s:1804   .text:0000000000080b18 PNTSREC
           tutor13.s:1749   .text:0000000000080a98 MORESP
           tutor13.s:1767   .text:0000000000080ac6 S2REC
           tutor13.s:1776   .text:0000000000080ade PNCA3
           tutor13.s:1789   .text:0000000000080afe A3OUT
           tutor13.s:1801   .text:0000000000080b12 PNTSRECX
           tutor13.s:1817   .text:0000000000080b38 PNTSRTS
           tutor13.s:2018   .text:0000000000080c56 GAP191
           tutor13.s:1877   .text:0000000000080b5e GAP113
           tutor13.s:1874   .text:0000000000080b56 GAP111
           tutor13.s:1931   .text:0000000000080bc2 GAP121
           tutor13.s:1939   .text:0000000000080bce GAP131
           tutor13.s:1955   .text:0000000000080be2 GAP141
           tutor13.s:1978   .text:0000000000080c0e GAP161
           tutor13.s:2012   .text:0000000000080c50 GAP181
           tutor13.s:1973   .text:0000000000080c0a GAE
           tutor13.s:1996   .text:0000000000080c34 GAP171
           tutor13.s:1923   .text:0000000000080bb8 GAP118
           tutor13.s:1925   .text:0000000000080bba GAP119
68K GAS  tutor13.s 			page 181


           tutor13.s:1927   .text:0000000000080bc0 GAP111S
           tutor13.s:1947   .text:0000000000080bda GAP135
           tutor13.s:1945   *ABS*:000000000000044c OFFSET
           tutor13.s:2031   .text:0000000000080c6a GAP199
           tutor13.s:2038   .text:0000000000080c70 GASRGN
           tutor13.s:1987   .text:0000000000080c24 GAP163
           tutor13.s:1990   .text:0000000000080c2e GAP165
           tutor13.s:2029   .text:0000000000080c68 GAP197
           tutor13.s:2089   .text:0000000000080ccc SV14
           tutor13.s:2103   .text:0000000000080ce6 TRACE16
           tutor13.s:2147   .text:0000000000080d46 TRACE39
           tutor13.s:3639   .text:0000000000081986 ABORT335
           tutor13.s:2119   .text:0000000000080d12 TISOK
           tutor13.s:8354   .text:0000000000084128 LAST
           tutor13.s:2274   .text:0000000000080e6a MSG020
           tutor13.s:2263   .text:0000000000080e38 CHKBP4
           tutor13.s:2125   .text:0000000000080d1c TRACE01
           tutor13.s:2134   .text:0000000000080d30 TRACE08
           tutor13.s:2261   .text:0000000000080e34 CHKBP3
           tutor13.s:2139   .text:0000000000080d38 TRACE03
           tutor13.s:2178   .text:0000000000080d86 SWAPIN
           tutor13.s:2152   *ABS*:0000000000000024 AV9
           tutor13.s:2180   *ABS*:00000000000004d2 SAVEAV4
           tutor13.s:2204   .text:0000000000080dc2 SWAPIN1
           tutor13.s:2193   .text:0000000000080dac SWAP
           tutor13.s:2187   *ABS*:00000000000004e0 BPSTATUS
           tutor13.s:2221   .text:0000000000080de2 SWAPEND
           tutor13.s:2213   .text:0000000000080dd2 SWAPOUT1
           tutor13.s:2196   *ABS*:00000000000004b8 BPDATA
           tutor13.s:2199   .text:0000000000080dba SWAP1
           tutor13.s:2217   .text:0000000000080dda SWAP99
           tutor13.s:2227   .text:0000000000080df8 SV16
           tutor13.s:2250   .text:0000000000080e1e CHKBP11
           tutor13.s:2241   .text:0000000000080e12 CHKBP1
           tutor13.s:2255   .text:0000000000080e28 CHKBP2
           tutor13.s:2268   .text:0000000000080e48 MSG009
           tutor13.s:2271   .text:0000000000080e5c MSG014
           tutor13.s:2285   .text:0000000000080e82 HECMD
           tutor13.s:2326   .text:0000000000080eea MSG002
           tutor13.s:2293   .text:0000000000080e9a HELP4
           tutor13.s:2322   .text:0000000000080ee2 HELP6
           tutor13.s:2315   .text:0000000000080ed0 HELP81
           tutor13.s:2311   .text:0000000000080ece EOHLOOP
           tutor13.s:2320   .text:0000000000080ee0 HELP85
           tutor13.s:2351   .text:0000000000080f6c HX2DC
           tutor13.s:2385   .text:0000000000080fb6 HX2DC57
           tutor13.s:2353   .text:0000000000080f70 HX2DC0
           tutor13.s:2368   .text:0000000000080f92 HX2DC2
           tutor13.s:2357   .text:0000000000080f78 HX2DC1
           tutor13.s:2369   .text:0000000000080f94 HX2DC22
           tutor13.s:2374   .text:0000000000080f9e HX2DC3
           tutor13.s:2378   .text:0000000000080fa6 HX2DC4
           tutor13.s:2381   .text:0000000000080fae HX2DC5
           tutor13.s:2386   .text:0000000000080fba HX2DC6
           tutor13.s:2417   .text:0000000000080fc0 VECMD
           tutor13.s:2422   .text:0000000000080fc8 CHKCHKS
           tutor13.s:2421   .text:0000000000080fc6 LOCMD
68K GAS  tutor13.s 			page 182


           tutor13.s:2427   .text:0000000000080fce READ01
           tutor13.s:2457   .text:000000000008100e READ09
           tutor13.s:2430   .text:0000000000080fd4 READ03
           tutor13.s:2455   .text:000000000008100a READ08
           tutor13.s:2438   .text:0000000000080fe6 READ021
           tutor13.s:2448   .text:0000000000080ffe READS1
           tutor13.s:2600   .text:0000000000081142 READHEX4
           tutor13.s:2497   .text:0000000000081070 READS202
           tutor13.s:2460   .text:0000000000081018 READ0
           tutor13.s:4477   .text:0000000000082002 PORTIN2
           tutor13.s:2470   .text:000000000008102c READ00
           tutor13.s:2474   .text:0000000000081032 READ005
           tutor13.s:2571   .text:00000000000810fe GETCHR
           tutor13.s:2563   .text:00000000000810f0 READHEX
           tutor13.s:2606   .text:000000000008114e READS8
           tutor13.s:2613   .text:000000000008115e READS9
           tutor13.s:2494   .text:0000000000081068 READS2
           tutor13.s:2597   .text:000000000008113c READHEX6
           tutor13.s:2502   .text:000000000008107c READ100
           tutor13.s:2514   .text:0000000000081092 READ120
           tutor13.s:2556   .text:00000000000810de READCKSM
           tutor13.s:2533   .text:00000000000810b2 READ400
           tutor13.s:2525   .text:00000000000810a2 READ130
           tutor13.s:3113   .text:0000000000081504 SETME
           tutor13.s:2529   .text:00000000000810ae READ135
           tutor13.s:2538   .text:00000000000810ba READ410
           tutor13.s:2551   .text:00000000000810d6 READ440
           tutor13.s:2542   .text:00000000000810c6 READ420
           tutor13.s:2548   .text:00000000000810d0 READ430
           tutor13.s:2594   .text:0000000000081133 MSGLOAD2
           tutor13.s:2576   .text:0000000000081106 GETHEXC
           tutor13.s:2586   .text:000000000008111e RHEX3
           tutor13.s:2584   .text:000000000008111c RHEX2
           tutor13.s:2591   .text:000000000008112a MSGLOAD1
           tutor13.s:2607   .text:0000000000081150 READS800
           tutor13.s:2626   .text:0000000000081164 MDCMD
           tutor13.s:2637   .text:000000000008117a PRINT8
           tutor13.s:2650   .text:0000000000081198 PRINTDI
           tutor13.s:2646   .text:000000000008118c PRINTMB
           tutor13.s:2662   .text:00000000000811a8 PRINT5
           tutor13.s:2673   .text:00000000000811c4 PRINT7
           tutor13.s:3839   .text:0000000000081b08 GETEXP
           tutor13.s:2697   .text:00000000000811f2 PUTADR
           tutor13.s:2676   .text:00000000000811c8 PRINTDI5
           tutor13.s:2739   .text:0000000000081250 PRINT9
           tutor13.s:2690   .text:00000000000811ea PRINT3
           tutor13.s:2704   .text:0000000000081204 NXTBP
           tutor13.s:2711   .text:0000000000081218 NXTBP3
           tutor13.s:2720   .text:0000000000081224 NXTCHR
           tutor13.s:2726   .text:0000000000081236 NOTCHR
           tutor13.s:2728   .text:000000000008123a PUTCHR
           tutor13.s:2777   .text:000000000008127a MMDI
           tutor13.s:2780   .text:0000000000081284 MMDI22
           tutor13.s:2781   .text:0000000000081286 MMDI23
           tutor13.s:2797   .text:000000000008129a MMDI31
           tutor13.s:4103   .text:0000000000081cf0 PORTIN1N
           tutor13.s:2804   .text:00000000000812ac MMDI34
68K GAS  tutor13.s 			page 183


           tutor13.s:3052   .text:0000000000081492 MM905
           tutor13.s:5441   .text:00000000000829b6 CODE68K
           tutor13.s:2827   .text:00000000000812c6 MMDI26
           tutor13.s:2831   .text:00000000000812d0 MMDI27
           tutor13.s:2849   .text:00000000000812f8 MMDI30
           tutor13.s:2841   .text:00000000000812e6 MMDI29
           tutor13.s:2850   .text:00000000000812fc MMDI44
           tutor13.s:2858   .text:0000000000081314 MCMD
           tutor13.s:2859   .text:0000000000081314 MMCMD
           tutor13.s:2867   .text:0000000000081326 MM05
           tutor13.s:2916   .text:0000000000081390 MM10
           tutor13.s:2883   .text:0000000000081344 MM045
           tutor13.s:2912   .text:000000000008138c MM065
           tutor13.s:2892   .text:0000000000081358 MM054
           tutor13.s:2897   .text:0000000000081364 MM056
           tutor13.s:2903   .text:0000000000081372 MM058
           tutor13.s:2907   .text:0000000000081380 MM060
           tutor13.s:2909   .text:0000000000081386 MM064
           tutor13.s:2922   .text:00000000000813a0 MM11
           tutor13.s:2959   .text:00000000000813e0 MM18
           tutor13.s:2940   .text:00000000000813c4 MM12
           tutor13.s:2947   .text:00000000000813ce MM14
           tutor13.s:2954   .text:00000000000813d8 MM16
           tutor13.s:3041   .text:000000000008147a MM50
           tutor13.s:3028   .text:0000000000081456 MM40
           tutor13.s:3045   .text:0000000000081480 MM60
           tutor13.s:2999   .text:000000000008142e MM22
           tutor13.s:3009   .text:000000000008143c MM24
           tutor13.s:3019   .text:000000000008144a MM26
           tutor13.s:3131   .text:000000000008153e MSG017
           tutor13.s:3049   .text:000000000008148a MM95
           tutor13.s:3064   .text:0000000000081498 MSCMD
           tutor13.s:3070   .text:00000000000814aa SETM1
           tutor13.s:3101   .text:00000000000814ec SETM5
           tutor13.s:3117   .text:0000000000081510 SETM7
           tutor13.s:3085   .text:00000000000814d2 SETM3
           tutor13.s:3102   .text:00000000000814ee SETM6
           tutor13.s:3169   .text:000000000008158c PERCMD
           tutor13.s:3203   .text:00000000000815c4 REGTBL
           tutor13.s:3174   .text:0000000000081596 PER4
           tutor13.s:3190   .text:00000000000815b8 PER3
           tutor13.s:3252   .text:0000000000081646 SETA7
           tutor13.s:3246   .text:000000000008163a SETPC
           tutor13.s:3249   .text:0000000000081640 SETSR
           tutor13.s:3258   .text:0000000000081656 SETUS
           tutor13.s:3255   .text:0000000000081650 SETSS
           tutor13.s:3240   .text:000000000008162e SETD
           tutor13.s:3243   .text:0000000000081634 SETA
           tutor13.s:3355   .text:0000000000081710 PNTCLSA
           tutor13.s:3351   .text:0000000000081706 PNTCLSD
           tutor13.s:3261   .text:000000000008165c SETRN
           tutor13.s:3269   .text:0000000000081668 SETR
           tutor13.s:3272   .text:0000000000081670 SETR0
           tutor13.s:3960   .text:0000000000081be6 GETHEX
           tutor13.s:3318   .text:00000000000816cc SCAN
           tutor13.s:3292   .text:0000000000081698 SETR5
           tutor13.s:3289   .text:0000000000081692 SETR4
68K GAS  tutor13.s 			page 184


           tutor13.s:3285   .text:000000000008168e SEMACS
           tutor13.s:3329   .text:00000000000816dc PRINTR
           tutor13.s:3295   .text:000000000008169c SETSR1
           tutor13.s:3313   .text:00000000000816ca SETSR15
           tutor13.s:3319   .text:00000000000816ce SCAN2
           tutor13.s:3325   .text:00000000000816da RETURN5
           tutor13.s:3339   .text:00000000000816f6 PRINTR2
           tutor13.s:3346   .text:00000000000816fc OFCMD
           tutor13.s:3347   .text:00000000000816fc SETO
           tutor13.s:3357   .text:0000000000081718 PNTCLSB
           tutor13.s:3362   .text:0000000000081724 PNTCLS1
           tutor13.s:3376   .text:0000000000081742 PNTREG
           tutor13.s:3369   .text:0000000000081736 PNTCLS2
           tutor13.s:3390   .text:000000000008176c PNTREG1
           tutor13.s:3403   .text:000000000008177a PFCMD
           tutor13.s:3440   .text:00000000000817dc PFCMD1
           tutor13.s:3472   .text:0000000000081830 MSG003
           tutor13.s:3432   .text:00000000000817c4 PFPT
           tutor13.s:3414   *ABS*:0000000000000618 NULLPADS
           tutor13.s:3475   .text:000000000008183b MSG004
           tutor13.s:3420   *ABS*:000000000000061a CRPADS
           tutor13.s:3478   .text:0000000000081846 MSG005
           tutor13.s:3481   .text:0000000000081851 MSG031
           tutor13.s:3455   .text:0000000000081806 PFCH
           tutor13.s:3459   .text:0000000000081812 PFCH2
           tutor13.s:3470   .text:000000000008182e PFCH4
           tutor13.s:3505   .text:0000000000081860 WALK3
           tutor13.s:3506   .text:0000000000081862 WALK0
           tutor13.s:3554   .text:00000000000818ac RAMERR
           tutor13.s:3515   .text:0000000000081870 WALK1
           tutor13.s:3530   .text:0000000000081888 MTCLR
           tutor13.s:3536   .text:0000000000081890 MTSTOR1
           tutor13.s:3546   .text:00000000000818a0 MTSTOR0
           tutor13.s:3572   .text:00000000000818b0 TMCMD
           tutor13.s:3577   .text:00000000000818c4 P2CMD0
           tutor13.s:4070   .text:0000000000081cb2 GETSER1
           tutor13.s:3619   .text:0000000000081948 MSG006
           tutor13.s:3589   .text:00000000000818f0 P2CMD01
           tutor13.s:3598   .text:000000000008190e P2CMD2
           tutor13.s:3617   .text:0000000000081944 P2CMD6
           tutor13.s:3613   .text:0000000000081938 P2CMD4
           tutor13.s:4081   .text:0000000000081cc4 GETSER2
           tutor13.s:3632   .text:0000000000081972 SV17
           tutor13.s:4411   .text:0000000000081f7e FAULTSER
           tutor13.s:3642   .text:000000000008198e MSG012
           tutor13.s:3638   .text:0000000000081982 EVECT4
           tutor13.s:3654   .text:00000000000819ba SV18
           tutor13.s:3658   *ABS*:0000000000000030 AV12
           tutor13.s:3664   .text:00000000000819d4 MSG010
           tutor13.s:3701   .text:0000000000081a10 SAVHEX
           tutor13.s:3713   .text:0000000000081a20 FREL10
           tutor13.s:3725   .text:0000000000081a32 FREL15
           tutor13.s:3744   .text:0000000000081a5c FREL25
           tutor13.s:3737   .text:0000000000081a4a FREL20
           tutor13.s:3748   .text:0000000000081a66 FREL30
           tutor13.s:3783   .text:0000000000081aac PNTZ81
           tutor13.s:3764   .text:0000000000081a7e PNTZ0
68K GAS  tutor13.s 			page 185


           tutor13.s:3765   .text:0000000000081a80 PNTZ1
           tutor13.s:3773   .text:0000000000081a94 PNTZ4
           tutor13.s:3769   .text:0000000000081a88 PNTZ2
           tutor13.s:3777   .text:0000000000081a9e PNTZ3
           tutor13.s:3779   .text:0000000000081aa4 PNTZ8
           tutor13.s:3784   .text:0000000000081ab0 PNTZ9
           tutor13.s:3793   .text:0000000000081ab2 FNEXTF1
           tutor13.s:3807   .text:0000000000081ace FNEXTF7
           tutor13.s:3822   .text:0000000000081ae0 CKADR39
           tutor13.s:3828   .text:0000000000081af4 CKADR99
           tutor13.s:3830   .text:0000000000081af6 MSG018
           tutor13.s:3841   .text:0000000000081b0c GETEXP21
           tutor13.s:3843   .text:0000000000081b10 GETEXP15
           tutor13.s:3853   .text:0000000000081b26 GETEXP39
           tutor13.s:3866   .text:0000000000081b2e GETNUMD
           tutor13.s:3873   .text:0000000000081b3a GETDECNU
           tutor13.s:3867   .text:0000000000081b30 GETNUMD9
           tutor13.s:3877   .text:0000000000081b42 GETHEXNU
           tutor13.s:3880   .text:0000000000081b48 GETN20
           tutor13.s:3944   .text:0000000000081bca GETN80
           tutor13.s:3885   .text:0000000000081b52 GETN30
           tutor13.s:3948   .text:0000000000081bd0 GETN90
           tutor13.s:3953   .text:0000000000081bda GETNDATA
           tutor13.s:3891   .text:0000000000081b5e GETN40
           tutor13.s:3897   .text:0000000000081b68 GETN50
           tutor13.s:3947   .text:0000000000081bce GETN85
           tutor13.s:3906   .text:0000000000081b78 GETN60
           tutor13.s:3900   .text:0000000000081b70 GETN55
           tutor13.s:3903   .text:0000000000081b74 GETN57
           tutor13.s:3911   .text:0000000000081b82 GETN65
           tutor13.s:3916   .text:0000000000081b8c GETN70
           tutor13.s:3921   .text:0000000000081b96 GETN75
           tutor13.s:3931   .text:0000000000081bb0 GETN77
           tutor13.s:3950   .text:0000000000081bd4 GETN95
           tutor13.s:3973   .text:0000000000081c08 PNMSG011
           tutor13.s:3970   .text:0000000000081c00 GTHX2
           tutor13.s:3979   .text:0000000000081c1a MSG011
           tutor13.s:3999   .text:0000000000081c44 OUT1CRX
           tutor13.s:4032   .text:0000000000081c72 OUTP2
           tutor13.s:4019   .text:0000000000081c64 OUTPUT2X
           tutor13.s:4026   .text:0000000000081c6a OUTPUT21
           tutor13.s:4037   .text:0000000000081c7c OUTP3
           tutor13.s:4046   .text:0000000000081c82 OUTCH1
           tutor13.s:4282   .text:0000000000081e5a OUTCH
           tutor13.s:4064   .text:0000000000081cb0 OUTCHRTS
           tutor13.s:4058   .text:0000000000081ca2 OUTCH2
           tutor13.s:4061   .text:0000000000081ca8 OUTCH3
                            *ABS*:0000000000f00040 SER1
           tutor13.s:4071   *ABS*:0000000000000624 ALTSER1
           tutor13.s:4075   .text:0000000000081cc2 RETURN
                            *ABS*:0000000000f00041 SER2
           tutor13.s:4082   *ABS*:0000000000000628 ALTSER2
           tutor13.s:4100   .text:0000000000081cea PORTIN1X
           tutor13.s:4111   .text:0000000000081d02 PORTIN1V
           tutor13.s:4112   .text:0000000000081d04 PORTIN1W
           tutor13.s:4115   .text:0000000000081d08 READBUF
           tutor13.s:4459   .text:0000000000081fe6 INCHNE
68K GAS  tutor13.s 			page 186


           tutor13.s:4133   .text:0000000000081d34 CHKCTLH
           tutor13.s:4143   .text:0000000000081d4e BS4CTLH
           tutor13.s:4153   .text:0000000000081d64 CHKCTLD
           tutor13.s:4137   .text:0000000000081d40 BKSPACE
           tutor13.s:4146   .text:0000000000081d52 BLANKIT
           tutor13.s:4171   .text:0000000000081d90 CHKCR
           tutor13.s:4164   .text:0000000000081d80 CHARSAVE
           tutor13.s:4178   .text:0000000000081da0 NOAUTOLF
           tutor13.s:4186   *ABS*:00000000000320c8 LTIME
           tutor13.s:4187   *ABS*:000000000000a028 STIME
           tutor13.s:4190   *ABS*:0000000000f00009 PITCDDR
           tutor13.s:4191   *ABS*:0000000000f00019 PITPCDR
           tutor13.s:4192   *ABS*:0000000000f00021 PITTCR
           tutor13.s:4193   *ABS*:000000000000000b PSTATUS
           tutor13.s:4194   *ABS*:0000000000000003 PBDATA
           tutor13.s:4195   *ABS*:0000000000000001 PDATA
           tutor13.s:4209   .text:0000000000081daa LIST
           tutor13.s:4214   .text:0000000000081db4 LIST1
           tutor13.s:4219   .text:0000000000081dba CHRPRINT
           tutor13.s:4220   .text:0000000000081dbe LIST2
           tutor13.s:4310   .text:0000000000081e92 CHKBRK
           tutor13.s:4236   .text:0000000000081dea LIST25
           tutor13.s:4235   .text:0000000000081de6 LIST24
           tutor13.s:4245   .text:0000000000081dfe LIST3
           tutor13.s:4267   .text:0000000000081e36 LIST5
           tutor13.s:4250   *ABS*:0000000000000652 CRTPNT
           tutor13.s:4273   .text:0000000000081e44 MSG007
           tutor13.s:4259   .text:0000000000081e22 LERR1
           tutor13.s:4293   .text:0000000000081e74 OUTCH21
           tutor13.s:4306   .text:0000000000081e90 CTLW9
           tutor13.s:4302   .text:0000000000081e86 CTLWH
           tutor13.s:4332   .text:0000000000081ebe BREAK
           tutor13.s:4321   .text:0000000000081ea4 BREAK2
           tutor13.s:4322   .text:0000000000081ea8 BREAK1
           tutor13.s:4339   .text:0000000000081ed0 MSG013
           tutor13.s:4335   .text:0000000000081ec4 BREAK79
           tutor13.s:4358   .text:0000000000081f04 TAPEOUT2
           tutor13.s:4354   .text:0000000000081efc TAPEOUT1
           tutor13.s:4377   .text:0000000000081f20 TAPEO
           tutor13.s:4367   .text:0000000000081f1a TAPEOUT4
           tutor13.s:4361   .text:0000000000081f0c TAPEOUT5
           tutor13.s:4379   .text:0000000000081f26 TAPEO1
           tutor13.s:4402   .text:0000000000081f68 TIMERTST
           tutor13.s:4386   .text:0000000000081f3e TAPEO2
           tutor13.s:4407   .text:0000000000081f7c TIMERTS1
           tutor13.s:4416   .text:0000000000081f88 FAULTAC4
           tutor13.s:4426   .text:0000000000081fa0 FAULTAC2
           tutor13.s:4432   .text:0000000000081fb4 FAULTAC3
           tutor13.s:4443   .text:0000000000081fc4 INITAC3
           tutor13.s:4481   .text:000000000008200e PORTIN2X
           tutor13.s:4492   .text:0000000000082028 PORT2100
           tutor13.s:4533   .text:0000000000082074 P2READY
           tutor13.s:4498   .text:0000000000082030 PORT2120
           tutor13.s:4542   .text:000000000008208a RES
           tutor13.s:4499   .text:0000000000082032 PORT2130
           tutor13.s:4519   .text:0000000000082058 PORT2250
           tutor13.s:4527   .text:0000000000082064 PORT2300
68K GAS  tutor13.s 			page 187


           tutor13.s:4508   .text:000000000008203e PORT2140
           tutor13.s:4514   .text:0000000000082050 PORT2150
           tutor13.s:4523   .text:000000000008205e PORT2260
           tutor13.s:4530   .text:000000000008206c MSG030
           tutor13.s:4548   .text:000000000008209c RES140
           tutor13.s:4566   .text:00000000000820be RES190
           tutor13.s:4564   .text:00000000000820bc RES150
           tutor13.s:4577   .text:00000000000820d6 RES195
           tutor13.s:4573   .text:00000000000820ca RES194
           tutor13.s:4593   .text:00000000000820f4 TAPEIN10
           tutor13.s:4623   .text:0000000000082132 TAPEIN40
           tutor13.s:4595   .text:00000000000820f8 TAPEIN11
           tutor13.s:4635   .text:0000000000082152 STARTIMR
           tutor13.s:4598   .text:00000000000820fe TAPEIN12
           tutor13.s:4610   .text:0000000000082112 TAPEIN30
           tutor13.s:4651   .text:000000000008217c TAPEIN51
           tutor13.s:4605   .text:000000000008210a TAPEIN20
           tutor13.s:4606   .text:000000000008210c TAPEIN21
           tutor13.s:4612   .text:0000000000082116 TAPEIN31
           tutor13.s:4620   .text:0000000000082130 TAPEIN32
           tutor13.s:4630   .text:0000000000082148 TAPEIN41
           tutor13.s:4641   .text:0000000000082166 TAPEIN53
           tutor13.s:4650   .text:000000000008217a TAPEIN50
           tutor13.s:4655   .text:000000000008218a TAPEIN52
           tutor13.s:4693   .text:00000000000821f6 SCANP6
           tutor13.s:4675   .text:00000000000821ba SCANP4
           tutor13.s:4692   .text:00000000000821f4 SCANP7
           tutor13.s:4681   .text:00000000000821ce SCANP5
           tutor13.s:4687   .text:00000000000821e2 SCANP8
           tutor13.s:4710   .text:0000000000082200 NOPACMD
           tutor13.s:4708   .text:00000000000821fc PACMD
           tutor13.s:4711   .text:0000000000082202 SETCRTPR
           tutor13.s:4720   .text:000000000008220a EV
           tutor13.s:4723   .text:000000000008220e EV21
           tutor13.s:4740   .text:0000000000082230 GETFIELD
           tutor13.s:4725   .text:0000000000082212 EV15
           tutor13.s:4735   .text:0000000000082228 EV39
           tutor13.s:4748   .text:000000000008223c GETF305
           tutor13.s:4777   .text:0000000000082272 GETF333
           tutor13.s:4774   .text:000000000008226c GETF325
           tutor13.s:4758   .text:0000000000082250 GETF308
           tutor13.s:4760   .text:0000000000082250 GETF311
           tutor13.s:4767   .text:0000000000082260 GETF312
           tutor13.s:4816   .text:00000000000822b6 ER1
           tutor13.s:4771   .text:0000000000082266 GETF314
           tutor13.s:4770   .text:0000000000082264 GETF313
           tutor13.s:4779   .text:0000000000082274 XBASE
           tutor13.s:4787   .text:0000000000082274 FSIZE
           tutor13.s:4792   .text:000000000008227a GETREGD
           tutor13.s:4795   .text:0000000000082282 GET41
           tutor13.s:4803   .text:0000000000082294 GETREGA
           tutor13.s:4809   .text:00000000000822a2 GETREGAD
           tutor13.s:5615   .text:0000000000082b2c ER
           tutor13.s:4818   .text:00000000000822ba EADA
           tutor13.s:4861   .text:00000000000822e2 EA
           tutor13.s:4821   .text:00000000000822c0 EAC
           tutor13.s:4824   .text:00000000000822c6 EAM
68K GAS  tutor13.s 			page 188


           tutor13.s:4827   .text:00000000000822cc EAZ
           tutor13.s:4830   .text:00000000000822d2 EADADDR
           tutor13.s:4833   .text:00000000000822d8 EAA
           tutor13.s:4836   .text:00000000000822de EAALL
           tutor13.s:4903   .text:0000000000082334 EA10
           tutor13.s:4888   .text:0000000000082310 EA0633
           tutor13.s:4894   .text:0000000000082320 EA0635
           tutor13.s:4898   .text:0000000000082328 EA0637
           tutor13.s:5199   .text:000000000008254a EA16BIT
           tutor13.s:4889   .text:0000000000082314 EA0634
           tutor13.s:5213   .text:0000000000082560 EA8BIT
           tutor13.s:4923   .text:0000000000082360 EA11
           tutor13.s:4995   .text:00000000000823d2 EA41
           tutor13.s:4981   .text:00000000000823ce ER3
           tutor13.s:4934   .text:0000000000082378 EA21
           tutor13.s:4944   .text:000000000008238c EA31
           tutor13.s:5075   .text:0000000000082472 EA5116
           tutor13.s:4977   .text:00000000000823c4 EA35
           tutor13.s:4975   .text:00000000000823c2 EA34
           tutor13.s:5007   .text:00000000000823e6 EA4102
           tutor13.s:5039   .text:0000000000082428 EA4120
           tutor13.s:5010   .text:00000000000823ec EA4105
           tutor13.s:5031   .text:0000000000082412 EA4135
           tutor13.s:5021   .text:0000000000082402 EA4127
           tutor13.s:5118   .text:00000000000824c4 EA61
           tutor13.s:5207   .text:0000000000082554 EA16BITS
           tutor13.s:5072   .text:000000000008246e EA5115
           tutor13.s:5139   .text:00000000000824f2 ER4
           tutor13.s:5599   .text:0000000000082b12 COMMA
           tutor13.s:5219   .text:0000000000082568 EA8BITS
           tutor13.s:5112   .text:00000000000824b8 EA5119
           tutor13.s:5109   .text:00000000000824b2 EA5118
           tutor13.s:5115   .text:00000000000824c2 EA5119E
           tutor13.s:5142   .text:00000000000824f6 EA71
           tutor13.s:5178   .text:000000000008253e EA7115
           tutor13.s:5175   .text:0000000000082538 EA7113
           tutor13.s:5210   .text:0000000000082558 EA16BITC
           tutor13.s:5235   .text:000000000008257c EASEX
           tutor13.s:5226   .text:000000000008256e EAS
           tutor13.s:5223   .text:000000000008256c EA8BITC
                            *ABS*:0000000000000000 ADR
           tutor13.s:5241   .text:000000000008257e TBLKEYS
           tutor13.s:5655   .text:0000000000082b6c MABCD
           tutor13.s:5743   .text:0000000000082c24 MADD
           tutor13.s:5829   .text:0000000000082ccc MADDA
           tutor13.s:5793   .text:0000000000082c7e MADDI
           tutor13.s:5847   .text:0000000000082cf4 MADDQ
           tutor13.s:5880   .text:0000000000082d36 MADDX
           tutor13.s:5913   .text:0000000000082d78 MAND
           tutor13.s:5987   .text:0000000000082e26 MASL
           tutor13.s:6103   .text:0000000000082f12 MDBCC
           tutor13.s:6044   .text:0000000000082e96 MBCHG
           tutor13.s:6113   .text:0000000000082f20 MBRA
           tutor13.s:6085   .text:0000000000082eee MBSET
           tutor13.s:6153   .text:0000000000082f78 MCHK
           tutor13.s:6167   .text:0000000000082f92 MCLR
           tutor13.s:6175   .text:0000000000082fa0 MCMPM
68K GAS  tutor13.s 			page 189


           tutor13.s:6395   .text:0000000000083180 MMOVEQ
           tutor13.s:6192   .text:0000000000082fca MEXG
           tutor13.s:6225   .text:0000000000083004 MEXT
           tutor13.s:6566   .text:0000000000083314 MJMP
           tutor13.s:6583   .text:0000000000083340 MLEA
           tutor13.s:6619   .text:000000000008338a MLINK
           tutor13.s:6428   .text:00000000000831cc MMOVE
           tutor13.s:5623   .text:0000000000082b3a MCMMD2
           tutor13.s:6632   .text:00000000000833a8 MSTOP
           tutor13.s:6604   .text:0000000000083368 MSWAP
           tutor13.s:6641   .text:00000000000833c0 MTRAP
           tutor13.s:6648   .text:00000000000833d2 MUNLK
           tutor13.s:6236   .text:000000000008301e MMOVEM
           tutor13.s:5807   .text:0000000000082c94 MANDI
           tutor13.s:6038   .text:0000000000082e88 MSCC
           tutor13.s:6091   .text:0000000000082efa MBCLR
           tutor13.s:6097   .text:0000000000082f06 MBTST
           tutor13.s:6545   .text:00000000000832e8 MMOVEA
           tutor13.s:6352   .text:000000000008311e MMOVEP
           tutor13.s:5689   .text:0000000000082bb2 MCMP
           tutor13.s:5955   .text:0000000000082dda MEOR
           tutor13.s:6597   .text:000000000008335a MPEA
           tutor13.s:6654   .text:00000000000833dc MDC
                            *ABS*:0000000000000000 OPC
           tutor13.s:5294   *ABS*:0000000000000080 NOC
           tutor13.s:5295   *ABS*:0000000000000040 NW
           tutor13.s:5297   .text:00000000000826b2 TBLOPC
           tutor13.s:5419   .text:00000000000829b6 TBLOPCE
           tutor13.s:5435   *ABS*:0000000000000050 OUTBSIZE
           tutor13.s:5436   *ABS*:000000000000000a FDATA
           tutor13.s:5437   *ABS*:000000000000001f FOL
           tutor13.s:5438   *ABS*:000000000000001f FOC
           tutor13.s:5439   *ABS*:0000000000000027 FOP
           tutor13.s:5449   .text:00000000000829c8 M300
           tutor13.s:5617   .text:0000000000082b30 ERDONE
           tutor13.s:5479   .text:0000000000082a14 M340
           tutor13.s:5608   .text:0000000000082b22 GETCHARF
           tutor13.s:5484   .text:0000000000082a20 M350
           tutor13.s:5501   .text:0000000000082a54 M352
           tutor13.s:5613   .text:0000000000082b2a ERF
           tutor13.s:5506   .text:0000000000082a5e M410
           tutor13.s:5509   .text:0000000000082a66 M415
           tutor13.s:5518   .text:0000000000082a78 M420
           tutor13.s:5532   .text:0000000000082a90 M430
           tutor13.s:5522   .text:0000000000082a80 M426
           tutor13.s:5520   .text:0000000000082a7c M424
           tutor13.s:5527   .text:0000000000082a8a M428
           tutor13.s:5537   .text:0000000000082a9e M432
           tutor13.s:5563   .text:0000000000082ad2 M4326
           tutor13.s:5561   .text:0000000000082acc M4324
           tutor13.s:5590   .text:0000000000082b06 M440
           tutor13.s:5580   .text:0000000000082af0 M435
           tutor13.s:5584   .text:0000000000082af8 M437
           tutor13.s:5603   .text:0000000000082b1a GETCHAR
           tutor13.s:5638   .text:0000000000082b58 CMMD35
           tutor13.s:5620   .text:0000000000082b34 CMMD2
           tutor13.s:5631   .text:0000000000082b4c FPR315
68K GAS  tutor13.s 			page 190


           tutor13.s:5660   .text:0000000000082b7a MABCD9
           tutor13.s:5684   .text:0000000000082ba8 MABCD55
           tutor13.s:5687   .text:0000000000082bb0 CMMD2S10
           tutor13.s:5741   .text:0000000000082c20 COMMAS20
           tutor13.s:5835   .text:0000000000082cd6 MADDA21
           tutor13.s:5733   .text:0000000000082c10 MCMP56
           tutor13.s:5727   .text:0000000000082c08 MCMP39
           tutor13.s:5739   .text:0000000000082c1e CMMD2S11
           tutor13.s:5779   .text:0000000000082c62 MADD56
           tutor13.s:5770   .text:0000000000082c56 MADD46
           tutor13.s:5785   .text:0000000000082c72 MADD58
           tutor13.s:5821   .text:0000000000082cae MANDI23
           tutor13.s:6613   .text:000000000008337c GETIMM
           tutor13.s:5874   .text:0000000000082d32 MADDQ25
           tutor13.s:5905   .text:0000000000082d6c MADDX5
           tutor13.s:5947   .text:0000000000082dc2 MAND90
           tutor13.s:5974   .text:0000000000082e06 A5TODEST
           tutor13.s:5937   .text:0000000000082dac MAND77
           tutor13.s:5952   .text:0000000000082dd4 MAND97
           tutor13.s:5951   .text:0000000000082dd0 MAND91
           tutor13.s:5970   .text:0000000000082dfa MEOR90
           tutor13.s:5975   .text:0000000000082e08 A5300
           tutor13.s:5979   .text:0000000000082e14 A5305
           tutor13.s:6015   .text:0000000000082e5a MSL200
           tutor13.s:6005   .text:0000000000082e44 MSL150
           tutor13.s:6025   .text:0000000000082e6c MSL300
           tutor13.s:6072   .text:0000000000082ed6 ER2
           tutor13.s:6422   .text:00000000000831be SIZEBYTE
           tutor13.s:6079   .text:0000000000082ee4 MB200
           tutor13.s:6050   .text:0000000000082ea0 MB100
           tutor13.s:6059   .text:0000000000082eb8 MB105
           tutor13.s:6077   .text:0000000000082ee0 MB185
           tutor13.s:6074   .text:0000000000082eda MB145
           tutor13.s:6139   .text:0000000000082f5a EVSR
           tutor13.s:6127   .text:0000000000082f3a MBRA23
           tutor13.s:6125   .text:0000000000082f36 EVER
           tutor13.s:6131   .text:0000000000082f48 MBRA27
           tutor13.s:6418   .text:00000000000831b2 SIZEWORD
           tutor13.s:6412   .text:00000000000831a2 SIZELONG
           tutor13.s:6218   .text:0000000000082ff6 MEXG35
           tutor13.s:6213   .text:0000000000082fec MEXG25
           tutor13.s:6264   .text:0000000000083058 MMM44
           tutor13.s:6282   .text:000000000008307e MMM48
           tutor13.s:6267   .text:0000000000083058 MMM46
           tutor13.s:6285   .text:0000000000083082 RL111
           tutor13.s:6290   .text:0000000000083092 RL114
           tutor13.s:6292   .text:0000000000083094 RL115
           tutor13.s:6304   .text:00000000000830ae RL444
           tutor13.s:6298   .text:00000000000830a2 RL333
           tutor13.s:6333   .text:00000000000830f2 SETBIT
           tutor13.s:6327   .text:00000000000830e4 RL666
           tutor13.s:6320   .text:00000000000830d8 RL555
           tutor13.s:6344   .text:000000000008310e MTBL
           tutor13.s:6339   .text:0000000000083106 RL30
           tutor13.s:6375   .text:0000000000083150 MMP344
           tutor13.s:6382   .text:0000000000083160 MMP348
           tutor13.s:6393   .text:000000000008317c MMP368
68K GAS  tutor13.s 			page 191


           tutor13.s:6408   .text:000000000008319a MMQ20
           tutor13.s:6416   .text:00000000000831b0 SI201
           tutor13.s:6420   .text:00000000000831ba ER10
           tutor13.s:6426   .text:00000000000831ca SI222
           tutor13.s:6444   .text:00000000000831ee MMM40
           tutor13.s:6440   .text:00000000000831e6 MM315
           tutor13.s:6459   .text:0000000000083210 MMM50
           tutor13.s:6479   .text:000000000008323e MMM60
           tutor13.s:6472   .text:000000000008322c MM508
           tutor13.s:6486   .text:0000000000083252 MM70
           tutor13.s:6500   .text:0000000000083280 MM80
           tutor13.s:6507   .text:0000000000083298 MM804
           tutor13.s:6519   .text:00000000000832b6 MM806
           tutor13.s:6542   .text:00000000000832e0 MMOVEA1
           tutor13.s:6533   .text:00000000000832ce MM825
           tutor13.s:6555   .text:0000000000083300 MMA225
           tutor13.s:6578   .text:0000000000083336 MJMP32
           tutor13.s:6575   .text:0000000000083330 MJMP22
           tutor13.s:6579   .text:000000000008333a MJMP42
           tutor13.s:6688   .text:00000000000833ec X
           tutor13.s:6701   .text:00000000000833ec IMOVEMFR
           tutor13.s:7775   .text:0000000000083b0c MOVEMS
           tutor13.s:6713   .text:0000000000083400 IM7788
           tutor13.s:6715   .text:0000000000083404 IM7799
           tutor13.s:7785   .text:0000000000083b20 MOVEMR
           tutor13.s:7543   .text:000000000008394a EEA
           tutor13.s:6740   .text:0000000000083436 CS16
           tutor13.s:6729   .text:000000000008341c IMOVEMTR
           tutor13.s:6791   .text:00000000000834a4 CS15
           tutor13.s:6744   .text:0000000000083438 ISTOP
           tutor13.s:7936   .text:0000000000083c38 COMMON4
           tutor13.s:6753   .text:000000000008344c IMMED
           tutor13.s:7487   .text:00000000000838c0 FORMSIZE
           tutor13.s:6796   .text:00000000000834ac IMMED65
           tutor13.s:6804   .text:00000000000834bc IMMED75
           tutor13.s:6771   .text:0000000000083472 IMMED45
           tutor13.s:6793   .text:00000000000834a6 IMMED55
           tutor13.s:7960   .text:0000000000083c62 FERROR
           tutor13.s:6838   .text:00000000000834e4 CS14
           tutor13.s:6816   .text:00000000000834c0 IMOVE
           tutor13.s:7433   .text:0000000000083864 IMOVEA1
           tutor13.s:6821   .text:00000000000834c4 ILINK
           tutor13.s:6895   .text:0000000000083524 FORMREGA
           tutor13.s:6833   .text:00000000000834dc FORM1
           tutor13.s:6837   .text:00000000000834e0 FORM1A
           tutor13.s:6932   .text:0000000000083554 CS13
           tutor13.s:6842   .text:00000000000834e8 FORM3
           tutor13.s:6901   .text:0000000000083534 FORMREGD
           tutor13.s:6848   .text:00000000000834ec FORM4
           tutor13.s:6857   .text:0000000000083500 FORM5
           tutor13.s:6867   .text:0000000000083504 FORM6A
           tutor13.s:6945   .text:000000000008355e EEA10
           tutor13.s:6884   .text:0000000000083514 FORM6D
           tutor13.s:6896   .text:0000000000083528 FORMREG5
           tutor13.s:6909   .text:000000000008353c FORM7
           tutor13.s:6924   .text:0000000000083548 FORM8
           tutor13.s:6928   .text:000000000008354c FORM815
68K GAS  tutor13.s 			page 192


           tutor13.s:7030   .text:00000000000835d6 CS12
           tutor13.s:6940   .text:0000000000083558 FORM9
           tutor13.s:6963   .text:0000000000083564 FORM10EX
           tutor13.s:7009   .text:00000000000835aa FORM103
           tutor13.s:6977   .text:0000000000083586 FORM10E3
           tutor13.s:6989   .text:000000000008359a FORM10E6
           tutor13.s:6980   .text:000000000008358e FORM10E4
           tutor13.s:7020   .text:00000000000835c0 FORM105
           tutor13.s:7010   .text:00000000000835ae FORM104
           tutor13.s:7005   .text:00000000000835a4 FORM10
           tutor13.s:7938   .text:0000000000083c3a COMMON
           tutor13.s:7035   .text:00000000000835dc FORM11
           tutor13.s:7042   .text:00000000000835e8 FORM11SL
           tutor13.s:7048   .text:00000000000835fc FORM112
           tutor13.s:7052   .text:000000000008360a FORM114
           tutor13.s:7067   .text:000000000008360c FORM12
           tutor13.s:7082   .text:0000000000083626 FORM125
           tutor13.s:7119   .text:000000000008366c CS11
           tutor13.s:7146   .text:000000000008368c SCHR
           tutor13.s:7105   .text:0000000000083648 FORM12A
           tutor13.s:7123   .text:0000000000083670 IQUICK
           tutor13.s:7459   .text:0000000000083890 IQUICKA
           tutor13.s:7132   .text:0000000000083674 IMOVEQ
           tutor13.s:7155   .text:0000000000083694 IMVFSR
           tutor13.s:7165   .text:00000000000836a4 IMVFUSP
           tutor13.s:7174   .text:00000000000836b4 IMVTSR
           tutor13.s:7177   .text:00000000000836c2 IMVT44
           tutor13.s:7184   .text:00000000000836c8 IMVTUSP
           tutor13.s:7192   .text:00000000000836d4 IMVTCCR
           tutor13.s:7208   .text:00000000000836e4 IMOVEP
           tutor13.s:7214   .text:00000000000836f4 IMOVEP11
           tutor13.s:7230   .text:0000000000083710 IMOVEP35
           tutor13.s:7239   .text:000000000008371e IMOVEP66
           tutor13.s:7228   .text:000000000008370c CS20
           tutor13.s:7252   .text:000000000008373c SCOMMON
           tutor13.s:7256   .text:0000000000083740 ISCC
           tutor13.s:7398   .text:000000000008382c ICCCC
           tutor13.s:7262   .text:000000000008374c IDBCC
           tutor13.s:7303   .text:000000000008378c ICC55
           tutor13.s:7280   .text:0000000000083760 ICC
           tutor13.s:7283   .text:0000000000083764 IBSR
           tutor13.s:7292   .text:0000000000083776 ICC35
           tutor13.s:7311   .text:000000000008379c ISETD
           tutor13.s:7315   .text:00000000000837a2 ISETD12
           tutor13.s:7319   .text:00000000000837aa CS18
           tutor13.s:7327   .text:00000000000837ac ISETS
           tutor13.s:7354   .text:00000000000837c8 ISHIFT
           tutor13.s:7359   .text:00000000000837d4 ISHIFT13
           tutor13.s:7388   .text:0000000000083812 ISHIFTM1
           tutor13.s:7380   .text:0000000000083804 ISHIFT33
           tutor13.s:7375   .text:00000000000837f8 ISHIFT23
           tutor13.s:7382   .text:0000000000083808 ISHIFT44
           tutor13.s:7386   .text:0000000000083810 CS17
           tutor13.s:7410   .text:0000000000083844 BRTBL
           tutor13.s:7408   .text:0000000000083842 ICCCC9
           tutor13.s:7453   .text:000000000008388a IMOVE19
           tutor13.s:7479   .text:00000000000838bc CS19
68K GAS  tutor13.s 			page 193


           tutor13.s:7467   .text:00000000000838a2 IQUICK21
           tutor13.s:7478   .text:00000000000838b8 IQUICK31
           tutor13.s:7496   .text:00000000000838d4 FORM91
           tutor13.s:7503   .text:00000000000838ea FORM95
           tutor13.s:7502   .text:00000000000838e8 FORM93
           tutor13.s:7536   .text:0000000000083946 FE10
           tutor13.s:7505   .text:00000000000838ec EA000
           tutor13.s:7510   .text:00000000000838f8 EA001
           tutor13.s:7515   .text:0000000000083904 EA010
           tutor13.s:7522   .text:0000000000083918 EA011
           tutor13.s:7528   .text:000000000008392e EA011RTS
           tutor13.s:7530   .text:0000000000083930 EA100
           tutor13.s:7617   .text:00000000000839d2 EA101
           tutor13.s:7632   .text:00000000000839e8 EA111
           tutor13.s:7602   .text:00000000000839ae EA1105
           tutor13.s:7603   .text:00000000000839b2 EA1107
           tutor13.s:7610   .text:00000000000839c8 EA1109
           tutor13.s:7665   .text:0000000000083a2e FE11
           tutor13.s:7646   .text:0000000000083a06 EA1112
           tutor13.s:7660   .text:0000000000083a22 EA1113
           tutor13.s:7679   .text:0000000000083a54 EA1114
           tutor13.s:7666   .text:0000000000083a32 EA1113A
           tutor13.s:7737   .text:0000000000083abe EA1115
           tutor13.s:7718   .text:0000000000083a9c EAF25
           tutor13.s:7719   .text:0000000000083aa0 EAF27
           tutor13.s:7728   .text:0000000000083ab4 EAF35
           tutor13.s:7770   .text:0000000000083b00 EA11155
           tutor13.s:7765   .text:0000000000083af6 EA11153
           tutor13.s:7780   .text:0000000000083b1c MOVEMS2
           tutor13.s:7793   .text:0000000000083b30 MOVEMR11
           tutor13.s:7816   .text:0000000000083b64 MOVEMR77
           tutor13.s:7805   .text:0000000000083b4a MOVEMR44
           tutor13.s:7799   .text:0000000000083b38 MOVEMR33
           tutor13.s:7826   .text:0000000000083b78 MOVEMR88
           tutor13.s:7824   .text:0000000000083b76 MOVEMR79
           tutor13.s:7839   .text:0000000000083b90 MOVEMR94
           tutor13.s:7854   .text:0000000000083bb0 DEC311
           tutor13.s:7983   .text:0000000000083c8c KI
           tutor13.s:7984   .text:0000000000083c8e KIEND
           tutor13.s:7868   .text:0000000000083bd0 DEC404
           tutor13.s:7884   .text:0000000000083bee FE12
           tutor13.s:7997   .text:0000000000083c8e TBL
           tutor13.s:8085   .text:0000000000083e98 TBLE
           tutor13.s:7877   .text:0000000000083be0 DEC411
           tutor13.s:7886   .text:0000000000083bf0 DEC425
           tutor13.s:8092   .text:0000000000083e98 OPCTBL
           tutor13.s:7896   .text:0000000000083bfe DEC510
           tutor13.s:7903   .text:0000000000083c0a DEC530
           tutor13.s:7898   .text:0000000000083c02 DEC515
           tutor13.s:7905   .text:0000000000083c10 DEC535
           tutor13.s:7910   .text:0000000000083c1c DEC537
           tutor13.s:7945   .text:0000000000083c48 COMMON35
           tutor13.s:7980   .text:0000000000083c82 MSG111
           tutor13.s:7966   .text:0000000000083c6c FERROR35
           tutor13.s:7971   .text:0000000000083c78 FERROR39
                            *ABS*:0000000000000000 C68
                            *ABS*:0000000000000000 N68
68K GAS  tutor13.s 			page 194


           tutor13.s:8173   .text:0000000000083fa0 T100
           tutor13.s:8234   .text:0000000000083fe8 T500
           tutor13.s:8245   .text:0000000000084022 T600
           tutor13.s:8186   .text:0000000000083fb6 T400
           tutor13.s:8226   .text:0000000000083fd4 T450
           tutor13.s:8235   .text:0000000000083ffc SV327
           tutor13.s:8242   .text:0000000000084010 MSGT14
           tutor13.s:8248   .text:0000000000084028 T700
                            *ABS*:0000000000000000 FADDR
           tutor13.s:8268   .text:000000000008403c CT
           tutor13.s:8328   .text:00000000000840b0 F100
           tutor13.s:8331   .text:00000000000840b8 F110
           tutor13.s:8334   .text:00000000000840c0 F120
           tutor13.s:8346   *ABS*:0000000000000004 VERSION

NO UNDEFINED SYMBOLS
