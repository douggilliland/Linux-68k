/ Prime Number Program for EE432
/ Author: Tom Almy
/ To be used by the Cougar Team, Spring 2014

/ Constants:
decimal
maxroot=64
words=512
octal
DVI=7407	/ Code to generate divide instruction
MUL=7405    / Code for multiply instruction


*10
incval,	0	/ For autoincrementing
*20             / Our variables
checking, 0
multiple, 0
ii, 0
ptr, 0		/ Calculated memory location and mask
memmask, 0
*5000
sieve, 0	/ Sieve is 512 words, so location 5000 to 5777

*200		/ start of program
main,	CLA CLL
	TLS	/ Reset the TTY

/ Clear the array
	CLA
	TAD	(sieve-1)	/ put address of array-1 in incval
	DCA	incval
	TAD	(-words)	/ Put -size of array in i
	DCA	ii
loop1,	DCA	I incval	/ Store 0 in successive locations
	ISZ	ii		/ until end of array
	JMP	loop1

/ Do the marking
	CLA CLL IAC RAL		/ 2
	DCA	checking	/ initialize checking variable
loop2,	CLA
	TAD	checking	/ get checking variable
	JMS	calcpm
	TAD	I ptr		/ get memory word
	AND	memmask		/ get the bit
	SZA			/ skip if a prime
	JMP	notprime
	CLA			/ probably not needed
	TAD	checking	/ Initialize multiple
	DCA	multiple
loop3,	CLA CLL
	TAD	multiple
	TAD	checking	/ Go to multiple of prime
	SZL			/ skip if not at end
	JMP	notprime
	DCA	multiple
	TAD	multiple	/ Find array location for multiple
	JMS	calcpm
	TAD	memmask
	CMA
	DCA	memmask		/ complement the mask
	TAD	I ptr		/ get value from memory
	CMA			/ complement it
	AND	memmask		/ and and complement again to get OR
	CMA
	DCA	I ptr		/ put it back
	JMP	loop3		/ go to next multiple

notprime, ISZ	checking	/ go to next value to check
	CLA CLL
	TAD	checking	/ see if we have reached the end
	TAD	(-MAXROOT)	/ There will be a carry if we are done
	SNL
	JMP	loop2

/ Print out all the primes
	CLA CLL IAC RAL		/ 2
	DCA	checking	/ initialize checking variable
    TAD (-12)
    DCA ii          // values per line
loop4,	CLA
	TAD	checking	/ get value to check
	JMS	calcpm
	TAD	I ptr		/ get memory word
	AND	memmask		/ get the bit
	SZA			/ skip if a prime
	JMP	nextval
	CLA
	TAD	checking	/ get the prime
	MQL			/ into MQ

	/ Test value to avoid leading zeroes.
	CLL CLA
	TAD	checking
	TAD	(-12)		/ Compare to 10
	SNL			/ skip if >= 10
	JMP	LT10
	CLL CLA
	TAD	checking
	TAD	(-144)		/ Compare to 100
	SNL
	JMP	LT100
	CLL CLA
	TAD	checking
	TAD	(-1750)		/ Compare to 1000
	SNL
	JMP	LT1000

	CLA DVI ; 1750		/ Divide by 1000
	MQA MQL			/ remainder to MQ, quotient in AC
	TAD	("0)
	JMS	putc
LT1000,	CLA DVI ; 144		/ Divide by 100
	MQA MQL			/ remainder to MQ, quotient in AC
	TAD	("0)
	JMS	putc
LT100,	CLA DVI ; 12		/ Divide by 10
	MQA MQL			/ remainder to MQ, quotient in AC
	TAD	("0)
	JMS	putc
LT10,	CLA MQA			/ Get MQ
	TAD	("0)
	JMS	putc
	CLA
	TAD	(40)		/ Space character
	JMS	putc
    ISZ ii          / end of line?
    JMP nextval     / branch if not
    CLA
    TAD (15)        / carriage return
    JMS putc
    CLA
    TAD (12)        / line feed
    JMS putc
    CLA
    TAD (-12)
    DCA ii          // reset for another 8 values

nextval, ISZ	checking	/ go to the next value skip when finished
	JMP	loop4
	HLT

PAGE
/ SUBROUTINES
calcpm, 0	/ Calculate ptr and memmask value
	DCA     saveval
	TAD	saveval
	CLL RTR		/ shift right 3 times
	RAR
	AND	(777)	/ Mask to get displacement into array
	TAD	(sieve)	/ Add starting address
	DCA	ptr
	TAD	saveval	/ get back starting value
	AND	(7)	/ Mask it to get index into word
	CLL CMA		/ complement without increment, clear link
	DCA	saveval
	CLA IAC		/ load 1 into AC
	JMP calcp2
calcp1, RAL		/ rotate left
calcp2, ISZ	saveval	/ increment count and skip if zero
	JMP	calcp1
	DCA	memmask
	JMP	I calcpm

saveval, 0

putc, 0		/ Write character in AC to terminal
    AND  (177)
	TSF
	JMP .-1
	TLS
	JMP I putc

$main
