/ Prime Number Program for EE432
/ Author: Tom Almy
/ To be used by the Cougar Team, Spring 2014

/ Constants:
decimal
maxroot=64
words=512
octal
DVI=7407	/ Code to generate divide instruction
MUL=7405    / Code for multiply instruction


*10
incval,	0	/ For autoincrementing
*20             / Our variables
checking, 0
multiple, 0
ii, 0
ptr, 0		/ Calculated memory location and mask
memmask, 0
*5000
sieve, 0	/ Sieve is 512 words, so location 5000 to 5777

*200		/ start of program
main,	CLA CLL
	TLS	/ Reset the TTY

/ Clear the array
	CLA
	TAD	(sieve-1)	/ put address of array-1 in incval
	DCA	incval
	TAD	(-words)	/ Put -size of array in i
	DCA	ii
loop1,	DCA	I incval	/ Store 0 in successive locations
	ISZ	ii		/ until end of array
	JMP	loop1

/ Do the marking
	CLA CLL IAC RAL		/ 2
	DCA	checking	/ initialize checking variable
loop2,	CLA
	TAD	checking	/ get checking variable
	JMS	calcpm
	TAD	I ptr		/ get memory word
	AND	memmask		/ get the bit
	SZA			/ skip if a prime
	JMP	notprime
	CLA			/ probably not needed
	TAD	checking	/ Initialize multiple
	DCA	multiple
loop3,	CLA CLL
	TAD	multiple
	TAD	checking	/ Go to multiple of prime
	SZL			/ skip if not at end
	JMP	notprime
	DCA	multiple
	TAD	multiple	/ Find array location for multiple
	JMS	calcpm
	TAD	memmask
	CMA
	DCA	memmask		/ complement the mask
	TAD	I ptr		/ get value from memory
	CMA			/ complement it
	AND	memmask		/ and and complement again to get OR
	CMA
	DCA	I ptr		/ put it back
	JMP	loop3		/ go to next multiple

notprime, ISZ	checking	/ go to next value to check
	CLA CLL
	TAD	checking	/ see if we have reached the end
	TAD	(-MAXROOT)	/ There will be a carry if we are done
	SNL
	JMP	loop2

/ Print out all the primes
	CLA CLL IAC RAL		/ 2
	DCA	checking	/ initialize checking variable
    TAD (-12)
    DCA ii          // values per line
loop4,	CLA
	TAD	checking	/ get value to check
	JMS	calcpm
	TAD	I ptr		/ get memory word
	AND	memmask		/ get the bit
	SZA			/ skip if a prime
	JMP	nextval
	CLA
	TAD	checking	/ get the prime
	MQL			/ into MQ

	/ Test value to avoid leading zeroes.
	CLL CLA
	TAD	checking
	TAD	(-12)		/ Compare to 10
	SNL			/ skip if >= 10
	JMP	LT10
	CLL CLA
	TAD	checking
	TAD	(-144)		/ Compare to 100
	SNL
	JMP	LT100
	CLL CLA
	TAD	checking
	TAD	(-1750)		/ Compare to 1000
	SNL
	JMP	LT1000

	CLA DVI ; 1750		/ Divide by 1000
	MQA MQL			/ remainder to MQ, quotient in AC
	TAD	("0)
	JMS	putc
LT1000,	CLA DVI ; 144		/ Divide by 100
	MQA MQL			/ remainder to MQ, quotient in AC
	TAD	("0)
	JMS	putc
LT100,	CLA DVI ; 12		/ Divide by 10
	MQA MQL			/ remainder to MQ, quotient in AC
	TAD	("0)
	JMS	putc
LT10,	CLA MQA			/ Get MQ
	TAD	("0)
	JMS	putc
	CLA
	TAD	(40)		/ Space character
	JMS	putc
    ISZ ii          / end of line?
    JMP nextval     / branch if not
    CLA
    TAD (15)        / carriage return
    JMS putc
    CLA
    TAD (12)        / line feed
    JMS putc
    CLA
    TAD (-12)
    DCA ii          // reset for another 8 values

nextval, ISZ	checking	/ go to the next value skip when finished
	JMP	loop4
	HLT

PAGE
/ SUBROUTINES
calcpm, 0	/ Calculate ptr and memmask value
	DCA     saveval
	TAD	saveval
	CLL RTR		/ shift right 3 times
	RAR
	AND	(777)	/ Mask to get displacement into array
	TAD	(sieve)	/ Add starting address
	DCA	ptr
	TAD	saveval	/ get back starting value
	AND	(7)	/ Mask it to get index into word
	CLL CMA		/ complement without increment, clear link
	DCA	saveval
	CLA IAC		/ load 1 into AC
	JMP calcp2
calcp1, RAL		/ rotate left
calcp2, ISZ	saveval	/ increment count and skip if zero
	JMP	calcp1
	DCA	memmask
	JMP	I calcpm

saveval, 0

putc, 0		/ Write character in AC to terminal
    AND  (177)
	TSF
	JMP .-1
	TLS
	JMP I putc
/ https://homepage.divms.uiowa.edu/~jones/pdp8/
/	PAPER TAPE BINARY AND RIM LOADERS FOR PAPER TAPE INPUT
/	BASED ON CODE PLACED IN PUBLIC DOMAIN BY C. J. LASNER
/	DERIVED BY CJL FROM DEC'S BIN LOADERS FOR USE IN P?S/8
/	MODIFIED FOR STAND-ALONE USE BY D. W. JONES

/	I/O INSTRUCTIONS USED.  COMMENT OUT ALL BUT ONE VERSION

/	TTY INPUT
/KSFIOT= KSF
/KRBIOT= KRB
/KCCIOT= KCC
/KRSIOT= KRS

/	HIGH SPEED READER INPUT
KSFIOT= RSF
KRBIOT= RFC RRB
KCCIOT= RFC
KRSIOT= RRB

* 7647	/HISTORICAL STARTING LOCATION MAY BE AS LOW AS 7625
	/RANGE 07600-07642 AVAILABLE FOR DISK BOOT ROUTINE

/	/	/	/	/	/	/	/
/       ROUTINE TO GET AND DECODE FRAME OF TAPE
/	SKIPS NEXT INSTRUCTION IF DATA OR ORIGIN WORD
/	RETURN DIRECTLY IF LEADER
/	PROCESS ORIGIN SETTING AND GET NEXT FRAME
/	ON RETURN, AC=0 ALWAYS
/	WHAT A KLUGE!

BEGG,	.-.			/HISTORICAL NAME
BEGG1,	JMS	BNREAD		/GET A FRAME
	TAD     BNHLT /(7402)   /TEST FOR ERROR (HIGH BITS)
	SPA SNA CLA             /SKIP IF (FRAME+7402) > 0
BNLINE, JMP     BGOOD           /JUMP IF NO
/				/
	HLT			/HERE IF ERROR
        JMP     BEGG1           /GET MORE CHARACTERS

BGOOD,  TAD     BCHAR           /\
        AND     BN300  /(300)	/ \
        TAD     BN7600 /(-200)	/  >BUMP RETURN IF DATA
	SPA                     / /             OR ORIGIN
        ISZ     BEGG            //
        SPA SNA CLA             /RETURN IF NOT FIELD SETTING
	JMP I   BEGG		/RETURN IF LEADER, SKIP RETURN
        TAD     BCHAR           /\           IF DATA OR ORIGIN
BN300,  AND     BFMASK /(70)	/ \
        TAD     BNCDF  /(CDF)	/  >PROCESS FIELD SETTINGS
        DCA     BMTEM           / /
        JMP     BEGG1           //

/	/	/	/	/	/	/	/
/       ROUTINE TO GET ONE FRAME TO AC AND BCHAR

BNREAD, .-.
        KSFIOT
        JMP     .-1             /WAIT FOR INPUT
        KRBIOT
        DCA     BCHAR           /SAVE FRAME
        TAD     BCHAR           /GET IT BACK
        JMP I   BNREAD          /RETURN

BFMASK, 70                      /HARMLESS AND
BNCDF,  CDF     00              /CDF CONSTANT

/	/	/	/	/	/	/	/
/       PROCESS END OF TAPE

BEND,   JMS     BASEMB          /GOT TRAILER, DO LAST WORD
        CIA                     /INVERT FOR CHECKSUM COMPARISON
BIPZP1, TAD     BCHKSM
BNHLT,  HLT                     /AC EQUALS ZERO IF NO ERRORS

/	/	/	/	/	/	/	/
/       MAIN PROGRAM

BBEGIN, KCCIOT			/START OF PROGRAM
BN7600, 7600			/GROUP 2 CLA USED AS CONSTANT
	RDF			/\
	TAD     BNCDF /(CDF)	/ >SETUP INITIAL LOADING FIELD
	DCA     BMTEM		//
BAUTO,  JMS     BEGG		/GET A FRAME
        JMP     .-1		/IGNORE LEADER
BEGO,   DCA     BCHKSM		/ZERO OR ADD TO CHECKSUM
	TAD     BMTEM		/SET UP
	DCA     BLODIT		/DESIRED FIELD
	TAD     BCHAR		/SAVE AS
	DCA     BWORD1		/FIRST FRAME
	JMS     BNREAD		/GET NEXT
	DCA     BWORD2		/SAVE AS SECOND FRAME
	JMS     BEGG		/GET NEXT FRAME
	JMP     BEND		/TRAILER, GO FINISH UP
	JMS     BASEMB		/
BLODIT, HLT			/CDF INTO LOADING FIELD
	SNL			/SKIP IF ORIGIN SETTING
	DCA I   RORG		/STORE THE WORD IF DATA
	ISZ     RORG		/PUSH POINTER
	SZL			/NOP NOT NEEDED; SKIP IF ORIGIN
	DCA     RORG		/SAVE ORIGIN
BCHEX,  TAD     BWORD1		/NOT RICE, CORN OR WHEAT
        TAD     BWORD2		/ADD LATEST WORDS
        TAD     BCHKSM		/AND CHECKSUM
        JMP     BEGO		/ACCUMULATE AND DO NEXT

/	/	/	/	/	/	/	/
/	ASSEMBLE A WORD FROM 2 FRAMES
/	AC = 0 ON ENTRY, AC = ASSEMBLED WORD ON EXIT
/	LINK = ORIGIN SETTING BIT ON EXIT

BASEMB, .-.
	TAD     BWORD1		/GET FIRST FRAME
	CLL RTL;RTL;RTL		/SHIFT LEFT 6
	TAD     BWORD2		/ADD ON SECOND FRAME
	JMP I   BASEMB		/RETURN

/	/	/	/	/	/	/	/

BCHAR,  .-.			/INPUT BUFFER
BMTEM,  .-.			/FIELD TEMPORARY
BCHKSM, .-.			/CHECKSUM
BWORD1, .-.                     /FRAME 1 TEMPORARY
BWORD2, .-.			/FRAME 2 TEMPORARY

/       THE RIM LOADER FOLLOWS IN 7756-7775

RORG=	7776			/USED BY RIM AND BIN FOR ORIGIN

* 7777	/ FINAL WORD OF CORE (AFTER RIM) JUMPS TO BIN
        JMP     BBEGIN          /START BINARY LOADER
		
/ https://homepage.divms.uiowa.edu/~jones/pdp8/
/	RIM LOADERS FOR PAPER TAPE INPUT

/UNCOMMENT FOLLOWING FOR TTY INPUT
/KSFIOT= KSF
/KRBIOT= KRB
/KCCIOT= KCC
/KRSIOT= KRS
/HSR=    0

/UNCOMMENT FOLLOWING FOR HIGH SPEED READER INPUT
KSFIOT= RSF
KRBIOT= RRB RFC
KCCIOT= RFC
KRSIOT= RRB RFC
HSR=    1

/ FIXUP TO CHANGE BRANCH TARGET FROM TTYC TO HSRC
HSRF=	HSRC-TTYC^HSR

*7756
BEG,	KCCIOT		/ INITIALIZE READER
TTYC,	KSFIOT		/ AWAIT INPUT
	JMP	TTYC
	KRBIOT		/ GET A CHARACTER
	CLL RTL
	RTL
	SPA		/ SKIP IF HIGH BIT OF 8 BIT CHAR RESET
	JMP	TTYC+HSRF	/ ELSE LOOP (SKIPPING LEADER)
	RTL		/ 6 BIT CHAR IN AC[0-5], LINK=BIT 7
	KSFIOT		/ AWAIT INPUT
	JMP	.-1	
	KRSIOT		/ OR 6 BIT CHAR INTO AC[6-12]
	SNL		/ SKIP NEXT IF BIT 7 OF CHAR 1 WAS SET
	DCA I	TEMP	/ STORE DATA
HSRC,	DCA	TEMP	/ SET ADDRESS OF NEXT DATA WORD
	JMP	BEG+HSR	/ GO GET NEXT DATA WORD
TEMP,	.-.		/ ADDRESS OF NEXT DATA WORD

$main
