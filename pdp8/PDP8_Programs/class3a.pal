MUY=7405
DVI=7407
*10
auto,   0
*20
a1, 10          / global variables
a2, 100
a3, 1000
a4, 0
cnt, 0
a5, 0
a6, 0
a7, 0
a8, 0

*200            / page 1
    CLA
    TAD     a1
    TAD     a2  / a1+a2 in AC
    DCA     a3  / a3 <= a1+a2
    TAD     a1  / Now calculate a2-a1 and store in a4
    CMA IAC     / -a1
    TAD     a2
    DCA     a4
/ Clear 8 locations starting at lbl
    TAD     (lbl-1)     / get value of lbl-1
    DCA     auto
    TAD     (-10)       / minus number of locations to fill
    DCA     cnt
loop, DCA   I auto
    ISZ     cnt
    JMP     loop
/ Store 1 left shifted by 3
    TAD     [3]
    JMS     mask
    DCA     a5
/ Store 3 * 4 in a6
    TAD     [3]
    JMS     mult
    DCA     a6
/ Divide 100001 by 10 decimal (overflows)
    TAD     [3241]
    MQL
    TAD     [30]
    DVI ; 12 
    SNL     / link should be one
    HLT
/ Divide 100001 by 1000
    CLA
    TAD     [3241]
    MQL
    TAD     [30]
    DVI ; 1750 
    SZL     / link should be zero
    HLT
    DCA     a7  / remainder is a 1
    MQA
    DCA     a8  / quotient is 100decimal, 144 octal

    HLT
    HLT

*400
mult,   0               / Multiply subroutine AC by 4, product in AC
    MQL                 / load into MQ
    MUY ; 4             / multiply by 4
    MQA                 / MQ -> AC
    JMP I MULT
    
*600
mcnt,   0
mask,   0
    cll cma            / complement without increment, clear the link
    dca mcnt
    cla iac        / load 1 into AC
    jmp msk2
msk1,   ral        / rotate left

msk2,   isz mcnt       / increment count, skip if zero
    jmp msk1
    jmp i mask


*777
    7777;
lbl,    1;2;3;4;5;6;7;10;7777

$               / end of program
