== PDP-8 Example Programs ==

* This folder contains example programs from Tom Almy's PDP-8 book [https://www.amazon.com/PDP-8-Class-Project-Resoling-Machine-ebook/dp/B07KY5RCJ7/ref=sr_1_1?dchild=1&keywords=tom+almy+pdp-8&qid=1615991822&sr=8-1 The PDP-8 Class Project: Resoling An Old Machine]

== Build PDP-8 Assembler Tool ==

Notes from [https://github.com/douggilliland/Linux-68k/blob/master/pdp8/macro8x.c macro8x.c] source code

* This program has been built and successfully executed on:
** Linux (80486 CPU) using gcc
** RS/6000 (AIX 3.2.5)
** Borland C++ version 3.1 (large memory model)
** Borland C++ version 4.52 (large memory model) with no modifications to the source code.
** On UNIX type systems, store the the program as the pal command and on PC type systems, store it as pal.exe
* Command line to compile assembler

<pre>
gcc macro8x.c
</pre>

* macro8x.c source compiled
** VirtualBox running Linux Mint
** Without error
** macro8x.c would not compile under VisualStudio

== Compile iset.pal using macro8x ==
* Wrote short instruction set test code
** iset.lst file contents
<pre>
      *200                                                                Page 1


    1       0200  *200
    2 00200 7000          NOP
    3 00201 5200          JMP .-1
    4 00202 7200          CLA
    5 00203 6041    TSF
    6             

      No detected errors
</pre>
* Compiled using:
<pre>
../macro8x -x iset.pal

</pre>

* -x [option produces listing file with machine code (in octal)]

=== Check/verify assembler output ===

* macro8x output had issues
** .bin file did not match the listing file when viewed in HxD
** 7000 oct * 4 = 3800 which matches the bits file at offset 0xf2,0xf1
** Not 12 bit wide (was default 2 bytes of 8 bits)
** Bit order is backwards?
** Two most significant are not used in each byte
** Offset is at unexpected location

== Utility ==

* Run srec_cat to create C array output from binary file
<pre>
"[PATH_TO_SREC_FOLDER]\srec_cat.exe" iset.bin -Binary -o iset.c -C-Array

</pre>
* Wrote [https://github.com/douggilliland/Linux-68k/blob/master/pdp8/shufflebits.py shuffleBits.py] utility
** Runs under Python 3
* Paste array to front of shuffleBits.py
* Run shuffleBits.py - output goes to screen

<pre>
-- Generated by shuffleBits.py
--
DEPTH = 126;
WIDTH = 12;
ADDRESS_RADIX = DECIMAL;
DATA_RADIX = OCTAL;
CONTENT BEGIN
0000: 0000 0000 0000 0000 0000 0000 0000 0000;
0008: 0000 0000 0000 0000 0000 0000 0000 0000;
0016: 0000 0000 0000 0000 0000 0000 0000 0000;
0024: 0000 0000 0000 0000 0000 0000 0000 0000;
0032: 0000 0000 0000 0000 0000 0000 0000 0000;
0040: 0000 0000 0000 0000 0000 0000 0000 0000;
0048: 0000 0000 0000 0000 0000 0000 0000 0000;
0056: 0000 0000 0000 0000 0000 0000 0000 0000;
0064: 0000 0000 0000 0000 0000 0000 0000 0000;
0072: 0000 0000 0000 0000 0000 0000 0000 0000;
0080: 0000 0000 0000 0000 0000 0000 0000 0000;
0088: 0000 0000 0000 0000 0000 0000 0000 0000;
0096: 0000 0000 0000 0000 0000 0000 0000 0000;
0104: 0000 0000 0000 0000 0000 0000 0000 0000;
0112: 0000 0000 0000 0000 0000 0000 0000 0000;
0120: 0200 7000 5200 7200 6041 0457;
END;
</pre>

* Copy from command screen to .mif file
* Load MIF file under Quartus II
* Result

<img src="https://raw.githubusercontent.com/douggilliland/Linux-68k/master/pdp8/iset_bin_in_HxD.PNG"></img>

== Running Programs ==

* Programs start at 200 (octal) = 0x80 (hex)
