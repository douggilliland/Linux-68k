== PDP-8 Example Programs ==

* From Tom Almy's PDP-8 book [https://www.amazon.com/PDP-8-Class-Project-Resoling-Machine-ebook/dp/B07KY5RCJ7/ref=sr_1_1?dchild=1&keywords=tom+almy+pdp-8&qid=1615991822&sr=8-1 The PDP-8 Class Project: Resoling An Old Machine]

== Build PDP-8 Assembler ==

* Notes from the Source code
** This program has been built and successfully executed on:
*** Linux (80486 CPU) using gcc
*** RS/6000 (AIX 3.2.5)
*** Borland C++ version 3.1 (large memory model)
*** Borland C++ version 4.52 (large memory model) with no modifications to the source code.
*** On UNIX type systems, store the the program as the pal command and on PC type systems, store it as pal.exe

<pre>
gcc macro8x.c
</pre>

* macro8x.c source compiled on VirtualBox running Linux Mint without error
** Command line to compile assembler

=== Check assembler output ===

* macro8x didn't produce the right code
** .bin file did not match the listing file when viewed in HxD

== Convert Binary Output to Altera Memory Initialization File ==

* Run from Linux-68 Repo on VirtualBox running Linux Mint
** Command line

<pre>
../macro8x -x test.pal

</pre>

* -x [option produces listing file with machine code (in octal)]
* test.lst

<pre>
    1       0020  *20
    2 00020 0000  foo, 0
    3 00021 0000  bar, 0
    4 00022 0000  bas, 0
    5       0200  *200                            / Test program
    6 00200 7200      cla
    7 00201 1377      tad (0)
    8 00202 4301      jms mask
    9 00203 3020      dca foo
   10 00204 7200      cla
   11 00205 1376      tad (2)
   12 00206 4301      jms mask
   13 00207 3021      dca bar
   14 00210 7402      hlt
   15       0300  *300
   16 00300 0000  mcnt,   0
   17 00301 0000  mask,   0
   18 00302 7140      cll cma            / complement without increment, clear the link
   19 00303 3300      dca mcnt
   20 00304 7201      cla iac        / load 1 into AC
   21 00305 5307      jmp msk2
   22 00306 7004  msk1,   ral        / rotate left
   23             
   24 00307 2300  msk2,   isz mcnt       / increment count, skip if zero
   25 00310 5306      jmp msk1
   26 00311 5701      jmp i mask
      00376 0002
      00377 0000

</pre>

* .bin files need to be converted to Altera Memory Initialization files (.MIF) or Intel hex (.HEX) files
* Use [https://github.com/douggilliland/Retro-Computers/tree/master/PC%20Tools/srecord srec_cat tool] in Windows to convert files

<pre>
"[PATH_TO_SREC_FOLDER]\srec_cat.exe" class3a.bin -Binary -o class3a.mif -MIF 12

</pre>

* Not 12 bit wide (was default 8 bits)

<pre>
-- http://srecord.sourceforge.net/
--
-- Generated automatically by srec_cat -o --mif
--
DEPTH = 357;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT BEGIN
0000: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0018: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0030: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0048: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0060: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0078: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0090: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
00A8: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
00C0: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
00D8: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
00F0: 40 08 00 00 40 10 00 00 00 00 44 00 00 00 42 00 3A 00 30 26 3A 00 0B 3F;
0108: 18 08 30 19 2A 05 30 1E 03 3E 30 21 2A 09 30 26 18 10 08 10 1C 08 08 10;
0120: 0B 3D 3C 20 2A 05 0B 3C 30 21 2A 14 30 26 3A 00 0B 3B 08 08 38 20 18 11;
0138: 0B 3F 18 08 3A 00 0C 08 30 21 2A 20 30 26 10 11 2A 1E 3A 00 0B 3C 30 21;
0150: 2A 27 30 26 2A 02 43 3B 3C 00 00 0A 3F 33 01 3F 03 3F 34 2E 80;
END;
</pre>

== Running Programs ==

* Programs start at 200 (octal) = 0x80 (hex)
