== PDP-8 Example Programs ==

* From Tom Almy's PDP-8 book [https://www.amazon.com/PDP-8-Class-Project-Resoling-Machine-ebook/dp/B07KY5RCJ7/ref=sr_1_1?dchild=1&keywords=tom+almy+pdp-8&qid=1615991822&sr=8-1 The PDP-8 Class Project: Resoling An Old Machine]

== Build PDP-8 Assembler ==

Notes from the Source code

* This program has been built and successfully executed on:
** Linux (80486 CPU) using gcc
** RS/6000 (AIX 3.2.5)
** Borland C++ version 3.1 (large memory model)
** Borland C++ version 4.52 (large memory model) with no modifications to the source code.
** On UNIX type systems, store the the program as the pal command and on PC type systems, store it as pal.exe
* Command line to compile assembler

<pre>
gcc macro8x.c
</pre>

* [https://github.com/douggilliland/Linux-68k/blob/master/pdp8/macro8x.c macro8x.c source] compiled on VirtualBox running Linux Mint without error

== Compile iset.pal using macro8x ==

<pre>
../macro8x -x iset.pal

</pre>

* -x [option produces listing file with machine code (in octal)]
* iset.lst file

<pre>
      *200
      
    1       0200  *200
    2 00200 7000          NOP
    3 00201 5200          JMP .-1
    4 00202 7200          CLA
    5 00203 6041    TSF
    6             

      No detected errors
</pre>

* 0x30 0x21 maps to 60(oct) 41(oct)
** 6041 (oct) = 0x0c21

=== Check assembler output ===

* macro8x didn't produce the right code
** .bin file did not match the listing file when viewed in HxD

<img src="https://raw.githubusercontent.com/douggilliland/Linux-68k/master/pdp8/iset_bin_in_HxD.PNG"></img>

* 7000 oct * 4 = 3800 which matches the bits file at offset 0xf2,0xf1
* Not 12 bit wide (was default 8 bits)
* Offset is at unexpected location
* Bit order is backwards
* Two most significant are not used in each byte

== Utility ==

* Run srec_cat to create C array output from binary file
<pre>
"[PATH_TO_SREC_FOLDER]\srec_cat.exe" class3a.bin -Binary -o class3a.mif -C-Array

</pre>
* Wrote [https://github.com/douggilliland/Linux-68k/blob/master/pdp8/shufflebits.py shuffleBits.py] utility to 
* Paste array to front of shuffleBits.py
* Run shuffleBits.py - output goes to screen
* Copy from command screen to .mif file
* Load under Quartus II

== Running Programs ==

* Programs start at 200 (octal) = 0x80 (hex)
