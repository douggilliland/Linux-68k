== PDP-8 Example Programs ==

* From Tom Almy's PDP-8 book [https://www.amazon.com/PDP-8-Class-Project-Resoling-Machine-ebook/dp/B07KY5RCJ7/ref=sr_1_1?dchild=1&keywords=tom+almy+pdp-8&qid=1615991822&sr=8-1 The PDP-8 Class Project: Resoling An Old Machine]

== Convert Binary Output to Altera Memory Initialization File ==

* [https://github.com/douggilliland/Linux-68k/tree/master/pdp8 MACRO8X Assembler] creates .bin files
** Run from Linux-68 Repo on VirtualBox
** Command line

<pre>
../macro8x -x echo.pal

</pre>

* -x [option produces listing file with machine code (in octal)]

<pre>
      / Serial port test (echo)                                           Page 1


    1             / Serial port test (echo)
    2       0010  *10
    3 00010 0000  linep, 0
    4       0020  *20
    5 00020 0000  saved, 0
    6 00021 0000  count, 0
    7       0400  *400        / Line stored here
    8 00400 0000  line, 0
    9       0200  *200
   10 00200 7200      CLA / Initialize
   11 00201 6046      TLS
   12 00202 7200  newl, CLA
   13 00203 1377      TAD (line-1)
   14 00204 3010      DCA linep
   15 00205 6031  newc, KSF
   16 00206 5205      JMP .-1
   17 00207 6036      KRB         / Get the character
   18 00210 0376      AND (177)   / Get rid of parity bit
   19 00211 6041      TSF
   20 00212 5211      JMP .-1
   21 00213 6046      TLS         / Echo it
   22 00214 3020      DCA saved   / save a copy
   23 00215 1020      TAD saved
   24 00216 3410      DCA I linep / store it away
   25 00217 1020      TAD saved
   26 00220 1375      TAD (-15)   / CR character?
   27 00221 7440      SZA         / finished line if so
   28 00222 5205      JMP newc
   29 00223 1374      TAD (12)    / Echo line feed as well
   30 00224 6041      TSF
   31 00225 5224      JMP .-1
   32 00226 6046      TLS
   33             / Now echo the line
   34 00227 7200      CLA
   35 00230 1373      TAD (-line)
   36 00231 1010      TAD linep   / get number of characters
   37 00232 7040      CMA         / minus the number
   38 00233 3021      DCA count
   39 00234 1377      TAD (line-1) / reset starting address
   40 00235 3010      DCA linep
   41 00236 7200  echoc, CLA
   42 00237 1410      TAD I linep / get character
   43 00240 6041      TSF
   44 00241 5240      JMP .-1
   45 00242 6046      TLS
   46 00243 2021      ISZ count
   47 00244 5236      JMP echoc
   48 00245 7200      CLA
   49 00246 1374      TAD (12)
   50 00247 6041      TSF
   51 00250 5247      JMP .-1
   52 00251 6046      TLS
   53 00252 5202      JMP newl
      00373 7400
      00374 0012
      00375 7763
      00376 0177
                                                                 Cross Reference

    1 A      6  COUNT        38     46
    2 A     41  ECHOC        47
    3 A      8  LINE         13     35     39
    4 A      3  LINEP        14     24     36     40     42
    5 A     15  NEWC         28
    6 A     12  NEWL         53
    7 A      5  SAVED        22     23     25
</pre>

* .bin files need to be converted to Altera Memory Initialization files (.MIF) or Intel hex (.HEX) files
* Use [https://github.com/douggilliland/Retro-Computers/tree/master/PC%20Tools/srecord srec_cat tool] in Windows to convert files

<pre>
"[PATH_TO_SREC_FOLDER]\srec_cat.exe" class3a.bin -Binary -o class3a.mif -MIF 12

</pre>

* Didn't seem to produce the right code
** .bin file did not match the listing file when viewed in HxD
** Not 12 bit wide (was default 8 bits)

<pre>
-- http://srecord.sourceforge.net/
--
-- Generated automatically by srec_cat -o --mif
--
DEPTH = 357;
WIDTH = 8;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT BEGIN
0000: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0018: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0030: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0048: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0060: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0078: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
0090: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
00A8: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
00C0: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
00D8: 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80;
00F0: 40 08 00 00 40 10 00 00 00 00 44 00 00 00 42 00 3A 00 30 26 3A 00 0B 3F;
0108: 18 08 30 19 2A 05 30 1E 03 3E 30 21 2A 09 30 26 18 10 08 10 1C 08 08 10;
0120: 0B 3D 3C 20 2A 05 0B 3C 30 21 2A 14 30 26 3A 00 0B 3B 08 08 38 20 18 11;
0138: 0B 3F 18 08 3A 00 0C 08 30 21 2A 20 30 26 10 11 2A 1E 3A 00 0B 3C 30 21;
0150: 2A 27 30 26 2A 02 43 3B 3C 00 00 0A 3F 33 01 3F 03 3F 34 2E 80;
END;
</pre>

== Running Programs ==

* Programs start at 200 (octal)
