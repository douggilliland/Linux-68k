== PDP-8 Example Programs ==

* This folder contains example programs from Tom Almy's PDP-8 book [https://www.amazon.com/PDP-8-Class-Project-Resoling-Machine-ebook/dp/B07KY5RCJ7/ref=sr_1_1?dchild=1&keywords=tom+almy+pdp-8&qid=1615991822&sr=8-1 The PDP-8 Class Project -or- Resoling An Old Machine]

<img src="https://raw.githubusercontent.com/douggilliland/Retro-Computers/master/PDP-8/PDP8_Book(Almy)/Almy_Book_Cover.png"></img>

== Build PDP-8 Assembler Tool ==

* Assembler [https://github.com/douggilliland/Linux-68k/blob/master/pdp8/macro8x.c macro8x.c] generates DEC BIN (binary) files from PDP-8 Assembly Language files
* Notes from macro8x.c source code
<pre>
This program has been built and successfully executed on:
   Linux (80486 CPU) using gcc
   RS/6000 (AIX 3.2.5)
   Borland C++ version 3.1 (large memory model)
   Borland C++ version 4.52 (large memory model) with no modifications to the source code.
   On UNIX type systems, store the the program as the pal command and on PC type systems, store it as pal.exe
</pre>
* Linux Command line to compile assembler
<pre>
gcc macro8x.c
</pre>

* macro8x.c would not compile under VisualStudio
* macro8x.c source compiled ithout error under Linux Mint under VirtualBox

== Compile easy.pal using macro8x ==

* Wrote short test code (easy.pal)
** Increments memory address which can be viewed from the In System Memory Contents Editor in Quartus II
* Compile easy.pal code using:
<pre>
../macro8x -x easy.pal

</pre>
* easy.lst file contents
<pre>
    1       0010  *10
    2 00010 0000  linep, 0
    3       0200  *200
    4 00200 2010          ISZ     linep
    5 00201 5200          JMP     .-1
    6 00202 5200          JMP     .-2
    7                     
      No detected errors
</pre>

* -x [option produces listing file with machine code (in octal)]

=== Check/verify assembler output ===

* macro8x output is a DEC BIN (binary) file
* Wrote bin2mif.py utility to convert DEC BIN file to Altera MIF file
<pre>
python ../bin2mif.py easy.bin

</pre>

* Output goes to screen

<pre>
- Generated by bin2mif.py
-- 
DEPTH = 4096;
WIDTH = 12;
ADDRESS_RADIX = DECIMAL;
DATA_RADIX = OCTAL;
CONTENT BEGIN
0000: 0000 0000 0000 0000 0000 0000 0000 0000;
0008: 0000 0000 0000 0000 0000 0000 0000 0000;
0016: 0000 0000 0000 0000 0000 0000 0000 0000;
0024: 0000 0000 0000 0000 0000 0000 0000 0000;
0032: 0000 0000 0000 0000 0000 0000 0000 0000;
0040: 0000 0000 0000 0000 0000 0000 0000 0000;
0048: 0000 0000 0000 0000 0000 0000 0000 0000;
0056: 0000 0000 0000 0000 0000 0000 0000 0000;
0064: 0000 0000 0000 0000 0000 0000 0000 0000;
0072: 0000 0000 0000 0000 0000 0000 0000 0000;
0080: 0000 0000 0000 0000 0000 0000 0000 0000;
0088: 0000 0000 0000 0000 0000 0000 0000 0000;
0096: 0000 0000 0000 0000 0000 0000 0000 0000;
0104: 0000 0000 0000 0000 0000 0000 0000 0000;
0112: 0000 0000 0000 0000 0000 0000 0000 0000;
0120: 0000 0000 0000 0000 0000 0000 0000 0000;
0128: 2010 5200 5200 0366 0000 0000 0000 0000;
0136: 0000 0000 0000 0000 0000 0000 0000 0000;
...
4080: 0000 0000 0000 0000 0000 0000 0000 0000;
4088: 0000 0000 0000 0000 0000 0000 0000 0000;
END;
</pre>

* Copy from command screen to .mif file
** or redirect to file
<pre>
python ../bin2mif.py easy.bin > easy.mif

</pre>

* Load MIF file under Quartus II

<img src="https://raw.githubusercontent.com/douggilliland/Retro-Computers/master/PDP-8/PDP8_Book(Almy)/docs/Load_MIF_File_in_Quartus.PNG"></img>

* Result in Quartus Memory Content Editor

<img src="https://raw.githubusercontent.com/douggilliland/Retro-Computers/master/PDP-8/PDP8_Book(Almy)/docs/iset_bin_in_MemContentsEditor.PNG"></img>

== Running Programs ==

* Programs start at 200 (octal) = 0x80 (hex)
