68K GAS  tutor13.s 			page 1


   1               	* THIS VERSION MODIFIED FOR TEESSIDE X68K PC-2.2 CROSS ASSEMBLER
   2               	*     ftp://nyquist.ee.ualberta.ca/pub/motorola/m68k/x68k.zip
   3               	
   4               	*     CHANGES FROM ORIGINAL MOTOROLA SOURCE:
   5               	*         MANY "MOVE.L" CHANGED TO "MOVEQ"
   6               	*             SIMILAR CHANGES ON A FEW OTHER COMMANDS WHERE
   7               	*             X68K DOES NOT AUTOMATICALLY MOTOROLA-IZE.
   8               	*         X68K HANDLES CHARACTER CONSTANTS DIFFERENTLY
   9               	*             DC.W  '1'    -->  $3100  (GOOD)
  10               	*             DC.W  '1'+0  -->  $0031  (WHAT!)
  11               	*     ONE DIFFERENCE REMAINS IN A "DON'T CARE" BYTE
  12               	*         $008FE0 1A3C00FF  MOVE.B  #-1,D5
  13               	*                     ^^ $00 INSTEAD OF $FF
  14               	
  15               	*=======================================================================*
  16               	* MOTOROLA EDUCATION COMPUTER BOARD ROM PROGRAM "TUTOR"  REVISION # 1.3 *
  17               	*=======================================================================*
  18               	
  19               	* MACROS
  20               	
  21               	ADDR2MEM: .MACRO a1,a2
  22               	         PEA     \a1(%PC)         | MOVE ADDRESS TO MEMORY; POSITION
  23               	         MOVE.L  (%A7)+,\a2       | INDEPENDANT = TO "MOVE.L #\1,\2"
  24               	         .ENDM
  25               	
  26               	SAVEREGS: .MACRO
  27               	         TEMP = 0x04d6
  28               	         MOVE.L  %A7,REGA7        | SAVE STACK POINTER
  29               	         LEA     SV\@(%PC),%A7    | A7 = RETURN ADDRESS (FOR CALL TO SAVE)
  30               	         MOVE.L  %A7,TEMP         | TEMP = RETURN ADDRESS
  31               	         JRA     SAVE             | BSR WITHOUT USING STACK
  32               	SV\@:
  33               	         .ENDM
  34               	
  35               	*-------------------------------------------------------------------------
  36               	
  37               	* EQUATES (in alphabetical order)
  38               	
  39               	BELL     =       0x07
  40               	BLANK    =       0x20
  41               	BKPOINT  =       0x4AFB
  42               	BUFFSIZE =       0x80
  43               	BUFSIZE  =       80
  44               	CR       =       0x0D
  45               	CTLD     =       0x04
  46               	CTLH     =       0x08
  47               	CTLW     =       0x17
  48               	CTLX     =       0x18
  49               	DEL      =       0x7F
  50               	DELAYC1  =       0x1000
  51               	EOT      =       0x04
  52               	LF       =       0x0A
  53               	LOCVARSZ =       16
  54               	RESET    =       0x43            | MASTER RESET FOR ACIA
  55               	
  56               	*-------------------------------------------------------------------------
  57               	* File ARAM      DATA VARIABLES                                   05/10/82
68K GAS  tutor13.s 			page 2


  58               	
  59               	****************************************************************
  60               	*  N O T E:  Ram locations:   starting at zero                 *
  61               	****************************************************************
  62               	
  63               	         .ORG    0x000000
  64               	
  65               	*                                 DEC HEX  DESCRIPTION
  66 0000 0000 0000 	         DS.L    1              | 0   $00  AREA OVERLAID BY ROM SR
  67 0004 0000 0000 	         DS.L    1              | 1   $01  AND PC
  68               	
  69 0008 0000 0000 	_AV2:    DS.L    1              | 2   $02  BUS ERROR            "BUS "
  70 000c 0000 0000 	_AV3:    DS.L    1              | 3   $03  ADDRESS ERROR        "ADDR"
  71 0010 0000 0000 	_AV4:    DS.L    1              | 4   $04  ILL INSTRUCTION      "OPCO"
  72 0014 0000 0000 	         DS.L    1              | 5   $05  DIVIDE BY ZERO       "DIV0"
  73 0018 0000 0000 	         DS.L    1              | 6   $06  CHECK TRAP           "CHCK"
  74 001c 0000 0000 	         DS.L    1              | 7   $07  TRAP V               "TP V"
  75 0020 0000 0000 	AV8:     DS.L    1              | 8   $08  PRIVILEDGE VIOLATION "PRIV"
  76 0024 0000 0000 	_AV9:    DS.L    1              | 9   $09  TRACE
  77 0028 0000 0000 	         DS.L    1              | 10  $0A  1010 LINE EMULATION  "1010"
  78 002c 0000 0000 	_AV11:   DS.L    1              | 11  $0B  1111 LINE EMULATION  "1111"
  79 0030 0000 0000 	_AV12:   DS.L    1              | 12  $0C  USED AS TEMPORARY STORAGE FOR VECTOR MSGS.
  80 0034 0000 0000 	         DS.L    1              | 13  $0D  NOT USED
  81 0038 0000 0000 	         DS.L    1              | 14  $0E
  82 003c 0000 0000 	         DS.L    1              | 15  $0F
  83 0040 0000 0000 	         DS.L    1              | 16  $10
  84 0044 0000 0000 	         DS.L    1              | 17  $11
  85 0048 0000 0000 	         DS.L    1              | 18  $12
  86 004c 0000 0000 	         DS.L    1              | 19  $13
  87 0050 0000 0000 	         DS.L    1              | 20  $14
  88 0054 0000 0000 	         DS.L    1              | 21  $15
  89 0058 0000 0000 	         DS.L    1              | 22  $16
  90 005c 0000 0000 	         DS.L    1              | 23  $17
  91 0060 0000 0000 	_AV24:   DS.L    1              | 24  $18   0  AUTO VECTORS     "SPUR"
  92 0064 0000 0000 	         DS.L    1              | 25  $19   1                   "AV#1"
  93 0068 0000 0000 	         DS.L    1              | 26  $1A   2                   "AV#2"   TEST BUTTON
  94 006c 0000 0000 	         DS.L    1              | 27  $1B   3                   "AV#3"
  95 0070 0000 0000 	         DS.L    1              | 28  $1C   4                   "AV#4"
  96 0074 0000 0000 	         DS.L    1              | 29  $1D   5                   "AV#5"
  97 0078 0000 0000 	         DS.L    1              | 30  $1E   6                   "AV#6"
  98 007c 0000 0000 	_AV31:   DS.L    1              | 31  $1F   7                   "AV#7   [ABORT BUTTON]
  99 0080 0000 0000 	         DS.L    1              | 32  $20   TRAP  0             "UT 0"
 100 0084 0000 0000 	         DS.L    1              | 33  $21   TRAP  1             "UT 1"
 101 0088 0000 0000 	         DS.L    1              | 34  $22   TRAP  2             "UT 2"
 102 008c 0000 0000 	         DS.L    1              | 35  $23   TRAP  3             "UT 3"
 103 0090 0000 0000 	         DS.L    1              | 36  $24   TRAP  4             "UT 4"
 104 0094 0000 0000 	         DS.L    1              | 37  $25   TRAP  5             "UT 5"
 105 0098 0000 0000 	         DS.L    1              | 38  $26   TRAP  6             "UT 6"
 106 009c 0000 0000 	         DS.L    1              | 39  $27   TRAP  7             "UT 7"
 107 00a0 0000 0000 	         DS.L    1              | 40  $28   TRAP  8             "UT 8"
 108 00a4 0000 0000 	         DS.L    1              | 41  $29   TRAP  9             "UT 9"
 109 00a8 0000 0000 	         DS.L    1              | 42  $2A   TRAP 10             "UT A"
 110 00ac 0000 0000 	         DS.L    1              | 43  $2B   TRAP 11             "UT B"
 111 00b0 0000 0000 	         DS.L    1              | 44  $2C   TRAP 12             "UT C"
 112 00b4 0000 0000 	         DS.L    1              | 45  $2D   TRAP 13             "UT D"
 113 00b8 0000 0000 	_AV46:   DS.L    1              | 46  $2E   TRAP 14             "UT E"
 114 00bc 0000 0000 	AV47:    DS.L    1              | 47  $2F   TRAP 15             "UT F"
68K GAS  tutor13.s 			page 3


 115 00c0 0000 0000 	_AV48:   DS.L    1              | 48  $30
 116 00c4 0000 0000 	         DS.L    1              | 49  $31
 117 00c8 0000 0000 	         DS.L    1              | 50  $32
 118 00cc 0000 0000 	         DS.L    1              | 51  $33
 119 00d0 0000 0000 	         DS.L    1              | 52  $34
 120 00d4 0000 0000 	         DS.L    1              | 53  $35
 121 00d8 0000 0000 	         DS.L    1              | 54  $36
 122 00dc 0000 0000 	         DS.L    1              | 55  $37
 123 00e0 0000 0000 	         DS.L    1              | 56  $38
 124 00e4 0000 0000 	         DS.L    1              | 57  $39
 125 00e8 0000 0000 	         DS.L    1              | 58  $3A
 126 00ec 0000 0000 	         DS.L    1              | 59  $3B
 127 00f0 0000 0000 	         DS.L    1              | 60  $3C
 128 00f4 0000 0000 	         DS.L    1              | 61  $3D
 129 00f8 0000 0000 	         DS.L    1              | 62  $3E
 130 00fc 0000 0000 	         DS.L    1              | 63  $3F
 131 0100 0000 0000 	         DS.L    1              | 64  $40
 132 0104 0000 0000 	         DS.L    1              | 65  $41
 133 0108 0000 0000 	         DS.L    1              | 66  $42
 134 010c 0000 0000 	         DS.L    1              | 67  $43
 135 0110 0000 0000 	         DS.L    1              | 68  $44
 136 0114 0000 0000 	         DS.L    1              | 69  $45
 137 0118 0000 0000 	         DS.L    1              | 70  $46
 138 011c 0000 0000 	         DS.L    1              | 71  $47
 139 0120 0000 0000 	         DS.L    1              | 72  $48
 140 0124 0000 0000 	         DS.L    1              | 73  $49
 141 0128 0000 0000 	         DS.L    1              | 74  $4A
 142 012c 0000 0000 	         DS.L    1              | 75  $4B
 143 0130 0000 0000 	         DS.L    1              | 76  $4C
 144 0134 0000 0000 	         DS.L    1              | 77  $4D
 145 0138 0000 0000 	         DS.L    1              | 78  $4E
 146 013c 0000 0000 	         DS.L    1              | 79  $4F
 147 0140 0000 0000 	         DS.L    1              | 80  $50
 148 0144 0000 0000 	         DS.L    1              | 81  $51
 149 0148 0000 0000 	         DS.L    1              | 82  $52
 150 014c 0000 0000 	         DS.L    1              | 83  $53
 151 0150 0000 0000 	         DS.L    1              | 84  $54
 152 0154 0000 0000 	         DS.L    1              | 85  $55
 153 0158 0000 0000 	         DS.L    1              | 86  $56
 154 015c 0000 0000 	         DS.L    1              | 87  $57
 155 0160 0000 0000 	         DS.L    1              | 88  $58
 156 0164 0000 0000 	         DS.L    1              | 89  $59
 157 0168 0000 0000 	         DS.L    1              | 90  $5A
 158 016c 0000 0000 	         DS.L    1              | 91  $5B
 159 0170 0000 0000 	         DS.L    1              | 92  $5C
 160 0174 0000 0000 	         DS.L    1              | 93  $5D
 161 0178 0000 0000 	         DS.L    1              | 94  $5E
 162 017c 0000 0000 	         DS.L    1              | 95  $5F
 163 0180 0000 0000 	         DS.L    1              | 96  $60
 164 0184 0000 0000 	         DS.L    1              | 97  $61
 165 0188 0000 0000 	         DS.L    1              | 98  $62
 166 018c 0000 0000 	         DS.L    1              | 99  $63
 167 0190 0000 0000 	         DS.L    1              | 100  $64
 168 0194 0000 0000 	         DS.L    1              | 101  $65
 169 0198 0000 0000 	         DS.L    1              | 102  $66
 170 019c 0000 0000 	         DS.L    1              | 103  $67
 171 01a0 0000 0000 	         DS.L    1              | 104  $68
68K GAS  tutor13.s 			page 4


 172 01a4 0000 0000 	         DS.L    1              | 105  $69
 173 01a8 0000 0000 	         DS.L    1              | 106  $6A
 174 01ac 0000 0000 	         DS.L    1              | 107  $6B
 175 01b0 0000 0000 	         DS.L    1              | 108  $6C
 176 01b4 0000 0000 	         DS.L    1              | 109  $6D
 177 01b8 0000 0000 	         DS.L    1              | 110  $6E
 178 01bc 0000 0000 	         DS.L    1              | 111  $6F
 179 01c0 0000 0000 	         DS.L    1              | 112  $70
 180 01c4 0000 0000 	         DS.L    1              | 113  $71
 181 01c8 0000 0000 	         DS.L    1              | 114  $72
 182 01cc 0000 0000 	         DS.L    1              | 115  $73
 183 01d0 0000 0000 	         DS.L    1              | 116  $74
 184 01d4 0000 0000 	         DS.L    1              | 117  $75
 185 01d8 0000 0000 	         DS.L    1              | 118  $76
 186 01dc 0000 0000 	         DS.L    1              | 119  $77
 187 01e0 0000 0000 	         DS.L    1              | 120  $78
 188 01e4 0000 0000 	         DS.L    1              | 121  $79
 189 01e8 0000 0000 	         DS.L    1              | 122  $7A
 190 01ec 0000 0000 	         DS.L    1              | 123  $7B
 191 01f0 0000 0000 	         DS.L    1              | 124  $7C
 192 01f4 0000 0000 	         DS.L    1              | 125  $7D
 193 01f8 0000 0000 	         DS.L    1              | 126  $7E
 194 01fc 0000 0000 	         DS.L    1              | 127  $7F
 195 0200 0000 0000 	         DS.L    1              | 128  $80
 196 0204 0000 0000 	         DS.L    1              | 129  $81
 197 0208 0000 0000 	         DS.L    1              | 130  $82
 198 020c 0000 0000 	         DS.L    1              | 131  $83
 199 0210 0000 0000 	         DS.L    1              | 132  $84
 200 0214 0000 0000 	         DS.L    1              | 133  $85
 201 0218 0000 0000 	         DS.L    1              | 134  $86
 202 021c 0000 0000 	         DS.L    1              | 135  $87
 203 0220 0000 0000 	         DS.L    1              | 136  $88
 204 0224 0000 0000 	         DS.L    1              | 137  $89
 205 0228 0000 0000 	         DS.L    1              | 138  $8A
 206 022c 0000 0000 	         DS.L    1              | 139  $8B
 207 0230 0000 0000 	         DS.L    1              | 140  $8C
 208 0234 0000 0000 	         DS.L    1              | 141  $8D
 209 0238 0000 0000 	         DS.L    1              | 142  $8E
 210 023c 0000 0000 	         DS.L    1              | 143  $8F
 211 0240 0000 0000 	         DS.L    1              | 144  $90
 212 0244 0000 0000 	         DS.L    1              | 145  $91
 213 0248 0000 0000 	         DS.L    1              | 146  $92
 214 024c 0000 0000 	         DS.L    1              | 147  $93
 215 0250 0000 0000 	         DS.L    1              | 148  $94
 216 0254 0000 0000 	         DS.L    1              | 149  $95
 217 0258 0000 0000 	         DS.L    1              | 150  $96
 218 025c 0000 0000 	         DS.L    1              | 151  $97
 219 0260 0000 0000 	         DS.L    1              | 152  $98
 220 0264 0000 0000 	         DS.L    1              | 153  $99
 221 0268 0000 0000 	         DS.L    1              | 154  $9A
 222 026c 0000 0000 	         DS.L    1              | 155  $9B
 223 0270 0000 0000 	         DS.L    1              | 156  $9C
 224 0274 0000 0000 	         DS.L    1              | 157  $9D
 225 0278 0000 0000 	         DS.L    1              | 158  $9E
 226 027c 0000 0000 	         DS.L    1              | 159  $9F
 227 0280 0000 0000 	         DS.L    1              | 160  $A0
 228 0284 0000 0000 	         DS.L    1              | 161  $A1
68K GAS  tutor13.s 			page 5


 229 0288 0000 0000 	         DS.L    1              | 162  $A2
 230 028c 0000 0000 	         DS.L    1              | 163  $A3
 231 0290 0000 0000 	         DS.L    1              | 164  $A4
 232 0294 0000 0000 	         DS.L    1              | 165  $A5
 233 0298 0000 0000 	         DS.L    1              | 166  $A6
 234 029c 0000 0000 	         DS.L    1              | 167  $A7
 235 02a0 0000 0000 	         DS.L    1              | 168  $A8
 236 02a4 0000 0000 	         DS.L    1              | 169  $A9
 237 02a8 0000 0000 	         DS.L    1              | 170  $AA
 238 02ac 0000 0000 	         DS.L    1              | 171  $AB
 239 02b0 0000 0000 	         DS.L    1              | 172  $AC
 240 02b4 0000 0000 	         DS.L    1              | 173  $AD
 241 02b8 0000 0000 	         DS.L    1              | 174  $AE
 242 02bc 0000 0000 	         DS.L    1              | 175  $AF
 243 02c0 0000 0000 	         DS.L    1              | 176  $B0
 244 02c4 0000 0000 	         DS.L    1              | 177  $B1
 245 02c8 0000 0000 	         DS.L    1              | 178  $B2
 246 02cc 0000 0000 	         DS.L    1              | 179  $B3
 247 02d0 0000 0000 	         DS.L    1              | 180  $B4
 248 02d4 0000 0000 	         DS.L    1              | 181  $B5
 249 02d8 0000 0000 	         DS.L    1              | 182  $B6
 250 02dc 0000 0000 	         DS.L    1              | 183  $B7
 251 02e0 0000 0000 	         DS.L    1              | 184  $B8
 252 02e4 0000 0000 	         DS.L    1              | 185  $B9
 253 02e8 0000 0000 	         DS.L    1              | 186  $BA
 254 02ec 0000 0000 	         DS.L    1              | 187  $BB
 255 02f0 0000 0000 	         DS.L    1              | 188  $BC
 256 02f4 0000 0000 	         DS.L    1              | 189  $BD
 257 02f8 0000 0000 	         DS.L    1              | 190  $BE
 258 02fc 0000 0000 	         DS.L    1              | 191  $BF
 259 0300 0000 0000 	         DS.L    1              | 192  $C0
 260 0304 0000 0000 	         DS.L    1              | 193  $C1
 261 0308 0000 0000 	         DS.L    1              | 194  $C2
 262 030c 0000 0000 	         DS.L    1              | 195  $C3
 263 0310 0000 0000 	         DS.L    1              | 196  $C4
 264 0314 0000 0000 	         DS.L    1              | 197  $C5
 265 0318 0000 0000 	         DS.L    1              | 198  $C6
 266 031c 0000 0000 	         DS.L    1              | 199  $C7
 267 0320 0000 0000 	         DS.L    1              | 200  $C8
 268 0324 0000 0000 	         DS.L    1              | 201  $C9
 269 0328 0000 0000 	         DS.L    1              | 202  $CA
 270 032c 0000 0000 	         DS.L    1              | 203  $CB
 271 0330 0000 0000 	         DS.L    1              | 204  $CC
 272 0334 0000 0000 	         DS.L    1              | 205  $CD
 273 0338 0000 0000 	         DS.L    1              | 206  $CE
 274 033c 0000 0000 	         DS.L    1              | 207  $CF
 275 0340 0000 0000 	         DS.L    1              | 208  $D0
 276 0344 0000 0000 	         DS.L    1              | 209  $D1
 277 0348 0000 0000 	         DS.L    1              | 210  $D2
 278 034c 0000 0000 	         DS.L    1              | 211  $D3
 279 0350 0000 0000 	         DS.L    1              | 212  $D4
 280 0354 0000 0000 	         DS.L    1              | 213  $D5
 281 0358 0000 0000 	         DS.L    1              | 214  $D6
 282 035c 0000 0000 	         DS.L    1              | 215  $D7
 283 0360 0000 0000 	         DS.L    1              | 216  $D8
 284 0364 0000 0000 	         DS.L    1              | 217  $D9
 285 0368 0000 0000 	         DS.L    1              | 218  $DA
68K GAS  tutor13.s 			page 6


 286 036c 0000 0000 	         DS.L    1              | 219  $DB
 287 0370 0000 0000 	         DS.L    1              | 220  $DC
 288 0374 0000 0000 	         DS.L    1              | 221  $DD
 289 0378 0000 0000 	         DS.L    1              | 222  $DE
 290 037c 0000 0000 	         DS.L    1              | 223  $DF
 291 0380 0000 0000 	         DS.L    1              | 224  $E0
 292 0384 0000 0000 	         DS.L    1              | 225  $E1
 293 0388 0000 0000 	         DS.L    1              | 226  $E2
 294 038c 0000 0000 	         DS.L    1              | 227  $E3
 295 0390 0000 0000 	         DS.L    1              | 228  $E4
 296 0394 0000 0000 	         DS.L    1              | 229  $E5
 297 0398 0000 0000 	         DS.L    1              | 230  $E6
 298 039c 0000 0000 	         DS.L    1              | 231  $E7
 299 03a0 0000 0000 	         DS.L    1              | 232  $E8
 300 03a4 0000 0000 	         DS.L    1              | 233  $E9
 301 03a8 0000 0000 	         DS.L    1              | 234  $EA
 302 03ac 0000 0000 	         DS.L    1              | 235  $EB
 303 03b0 0000 0000 	         DS.L    1              | 236  $EC
 304 03b4 0000 0000 	         DS.L    1              | 237  $ED
 305 03b8 0000 0000 	         DS.L    1              | 238  $EE
 306 03bc 0000 0000 	         DS.L    1              | 239  $EF
 307 03c0 0000 0000 	         DS.L    1              | 240  $F0
 308 03c4 0000 0000 	         DS.L    1              | 241  $F1
 309 03c8 0000 0000 	         DS.L    1              | 242  $F2
 310 03cc 0000 0000 	         DS.L    1              | 243  $F3
 311 03d0 0000 0000 	         DS.L    1              | 244  $F4
 312 03d4 0000 0000 	         DS.L    1              | 245  $F5
 313 03d8 0000 0000 	         DS.L    1              | 246  $F6
 314 03dc 0000 0000 	         DS.L    1              | 247  $F7
 315 03e0 0000 0000 	         DS.L    1              | 248  $F8
 316 03e4 0000 0000 	         DS.L    1              | 249  $F9
 317 03e8 0000 0000 	         DS.L    1              | 250  $FA
 318 03ec 0000 0000 	         DS.L    1              | 251  $FB
 319 03f0 0000 0000 	         DS.L    1              | 252  $FC
 320 03f4 0000 0000 	         DS.L    1              | 253  $FD            3RD
 321 03f8 0000 0000 	         DS.L    1              | 254  $FE            2ND
 322 03fc 0000 0000 	         DS.L    1              | 255  $FF VECTOR FOR 1ST IPC DISK CONTROLLER
 323               	
 324               	*  PSEUDO REGISTERS
 325               	
 326 0400 0000 0000 	_REGPC:  DS.L    1              | USERS PROGRAM COUNTER
 327 0404 0000 0000 	_REGSR:  DS.L    1              | USERS CONDITION CODES
 328               	
 329 0408 0000 0000 	_REGS:   DS.L    8              | D REGISTERS
 329      0000 0000 
 329      0000 0000 
 329      0000 0000 
 329      0000 0000 
 330 0428 0000 0000 	         DS.L    7              | A0 THROUGH A6 REGISTERS
 330      0000 0000 
 330      0000 0000 
 330      0000 0000 
 330      0000 0000 
 331 0444 0000 0000 	_REGA7:  DS.L    1              | A7 REGISTER
 332 0448 0000 0000 	_REGUS:  DS.L    1              | USER STACK
 333               	
 334               	****************************************************************
68K GAS  tutor13.s 			page 7


 335               	*              WORKING STORAGE                                 *
 336               	*  NOTE: SUBROUTINE "INITHRAM" ZEROES RAM...                   *
 337               	*        FROM "BEGHRAM" THROUGH "ENDHRAM" WHEN IT IS EXECUTED  *
 338               	****************************************************************
 339               	
 340               	_BEGHRAM: .align 4              | INITIALIZE STARTS HERE
 341               	
 342 044c 0000 0000 	_OFFSET: DS.L    8              | ASSUMED OFFSETS (VIA "R@" FORMAT)
 342      0000 0000 
 342      0000 0000 
 342      0000 0000 
 342      0000 0000 
 343 046c 0000 0000 	MEMSIZE: DS.L    1              | MEMORY SIZE IN BYTES
 344 0470 0000 0000 	_BPADD:  DS.L    8              | BREAKPOINT ADDRESSES
 344      0000 0000 
 344      0000 0000 
 344      0000 0000 
 344      0000 0000 
 345 0490 0000 0000 	_BPTILL: DS.L    1              | TEMPORARY BREAKPOINT
 346 0494 0000 0000 	_BPCNT:  DS.L    9              | BREAKPOINT COUNTS
 346      0000 0000 
 346      0000 0000 
 346      0000 0000 
 346      0000 0000 
 347 04b8 0000 0000 	_BPDATA:  DS.W   9              | HOLD USER WORDS REPLACED BY TRAP IN SET BP
 347      0000 0000 
 347      0000 0000 
 347      0000 0000 
 347      0000 
 348 04ca 0000 0000 	_BERRD:  DS.L    2              | SPECIAL DATA FOR BUS AND ADDR ERROR EXCEPTIONS
 348      0000 0000 
 349 04d2 0000 0000 	_SAVEAV4: DS.L   1              | HOLDS USER'S AV4 VECTOR (WE USE FOR BP)
 350 04d6 0000 0000 	_TEMP:   DS.L    1              | TEMP
 351 04da 0000 0000 	_TRACECNT:DS.L   1              | TRACE COUNTER (-1=TRACE 1 & RUN)
 352 04de 0000      	_TRACEON: DS.W   1              | FLAG FOR TRACE ON
 353 04e0 0000      	_BPSTATUS:DS.W   1              | 1=PB ARE IN  0=ARE OUT OF MEMORY
 354 04e2 0000 0000 	_ECHOPT1:DS.L    1              | ECHO FLAG TO PORT ONE
 355               	
 356               	* THE FOLLOWING MUST REMAIN AS IS
 357               	*  User docomentation DEPENDS upon it!
 358               	*
 359               	_OPTIONS: .align 2              | FORCE WORD BOUNDRY
 360 04e6 00        	         DS.B    1              | X-ON CHARACTER
 361 04e7 00        	         DS.B    1              | X-OFF CHARACTER
 362 04e8 00        	         DS.B    1              | NO NO-AUTO LINEFEED
 363 04e9 00        	         DS.B    1              | SHORT FORM REGISTER DISPLAY
 364 04ea 00        	         DS.B    1              | TM  trailing character
 365 04eb 00        	         DS.B    1              | TM  exit character
 366               	_XONOFF  =       OPTIONS
 367               	_TMCHARS  =      OPTIONS+4
 368               	
 369               	* END of as is section
 370               	
 371               	***************************
 372               	* TARGET SUPERVISOR STACK *
 373               	***************************
 374               	
68K GAS  tutor13.s 			page 8


 375 04ec 0000 0000 	         DS.L    20
 375      0000 0000 
 375      0000 0000 
 375      0000 0000 
 375      0000 0000 
 376 053c 0000 0000 	SSA7:    DS.L    1
 377               	
 378               	**************
 379               	* I/O BUFFER *
 380               	**************
 381               	
 382 0540 0000 0000 	_BUFFER:  DS.B   BUFFSIZE
 382      0000 0000 
 382      0000 0000 
 382      0000 0000 
 382      0000 0000 
 383               	
 384 05c0 0000 0000 	_DUMPTEMP:DS.B   80             | HEADER TEMP BUFFER
 384      0000 0000 
 384      0000 0000 
 384      0000 0000 
 384      0000 0000 
 385               	
 386 0610 0000 0000 	_SCREEN1: DS.L   1              | PRINT THIS BEFORE TRACE DISPLAY
 387 0614 0000 0000 	_SCREEN2: DS.L   1              | PRINT THIS AFTER TRACE DISPLAY
 388               	
 389 0618 0000      	_NULLPADS:DS.B    2             | CHARACTER NULL PADS
 390 061a 0000      	_CRPADS:  DS.B    2             | CARRIAGE RETURN NULL PADS
 391               	
 392 061c 0000 0000 	_OUTTO:  DS.L    1              | HOLDS ADDRESS OF OUTPUT ROUTINE
 393 0620 0000 0000 	_INFROM: DS.L    1              | HOLDS ADDRESS OF INPUT ROUTINE
 394 0624 0000 0000 	_ALTSER1: DS.L   1              | ALTERNATE SERIAL PORT#1
 395 0628 0000 0000 	_ALTSER2: DS.L   1              | ALTERNATE SERIAL PORT#2
 396 062c 0000 0000 	_INPORT1: DS.L   1              | INPUT ROUTINE ADDRESS
 397 0630 0000 0000 	_OUTPORT1:DS.L   1              | ADDRESS FOR OUPUT ROUTINE
 398 0634 0000 0000 	_INPORT2: DS.L   1              | ADDRESS FOR INPUT ROUTINE
 399 0638 0000 0000 	_OUTPORT2:DS.L   1              | FOR OUTPURT ROUTINE
 400 063c 0000 0000 	_INPORT3: DS.L   1              | THIS MIGHT BE FOR TAPE
 401 0640 0000 0000 	_OUTPORT3:DS.L   1              | THIS MIGHT BE FOR PRINTER
 402 0644 0000 0000 	_INPORT4: DS.L   1              | CASSETTE
 403 0648 0000 0000 	_OUTPORT4:DS.L   1              | CASSETTE
 404 064c 0000      	_MD1CON:  DS.W   1              | ACIA PROFILE (PORT1/PORT2)
 405 064e 0000 0000 	_PDIPORT: DS.L   1              | PDIPORT ADDRESS
 406 0652 0000      	_CRTPNT:  DS.W   1              | OUTPUT TO PRINTER AND CRT
 407 0654 00        	_TAPENULS:DS.B   1              | NULLS FOR CASSETTE
 408               	
 409 0655 00        	         DS.B    1              | PAD BYTE
 410               	
 411 0656 0000 0000 	_CTLINK: DS.L    1              | POINTER TO FIRST TABLE
 412               	
 413               	_ENDHRAM: .align 2              | MUST START ON WORD BOUNDRY
 414               	
 415               	*********************
 416               	* SYSTEM STACK AREA *
 417               	*********************
 418               	
 419               	         .align  2              | FORCE ON WORD BOUNDRY
68K GAS  tutor13.s 			page 9


 420 065a 0000 0000 	         DS.B    300            | ROOM FOR STACK
 420      0000 0000 
 420      0000 0000 
 420      0000 0000 
 420      0000 0000 
 421 0786 0000      	_SYSTACK: DS.W   1              | START OF STACK (ADDRESS DECREASES)
 422 0788 0000 0000 	         DS.B    4              | STRETCHED STACK (USED BY 'SAVE')
 423               	
 424 078c 0000 0000 	         DS.B    120            | EXTENDED AREA USED IF DISASSEMBLER
 424      0000 0000 
 424      0000 0000 
 424      0000 0000 
 424      0000 0000 
 425               	
 426               	         .align  1              | LAST LOW MEMORY LOCATION USED + 1
 427               	
 428               	*-------------------------------------------------------------------------
 429               	
 430               	*CODE68K
 431               	*                                 OFFSET  0
 432               	ESKB     =       0x00000000     | DS      0
 433               	TDATA    =       0x00000000     | DS.B    10
 434               	TNB      =       0x0000000A     | DS.B    1
 435               	TLSPEC   =       0x0000000B     | DS.B    1
 436               	TLENGTH  =       0x0000000C     | DS.W    1
 437               	PCOUNTER =       0x0000000E     | DS.L    1
 438               	PTROP    =       0x00000012     | DS.L    1              POINTER TO OPERAND
 439               	PENDOP   =       0x00000016     | DS.L    1              POINTER END OF OPERAND
 440               	PTRBUFE  =       0x0000001A     | DS.L    1              POINTER TO END OF FORMATED SOURCE
 441               	LINK     =       0x0000001E     | DS.L    1              SAVE FOR UNLINK
 442               	ESKE     =       0x00000022     | DS.B    0
 443               	
 444               	*DCODE68K
 445               	*                                 OFFSET  -LOCVARSZ
 446               	DDATA    =       0xFFFFFFF0     | DS.L    3
 447               	HISPC    =       0xFFFFFFFC     | DS.L    1
 448               	
 449               	*LOAD
 450               	*                                 OFFSET  -((BUFFSIZE/2)+4)
 451               	CC       =       0xFFFFFFBC     | DS.L    1              CC (BYTE COUNT)
 452               	ADDRESS  =       0xFFFFFFC0     | DS.L    1              ADDRESS + OFFSET
 453               	LDATA    =       0xFFFFFFC4     | DS.B    1
 454               	
 455               	*-------------------------------------------------------------------------
 456               	* File B         Init Vectors+Ram                                 05/29/82
 457               	
 458 0804 0000 0000 	         .ORG    0x008000
 458      0000 0000 
 458      0000 0000 
 458      0000 0000 
 458      0000 0000 
 459               	
 460               	         REGA7 =  0x444
 461 8000 0000 0444 	FIRST:   DC.L    REGA7          | SUPERVISOR STACK
 462               	         START = 0x8146
 463 8004 0000 8146 	         DC.L    START          | PROGRAM COUNTER
 464 8008 6000 0CB0 	V2:      BRA     TRACE
68K GAS  tutor13.s 			page 10


 465               	
 466               	**********************************
 467               	* INITIALIZE HIGH RAM SUBROUTINE *
 468               	**********************************
 469               	
 470               	        BEGHRAM = 0x044c
 471               	        ENDHRAM = 0x065a
 472 800c 41F8 044C 	INITHRAM:LEA     BEGHRAM,%A0     | START OF WORK RAM (PAST REGISTERS)
 473 8010 203C 0000 	         MOVE.L  #(ENDHRAM-BEGHRAM),%D0 | BYTES TO ZERO
 473      020E 
 474 8016 4281      	         CLR.L   %D1
 475 8018 10C1      	INIT:    MOVE.B  %D1,(%A0)+     | ZERO MEMORY
 476 801a 5380      	         SUBQ.L  #1,%D0
 477 801c 66FA      	         BNE.S   INIT
 478               	
 479               	         AV2 = 0x0008
 480               	         ADDR2MEM BERRMSG,AV2   | POINT AT BUS TRAP ERROR MESSAGE ROUTINE
 480 801e 487A 0010 	>  PEA BERRMSG(%PC)
 480 8022 21DF 0008 	>  MOVE.L (%A7)+,AV2
 481               	
 482               	         AV3 = 0x000c
 483               	         ADDR2MEM ADDRMSG,AV3   | POINT AT ADDRESS TRAP ERROR MESSAGE ROUTINE
 483 8026 487A 0012 	>  PEA ADDRMSG(%PC)
 483 802a 21DF 000C 	>  MOVE.L (%A7)+,AV3
 484               	
 485 802e 4E75      	         RTS
 486               	
 487               	****************************************************
 488               	* SPECIAL HANDLING FOR BUS ERROR AND ADDRESS ERROR *
 489               	****************************************************
 490               	
 491 8030 21FC 4255 	BERRMSG: MOVE.L  #0x42555320,0x30 | "BUS "
 491      5320 0030 
 492               	
 493 8038 6008      	         BRA.S   VECTBE
 494               	
 495 803a 21FC 4144 	ADDRMSG: MOVE.L  #0x41444452,0x30 | "ADDR"
 495      4452 0030 
 496               	
 497               	         BERRD = 0x04ca
 498 8042 21DF 04CA 	VECTBE:  MOVE.L  (%A7)+,BERRD
 499 8046 21DF 04CE 	         MOVE.L  (%A7)+,BERRD+4
 500               	
 501               	         SAVEREGS
 501               	>  TEMP =0x04d6
 501 804a 21CF 0444 	>  MOVE.L %A7,REGA7
 501 804e 4FFA 000A 	>  LEA SV2(%PC),%A7
 501 8052 21CF 04D6 	>  MOVE.L %A7,TEMP
 501 8056 6000 0C34 	>  JRA SAVE
 501               	> SV2:
 502 805a 6100 1C3A 	         BSR     FIXBUF
 503 805e 3CFC 0D0A 	         MOVE.W  #0xD0A,(%A6)+
 504 8062 3038 04CA 	         MOVE.W  BERRD,%D0
 505 8066 6100 1948 	         BSR     PNT4HX         | FORMAT FUNCTION CODE
 506               	
 507 806a 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 508 806e 2038 04CC 	         MOVE.L  BERRD+2,%D0
68K GAS  tutor13.s 			page 11


 509 8072 6100 192E 	         BSR     PNT8HX         | FORMAT ACCESS ADDRESS
 510               	
 511 8076 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 512 807a 3038 04D0 	         MOVE.W  BERRD+6,%D0
 513 807e 6100 1930 	         BSR     PNT4HX         | FORMAT INSTRUCTION REGISTER
 514               	
 515 8082 6100 1B86 	         BSR     OUTPUT
 516 8086 6000 18F6 	         BRA     EVECT2         | GO DISPLAY REGISTERS & PROMPT
 517               	
 518 808a 5359 4E54 	MSG008:  .ascii "SYNTAX "
 518      4158 20
 519               	
 520 8091 4552 524F 	MSG008E: .ascii "ERROR "
 520      5220 
 521               	
 522 8097 04        	MSGEOT:  DC.B    EOT
 523               	
 524 8098 5748 4154 	MSG021:  .ascii "WHAT"
 525 809c 04        	         DC.B    EOT
 526               	
 527 809d 00        	         DC.B    0              | PAD BYTE
 528               	
 529               	* PRINT WHAT
 530               	         .align  2
 531 809e 4BFA FFF8 	WHAT:    LEA     MSG021(%PC),%A5 | PRINT 'WHAT' AND ENTER MACSBUG
 532 80a2 614E      	WHAT93:  BSR.S   FIXDATA
 533               	         TRACEON = 0x04de
 534 80a4 4278 04DE 	         CLR.W   TRACEON
 535 80a8 6100 1B46 	MSG:     BSR     OUT1CR
 536 80ac 6000 0184 	         BRA     MACSBUG
 537               	
 538               	* PRINT ERROR
 539               	
 540 80b0 4BFA FFDF 	ERROR:   LEA     MSG008E(%PC),%A5
 541 80b4 60EC      	         BRA.S   WHAT93
 542               	
 543 80b6 4BFA FFD2 	SYNTAX:  LEA     MSG008(%PC),%A5  | 'SYNTAX ERROR'
 544 80ba 60E6      	         BRA.S   WHAT93
 545               	
 546               	* FORMAT PHYSICAL ADDRESS FROM (D0)
 547 80bc 4BFA 0022 	PPHY:    LEA     MSG019(%PC),%A5
 548 80c0 6130      	         BSR.S   FIXDATA
 549 80c2 6012      	         BRA.S   P2PHY2
 550               	
 551               	* FORMAT TWO PHYSICAL ADDRESSES FROM (A0) & (A1)
 552 80c4 4BFA 001A 	P2PHY:   LEA     MSG019(%PC),%A5  | 'PHYSICAL ADDRESS='
 553 80c8 6128      	         BSR.S   FIXDATA
 554 80ca 2008      	         MOVE.L  %A0,%D0
 555 80cc 6100 18D4 	         BSR     PNT8HX         | FORMAT ADDR1
 556 80d0 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE FOR FORMATING
 557 80d4 2009      	         MOVE.L  %A1,%D0
 558 80d6 6100 18CA 	P2PHY2:  BSR     PNT8HX         | FORMAT ADDR2
 559 80da 6100 1B14 	         BSR     OUT1CR         | DISPLAY IT
 560 80de 4E75      	         RTS
 561               	
 562 80e0 5048 5953 	MSG019:  .ascii  "PHYSICAL ADDRESS="
 562      4943 414C 
68K GAS  tutor13.s 			page 12


 562      2041 4444 
 562      5245 5353 
 562      3D
 563 80f1 04        	         DC.B    EOT
 564               	
 565               	*************************************************************
 566               	* -FIXDATA- SUBROUTINE...  MOVES MESSAGE POINTED TO BY (A5) *
 567               	*                          INTO "BUFFER". EOT, ($04), ENDS  *
 568               	*                          THE MOVE. AT COMPLETION (A5) IS  *
 569               	*                          POINTING AT THE BEGINNING, (A6)  *
 570               	*                          POINTS AT END.                   *
 571               	*************************************************************
 572               	
 573               	         BUFFER = 0x0540
 574 80f2 4DF8 0540 	FIXDATA: LEA     BUFFER,%A6
 575 80f6 0C15 0004 	FIXDADD: CMPI.B  #EOT,(%A5)
 576 80fa 6704      	         BEQ.S   FIXD2
 577 80fc 1CDD      	         MOVE.B  (%A5)+,(%A6)+
 578 80fe 60F6      	         BRA.S   FIXDADD
 579 8100 4BF8 0540 	FIXD2:   LEA     BUFFER,%A5
 580 8104 4E75      	         RTS
 581               	
 582               	************************************************************
 583               	* -FIXDCRLF- SUBROUTINE INSERTS A CARRIAGE RETURN AND LINE *
 584               	*                       FEED IN FRONT OF THE TEXT, THEN    *
 585               	*                       USES THE REMAINING PORTION OF THE  *
 586               	*                       FIXDATA.                           *
 587               	************************************************************
 588               	
 589 8106 4DF8 0540 	FIXDCRLF:LEA     BUFFER,%A6
 590 810a 3CFC 0D0A 	         MOVE.W  #0x0D0A,(%A6)+   | CR,LF
 591 810e 60E6      	         BRA.S   FIXDADD
 592               	
 593               	*-------------------------------------------------------------------------
 594               	* File E         VERSAbug entry point                             01/08/81
 595               	
 596               	**********************
 597               	* INITIALIZE VECTORS *
 598               	**********************
 599               	*                                 Set most vectors to point at "????" routine
 600 8110 41F8 0008 	INITVECT:LEA     8,%A0          | Skip (Restart) STACK & ADDRESS vectors
 601 8114 43FA 184C 	         LEA     ABORTE(%PC),%A1 | A1 = "Default" TRAP ERROR routine address
 602               	
 603 8118 20C9      	INIT0:   MOVE.L  %A1,(%A0)+     | INITIALIZE VECTOR
 604 811a B1FC 0000 	         CMPA.L  #0x400,%A0     | Done?
 604      0400 
 605 8120 6BF6      	         BMI.S   INIT0          | *
 606 8122 4E75      	         RTS
 607               	
 608               	* SPECIAL ENTRY THAT DOES NOT CHANGE VECTORS
 609               	
 610               	         REGSR = 0x00000404
 611 8124 48B8 0001 	START1S: MOVEM.W %D0,REGSR+2     | Assure good parity.
 611      0406 
 612 812a 40F8 0406 	         MOVE.W  %SR,REGSR+2     | SAVE TARGET'S STATUS REGISTER
 613 812e 21CF 0444 	         MOVE.L  %A7,REGA7       | SAVE TARGET'S STACK
 614               	         REGPC = 0x0400
68K GAS  tutor13.s 			page 13


 615 8132 21D7 0400 	         MOVE.L  (%A7),REGPC     | .PROGRAM COUNTER
 616 8136 4FF8 0444 	         LEA     REGA7,%A7
 617 813a 48E7 FFFE 	         MOVEM.L %D0-%D7/%A0-%A6,-(%A7) | .REGISTERS
 618               	         SYSTACK = 0x0786
 619 813e 4FF8 0786 	         LEA     SYSTACK,%A7
 620 8142 6000 0020 	         BRA     START11
 621               	
 622               	************************
 623               	*    INITIALIZATION    *
 624               	************************
 625               	
 626               	* SAVE PROCESSOR REGISTERS (EXCEPT A7 & PC)
 627               	
 628               	         .align 2
 629 8146 48B8 0001 	START:   MOVEM.W %D0,REGSR+2    | Assure good parity
 629      0406 
 630 814c 40F8 0406 	         MOVE.W  %SR,REGSR+2    | SAVE STATUS REGISTER
 631 8150 48E7 FFFE 	         MOVEM.L %D0-%D7/%A0-%A6,-(%A7)
 632               	
 633 8154 4FF8 0786 	         LEA     SYSTACK,%A7    | SET UP STACK
 634 8158 21CF 0444 	         MOVE.L  %A7,REGA7
 635               	
 636 815c 4281      	         CLR.L   %D1
 637 815e 21C1 0400 	         MOVE.L  %D1,REGPC      | PC = 000000
 638               	
 639 8162 61AC      	         BSR.S   INITVECT
 640               	
 641 8164 46FC 2700 	START11: MOVE.W  #0x2700,%SR     | MASK OFF INTERRUPTS
 642               	
 643 8168 4E68      	         MOVE.L  %USP,%A0
 644               	         REGUS = 0x0448
 645 816a 21C8 0448 	         MOVE.L  %A0,REGUS      | USER STACK
 646               	
 647 816e 6100 FE9C 	         BSR     INITHRAM       | ZERO (INITIALIZE) HIGH RAM
 648               	
 649               	* VECTMSG.SA
 650 8172 6100 0206 	         BSR     INITVMSG
 651               	
 652               	* H.SA
 653               	         AV4 = 0x0010
 654               	         ADDR2MEM CHKBP,AV4     | ILLEGAL INSTRUCTION
 654 8176 487A 0C6C 	>  PEA CHKBP(%PC)
 654 817a 21DF 0010 	>  MOVE.L (%A7)+,AV4
 655               	
 656               	* TM.SA
 657               	         TMCHARS = 0x04ea
 658 817e 31FC 1801 	         MOVE.W  #0x1801,TMCHARS | CNTLX,CNTL/A
 658      04EA 
 659               	
 660               	* W.SA
 661               	         AV31 = 0x007c
 662               	         ADDR2MEM  ABORTB,AV31  | ABORT
 662 8184 487A 1798 	>  PEA ABORTB(%PC)
 662 8188 21DF 007C 	>  MOVE.L (%A7)+,AV31
 663               	
 664               	* Y.SA
 665               	         OUTPORT1 = 0x0630
68K GAS  tutor13.s 			page 14


 666               	         ADDR2MEM  OUT1CR0,OUTPORT1 | INITIALIZE I/O ROUTINES
 666 818c 487A 1A7C 	>  PEA OUT1CR0(%PC)
 666 8190 21DF 0630 	>  MOVE.L (%A7)+,OUTPORT1
 667               	         OUTPORT2 = 0x0638
 668               	         ADDR2MEM  OUTPUT20,OUTPORT2
 668 8194 487A 1A94 	>  PEA OUTPUT20(%PC)
 668 8198 21DF 0638 	>  MOVE.L (%A7)+,OUTPORT2
 669               	         OUTPORT3 = 0x0640
 670               	         ADDR2MEM  PRCRLF,OUTPORT3     | PRINTER DRIVER
 670 819c 487A 1BC8 	>  PEA PRCRLF(%PC)
 670 81a0 21DF 0640 	>  MOVE.L (%A7)+,OUTPORT3
 671               	         OUTPORT4 = 0x0648
 672               	         ADDR2MEM  TAPEOUT,OUTPORT4    | CASSETTE
 672 81a4 487A 1CF6 	>  PEA TAPEOUT(%PC)
 672 81a8 21DF 0648 	>  MOVE.L (%A7)+,OUTPORT4
 673               	         INPORT1 = 0x062c
 674               	         ADDR2MEM  PORTIN10,INPORT1
 674 81ac 487A 1B10 	>  PEA PORTIN10(%PC)
 674 81b0 21DF 062C 	>  MOVE.L (%A7)+,INPORT1
 675               	         INPORT2 = 0x0634
 676               	         ADDR2MEM  PORTIN20,INPORT2
 676 81b4 487A 1E1E 	>  PEA PORTIN20(%PC)
 676 81b8 21DF 0634 	>  MOVE.L (%A7)+,INPORT2
 677               	         INPORT3 = 0x063c
 678               	         ADDR2MEM  PORTIN10,INPORT3
 678 81bc 487A 1B00 	>  PEA PORTIN10(%PC)
 678 81c0 21DF 063C 	>  MOVE.L (%A7)+,INPORT3
 679               	         INPORT4 = 0x0644
 680               	         ADDR2MEM  TAPEIN,INPORT4      | CASSETTE
 680 81c4 487A 1ED6 	>  PEA TAPEIN(%PC)
 680 81c8 21DF 0644 	>  MOVE.L (%A7)+,INPORT4
 681               	
 682               	         TAPENULS = 0x0654
 683 81cc 11FC 0008 	         MOVE.B  #8,TAPENULS    | NULLS FOR CASSETTE
 683      0654 
 684               	         PDIPORT = 0x064E
 685 81d2 21FC 0001 	         MOVE.L  #PDI1,PDIPORT  | PRINTER
 685      0000 064E 
 686               	
 687               	*        INITIALIZE MC68230 PI/T
 688 81da 207C 0001 	         MOVE.L  #PDI1,%A0       | BASE ADDRESS OF PI/T
 688      0000 
 689 81e0 203C 0000 	         MOVE.L  #0x0000FF00,%D0
 689      FF00 
 690 81e6 01C8 0001 	         MOVEP.L %D0,1(%A0)
 691               	
 692               	*        SELECT MODE 0
 693               	*        IRQ'S INACTIVATED
 694               	*        PORT A--ALL BITS OUTPUTS
 695               	*        PORT B--ALL BITS INPUTS
 696               	
 697 81ea 117C 0060 	         MOVE.B  #0x60,13(%A0)    | SUBMODE 01 FOR PORT A; INTERLOCKED HANDS
 697      000D 
 698 81f0 117C 00A0 	         MOVE.B  #0xA0,15(%A0)    | SUBMODE 1X FOR PORT B
 698      000F 
 699 81f6 117C 0030 	         MOVE.B  #0x30,1(%A0)     | ENABLE HANDSHAKE LINES
 699      0001 
68K GAS  tutor13.s 			page 15


 700 81fc 117C 00A8 	         MOVE.B  #0xA8,15(%A0)    | RESET AND INIT PRINTER
 700      000F 
 701 8202 21FC 0001 	         MOVE.L  #PDI1+0x10,PDIPORT
 701      0010 064E 
 702               	
 703 820a 117C 00A0 	         MOVE.B  #0xA0,15(%A0)    | CLEAR INIT
 703      000F 
 704               	
 705               	* INITIALIZE THE PDI'S
 706               	
 707               	         MD1CON = 0x064c
 708 8210 31FC 1515 	         MOVE.W  #0x1515,MD1CON
 708      064C 
 709 8216 6100 1D62 	         BSR     INITSER        | RESET & PROGRAM PDI
 710               	
 711               	* INITIALIZE XON/XOFF (READER ON / READER OFF)
 712               	*            AUTO-LINE FEED OVERRIDE
 713               	
 714               	         XONOFF = 0x04e6
 715 821a 21FC 0000 	         MOVE.L  #0x00000000,XONOFF
 715      0000 04E6 
 716               	
 717               	* TRAP14.SA
 718               	         AV46 = 0x00b8
 719               	         ADDR2MEM  TRAP14,AV46
 719 8222 487A 3C4C 	>  PEA TRAP14(%PC)
 719 8226 21DF 00B8 	>  MOVE.L (%A7)+,AV46
 720               	         CTLINK = 0x0656
 721               	*        MOVE.L  #(254<<24)+CT,CTLINK
 722 822a 21FC FE00 	         MOVE.L  #0xfe00bf14,CTLINK
 722      BF14 0656 
 723               	
 724               	************************************************************************
 725               	*                    V E R S I O N   N U M B E R   A N D   P R O M P T *
 726               	************************************************************************
 727               	
 728 8232 46FC 2700 	MACSBUG: MOVE.W  #0x2700,%SR    | MASK OFF INTERRUPTS
 729 8236 4FF8 0786 	         LEA     SYSTACK,%A7    | RESTORE SYSTEM STACK
 730 823a 6100 0B60 	         BSR     SWAPOUT        | GET BP OUT OF USER MEMORY
 731               	
 732               	         BPTILL = 0x0490
 733 823e 42B8 0490 	         CLR.L   BPTILL         | GET RID OF 'TILL' BREAKPOINT
 734               	         OUTTO = 0x061c
 735 8242 42B8 061C 	         CLR.L   OUTTO          | INITIALIZE I/O TO DEFAULT
 736               	         INFROM = 0x0620
 737 8246 42B8 0620 	         CLR.L   INFROM         | INITIALIZE I/O TO DEFAULT
 738               	         ECHOPT1 = 0x04e2
 739 824a 4238 04E2 	         CLR.B   ECHOPT1        | NO ECHO TO PORT1
 740               	
 741 824e 4BFA 00AA 	         LEA     MSG001(%PC),%A5 | > (Prompt)
 742 8252 6100 FE9E 	         BSR     FIXDATA
 743               	
 744 8256 4A78 04DE 	         TST.W   TRACEON        | SEE IF IN TRACE MODE
 745 825a 6704      	         BEQ.S   MACSBUG1
 746 825c 1CFC 003A 	         MOVE.B  #':',(%A6)+    | IN TRACE MODE
 747 8260 1CFC 003E 	MACSBUG1:MOVE.B  #'>',(%A6)+    | PROMPT
 748 8264 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | .. SPACE
68K GAS  tutor13.s 			page 16


 749 8268 6100 19A0 	         BSR     OUTPUT         | GO PRINT IT
 750               	
 751               	* INPUT LINE
 752 826c 6100 1A28 	         BSR     FIXBUF         | GET READY FOR INPUT
 753 8270 6100 1A2C 	         BSR     PORTIN1        | GET A COMMAND
 754 8274 1CBC 0020 	DECODE6: MOVE.B  #BLANK,(%A6)   | BLANK OUT END+1
 755               	
 756               	*  DECODE A COMMAND
 757               	*
 758               	*  DECODE SPECIAL CHARACTER USAGE:
 759               	*    LEADING SPACES IGNORED
 760               	*    LEADING NULLS IGNORED
 761               	*    IF SECOND CHAR  *  CHAR CAN BE ANY CHAR
 762               	
 763 8278 BBCE      	         CMP.L   %A6,%A5        | SEE IF ANYTHING ENTERED
 764 827a 6B08      	         BMI.S   DECODE1
 765 827c 4A78 04DE 	         TST.W   TRACEON        | SEE IF IN TRACE MODE
 766 8280 6600 031A 	         BNE     TCMDHOT        | DIRECT TO TRACE 1 COMMAND
 767               	
 768 8284 BBCE      	DECODE1: CMP.L   %A6,%A5        | SEE IF AT END OF BUFFER
 769 8286 6200 FE16 	         BHI     WHAT           | GO TO 'WHAT' IF CONFUSED
 770 828a 1015      	         MOVE.B  (%A5),%D0      | GRAB FIRST CHARACTER
 771 828c 0C00 002A 	         CMPI.B  #'*',%D0       | SEND LINE COMMAND
 772 8290 6608      	         BNE.S   DECODE10
 773 8292 528D      	         ADDQ.L  #1,%A5         | GET PAST PHOENY PROMPT
 774 8294 6100 197E 	         BSR     OUTPUT2        | SEND LINE+CR (NO LF) TO PORT2
 775 8298 6098      	         BRA.S   MACSBUG        | REENTER COMMAND MODE
 776               	
 777 829a 0C00 0020 	DECODE10:CMPI.B  #0x20,%D0      | IGNORE LEADING SPACES
 778 829e 6604      	         BNE.S   DECODE2        | WHERE TO GO IF NOT A SPACE
 779 82a0 528D      	         ADDQ.L  #1,%A5         | BUMP START OF BUFFER
 780 82a2 60E0      	         BRA.S   DECODE1        | TRY NEXT CHARACTER
 781               	*
 782 82a4 1215      	DECODE2: MOVE.B  (%A5),%D1      | GET 2 LETTERS OF COMMAND
 783 82a6 E149      	         LSL.W   #8,%D1         | MAKE ROOM FOR SECOND CHAR
 784 82a8 122D 0001 	         MOVE.B  1(%A5),%D1     | GET SECOND CHAR
 785 82ac 4283      	         CLR.L   %D3            | D3 = CLEAR "NO" SWITCH
 786               	
 787 82ae 43FA 0058 	DECODE21:LEA     SOLIST(%PC),%A1 | A1 = COMMAND LIST ADDRESS
 788 82b2 3419      	DECODE4: MOVE.W  (%A1)+,%D2     | D2 = 2 CHAR COMMAND FROM LIST
 789 82b4 4280      	         CLR.L   %D0            | CLEAR HIGH BITS
 790 82b6 3019      	         MOVE.W  (%A1)+,%D0     | D0 = OFFSET FROM START OF ROM
 791               	
 792 82b8 4A83      	         TST.L   %D3
 793 82ba 6704      	         BEQ.S   DECODE41       | NOT A "NO"
 794 82bc 4A02      	         TST.B   %D2            | IS "NO" OPTION SUPPORTED THIS COMMAND?
 795 82be 6AF2      	         BPL.S   DECODE4        | NO...THEN RUN OUT OF COMMANDS
 796               	
 797 82c0 0242 7F7F 	DECODE41:ANDI.W  #0x7F7F,%D2    | CLEAR "INVISABLE" & "NO" BITS
 798 82c4 0C42 7F7F 	         CMPI.W  #0x7F7F,%D2    | END OF LIST?
 799 82c8 6700 FDD4 	         BEQ     WHAT           | Command not found
 800               	
 801 82cc 0C02 002A 	         CMPI.B  #'*',%D2       | SEE IF DON'T CARE CHARACTER
 802 82d0 6602      	         BNE.S   DECODE3
 803 82d2 1401      	         MOVE.B  %D1,%D2        | DEFAULT
 804               	
 805 82d4 B441      	DECODE3: CMP.W   %D1,%D2        | Command from table = the input?
68K GAS  tutor13.s 			page 17


 806 82d6 66DA      	         BNE.S   DECODE4        | COMMAND NOT FOUND
 807               	
 808 82d8 4278 04DE 	         CLR.W   TRACEON        | TURN OFF TRACE MODE
 809               	
 810 82dc 548D      	         ADDQ.L  #2,%A5         | POINT A5 PAST 2 DIGIT COMMAND
 811               	
 812 82de 487A FD20 	         PEA     FIRST(%PC)     | BUILD GO TO ADDRESS
 813 82e2 D197      	         ADD.L   %D0,(%A7)      | ON STACK.
 814 82e4 D797      	         ADD.L   %D3,(%A7)
 815               	
 816 82e6 205F      	         MOVE.L  (%A7)+,%A0     | GO TO COMMAND
 817 82e8 4E90      	         JSR     (%A0)          | * SAVE MARK FOR RETURN
 818 82ea 6000 FF46 	         BRA     MACSBUG        | *  RETURN HERE
 819               	
 820               	*
 821               	*    NO COMMAND
 822               	*
 823 82ee 76FC      	NOCMD:   MOVEQ   #-4,%D3        | SET "NO" SWITCH
 824 82f0 1215      	         MOVE.B  (%A5),%D1      | MOVE CHAR #3
 825 82f2 E141      	         ASL.W   #8,%D1         | MOVE OVER 1 CHAR
 826 82f4 122D 0001 	         MOVE.B  1(%A5),%D1     | MOVE CHAR #4
 827 82f8 60B4      	         BRA.S   DECODE21       | WHICH "NO" COMMAND?
 828               	
 829               	*-------------------------------------------------------------------------
 830               	* File COMMANDS  Command list                                     06/20/82
 831               	
 832 82fa 0D0A      	MSG001:  DC.B    CR,LF
 833 82fc 5455 544F 	         .ascii  "TUTOR  1.3 "
 833      5220 2031 
 833      2E33 20
 834 8307 04        	         DC.B    EOT            | "PROMPT"
 835               	
 836               	*******************************************************
 837               	* C O P Y R I G H T . 1 9 8 1 . B Y . M O T O R O L A *
 838               	******************************************************
 839               	
 840               	* VERSAbug command generation macro
 841               	CMD:     .MACRO a1,a2,a3,a4
 842               	FLAG      =     0              |
 843               	         .IFC    "\a2","HELP=NO"
 844               	FLAG     =     FLAG+0x8000     | "Help" will not display this command
 845               	         .ENDIF
 846               	         .IFC    "\a3","HELP=NO"
 847               	FLAG     =     FLAG+0x8000     | "Help" will not display this command
 848               	         .ENDIF
 849               	         .IFC    "\a2","NORTN=YES"
 850               	FLAG     =       FLAG+0x80       | "NO\1".Command
 851               	         .ENDIF
 852               	         .IFC    "\a3","NORTN=YES"
 853               	FLAG     =       FLAG+0x80       | "NO\1".Command
 854               	         .ENDIF
 855               	         .IFC    "\a1","PER"    | Check for the "PER" command
 856               	         .ascii  ".*" | +FLAG      | Reg commands (.A2 .D6 .PC .R0 etc.)
 857               	         DC.W    PERCMD-FIRST   |*************************************
 858               	         .ENDIF
 859               	         .IFNC   "\a1","PER"     | If not PERCMD...
 860               	         .IFEQ   "\a1"&(0xFF00)   | If 1 digit code, 2nd will be a blank.
68K GAS  tutor13.s 			page 18


 861               	         .ascii  "\a1 "  | +FLAG     | "\1"....Command  -  -  (Single Digit)
 862               	         .ENDIF
 863               	         .IFNE   "\a1"&(0xFF00)   | If 2 digit code, leave as is.
 864               	         .ascii  "\a1"  | +FLAG      | "\1"...Command
 865               	         .ENDIF
 866               	         DC.W    \a1\()CMD-FIRST    |************************************
 867               	         .ENDIF
 868               	         .ENDM
 869               	
 870               	SOLIST:  .align  2               | Start Of LIST
 871               	
 872               	*        CMD     PER,"HELP=NO",X,X
 873 8308 AE2A 158C 	         DC.B    0xAE, 0x2A, 0x15, 0x8C
 874               	*        CMD     NO,"HELP=NO",X,X
 875 830c CE4F 02EE 	         DC.B    0xCE, 0x4F, 0x02, 0xEE
 876               	*        CMD     BF,X,X
 877 8310 4246 04E4 	         DC.B    0x42, 0x46, 0x04, 0xE4
 878               	*        CMD     BM,X,X
 879 8314 424D 0536 	         DC.B    0x42, 0x4D, 0x05, 0x36
 880               	*        CMD     BR,"NORTN=YES",X,X
 881 8318 42D2 0652 	         DC.B    0x42, 0xD2, 0x06, 0x52
 882               	*        CMD     BS,X,X
 883 831c 4253 0718 	         DC.B    0x42, 0x53, 0x07, 0x18
 884               	*        CMD     BT,X,X
 885 8320 4254 0852 	         DC.B    0x42, 0x54, 0x08, 0x52
 886               	*        CMD     DC,X,X
 887 8324 4443 08A4 	         DC.B    0x44, 0x43, 0x08, 0xA4
 888               	*        CMD     DF,X,X
 889 8328 4446 0902 	         DC.B    0x44, 0x46, 0x09, 0x02
 890               	*        CMD     DU,X,X
 891 832c 4455 0A20 	         DC.B    0x44, 0x55, 0x0A, 0x20
 892               	*        CMD     G,X,X
 893 8330 4720 0624 	         DC.B    0x47, 0x20, 0x06, 0x24
 894               	*        CMD     GD,X,X
 895 8334 4744 0632 	         DC.B    0x47, 0x44, 0x06, 0x32
 896               	*        CMD     GO,X,X
 897 8338 474F 0624 	         DC.B    0x47, 0x4F, 0x06, 0x24
 898               	*        CMD     GT,X,X
 899 833c 4754 05D8 	         DC.B    0x47, 0x54, 0x05, 0xD8
 900               	*        CMD     HE,X,X
 901 8340 4845 0E82 	         DC.B    0x48, 0x45, 0x0E, 0x82
 902               	*        CMD     LO,X,X
 903 8344 4C4F 0FC6 	         DC.B    0x4C, 0x4F, 0x0F, 0xC6
 904               	*        CMD     M,X,X
 905 8348 4D20 1314 	         DC.B    0x4D, 0x20, 0x13, 0x14
 906               	*        CMD     MD,X,X
 907 834c 4D44 1164 	         DC.B    0x4D, 0x44, 0x11, 0x64
 908               	*        CMD     MM,X,X
 909 8350 4D4D 1314 	         DC.B    0x4D, 0x4D, 0x13, 0x14
 910               	*        CMD     MS,X,X
 911 8354 4D53 1498 	         DC.B    0x4D, 0x53, 0x14, 0x98
 912               	*        CMD     OF,X,X
 913 8358 4F46 16BC 	         DC.B    0x4F, 0x46, 0x16, 0xBC
 914               	*        CMD     PA,"NORTN=YES",X,X
 915 835c 50C1 21BC 	         DC.B    0x50, 0xC1, 0x21, 0xBC
 916               	*        CMD     PF,X,X
 917 8360 5046 173A 	         DC.B    0x50, 0x46, 0x17, 0x3A
68K GAS  tutor13.s 			page 19


 918               	*        CMD     T,X,X
 919 8364 5420 0588 	         DC.B    0x54, 0x20, 0x05, 0x88
 920               	*        CMD     TM,X,X
 921 8368 544D 1870 	         DC.B    0x54, 0x4D, 0x18, 0x70
 922               	*        CMD     TR,X,X
 923 836c 5452 0588 	         DC.B    0x54, 0x52, 0x05, 0x88
 924               	*        CMD     TT,X,X
 925 8370 5454 05A4 	         DC.B    0x54, 0x54, 0x05, 0xA4
 926               	*        CMD     VE,X,X
 927 8374 5645 0FC0 	         DC.B    0x56, 0x45, 0x0F, 0xC0
 928               	
 929 8378 FFFF      	         DC.W    0xFFFF     | End of list indicator
 930               	
 931               	*-------------------------------------------------------------------------
 932               	* File VECTMSG   Messages for vectors                             05/29/82
 933               	
 934               	************************************************************
 935               	*Reprogram some VECTORS to specific ERROR handler routines *
 936               	************************************************************
 937               	
 938 837a 41FA 0026 	INITVMSG:LEA     VECT(%PC),%A0  | A0 = START OF VECTOR TABLE
 939 837e 43F8 0010 	         LEA     AV4,%A1        | A1 = FIRST VECTOR TO INITIALIZE
 940 8382 700A      	         MOVEQ   #10,%D0        | D0 = COUNT
 941 8384 22C8      	VECTI:   MOVE.L  %A0,(%A1)+     | MOVE ADDRESS TO VECTOR
 942 8386 D1C0      	         ADD.L   %D0,%A0        | BUMP ADDRESS
 943               	         AV11    = 0x002C
 944 8388 B3FC 0000 	         CMPA.L  #AV11+4,%A1
 944      0030 
 945 838e 66F4      	         BNE.S   VECTI
 946               	
 947               	         AV24    = 0x0060
 948 8390 43F8 0060 	         LEA     AV24,%A1       | A1 = NEXT VECTOR TO INITIALIZE
 949 8394 22C8      	VECTI2:  MOVE.L  %A0,(%A1)+     | MOVE ADDRESS TO VECTOR
 950 8396 D1C0      	         ADD.L   %D0,%A0        | BUMP ADDRESS
 951               	         AV48 = 0x00c0
 952 8398 B3FC 0000 	         CMPA.L  #AV48,%A1
 952      00C0 
 953 839e 66F4      	         BNE.S   VECTI2
 954 83a0 4E75      	         RTS
 955               	
 956               	*************************************************************************
 957               	* STANDARD VECTOR "MESSAGE" HANDLING ROUTINE ($30 IS TEMP STORAGE AREA) *
 958               	*************************************************************************
 959               	
 960 83a2 21FC 4F50 	VECT:    MOVE.L  #0x4f50434f,0x30 | "OPCO" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 960      434F 0030 
 961               	
 962 83aa 604E      	         BRA.S   EVECT5
 963 83ac 21FC 4449 	         MOVE.L  #0x44495630,0x30 | "DIV0" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 963      5630 0030 
 964               	
 965 83b4 6044      	         BRA.S   EVECT5
 966 83b6 21FC 4348 	         MOVE.L  #0x4348434b,0x30 | "CHCK" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 966      434B 0030 
 967               	
 968 83be 603A      	         BRA.S   EVECT5
 969 83c0 21FC 5450 	         MOVE.L  #0x54502056,0x30 | "TP V" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
68K GAS  tutor13.s 			page 20


 969      2056 0030 
 970               	
 971 83c8 6030      	         BRA.S   EVECT5
 972 83ca 21FC 5052 	         MOVE.L  #0x50524956,0x30 | "PRIV" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 972      4956 0030 
 973               	
 974 83d2 6026      	         BRA.S   EVECT5
 975 83d4 21FC 5452 	         MOVE.L  #0x54524143,0x30 | "TRAC" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 975      4143 0030 
 976               	
 977 83dc 601C      	         BRA.S   EVECT5
 978 83de 21FC 3130 	         MOVE.L  #0x31303130,0x30 | "1010" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 978      3130 0030 
 979               	
 980 83e6 6012      	         BRA.S   EVECT5
 981 83e8 21FC 3131 	         MOVE.L  #0x31313131,0x30 | "1111" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 981      3131 0030 
 982               	
 983 83f0 6008      	         BRA.S   EVECT5
 984 83f2 21FC 5350 	         MOVE.L  #0x53505552,0x30 | "SPUR" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 984      5552 0030 
 985               	
 986 83fa 6044      	EVECT5:  BRA.S   EVECT6
 987 83fc 21FC 4156 	         MOVE.L  #0x41562331,0x30 | "AV#1" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 987      2331 0030 
 988               	
 989 8404 603A      	         BRA.S   EVECT6
 990 8406 21FC 4156 	         MOVE.L  #0x41562332,0x30 | "AV#2" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 990      2332 0030 
 991               	
 992 840e 6030      	         BRA.S   EVECT6
 993 8410 21FC 4156 	         MOVE.L  #0x41562333,0x30 | "AV#3" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 993      2333 0030 
 994               	
 995 8418 6026      	         BRA.S   EVECT6
 996 841a 21FC 4156 	         MOVE.L  #0x41562334,0x30 | "AV#4" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 996      2334 0030 
 997               	
 998 8422 601C      	         BRA.S   EVECT6
 999 8424 21FC 4156 	         MOVE.L  #0x41562335,0x30 | "AV#5" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 999      2335 0030 
 1000               	
 1001 842c 6012      	         BRA.S   EVECT6
 1002 842e 21FC 4156 	         MOVE.L  #0x41562336,0x30 | "AV#6" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1002      2336 0030 
 1003               	
 1004 8436 6008      	         BRA.S   EVECT6
 1005 8438 21FC 4156 	         MOVE.L  #0x41562337,0x30 | "AV#7" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1005      2337 0030 
 1006               	
 1007 8440 604E      	EVECT6:  BRA.S   EVECT7
 1008 8442 21FC 5554 	         MOVE.L  #0x55542030,0x30 | "UT 0" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1008      2030 0030 
 1009               	
 1010 844a 6044      	         BRA.S   EVECT7
 1011 844c 21FC 5554 	         MOVE.L  #0x55542031,0x30 | "UT 1" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1011      2031 0030 
68K GAS  tutor13.s 			page 21


 1012               	
 1013 8454 603A      	         BRA.S   EVECT7
 1014 8456 21FC 5554 	         MOVE.L  #0x55542032,0x30 | "UT 2" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1014      2032 0030 
 1015               	
 1016 845e 6030      	         BRA.S   EVECT7
 1017 8460 21FC 5554 	         MOVE.L  #0x55542033,0x30 | "UT 3" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1017      2033 0030 
 1018               	
 1019 8468 6026      	         BRA.S   EVECT7
 1020 846a 21FC 5554 	         MOVE.L  #0x55542034,0x30 | "UT 4" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1020      2034 0030 
 1021               	
 1022 8472 601C      	         BRA.S   EVECT7
 1023 8474 21FC 5554 	         MOVE.L  #0x55542035,0x30 | "UT 5" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1023      2035 0030 
 1024               	
 1025 847c 6012      	         BRA.S   EVECT7
 1026 847e 21FC 5554 	         MOVE.L  #0x55542036,0x30 | "UT 6" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1026      2036 0030 
 1027               	
 1028 8486 6008      	         BRA.S   EVECT7
 1029 8488 21FC 5554 	         MOVE.L  #0x55542037,0x30 | "UT 7" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1029      2037 0030 
 1030               	
 1031 8490 604E      	EVECT7:  BRA.S   EVECT
 1032 8492 21FC 5554 	         MOVE.L  #0x55542038,0x30 | "UT 8" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1032      2038 0030 
 1033               	
 1034 849a 6044      	         BRA.S   EVECT
 1035 849c 21FC 5554 	         MOVE.L  #0x55542039,0x30 | "UT 9" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1035      2039 0030 
 1036               	
 1037 84a4 603A      	         BRA.S   EVECT
 1038 84a6 21FC 5554 	         MOVE.L  #0x55542041,0x30 | "UT A" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1038      2041 0030 
 1039               	
 1040 84ae 6030      	         BRA.S   EVECT
 1041 84b0 21FC 5554 	         MOVE.L  #0x55542042,0x30 | "UT B" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1041      2042 0030 
 1042               	
 1043 84b8 6026      	         BRA.S   EVECT
 1044 84ba 21FC 5554 	         MOVE.L  #0x55542043,0x30 | "UT C" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1044      2043 0030 
 1045               	
 1046 84c2 601C      	         BRA.S   EVECT
 1047 84c4 21FC 5554 	         MOVE.L  #0x55542044,0x30 | "UT D" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1047      2044 0030 
 1048               	
 1049 84cc 6012      	         BRA.S   EVECT
 1050 84ce 21FC 5554 	         MOVE.L  #0x55542045,0x30 | "UT E" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1050      2045 0030 
 1051               	
 1052 84d6 6108      	         BSR.S   EVECT
 1053 84d8 21FC 5554 	         MOVE.L  #0x55542046,0x30 | "UE F" MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
 1053      2046 0030 
 1054               	
68K GAS  tutor13.s 			page 22


 1055               	*
 1056               	*    SAVE REGISTERS AND PRINT VECTOR MSG
 1057               	*
 1058 84e0 6000 1488 	EVECT:   BRA     EVECTL
 1059               	
 1060               	*-------------------------------------------------------------------------
 1061               	* File BF        Block Fill command                               06/16/82
 1062               	
 1063               	*  BLOCK FILL    ADDRESS1 ADDRESS2 WORD-DATA
 1064               	
 1065 84e4 41FA FBD0 	BFCMD:   LEA     SYNTAX(%PC),%A0
 1066 84e8 6100 158A 	         BSR     FNEXTF
 1067 84ec 6100 064C 	         BSR     GETA
 1068 84f0 6100 15A0 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1069 84f4 2C00      	         MOVE.L  %D0,%D6        | D6 = FROM BEGIN ADDRESS
 1070               	
 1071 84f6 6100 157C 	         BSR     FNEXTF
 1072 84fa 6100 063E 	         BSR     GETA
 1073 84fe 6100 1592 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1074 8502 2240      	         MOVE.L  %D0,%A1          | A1 = FROM END ADDRESS
 1075               	
 1076 8504 6100 156E 	         BSR     FNEXTF         | FIND NEXT FIELD
 1077 8508 6100 15EC 	         BSR     GETNUMA        | D0 = VALUE
 1078 850c 2E00      	         MOVE.L  %D0,%D7
 1079               	
 1080 850e 2046      	         MOVE.L  %D6,%A0          | A0 = FROM BEGIN ADDRESS
 1081 8510 6100 FBB2 	         BSR     P2PHY          | DISPLAY ADDRESSES
 1082 8514 B3C8      	         CMP.L   %A0,%A1
 1083 8516 6500 FB9E 	         BCS     SYNTAX         | END ADDR TOO SMALL
 1084               	
 1085 851a 0C87 0001 	         CMPI.L  #0x10000,%D7
 1085      0000 
 1086 8520 6400 FB94 	         BCC     SYNTAX         | WORD OVERFLOW
 1087               	
 1088               	BFCMD11:
 1089 8524 3087      	         MOVE.W  %D7,(%A0)      | STORE DATA
 1090 8526 3218      	         MOVE.W  (%A0)+,%D1
 1091 8528 B247      	         CMP.W   %D7,%D1        | VERIFY DATA
 1092 852a 6600 0F5A 	         BNE     MM90           | 'DATA DID NOT STORE'
 1093               	
 1094 852e B3C8      	         CMP.L   %A0,%A1
 1095 8530 64F2      	         BCC.S   BFCMD11
 1096 8532 6000 FCFE 	         BRA     MACSBUG
 1097               	
 1098               	*-------------------------------------------------------------------------
 1099               	* File BM        BM (Block Move) Command                          11/27/81
 1100               	
 1101               	*  BLOCK MOVE
 1102               	
 1103 8536 41FA FB7E 	BMCMD:   LEA     SYNTAX(%PC),%A0
 1104 853a 6100 1538 	         BSR     FNEXTF
 1105 853e 6100 05FA 	         BSR     GETA
 1106 8542 2640      	         MOVE.L  %D0,%A3        | A3 = FROM BEGIN ADDRESS
 1107               	
 1108 8544 6100 152E 	         BSR     FNEXTF
 1109 8548 6100 05F0 	         BSR     GETA
 1110 854c 2240      	         MOVE.L  %D0,%A1        | A1 = FROM END ADDRESS
68K GAS  tutor13.s 			page 23


 1111               	
 1112 854e 6100 1524 	         BSR     FNEXTF
 1113 8552 6100 05E6 	         BSR     GETA
 1114 8556 2440      	         MOVE.L  %D0,%A2        | A2 = TO BEGIN ADDRESS
 1115               	
 1116 8558 204B      	         MOVE.L  %A3,%A0
 1117 855a 6100 FB68 	         BSR     P2PHY          | PRINT ADDRESSES (A0) & (A1)
 1118 855e 200A      	         MOVE.L  %A2,%D0
 1119 8560 6100 FB5A 	         BSR     PPHY           | PRINT TO ADDRESS
 1120               	
 1121 8564 2209      	         MOVE.L  %A1,%D1
 1122 8566 928B      	         SUB.L   %A3,%D1        | D1 =  SIZE - 1
 1123 8568 6500 FB4C 	         BCS     SYNTAX         | END LESS THAN BEGIN
 1124 856c 5281      	         ADDQ.L  #1,%D1         | D1 = COUNT (SIZE)
 1125               	
 1126 856e B5CB      	         CMP.L   %A3,%A2
 1127 8570 6408      	         BCC.S   BM122          | MOVING LOW TO HIGH
 1128               	
 1129 8572 14DB      	BM112:   MOVE.B  (%A3)+,(%A2)+  | MOVING HIGH TO LOW
 1130 8574 5381      	         SUBQ.L  #1,%D1         | COUNT
 1131 8576 66FA      	         BNE.S   BM112
 1132 8578 600A      	         BRA.S   BM142
 1133               	
 1134 857a D7C1      	BM122:   ADD.L   %D1,%A3        | MOVING LOW TO HIGH
 1135 857c D5C1      	         ADD.L   %D1,%A2
 1136 857e 1523      	BM132:   MOVE.B  -(%A3),-(%A2)
 1137 8580 5381      	         SUBQ.L  #1,%D1
 1138 8582 66FA      	         BNE.S   BM132
 1139 8584 6000 FCAC 	BM142:   BRA     MACSBUG
 1140               	
 1141               	*-------------------------------------------------------------------------
 1142               	* File BR        BR, GD, GT, TR, TT, PER Commands                 12/04/81
 1143               	
 1144               	*   ***T***   TRACE COMMAND
 1145               	
 1146               	TCMD:    .align  2              | "T" Alias for "TR" command
 1147 8588 41FA 0012 	TRCMD:   LEA     TCMDHOT(%PC),%A0 | IF NO PARAMTERS
 1148 858c 6100 14E6 	         BSR     FNEXTF         | FIND NEXT FIELD
 1149 8590 6100 1564 	         BSR     GETNUMA        | FIND NUMBER OF INST TO TRACE
 1150 8594 6100 1502 	         BSR     CKADDR         | INSURE 24 BITS OR LESS
 1151 8598 4A80      	         TST.L   %D0
 1152 859a 6602      	         BNE.S   TCMD15
 1153               	
 1154               	TCMDHOT: .align  2              | SPECIAL ENTRY FROM DECODE
 1155 859c 7001      	         MOVEQ   #1,%D0         | ZERO; MAKE TRACE ONE
 1156               	         TRACECNT = 0x04da
 1157 859e 21C0 04DA 	TCMD15:  MOVE.L  %D0,TRACECNT
 1158 85a2 6022      	         BRA.S   TRACE2
 1159               	
 1160               	*
 1161               	** TT ** "TRACE TILL" COMMAND
 1162               	*
 1163               	
 1164 85a4 41FA FB10 	TTCMD:   LEA     SYNTAX(%PC),%A0
 1165 85a8 6100 14CA 	         BSR     FNEXTF         | FIND NEXT FIELD
 1166 85ac 6100 058C 	         BSR     GETA           | GET ADDRESS
 1167 85b0 6100 14E0 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
68K GAS  tutor13.s 			page 24


 1168               	
 1169 85b4 2C00      	         MOVE.L  %D0,%D6
 1170 85b6 6100 FB04 	         BSR     PPHY           | DISPLAY TILL ADDRESS
 1171               	
 1172 85ba 21C6 0490 	         MOVE.L  %D6,BPTILL      | 9TH BP
 1173 85be 21FC 0000 	         MOVE.L  #0xFFFF,TRACECNT  | SET FOR A VERY LONG TIME
 1173      FFFF 04DA 
 1174               	
 1175 85c6 31FC FFFF 	TRACE2:  MOVE.W  #-1,TRACEON    | FOR DECODE OF NEXT COMMAND
 1175      04DE 
 1176               	
 1177 85cc 2038 0400 	         MOVE.L  REGPC,%D0
 1178 85d0 6100 FAEA 	         BSR     PPHY           | DISPLAY START (PC) ADDRESS
 1179 85d4 6000 0778 	         BRA     UNTRACE
 1180               	
 1181               	*
 1182               	*   ***GT***  RUN PROGRAM TO TEMP BREAKPOINT
 1183               	*
 1184               	
 1185 85d8 41FA FADC 	GTCMD:   LEA     SYNTAX(%PC),%A0  | GET NUMBER ELSE PRINT "WHAT"
 1186 85dc 6100 1496 	         BSR     FNEXTF         | FIND NEXT FIELD
 1187 85e0 6100 0558 	         BSR     GETA           | GET ADDRESS
 1188 85e4 6100 14AC 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1189 85e8 2C00      	         MOVE.L  %D0,%D6        | D6 = UNTIL ADDRESS
 1190 85ea 6100 FAD0 	         BSR     PPHY           | PRINT PHYSICAL ADDRESS
 1191               	
 1192               	* IF TILL ADDRESS IN BREAKPOINT TABLE; DISPLAY WHAT
 1193               	
 1194               	         BPADD = 0x0470
 1195 85ee 41F8 0470 	         LEA     BPADD,%A0     | A0 = POINTER TO BP ADDRESSES
 1196 85f2 7E08      	         MOVEQ   #8,%D7        | D7 = # OF ADDRESS ALLOWED
 1197 85f4 BC98      	GT21:    CMP.L   (%A0)+,%D6
 1198 85f6 6700 00A0 	         BEQ     BCMD55         | ALREADY IN TABLE -SHOW TABLE-
 1199 85fa 5387      	         SUBQ.L  #1,%D7
 1200 85fc 66F6      	         BNE.S   GT21
 1201               	
 1202 85fe 21C6 0490 	         MOVE.L  %D6,BPTILL     | 9TH BREAKPOINT
 1203 8602 6116      	         BSR.S   GOCMD1A        | NORMAL STARTUP
 1204 8604 6020      	         BRA.S   GOCMD1
 1205               	
 1206 8606 41FA 0012 	GOSET1:  LEA     GOCMD1A(%PC),%A0 | WHERE TO GO IF NO PARAMERS
 1207 860a 6100 1468 	         BSR     FNEXTF         | FIND NEXT FIELD
 1208 860e 6100 052A 	         BSR     GETA           | GET ADDRESS
 1209 8612 6100 147E 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1210 8616 21C0 0400 	         MOVE.L  %D0,REGPC
 1211               	
 1212 861a 2038 0400 	GOCMD1A: MOVE.L  REGPC,%D0       | (ALSO SUBROUTINE ENTRY)
 1213 861e 6100 FA9C 	         BSR     PPHY           | PRINT ".PC" PHYSICAL ADDRESS
 1214 8622 4E75      	         RTS
 1215               	
 1216               	GCMD:    .align  2              | "G" ALIAS FOR "GO"
 1217 8624 61E0      	GOCMD:   BSR.S   GOSET1         | "GO" (AFTER TRACING ONE INST)
 1218 8626 21FC FFFF 	GOCMD1:  MOVE.L  #-1,TRACECNT   | "FLAG" COUNTER AS SPECIAL
 1218      FFFF 04DA 
 1219               	
 1220 862e 6000 071E 	         BRA     UNTRACE
 1221               	
68K GAS  tutor13.s 			page 25


 1222 8632 61D2      	GDCMD:   BSR.S   GOSET1         | "GO DIRECT" Command
 1223 8634 6000 0726 	         BRA     UNSTACK
 1224               	
 1225               	*   ***BR***  SET AND PRINT BREAKPOINTS
 1226               	
 1227               	*                   DELETE ALL BREAKPOINTS
 1228               	
 1229 8638 6108      	NOBRCMD: BSR.S   FIXBP          | GET POINTERS
 1230 863a 4298      	BCMD01:  CLR.L   (%A0)+         | CLEAR THE ADDRESS TABLE
 1231 863c 5387      	         SUBQ.L  #1,%D7         | DO IT 8 TIMES
 1232 863e 66FA      	         BNE.S   BCMD01
 1233 8640 6060      	         BRA.S   BCMD7          | DISPLAY EMPTY TABLE
 1234               	
 1235 8642 41F8 0470 	FIXBP:   LEA     BPADD,%A0      | SET UP ADDRESS & COUNTER
 1236 8646 7E08      	         MOVEQ   #8,%D7         | COUNTER
 1237               	         BPCNT = 0x0494
 1238 8648 45F8 0494 	         LEA     BPCNT,%A2      | COUNTS
 1239 864c 4E75      	         RTS
 1240               	
 1241               	************************************************************
 1242               	* THIS COMMAND SUPPORTS THE "NO" OPTION. COMMANDS THAT ALLOW
 1243               	* THE "NO" OPTION PROVIDE A HARD BRANCH 4 BYTES BEFORE THE
 1244               	* REGULAR COMMAND.
 1245               	************************************************************
 1246               	
 1247 864e 6000 009A 	         BRA     NOBR0          | ENTRY FOR "NOBR" (IT LOOKS FOR PARMS OR NOT)
 1248 8652 41FA 004E 	BRCMD:   LEA     BCMD7(%PC),%A0 |   WHERE TO GO IF NO PARMS
 1249 8656 6100 141C 	BCMD0:   BSR     FNEXTF         | FIND NEXT FIELD
 1250 865a 6100 04DE 	         BSR     GETA           | GET ADDRESS
 1251 865e 6100 1432 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1252               	
 1253 8662 61DE      	         BSR.S   FIXBP          | SET UP COUNTER & ADDRESS
 1254 8664 B090      	BCMD00:  CMP.L   (%A0),%D0      |  SEE IF ALREADY IN TABLE
 1255 8666 6710      	         BEQ.S   BCMD33         | GO CHECK FOR COUNT
 1256 8668 588A      	         ADDQ.L  #4,%A2         | BUMP OTHER POINTER
 1257 866a 5888      	         ADDQ.L  #4,%A0         |  BUMP MAIN POINTER
 1258 866c 5387      	         SUBQ.L  #1,%D7
 1259 866e 66F4      	         BNE.S   BCMD00
 1260               	
 1261 8670 61D0      	         BSR.S   FIXBP          | GET ADDRESS & POINTERS
 1262 8672 4A90      	BCMD3:   TST.L   (%A0)          | FIND AN EMPTY STOP
 1263 8674 661A      	         BNE.S   BCMD5
 1264 8676 2080      	         MOVE.L  %D0,(%A0)      |  PUT NEW ADDRESS IN TABLE
 1265 8678 4292      	BCMD33:  CLR.L   (%A2)          | CLEAR CURRENT COUNT
 1266 867a 1215      	         MOVE.B  (%A5),%D1      | CHECK INPUT FOR COUNT
 1267 867c 0C01 003B 	         CMPI.B  #';',%D1
 1268 8680 6608      	         BNE.S   BCMD6          | NO COUNT
 1269 8682 528D      	         ADDQ.L  #1,%A5         | BUMP THE BUFFER SCANNER
 1270 8684 6100 1470 	         BSR     GETNUMA        | GO GET THE COUNT
 1271 8688 2480      	         MOVE.L  %D0,(%A2)      | MOVE TO TABLE
 1272               	
 1273 868a 41FA 0016 	BCMD6:   LEA     BCMD7(%PC),%A0 | WHERE TO GO IF NO MORE PARAMETERS
 1274 868e 60C6      	         BRA.S   BCMD0
 1275               	
 1276 8690 5888      	BCMD5:   ADDQ.L  #4,%A0         | BUMP TABLE POINTER
 1277 8692 588A      	         ADDQ.L  #4,%A2         | BUMP POINTER TO COUNTS
 1278 8694 5387      	         SUBQ.L  #1,%D7         | LOOP AROUND
68K GAS  tutor13.s 			page 26


 1279 8696 66DA      	         BNE.S   BCMD3
 1280               	
 1281 8698 4BFA F9F7 	BCMD55:  LEA     MSG008E(%PC),%A5 | TABLE FULL; ERROR MESSAGE
 1282 869c 6100 FA54 	         BSR     FIXDATA
 1283 86a0 6008      	         BRA.S   BCMD77
 1284               	
 1285 86a2 4BFA 003A 	BCMD7:   LEA     MSGBR(%PC),%A5  | "BREAKPOINTS"
 1286 86a6 6100 FA5E 	         BSR     FIXDCRLF
 1287 86aa 6100 1544 	BCMD77:  BSR     OUT1CR
 1288               	
 1289 86ae 6192      	         BSR.S   FIXBP          | SET ADDRESS & COUNTER
 1290 86b0 2C1A      	BCMD8:   MOVE.L  (%A2)+,%D6     | D6 = COUNT
 1291 86b2 2010      	         MOVE.L  (%A0),%D0      | D0 = ADDRESS
 1292 86b4 671E      	         BEQ.S   BCMD9          | ZERO ADDRESS
 1293 86b6 6100 131C 	         BSR     FRELADDR       | FORMAT RELATIVE ADDRESS
 1294 86ba 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+
 1295               	
 1296 86be 2010      	         MOVE.L  (%A0),%D0       | FORMAT ABSOLUTE ADDRESS
 1297 86c0 6100 12E8 	         BSR     PNT6HX
 1298 86c4 2006      	         MOVE.L  %D6,%D0
 1299 86c6 6708      	         BEQ.S   BCMD81         | DON'T PRINT ZERO COUNT
 1300 86c8 1CFC 003B 	         MOVE.B  #';',(%A6)+
 1301 86cc 6100 1360 	         BSR     PNTZHX         | PRINT WITH ZERO SURPRESS
 1302               	
 1303 86d0 6100 151E 	BCMD81:  BSR     OUT1CR
 1304 86d4 5888      	BCMD9:   ADDQ.L  #4,%A0
 1305 86d6 5387      	         SUBQ.L  #1,%D7         | LOOP AROUND
 1306 86d8 66D6      	         BNE.S   BCMD8
 1307 86da 6000 FB56 	         BRA     MACSBUG
 1308               	
 1309 86de 4252 4541 	MSGBR:   .ascii  "BREAKPOINTS"
 1309      4B50 4F49 
 1309      4E54 53
 1310 86e9 04        	         DC.B    EOT
 1311               	
 1312               	* NOBR COMMAND
 1313               	
 1314 86ea 41FA FF4C 	NOBR0:   LEA     NOBRCMD(%PC),%A0 | WHERE TO GO IF NO PARAMETERS
 1315 86ee 6100 1384 	NOBR1:   BSR     FNEXTF         | FIND NEXT FIELD
 1316 86f2 6100 0446 	         BSR     GETA           | GO DECODE NUMBER/ADDRESS
 1317 86f6 4A80      	         TST.L   %D0
 1318 86f8 679E      	         BEQ.S   BCMD55         | ZERO NOT VALID BREAKPOINT
 1319 86fa 6100 1396 	         BSR     CKWADR         | CHECK WORD BOUNDRY ADDRESS
 1320               	
 1321 86fe 41F8 0470 	         LEA     BPADD,%A0      | SET UP TABLE POINTER
 1322 8702 7E08      	         MOVEQ   #8,%D7         | COUNTER
 1323 8704 2210      	NOBR3:   MOVE.L  (%A0),%D1      | GET BREAKPOINT IN TABLE
 1324 8706 B081      	         CMP.L   %D1,%D0        | SEE IF SAME
 1325 8708 6706      	         BEQ.S   NOBR4
 1326 870a 5888      	         ADDQ.L  #4,%A0
 1327 870c 5387      	         SUBQ.L  #1,%D7
 1328 870e 66F4      	         BNE.S   NOBR3
 1329 8710 4290      	NOBR4:   CLR.L   (%A0)           | CLEAR THIS BREAKPOINT
 1330 8712 41FA FF8E 	         LEA     BCMD7(%PC),%A0  | WHERE TO GO IF NO PARAMETER
 1331 8716 60D6      	         BRA.S   NOBR1
 1332               	
 1333               	*-------------------------------------------------------------------------
68K GAS  tutor13.s 			page 27


 1334               	* File BS        BS (Block Search) Command                        11/27/81
 1335               	
 1336               	*
 1337               	*  BLOCK SEARCH   BS <ADDR1> <ADDR2> 'LITERAL STRING'
 1338               	*                 BS <ADDR1> <ADDR2> <DATA> [<MASK>] [;<OPTION>]
 1339               	
 1340 8718 41FA F99C 	BSCMD:   LEA     SYNTAX(%PC),%A0
 1341 871c 6100 1356 	         BSR     FNEXTF
 1342 8720 6100 0418 	         BSR     GETA
 1343 8724 2640      	         MOVE.L  %D0,%A3          | A3 = FROM BEGIN ADDRESS
 1344               	
 1345 8726 6100 134C 	         BSR     FNEXTF
 1346 872a 6100 040E 	         BSR     GETA
 1347 872e 2240      	         MOVE.L  %D0,%A1         | A1 = FROM END ADDRESS
 1348               	
 1349 8730 6100 1342 	         BSR     FNEXTF
 1350 8734 1015      	         MOVE.B  (%A5),%D0
 1351 8736 0C00 0027 	         CMPI.B  #0x27,%D0
 1352 873a 6700 00B0 	         BEQ     BS311          | LITERAL STRING SEARCH
 1353               	
 1354 873e 6100 13B6 	         BSR     GETNUMA
 1355 8742 2E00      	         MOVE.L  %D0,%D7          | D7 = DATA WE ARE LOOKING FOR
 1356 8744 4285      	         CLR.L   %D5             | SCAN FOR OPTIONS
 1357 8746 204D      	         MOVE.L  %A5,%A0
 1358 8748 B1CE      	BS91:    CMP.L   %A6,%A0
 1359 874a 6426      	         BCC.S   BS97           | AT END OF BUFFER
 1360               	
 1361 874c 1018      	         MOVE.B  (%A0)+,%D0
 1362 874e 0C00 003B 	         CMPI.B  #';',%D0
 1363 8752 66F4      	         BNE.S   BS91           | NOT SEMICOLON
 1364               	
 1365 8754 2C48      	         MOVE.L  %A0,%A6
 1366 8756 538E      	         SUBQ.L  #1,%A6          | ADJUST END OF BUFFER POINTER
 1367               	
 1368 8758 1010      	         MOVE.B  (%A0),%D0       | D0 = OPTION CHARACTER
 1369 875a 0C00 0042 	         CMPI.B  #'B',%D0
 1370 875e 6712      	         BEQ.S   BS97           | BYTE  D5 = 0
 1371               	
 1372 8760 7A01      	         MOVEQ   #1,%D5
 1373 8762 0C00 0057 	         CMPI.B  #'W',%D0
 1374 8766 670A      	         BEQ.S   BS97           | WORD  D5 = +
 1375               	
 1376 8768 7AFF      	         MOVEQ   #-1,%D5         | LONG WORD  D5 = -
 1377 876a 0C00 004C 	         CMPI.B  #'L',%D0
 1378 876e 6600 F946 	         BNE     SYNTAX
 1379               	BS97:    .align  2
 1380               	
 1381 8772 78FF      	         MOVEQ   #-1,%D4         | D4 = DEFAULT SEARCH MASK
 1382 8774 41FA 000C 	         LEA     BS101(%PC),%A0
 1383 8778 6100 12FA 	         BSR     FNEXTF         | FIND NEXT FIELD
 1384 877c 6100 1378 	         BSR     GETNUMA
 1385 8780 2800      	         MOVE.L  %D0,%D4          | D4 = MASK
 1386               	BS101:   .align  2
 1387               	
 1388 8782 204B      	         MOVE.L  %A3,%A0
 1389 8784 6100 F93E 	         BSR     P2PHY          | PRINT ADDRESSES (A0) & (A1)
 1390               	
68K GAS  tutor13.s 			page 28


 1391 8788 B3CB      	         CMP.L   %A3,%A1
 1392 878a 6500 F92A 	         BCS     SYNTAX         | END LESS THAN BEGIN
 1393               	
 1394 878e B7C9      	BS200:   CMP.L   %A1,%A3
 1395 8790 6400 FAA0 	         BCC     MACSBUG        | DONE
 1396               	
 1397 8794 6100 1500 	         BSR     FIXBUF
 1398 8798 200B      	         MOVE.L  %A3,%D0
 1399 879a 6100 120E 	         BSR     PNT6HX         | FORMAT ADDRESS
 1400 879e 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+   | SPACE INTO BUFFER
 1401               	
 1402 87a2 4A85      	         TST.L   %D5
 1403 87a4 6734      	         BEQ.S   BS225          | BYTE SIZE
 1404               	
 1405 87a6 200B      	         MOVE.L  %A3,%D0
 1406 87a8 6100 12E8 	         BSR     CKWADR         | INSURE WORD BOUNDRY
 1407 87ac 4A85      	         TST.L   %D5
 1408 87ae 6A18      	         BPL.S   BS219          | WORD SIZE (2 BYTES)
 1409               	
 1410 87b0 7C02      	         MOVEQ   #2,%D6          | D6 =  SIZE (LONG WORD)
 1411 87b2 2013      	         MOVE.L  (%A3),%D0        | FETCH
 1412 87b4 C084      	         AND.L   %D4,%D0          | MASK
 1413 87b6 B087      	         CMP.L   %D7,%D0          | COMPARE
 1414 87b8 660A      	         BNE.S   BS215
 1415               	
 1416 87ba 2013      	         MOVE.L  (%A3),%D0        | DISPLAY NON-MASKED DATA
 1417 87bc 6100 11E4 	         BSR     PNT8HX
 1418               	
 1419 87c0 6100 142E 	BS213:   BSR     OUT1CR
 1420               	
 1421 87c4 D7C6      	BS215:   ADD.L   %D6,%A3          | BUMP FETCH ADDRESS  (D6 = SIZE)
 1422 87c6 60C6      	         BRA.S   BS200
 1423               	
 1424 87c8 7C02      	BS219:   MOVEQ   #2,%D6          | SIZE = WORD
 1425 87ca 3013      	         MOVE.W  (%A3),%D0
 1426 87cc C044      	         AND.W   %D4,%D0
 1427 87ce B047      	         CMP.W   %D7,%D0
 1428 87d0 66F2      	         BNE.S   BS215
 1429               	
 1430 87d2 3013      	         MOVE.W  (%A3),%D0
 1431 87d4 6100 11DA 	         BSR     PNT4HX         | DISPLAY
 1432 87d8 60E6      	         BRA.S   BS213
 1433               	
 1434 87da 7C01      	BS225:   MOVEQ   #1,%D6          | SIZE = BYTE
 1435 87dc 1013      	         MOVE.B  (%A3),%D0
 1436 87de C004      	         AND.B   %D4,%D0
 1437 87e0 B007      	         CMP.B   %D7,%D0
 1438 87e2 66E0      	         BNE.S   BS215
 1439               	
 1440 87e4 1013      	         MOVE.B  (%A3),%D0
 1441 87e6 6100 11D0 	         BSR     PNT2HX         | DISPLAY
 1442 87ea 60D4      	         BRA.S   BS213
 1443               	
 1444               	* LITERAL STRING SEARCH
 1445               	*   SAVE STRING
 1446               	
 1447               	         DUMPTEMP = 0x05c0
68K GAS  tutor13.s 			page 29


 1448 87ec 45F8 05C0 	BS311:   LEA     DUMPTEMP,%A2
 1449 87f0 528D      	BS313:   ADDQ.L  #1,%A5
 1450 87f2 BBCE      	         CMP.L   %A6,%A5
 1451 87f4 6400 F8C0 	         BCC     SYNTAX         | ADDR1 GREATER THAN ADDR2
 1452 87f8 14D5      	         MOVE.B  (%A5),(%A2)+
 1453 87fa 1015      	         MOVE.B  (%A5),%D0
 1454 87fc 0C00 0027 	         CMPI.B  #0x27,%D0
 1455 8800 66EE      	         BNE.S   BS313
 1456 8802 538A      	         SUBQ.L  #1,%A2         | A2 = END OF STRING + 1
 1457               	
 1458 8804 204B      	         MOVE.L  %A3,%A0
 1459 8806 6100 F8BC 	         BSR     P2PHY          | DISPLAY ADDRESSES
 1460               	
 1461 880a B3CB      	         CMP.L   %A3,%A1
 1462 880c 6500 F8A8 	         BCS     SYNTAX
 1463               	
 1464               	* LOOK FOR STRING MATCH
 1465               	
 1466 8810 49F8 05C0 	BS323:   LEA     DUMPTEMP,%A4   | A4 = BEGIN OF STRING
 1467 8814 204B      	         MOVE.L  %A3,%A0        | A0 = BEGIN OF MEMORY
 1468 8816 1010      	BS325:   MOVE.B  (%A0),%D0
 1469 8818 B01C      	         CMP.B   (%A4)+,%D0     | DATA COMPARE
 1470 881a 662C      	         BNE.S   BS365          | MIS-MATCH
 1471               	
 1472 881c B3C8      	         CMP.L   %A0,%A1        | ADDRESS CHECK
 1473 881e 6500 FA12 	         BCS     MACSBUG        | OUT OF MEMORY
 1474               	
 1475 8822 5288      	         ADDQ.L  #1,%A0
 1476 8824 B9CA      	         CMP.L   %A2,%A4
 1477 8826 65EE      	         BCS.S   BS325          | MORE STRING TO CHECK
 1478               	
 1479 8828 6100 146C 	         BSR     FIXBUF         | HAVE MATCH
 1480 882c 200B      	         MOVE.L  %A3,%D0        | FORMAT ADDRESS
 1481 882e 6100 117A 	         BSR     PNT6HX
 1482 8832 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+   | SPACE
 1483               	
 1484 8836 1CFC 0027 	         MOVE.B  #0x27,(%A6)+     | LEADING QUOTE
 1485 883a 49F8 05C0 	         LEA     DUMPTEMP,%A4    | MOVE STRING TO BUFFER
 1486 883e 1CDC      	BS355:   MOVE.B  (%A4)+,(%A6)+
 1487 8840 B5CC      	         CMP.L   %A4,%A2
 1488 8842 64FA      	         BCC.S   BS355
 1489               	
 1490 8844 6100 13AA 	         BSR     OUT1CR         | DISPLAY
 1491               	
 1492 8848 528B      	BS365:   ADDQ.L  #1,%A3
 1493 884a B3CB      	         CMP.L   %A3,%A1
 1494 884c 6500 F9E4 	         BCS     MACSBUG        | DONE
 1495 8850 60BE      	         BRA.S   BS323
 1496               	
 1497               	*-------------------------------------------------------------------------
 1498               	* File BT        BT (Block Test) command                          11/30/81
 1499               	
 1500               	* BT   BLOCK OF MEMORY TEST
 1501               	
 1502 8852 6100 0D00 	BTCMD:   BSR     MTSETUP        | PREPARE PARMS (FROM,TO/COUNT)
 1503 8856 6100 0FC4 	         BSR     RAMTEST        | EXEC MEMORY TEST SUBROUTINE
 1504 885a 6700 F9D6 	         BEQ     MACSBUG        | NO ERRORS, RETURN TO MACSBUG
68K GAS  tutor13.s 			page 30


 1505 885e 2F01      	         MOVE.L  %D1,-(%A7)      | SAVE DATA READ
 1506 8860 2F00      	         MOVE.L  %D0,-(%A7)      | SAVE DATA WRITTEN CAUSING ERROR
 1507               	
 1508 8862 6100 1432 	         BSR     FIXBUF         | SET UP TO PRINT
 1509 8866 2CFC 4641 	         MOVE.L  #0x4641494C,(%A6)+ | "FAIL"
 1509      494C 
 1510 886c 2CFC 4544 	         MOVE.L  #0x45442041,(%A6)+ | "ED A"
 1510      2041 
 1511 8872 3CFC 5420 	         MOVE.W  #0x5420,(%A6)+ | "T "
 1512 8876 200A      	         MOVE.L  %A2,%D0        | ADDRESS WHERE IT FAILED
 1513 8878 6100 1130 	         BSR     PNT6HX
 1514               	
 1515 887c 2CFC 2020 	         MOVE.L  #0x20205752,(%A6)+ | "  WR"
 1515      5752 
 1516 8882 2CFC 4F54 	         MOVE.L  #0x4f54453d,(%A6)+ | "OTE="
 1516      453D 
 1517 8888 201F      	         MOVE.L  (%A7)+,%D0     | WHAT WAS WRITTEN
 1518 888a 6100 1124 	         BSR     PNT4HX
 1519               	
 1520 888e 2CFC 2020 	         MOVE.L  #0x20202052,(%A6)+ | "   R"
 1520      2052 
 1521 8894 2CFC 4541 	         MOVE.L  #0x4541443d,(%A6)+ | "EAD="
 1521      443D 
 1522 889a 201F      	         MOVE.L  (%A7)+,%D0     | WHAT WAS READ
 1523 889c 6100 1112 	         BSR     PNT4HX
 1524               	
 1525 88a0 6000 F806 	         BRA     MSG            | PRINT IT
 1526               	
 1527               	*-------------------------------------------------------------------------
 1528               	* File DC        DC (Data Conversion) Command                     12/10/81
 1529               	
 1530               	*
 1531               	*
 1532               	*  ***DC***  NUMBER CONVERSIONS
 1533               	*
 1534               	DCCMD:   .align  2              | -DATA CONVERT COMMAND-
 1535 88a4 41FA F810 	NUMCON0: LEA     SYNTAX(%PC),%A0 | IF NO PARAMETERS
 1536 88a8 6100 11CA 	         BSR     FNEXTF         | POINT TO NEXT PARAMETER
 1537 88ac 6100 028C 	         BSR     GETA           | EVALUATE EXPRESSION
 1538               	
 1539 88b0 6100 13E4 	         BSR     FIXBUF         | SET UP FOR PRINT
 1540 88b4 2E00      	         MOVE.L  %D0,%D7        | D7=VALUE
 1541 88b6 4A87      	         TST.L   %D7            | SEE IF NEGATIVE
 1542 88b8 6A0E      	         BPL.S   NUMCON1
 1543 88ba 1CFC 0024 	         MOVE.B  #'$',(%A6)+
 1544 88be 2007      	         MOVE.L  %D7,%D0        | MOVE NEGATIVE RESULT TO D0
 1545 88c0 6100 10E0 	         BSR     PNT8HX
 1546 88c4 1CFC 003D 	         MOVE.B  #'=',(%A6)+
 1547 88c8 2007      	NUMCON1: MOVE.L  %D7,%D0        | RESTORE
 1548 88ca 6A08      	         BPL.S   NUMCON2
 1549 88cc 4480      	         NEG.L   %D0
 1550 88ce 6B04      	         BMI.S   NUMCON2        | SPECIAL CASE (-0)
 1551 88d0 1CFC 002D 	         MOVE.B  #'-',(%A6)+
 1552 88d4 1CFC 0024 	NUMCON2: MOVE.B  #'$',(%A6)+
 1553 88d8 6100 1154 	         BSR     PNTZHX
 1554 88dc 1CFC 003D 	         MOVE.B  #'=',(%A6)+    | NOW PRINT DECIMAL VALUE
 1555 88e0 2007      	         MOVE.L  %D7,%D0
68K GAS  tutor13.s 			page 31


 1556 88e2 6A08      	         BPL.S   NUMCON3
 1557 88e4 4480      	         NEG.L   %D0
 1558 88e6 6B04      	         BMI.S   NUMCON3        | SPECIAL CASE (-0)
 1559 88e8 1CFC 002D 	         MOVE.B  #'-',(%A6)+
 1560 88ec 1CFC 0026 	NUMCON3: MOVE.B  #'&',(%A6)+
 1561 88f0 6100 066A 	         BSR     HEX2DEC        | PUT VALUE IN BUFFER
 1562 88f4 6000 F7B2 	         BRA     MSG            | GO PRINT IT
 1563               	
 1564               	*-------------------------------------------------------------------------
 1565               	* File DFDI      DF (Display registers) WITH disassembler         05/27/82
 1566               	
 1567 88f8 5043 5352 	REGNAMES:.ascii  "PCSR"         | TABLE OF NAMES OF REGISTERS
 1568 88fc 5553 5353 	         .ascii  "USSS"
 1569 8900 3F3F      	         .ascii  "??"           | END OF TABLE
 1570               	
 1571               	DFCMD:   .align  2              | DF COMMAND  ENTRY
 1572 8902 600A      	         BRA.S   TD07
 1573               	
 1574 8904 6100 1390 	TDISPLY: BSR     FIXBUF         | PRINT TRACE DISPLAY SUBROUTINE
 1575 8908 4A38 04E9 	         TST.B   XONOFF+3
 1576 890c 6652      	         BNE.S   TD25           | SHORT DISPLAY
 1577               	
 1578 890e 6100 1386 	TD07:    BSR     FIXBUF         | PRINT PRELUDE
 1579 8912 42B8 061C 	         CLR.L   OUTTO          | FORCE DISPLAY TO OPERATORS CONSOLE
 1580               	         SCREEN1 = 0x0610
 1581 8916 2CF8 0610 	         MOVE.L  SCREEN1,(%A6)+
 1582 891a 6704      	         BEQ.S   TD09           | SKIP PRELUDE
 1583 891c 6100 12EC 	         BSR     OUTPUT
 1584               	TD09:
 1585               	
 1586 8920 49FA FFD6 	         LEA     REGNAMES(%PC),%A4 | REGISTER NAMES
 1587 8924 45F8 0400 	         LEA     REGPC,%A2      | REGISTER DATA
 1588 8928 6100 136C 	         BSR     FIXBUF         | SET UP I/O BUFFER
 1589               	
 1590 892c 301C      	TD1:     MOVE.W  (%A4)+,%D0     | GET REG NAME
 1591 892e 2E1A      	         MOVE.L  (%A2)+,%D7     | GET REG CONTENT
 1592 8930 0C40 3F3F 	         CMPI.W  #0x3f3f,%D0    | "??" SEE IF AT END OF REGS
 1593 8934 6650      	         BNE.S   TD4
 1594 8936 6100 12B8 	         BSR     OUT1CR         | PRINT BUFFER
 1595               	
 1596 893a 1E3C 0044 	         MOVE.B  #'D',%D7       | CLASS=DATA
 1597               	         REGS = 0x0408
 1598 893e 47F8 0408 	         LEA     REGS,%A3       | OFFSET
 1599 8942 6100 0D9A 	         BSR     PNTCLS         | GO PRINT THE BLOCK
 1600               	
 1601 8946 1E3C 0041 	         MOVE.B  #'A',%D7       | CLASS=ADDRESS
 1602 894a 47F8 0428 	         LEA     REGS+32,%A3    | OFFSET
 1603 894e 6100 0D8E 	         BSR     PNTCLS         | GO PRINT THE BLOCK
 1604               	
 1605 8952 6100 1342 	         BSR     FIXBUF
 1606 8956 7214      	         MOVEQ   #20,%D1        | LOOP COUNTER
 1607 8958 1CFC 002D 	TD27:    MOVE.B  #'-',(%A6)+    | FILL BUFFER WITH BOARDER
 1608 895c 5381      	         SUBQ.L  #1,%D1
 1609 895e 66F8      	         BNE.S   TD27
 1610               	
 1611 8960 2878 0400 	TD25:    MOVE.L  REGPC,%A4      | DISASSEMBLE
 1612 8964 4CD4 0007 	         MOVEM.L (%A4),%D0-%D2
68K GAS  tutor13.s 			page 32


 1613 8968 2A4E      	         MOVE.L  %A6,%A5
 1614 896a 6100 3108 	         BSR     DCODE68K
 1615 896e 4BF8 0540 	         LEA     BUFFER,%A5
 1616               	
 1617 8972 6100 127C 	         BSR     OUT1CR         | PRINT
 1618               	
 1619 8976 6100 131E 	         BSR     FIXBUF         | PRINT END STUFF FOR SCREEN CONTROL
 1620               	         SCREEN2 = 0x0614
 1621 897a 2CF8 0614 	         MOVE.L  SCREEN2,(%A6)+
 1622 897e 6704      	         BEQ.S   TD39           | SKIP END STUFF
 1623 8980 6100 1288 	         BSR     OUTPUT
 1624 8984 4E75      	TD39:    RTS                    | RETURN FOR MORE WORK
 1625               	
 1626 8986 3400      	TD4:     MOVE.W  %D0,%D2        | PRINT REG NAME IN BUFFER
 1627 8988 E040      	         ASR.W   #8,%D0         | MOVE IT OVER
 1628 898a 1600      	         MOVE.B  %D0,%D3        | SAVE REGISTER TYPE A,D,W,M ETC
 1629 898c 1CC0      	         MOVE.B  %D0,(%A6)+     |  SAVE FIRST LETTER
 1630 898e 1CC2      	         MOVE.B  %D2,(%A6)+     | SAVE NEXT LETTER
 1631 8990 1CFC 003D 	         MOVE.B  #'=',(%A6)+    | EQUAL SIGN
 1632 8994 0C42 5553 	         CMPI.W  #0x5553,%D2    | "US"
 1633 8998 6606      	         BNE.S   T44
 1634 899a 2038 0448 	         MOVE.L  REGUS,%D0      | USER STACK
 1635 899e 6014      	         BRA.S   T449
 1636               	
 1637 89a0 0C42 5353 	T44:     CMPI.W  #0x5353,%D2    | "SS" SUPER STACK IS SPECIAL
 1638 89a4 6606      	         BNE.S   T448
 1639 89a6 2038 0444 	         MOVE.L  REGA7,%D0      | GET A7
 1640 89aa 6008      	         BRA.S   T449
 1641               	
 1642 89ac 2007      	T448:    MOVE.L  %D7,%D0        | REGISTER VALUE
 1643 89ae 0C42 5352 	         CMPI.W  #0x5352,%D2    | "SR" SEE IF STATUS REGISTER
 1644 89b2 670C      	         BEQ.S   TDCC
 1645 89b4 6100 0FEC 	T449:    BSR     PNT8HX         | FORMAT 8 HEX CHAR
 1646 89b8 1CFC 0020 	TD9:     MOVE.B  #BLANK,(%A6)+  | SPACE BETWEEN REGS
 1647 89bc 6000 FF6E 	         BRA TD1
 1648               	
 1649               	*   CONDITION CODE FORMAT
 1650               	*
 1651 89c0 3600      	TDCC:    MOVE.W  %D0,%D3        | SAVE FOR A MOMENT
 1652 89c2 6100 0FEC 	         BSR     PNT4HX
 1653 89c6 1CFC 003D 	         MOVE.B  #'=',(%A6)+
 1654 89ca 2E3C 8000 	         MOVE.L  #0x80000054,%D7 | TRACE BIT
 1654      0054 
 1655 89d0 613E      	         BSR.S   TDCC9
 1656 89d2 2E3C 2000 	         MOVE.L  #0x20000053,%D7 | SUPERVISOR BIT
 1656      0053 
 1657 89d8 6136      	         BSR.S   TDCC9
 1658 89da 3003      	         MOVE.W  %D3,%D0        | INTERRUPT LEVEL
 1659 89dc E048      	         LSR.W   #8,%D0
 1660 89de 0200 0007 	         ANDI.B  #0x07,%D0      | "7" MAX IN SR FOR LEVEL
 1661 89e2 6100 0FDC 	         BSR     PUTHEX
 1662 89e6 2E3C 0010 	         MOVE.L  #0x100058,%D7   | X BIT
 1662      0058 
 1663 89ec 6122      	         BSR.S   TDCC9
 1664 89ee 2E3C 0008 	         MOVE.L  #0x8004E,%D7    | N BIT
 1664      004E 
 1665 89f4 611A      	         BSR.S   TDCC9
68K GAS  tutor13.s 			page 33


 1666 89f6 2E3C 0004 	         MOVE.L  #0x4005A,%D7    | Z BIT
 1666      005A 
 1667 89fc 6112      	         BSR.S   TDCC9
 1668 89fe 2E3C 0002 	         MOVE.L  #0x20056,%D7    | V BIT
 1668      0056 
 1669 8a04 610A      	         BSR.S   TDCC9
 1670 8a06 2E3C 0001 	         MOVE.L  #0x10043,%D7    | C BIT
 1670      0043 
 1671 8a0c 6102      	         BSR.S   TDCC9
 1672 8a0e 60A8      	         BRA.S   TD9
 1673               	*
 1674 8a10 2C07      	TDCC9:   MOVE.L  %D7,%D6        | DUPLICATE STUFF
 1675 8a12 4846      	         SWAP    %D6            | GET BIT POSITION
 1676 8a14 CC43      	         AND.W   %D3,%D6        | SEE IF ON
 1677 8a16 6604      	         BNE.S   TDCC91
 1678 8a18 1E3C 002E 	         MOVE.B  #'.',%D7       | PUT IN PERIOD IF OFF
 1679 8a1c 1CC7      	TDCC91:  MOVE.B  %D7,(%A6)+     | PUT IN LETTER IF ON
 1680 8a1e 4E75      	         RTS
 1681               	
 1682               	*-------------------------------------------------------------------------
 1683               	* File DUMP      DU     Dump "S-Records"                          05/10/82
 1684               	
 1685               	*   ***DUMP***  DUMP  "S" RECORDS
 1686               	*    FORMAT:  DU  ADDRESS1 ADDRESS2  [TEXT....]
 1687               	*
 1688               	DUCMD:   .align  2
 1689 8a20 6100 1734 	         BSR     SCANPORT       | SEE WHERE TO SEND OUTPUT (DUMMY CALL)
 1690 8a24 2C38 061C 	         MOVE.L  OUTTO,%D6      | SAVE OUTTO FOR ACTUAL S-RECORD DUMP
 1691 8a28 42B8 061C 	         CLR.L   OUTTO          | OVERRIDE SCANPORT CALL
 1692               	
 1693 8a2c 41FA F688 	         LEA     SYNTAX(%PC),%A0 | WHERE TO GO IF NO PARAMTERS
 1694 8a30 6100 1042 	         BSR     FNEXTF         | FIND NEXT FIELD
 1695 8a34 6100 0104 	         BSR     GETA           | GET ADDRESS1
 1696 8a38 2640      	         MOVE.L  %D0,%A3        | A3 = BEGIN ADDRESS
 1697               	
 1698 8a3a 6100 1038 	         BSR     FNEXTF
 1699 8a3e 6100 00FA 	         BSR     GETA           | GET ADDRESS2
 1700 8a42 2840      	         MOVE.L  %D0,%A4        | A4 = END ADDRESS
 1701               	
 1702               	* PROCESS HEADER
 1703 8a44 41FA 0006 	         LEA     PUNCH5(%PC),%A0 | WHERE TO GO IF NO HEADER
 1704 8a48 6100 102A 	         BSR     FNEXTF         | LOOK FOR HEADER
 1705               	PUNCH5:  .align  2
 1706               	
 1707               	* MOVE TEXT TO "TEMP STORAGE"
 1708 8a4c 45F8 05C0 	         LEA     DUMPTEMP,%A2
 1709 8a50 2A0A      	         MOVE.L  %A2,%D5         | D5 = START OF TEXT
 1710 8a52 BDCD      	PUM11:   CMP.L   %A5,%A6
 1711 8a54 6704      	         BEQ.S   PUM13
 1712 8a56 14DD      	         MOVE.B  (%A5)+,(%A2)+    | MOVE
 1713 8a58 60F8      	         BRA.S   PUM11
 1714 8a5a CB8A      	PUM13:   EXG     %A2,%D5         | D5 = END OF TEXT +1
 1715               	
 1716               	* DISPLAY ADDRESSES
 1717 8a5c 204B      	         MOVE.L  %A3,%A0
 1718 8a5e 224C      	         MOVE.L  %A4,%A1
 1719 8a60 6100 F662 	         BSR     P2PHY          | DISPLAY TWO ADDRESSES
68K GAS  tutor13.s 			page 34


 1720               	
 1721               	* INSURE END EQUAL GREATER THAN BEG
 1722 8a64 B9CB      	         CMP.L   %A3,%A4
 1723 8a66 6500 F64E 	         BCS     SYNTAX
 1724               	
 1725 8a6a 21C6 061C 	         MOVE.L  %D6,OUTTO       | RESTORE OPTIONAL DESTINATION OF DUMP
 1726               	
 1727               	* FINISH PROCESSING HEADER
 1728               	*  A2 = START OF TEXT
 1729 8a6e 6100 1226 	         BSR     FIXBUF         | A5,A6=#BUFFER
 1730 8a72 7C02      	         MOVEQ   #2,%D6         | THE BYTE COUNT
 1731 8a74 4284      	         CLR.L   %D4            | CLEAR THE CHECKSUM
 1732 8a76 2CFC 5330 	         MOVE.L  #0x53303f3f,(%A6)+ | "S0??" START OF S RECORD
 1732      3F3F 
 1733 8a7c 2CFC 3030 	         MOVE.L  #0x30303030,(%A6)+ | "0000" DUMMY ADDRESS
 1733      3030 
 1734 8a82 B5C5      	MORES0:  CMP.L   %D5,%A2        | SEE IF AT END OF TEXT
 1735 8a84 6C0C      	         BGE.S   ENDS0          | WHERE TO GO WHEN ALL CHARACTERS USED
 1736 8a86 5286      	         ADDQ.L  #1,%D6         | ANOTHER BYTE
 1737               	
 1738 8a88 101A      	         MOVE.B  (%A2)+,%D0     | GET ANOTHER BYTE OF TEXT
 1739               	
 1740 8a8a D880      	         ADD.L   %D0,%D4        | FOR CHECKSUM
 1741 8a8c 6100 0F2A 	         BSR     PNT2HX         | PUT IT IN BUFFER
 1742 8a90 60F0      	         BRA.S   MORES0
 1743               	ENDS0:   .align  2
 1744               	
 1745 8a92 6100 0084 	         BSR     PNTSREC        | GO PRINT THE "S" RECORD
 1746 8a96 344B      	         MOVE    %A3,%A2        | A2 WILL SCAN BETWEEN A3-A4
 1747               	
 1748               	* DO ANOTHER "S" RECORD
 1749 8a98 6100 11FC 	MORESP:  BSR     FIXBUF         | A5,A6=#BUFFER
 1750 8a9c 4284      	         CLR.L   %D4            | CLEAR CHECKSUM REGISTER
 1751 8a9e 200B      	         MOVE.L  %A3,%D0        | READY TO PRINT ADDRESS
 1752 8aa0 220B      	         MOVE.L  %A3,%D1        | GET READY TO AND ADDRESS
 1753 8aa2 7610      	         MOVEQ   #0x10,%D3      | MAXIMUM BYTES ON S REC LINE
 1754 8aa4 D283      	         ADD.L   %D3,%D1        | INSURE END OF LINE ADDRESS IS MAX
 1755 8aa6 0281 00FF 	         ANDI.L  #0xFF0000,%D1  | SEE IF 3 BYTE ADDRESS
 1755      0000 
 1756 8aac 6618      	         BNE.S   S2REC          | WHERE TO GO IF 3 BYTES NEEDED
 1757 8aae 2CFC 5331 	         MOVE.L  #0x53313f3f,(%A6)+ | "S1??" PUSH
 1757      3F3F 
 1758 8ab4 300B      	         MOVE    %A3,%D0        | SET UP TO PRINT 2 BYTE ADDRESS
 1759 8ab6 6100 0EF8 	         BSR     PNT4HX         | PRINT 4 HEX CHAR ADDRESS
 1760 8aba 7C02      	         MOVEQ   #2,%D6         | BYTE COUNT
 1761 8abc 300B      	         MOVE.W  %A3,%D0        | FIX UP CHECKSUM
 1762 8abe D800      	         ADD.B   %D0,%D4        | LOW BYTE
 1763 8ac0 E040      	         ASR     #8,%D0         | SHIFT IT OVER
 1764 8ac2 D800      	         ADD.B   %D0,%D4        | HIGH BYTE OF ADDRESS
 1765 8ac4 6018      	         BRA.S   PNCA3          | GO PUNCH A LINE
 1766               	
 1767 8ac6 2CFC 5332 	S2REC:   MOVE.L  #0X53323F3F,(%A6)+ | "S2??" PUSH
 1767      3F3F 
 1768 8acc 6100 0EDC 	         BSR     PNT6HX         | PRINT 6 HEX CHAR ADDRESS
 1769 8ad0 7C03      	         MOVEQ   #3,%D6         | BYTE COUNT
 1770 8ad2 200B      	         MOVE.L  %A3,%D0        | FIX UP CHECKSUM
 1771 8ad4 D800      	         ADD.B   %D0,%D4        | LOW BYTE
68K GAS  tutor13.s 			page 35


 1772 8ad6 E040      	         ASR     #8,%D0         | SHIFT IT OVER
 1773 8ad8 D800      	         ADD.B   %D0,%D4        | MIDDLE BYTE
 1774 8ada 4840      	         SWAP    %D0            | SET UP FOR HIGH BYTE
 1775 8adc D800      	         ADD.B   %D0,%D4        | ADD HIGH BYTE
 1776 8ade B7CC      	PNCA3:   CMP.L   %A4,%A3        | SEE IF AT ENDING ADDRESS
 1777               	
 1778               	* END OF FILE
 1779 8ae0 6F1C      	         BLE.S   A3OUT          | WHERE TO GO IF BELOW OR AT END ADDRESS
 1780 8ae2 612E      	         BSR.S   PNTSRECX       | END IT BY PRINTING LAST RECORD
 1781 8ae4 6100 11B0 	         BSR     FIXBUF         | A5,A6=#BUFFER
 1782 8ae8 4284      	         CLR.L   %D4            | CLEAR THE CHECKSUM
 1783 8aea 2CFC 5339 	         MOVE.L  #0x53393f3f,(%A6)+ | "S9??" MOVE TO PRINT BUFFER
 1783      3F3F 
 1784 8af0 2CFC 3030 	         MOVE.L  #0x30303030,(%A6)+ | MOVE "0000" TO PRIT BUFFER
 1784      3030 
 1785 8af6 7C02      	         MOVEQ   #2,%D6         | BYTE COUNT
 1786 8af8 611E      	         BSR.S   PNTSREC        | PRINT "S9" END-OF-FILE RECORD
 1787 8afa 6000 F736 	         BRA     MACSBUG        | REENTER MACSBUG
 1788               	
 1789 8afe 101B      	A3OUT:   MOVE.B  (%A3)+,%D0     | GRAB THE BYTE FROM MEMORY
 1790 8b00 D840      	         ADD.W   %D0,%D4        | ADD TO CHECKSUM
 1791 8b02 5246      	         ADDQ.W  #1,%D6         | BUMP THE BYTE COUNT
 1792 8b04 5289      	         ADDQ.L  #1,%A1         | ADD TO COUNT OF BYTES PROCESSED
 1793 8b06 6100 0EB0 	         BSR     PNT2HX         | PUT THE HEX IN THE PRINT BUFFER
 1794 8b0a 5383      	         SUBQ.L  #1,%D3         | COUNT DOWN CHAR TO GO IN LINE
 1795 8b0c 66D0      	         BNE.S   PNCA3
 1796 8b0e 6108      	         BSR.S   PNTSREC        | END OF LINE-PUNCH IT
 1797 8b10 6086      	         BRA.S   MORESP         | GO FIX UP NEXT LINE
 1798               	
 1799               	* FIX UP & PRINT THE "S" RECORD/LINE
 1800               	
 1801 8b12 B2FC 0000 	PNTSRECX:CMP.W   #0,%A1         | SEE IF ANY CHAR MOVED
 1802 8b16 6720      	         BEQ.S   PNTSRTS        | NO CHAR MOVED
 1803               	
 1804 8b18 5246      	PNTSREC: ADD     #1,%D6         | ONE MORE BYTE (CHECKSUM)
 1805 8b1a D846      	         ADD.W   %D6,%D4        | ADD BYTE COUNT TO CHECKSUM
 1806 8b1c 4604      	         NOT.B   %D4            | COMPLIMENT THE CHECKSUM
 1807 8b1e 2004      	         MOVE.L  %D4,%D0        | READY FOR PRINT-HEX
 1808 8b20 6100 0E96 	         BSR     PNT2HX         | PUT CHECKSUM IN RECORD
 1809 8b24 2E0E      	         MOVE.L  %A6,%D7        | SAVE FOR THE MOMENT
 1810 8b26 2C4D      	         MOVE.L  %A5,%A6        | START OF BUFFER
 1811 8b28 548E      	         ADDQ.L  #2,%A6         | BYPASS RECORD TYPE (4 CHAR)
 1812 8b2a 1006      	         MOVE.B  %D6,%D0        | SET UP BYTE COUNT FOR PNTHEX ROUTINE
 1813 8b2c 6100 0E8A 	         BSR     PNT2HX         | PUT THE BYTE COUNT IN THE PRINT BUFFER
 1814 8b30 2C47      	         MOVE.L  %D7,%A6        | RESTORE REAL END OF BUFFER
 1815 8b32 6100 10BC 	         BSR     OUT1CR         | DO THE ACTUAL DISPLAY/PUNCH
 1816 8b36 93C9      	         SUB.L   %A1,%A1        | CLEAR COUNTER OF BYTES PROCESSED
 1817 8b38 4E75      	PNTSRTS: RTS
 1818               	
 1819               	*-------------------------------------------------------------------------
 1820               	* File GETA      GET ADDRESS Subroutine                           12/01/81
 1821               	
 1822               	* GET ADDRESS
 1823               	*  ENTER (%A5) POINTER START OF BUFFER
 1824               	*        (%A6) POINTER END OF BUFFER
 1825               	*
 1826               	*  RETURN:  D0 = ADDRESS
68K GAS  tutor13.s 			page 36


 1827               	
 1828               	*        (%A6) POINTER END OF BUFFER
 1829               	*
 1830               	*  RETURN:  D0 = ADDRESS
 1831               	
 1832               	* FORMATS HANDLED:
 1833               	*  1.  NUMBER        DEFAULTS TO HEX
 1834               	*  2.  $NUMBER       HEX
 1835               	*  3.  &NUMBER       DECIMAL
 1836               	*  4.  (A@)
 1837               	*  5.  NUMBER(A@)
 1838               	*  6.  (A@,D@)
 1839               	*  7.  NUMBER(A@,D@)
 1840               	*  8.  [NUMBER]      MEMORY INDIRECT
 1841               	*
 1842               	*   FORMATS 1,2,3,8  ADD OFFSET R0 UNLESS R1 - R7 SPECIFIED
 1843               	
 1844               	* WORK REGISTERS
 1845               	*  D4    VALUE BEING BUILT
 1846               	*
 1847               	*  D5    FLAG REGISTER
 1848               	*     = 8000xXXX  R@ GIVEN (GARO)
 1849               	*     = XXXX80xX  [  GIVEN (GALB)
 1850               	*     = XXXXXX80  (  GIVEN (GALP)
 1851               	*
 1852               	*  D6    FLAG REGISTER
 1853               	*     = 8000xXXX  A@ GIVEN           (GAAVF)
 1854               	*     = XXXX80xX  NEED PLUS OR MINUS (GANPM)
 1855               	*     = XXXXXX2B  +  PLUS GIVEN      (GAPMS)
 1856               	*             2D  -  MINUS GIVEN
 1857               	
 1858 8b3a 48E7 0E80 	GETA:    MOVEM.L %D4-%D6/%A0,-(%A7) | SAVE SOME REGISTERS
 1859 8b3e 4284      	         CLR.L   %D4            | VALUE BEING BUILT
 1860 8b40 4285      	         CLR.L   %D5            | FLAG REG
 1861 8b42 4286      	         CLR.L   %D6            | FLAG REG
 1862               	
 1863 8b44 101D      	         MOVE.B  (%A5)+,%D0     | GET BYTE
 1864 8b46 BDCD      	         CMP.L   %A5,%A6
 1865 8b48 6500 010C 	         BCS     GAP191         | END OF BUFFER
 1866               	
 1867 8b4c 0C00 005B 	         CMPI.B  #'[',%D0
 1868 8b50 660C      	         BNE.S   GAP113
 1869               	
 1870               	*  [  SET INDIRECT
 1871               	
 1872 8b52 0045 8000 	         ORI.W   #0x8000,%D5     | SET LEFT BRACKET (GALB)
 1873               	
 1874 8b56 101D      	GAP111:  MOVE.B  (%A5)+,%D0     | GET BYTE
 1875 8b58 BDCD      	         CMP.L   %A5,%A6
 1876 8b5a 6500 00FA 	         BCS     GAP191         | END OF BUFFER
 1877               	GAP113:  .align  2
 1878               	
 1879 8b5e 0C00 002B 	         CMPI.B  #'+',%D0
 1880 8b62 675E      	         BEQ.S   GAP121         | PLUS SIGN
 1881               	
 1882 8b64 0C00 002D 	         CMPI.B  #'-',%D0
 1883 8b68 6758      	         BEQ.S   GAP121         | MINUS SIGN
68K GAS  tutor13.s 			page 37


 1884               	
 1885 8b6a 0C00 005D 	         CMPI.B  #']',%D0
 1886 8b6e 675E      	         BEQ.S   GAP131         | RIGHT BRACKET (INDIRECT)
 1887               	
 1888 8b70 0C00 0028 	         CMPI.B  #'(',%D0
 1889 8b74 676C      	         BEQ.S   GAP141         | LEFT PARIN
 1890               	
 1891 8b76 0C00 002C 	         CMPI.B  #',',%D0
 1892 8b7a 6700 0092 	         BEQ     GAP161         | COMMA
 1893               	
 1894 8b7e 0C00 0029 	         CMPI.B  #')',%D0
 1895 8b82 6700 00CC 	         BEQ     GAP181         | RIGHT PARIN
 1896               	
 1897 8b86 0C00 003B 	         CMPI.B  #';',%D0       | "SEMI-COLON"
 1898 8b8a 6700 00CA 	         BEQ     GAP191         | TERMINATE
 1899               	
 1900 8b8e 0C00 0020 	         CMPI.B  #BLANK,%D0     | "SPACE"
 1901 8b92 6700 00C2 	         BEQ     GAP191         | TERMINATE
 1902               	
 1903 8b96 4A46      	         TST.W   %D6            | (GANPM)
 1904 8b98 6B70      	         BMI.S   GAE            | NEEDS PLUS OR MINUS
 1905               	
 1906 8b9a 0C00 0052 	         CMPI.B  #'R',%D0
 1907 8b9e 6700 0094 	         BEQ     GAP171         | RELATIVE OFFSET
 1908               	
 1909 8ba2 4A06      	         TST.B   %D6            | (GALP)
 1910 8ba4 6B64      	         BMI.S   GAE            | (...   NUMBER NOT ALLOWED
 1911               	
 1912               	* NONE OF ABOVE ASSUME NUMERIC VALUE
 1913 8ba6 538D      	         SUBQ.L  #1,%A5         | ADJUST (A5) TO FIRST CHAR
 1914 8ba8 4280      	         CLR.L   %D0
 1915 8baa 6100 0F4A 	         BSR     GETNUMA
 1916               	
 1917 8bae 0C06 002D 	         CMPI.B  #'-',%D6       | (GAPMS)
 1918 8bb2 6704      	         BEQ.S   GAP118         | MINUS SIGN
 1919               	
 1920 8bb4 D880      	         ADD.L   %D0,%D4        | PLUS SIGN
 1921 8bb6 6002      	         BRA.S   GAP119
 1922               	
 1923 8bb8 9880      	GAP118:  SUB.L   %D0,%D4
 1924               	
 1925 8bba 4206      	GAP119:  CLR.B   %D6            | (GAPMS)  RESET PLUS MINUS FLAG
 1926 8bbc 0046 8000 	         ORI.W   #0x8000,%D6     | (GANPM)  SET NEED PLUS MINUS
 1927 8bc0 6094      	GAP111S: BRA.S   GAP111
 1928               	
 1929               	* (*) (-) SET ARITHMETIC OPERATOR
 1930               	
 1931 8bc2 4A06      	GAP121:  TST.B   %D6            | (GAPMS)
 1932 8bc4 6644      	         BNE.S   GAE            | MULTI OPERATORS
 1933 8bc6 1C00      	         MOVE.B  %D0,%D6        |  (GAPMS)
 1934 8bc8 0246 00FF 	         ANDI.W  #0x00FF,%D6     | RESET (GANPM) NEED PLUS MINUS
 1935 8bcc 60F2      	         BRA.S   GAP111S
 1936               	
 1937               	*  ]  CLOSE INDIRECT
 1938               	
 1939 8bce 4A45      	GAP131:  TST.W   %D5            | (GALB)
 1940 8bd0 6A38      	         BPL.S   GAE            | [ MISSING
68K GAS  tutor13.s 			page 38


 1941               	
 1942               	* IF NO R@ GIVEN ADD R0
 1943 8bd2 4A85      	         TST.L   %D5            | (GARO)
 1944 8bd4 6B04      	         BMI.S   GAP135         | R@ GIVEN
 1945               	         OFFSET = 0x044c
 1946 8bd6 D8B8 044C 	         ADD.L   OFFSET,%D4     | NO R@ GIVEN; ADD R0
 1947               	GAP135:  .align  2
 1948               	
 1949 8bda 2044      	         MOVE.L  %D4,%A0
 1950 8bdc 2010      	         MOVE.L  (%A0),%D0
 1951 8bde 6000 008A 	         BRA     GAP199
 1952               	
 1953               	*  (  DO PARIN PAIR
 1954               	
 1955 8be2 4A05      	GAP141:  TST.B   %D5            | (GALP)
 1956 8be4 6B24      	         BMI.S   GAE            | MULTI (
 1957 8be6 4A85      	         TST.L   %D5            | (GARO)
 1958 8be8 6B20      	         BMI.S   GAE            | R@ NOT ALLOWED WITH (..)
 1959 8bea 0005 0080 	         ORI.B   #0x80,%D5       | (GALP) SET LEFT PAREN
 1960               	
 1961               	* LEFT PARIN SET; MUST BE A@ NEXT
 1962 8bee 101D      	         MOVE.B  (%A5)+,%D0     |  GET BYTE
 1963 8bf0 BDCD      	         CMP.L   %A5,%A6
 1964 8bf2 6516      	         BCS.S   GAE
 1965 8bf4 0C00 0041 	         CMPI.B  #'A',%D0
 1966 8bf8 6610      	         BNE.S   GAE            | NOT A-REG
 1967 8bfa 41F8 0428 	         LEA     REGS+32,%A0
 1968 8bfe 6170      	         BSR.S   GASRGN         | GET VALUE IN A@
 1969 8c00 D881      	         ADD.L   %D1,%D4
 1970 8c02 0086 8000 	         ORI.L   #0x80000000,%D6 | (GAAVF) A-REG VALUE FLAG
 1970      0000 
 1971 8c08 60B6      	         BRA.S   GAP111S
 1972               	
 1973 8c0a 6000 F4AA 	GAE:     BRA     SYNTAX
 1974               	
 1975               	*  COMMA  A-REG or
 1976               	*  COMMA  D-REG REQUIRED
 1977               	
 1978 8c0e 4A86      	GAP161:  TST.L   %D6            | (GAAVF)
 1979 8c10 6AF8      	         BPL.S   GAE            | NO A-REG SPECIFIED
 1980 8c12 101D      	         MOVE.B  (%A5)+,%D0     | GET BYTE
 1981 8c14 BDCD      	         CMP.L   %A5,%A6
 1982 8c16 65F2      	         BCS.S   GAE
 1983 8c18 0C00 0041 	         CMPI.B  #'A',%D0
 1984 8c1c 6606      	         BNE.S   GAP163
 1985 8c1e 41F8 0428 	         LEA     REGS+32,%A0    | GET VALUE IN A@
 1986 8c22 600A      	         BRA.S   GAP165
 1987 8c24 0C00 0044 	GAP163:  CMPI.B  #'D',%D0
 1988 8c28 66E0      	         BNE.S   GAE            | NOT D-REG
 1989 8c2a 41F8 0408 	         LEA     REGS,%A0       | GET VALUE IN D@
 1990 8c2e 6140      	GAP165:  BSR.S   GASRGN
 1991 8c30 D881      	         ADD.L   %D1,%D4
 1992 8c32 608C      	         BRA.S   GAP111S
 1993               	
 1994               	*  R@  OFFSET
 1995               	
 1996 8c34 0C06 002B 	GAP171:  CMPI.B  #'+',%D6       | (GAPMS)
68K GAS  tutor13.s 			page 39


 1997 8c38 66D0      	         BNE.S   GAE            | ONLY + ALLOWED
 1998               	
 1999               	* ONLY ONE R@ ALLOWED
 2000               	
 2001 8c3a 4A85      	         TST.L   %D5            | (GARO)
 2002 8c3c 6BCC      	         BMI.S   GAE            | MULIT R@
 2003 8c3e 0085 8000 	         ORI.L   #0x80000000,%D5 | SET R@ GIVEN (GARO)
 2003      0000 
 2004               	
 2005 8c44 41F8 044C 	         LEA     OFFSET,%A0
 2006 8c48 6126      	         BSR.S   GASRGN         | GET VALUE IN R@
 2007 8c4a D881      	         ADD.L   %D1,%D4
 2008 8c4c 6000 FF6C 	         BRA     GAP119
 2009               	
 2010               	*  )  CLOSE THE WORLD
 2011               	
 2012 8c50 4A86      	GAP181:  TST.L   %D6            | (GAAVF)
 2013 8c52 6AB6      	         BPL.S   GAE            | NO (
 2014 8c54 6012      	         BRA.S   GAP197
 2015               	
 2016               	*  SPACE  TERMINATOR
 2017               	
 2018 8c56 4A45      	GAP191:  TST.W   %D5            | (GALB)
 2019 8c58 6BB0      	         BMI.S   GAE            | [ WITHOUT ]
 2020 8c5a 4A05      	         TST.B   %D5            | (GALP)
 2021 8c5c 6BAC      	         BMI.S   GAE            | ( WITHOUT )
 2022 8c5e 538D      	         SUBQ.L  #1,%A5         | ADJUST CHAR POINTER
 2023               	
 2024               	* IF NO R@ GIVEN ADD R0
 2025               	
 2026 8c60 4A85      	         TST.L   %D5            | (GARO)
 2027 8c62 6B04      	         BMI.S   GAP197         | R@ GIVEN
 2028 8c64 D8B8 044C 	         ADD.L   OFFSET,%D4
 2029 8c68 2004      	GAP197:  MOVE.L  %D4,%D0
 2030               	
 2031 8c6a 4CDF 0170 	GAP199:  MOVEM.L (%A7)+,%D4-%D6/%A0
 2032 8c6e 4E75      	         RTS
 2033               	
 2034               	* GET NEXT NUMBER
 2035               	*  %A0 = POINTER TO TABLE OF VALUES
 2036               	*  %D1 = VALUE ON RETURN
 2037               	
 2038 8c70 4280      	GASRGN:  CLR.L   %D0
 2039 8c72 101D      	         MOVE.B  (%A5)+,%D0     | GET BYTE
 2040 8c74 BDCD      	         CMP.L   %A5,%A6
 2041 8c76 6592      	         BCS.S   GAE
 2042 8c78 0400 0030 	         SUBI.B  #'0',%D0       | ADJUST TO ZERO
 2043 8c7c 0C00 0007 	         CMPI.B  #7,%D0
 2044 8c80 6288      	         BHI.S   GAE            | NOT 0 - 7
 2045 8c82 C0FC 0004 	         MULU    #4,%D0         | 4 * OFFSET
 2046 8c86 2230 0000 	         MOVE.L  (%A0,%D0.W),%D1
 2047 8c8a 4E75      	         RTS
 2048               	
 2049               	*-------------------------------------------------------------------------
 2050               	* File H         Register save,Trace, Breakpoint                  03/03/82
 2051               	
 2052               	*       SAVE ALL REGISTERS ROUTINE-JMP [TEMP] BACK
68K GAS  tutor13.s 			page 40


 2053               	*          USUALLY CALLED BY THE MACRO "SAVEREGS"
 2054               	
 2055               	SAVE:    .align  2
 2056 8c8c 4FF8 0444 	         LEA     REGA7,%A7       | WHERE TO START STORING
 2057 8c90 48E7 FFFE 	         MOVEM.L %D0-%D7/%A0-%A6,-(%A7) | SAVE REGISTERS
 2058               	
 2059 8c94 4FF8 078A 	         LEA     SYSTACK+4,%A7   | SET UP STRETCHED VERSAUG STACK
 2060               	
 2061 8c98 2078 0444 	         MOVE.L  REGA7,%A0       | A0 = TARGETS SUPERVISOR STACK POINTER
 2062 8c9c 31D8 0406 	         MOVE.W  (%A0)+,REGSR+2  | GET TARGETS SR
 2063               	
 2064 8ca0 21D8 0400 	         MOVE.L  (%A0)+,REGPC    | GET TARGETS PC
 2065               	
 2066 8ca4 21C8 0444 	         MOVE.L  %A0,REGA7       | WHERE TARGET STACK REALLY POINTS
 2067               	
 2068 8ca8 4E69      	         MOVE.L  %USP,%A1        | GET USERS STACK POINTER
 2069 8caa 21C9 0448 	         MOVE.L  %A1,REGUS       | SAVE IT FOR DISPLAY ETC
 2070               	
 2071 8cae 2038 0400 	         MOVE.L  REGPC,%D0       | GET PROGRAM COUNTER
 2072 8cb2 598F      	         SUBQ.L  #4,%A7          | SET REAL MACSBUG STACK
 2073 8cb4 2F38 04D6 	         MOVE.L  TEMP,-(%A7)     | PUT RETURN ADDRESS ON STACK
 2074 8cb8 4E75      	         RTS                     | RETURN TO SENDER
 2075               	
 2076               	*
 2077               	*     ***TRACE***  TRACE ENTRY POINT
 2078               	*       ENTER FROM VECTOR 9  (LOCATION 24) FOR
 2079               	*
 2080               	
 2081               	* REGISTER USAGE
 2082               	*  %A0 = ADDRESS OF BREAKPOINT ADDRESS
 2083               	*  %A2 = ADDRESS OF BREAKPOINT COUNTS
 2084               	*  %D1 = PC
 2085               	*  %D5 = TRACECNT
 2086               	*  %D7 = BKPT COUNT
 2087               	
 2088 8cba 46FC 2700 	TRACE:   MOVE.W  #0x2700,%SR     | MASK OFF INTERRUPTS
 2089               	         SAVEREGS
 2089               	>  TEMP =0x04d6
 2089 8cbe 21CF 0444 	>  MOVE.L %A7,REGA7
 2089 8cc2 4FFA 0008 	>  LEA SV14(%PC),%A7
 2089 8cc6 21CF 04D6 	>  MOVE.L %A7,TEMP
 2089 8cca 60C0      	>  JRA SAVE
 2089               	> SV14:
 2090               	
 2091               	* IF PC POINTS TO "TRACE"; DOUBLE EVENT OCCURED
 2092               	*  CLEAR LAST EVENT BY IGNORING
 2093               	
 2094 8ccc 0CB8 0000 	         CMPI.L  #0x8008,REGPC
 2094      8008 0400 
 2095               	*        CMPI.L  #V2,REGPC
 2096               	
 2097 8cd4 6610      	         BNE.S   TRACE16
 2098               	
 2099 8cd6 2A78 0444 	         MOVE.L  REGA7,%A5       | TRIM LAST EVENT FROM STACK
 2100 8cda 31DD 0406 	         MOVE.W  (%A5)+,REGSR+2  | MOVE VALUES FROM STACK TO
 2101 8cde 21DD 0400 	         MOVE.L  (%A5)+,REGPC    | PSUEDO SR, PC,
 2102 8ce2 21CD 0444 	         MOVE.L  %A5,REGA7       | REFLECT ADJUSTMENTS IN PSUEDO STACK
68K GAS  tutor13.s 			page 41


 2103 8ce6 0278 7FFF 	TRACE16: ANDI.W  #0x7FFF,REGSR+2  | RESET "T" (TRACE) BIT
 2103      0406 
 2104               	
 2105 8cec 2A38 04DA 	         MOVE.L  TRACECNT,%D5
 2106 8cf0 6B54      	         BMI.S   TRACE39        | EXECUTING ONE-INSTRUCTION
 2107 8cf2 6700 0C52 	         BEQ     ABORT335       | NOT TRACEING
 2108               	
 2109               	*   MAKE SURE WE ARE NOT TRACING OURSELVES
 2110 8cf6 2238 0400 	         MOVE.L  REGPC,%D1      | GET PC
 2111 8cfa 41FA F304 	         LEA.L   FIRST(%PC),%A0
 2112 8cfe B288      	         CMP.L   %A0,%D1
 2113 8d00 6B10      	         BMI.S   TISOK          | TRACING BELOW OURSELVES
 2114 8d02 41FA 32FC 	         LEA     LAST(%PC),%A0
 2115 8d06 B288      	         CMP.L   %A0,%D1
 2116 8d08 6208      	         BHI.S   TISOK          | TRACING ABOVE OURSELVES
 2117 8d0a 4BFA 015E 	         LEA     MSG020(%PC),%A5 | TRACING OURSELVES
 2118 8d0e 6000 0128 	         BRA     CHKBP4
 2119               	TISOK:
 2120               	
 2121 8d12 41F8 0470 	         LEA     BPADD,%A0
 2122 8d16 45F8 0494 	         LEA     BPCNT,%A2
 2123 8d1a 7E09      	         MOVEQ   #9,%D7         | 9TH BP IS "UNTILL" FEATURE
 2124               	
 2125 8d1c B290      	TRACE01: CMP.L   (%A0),%D1      | SEE IF PC MATCHES ADDRESS IN TABLE
 2126 8d1e 6610      	         BNE.S   TRACE08
 2127 8d20 2012      	         MOVE.L  (%A2),%D0      | GET COUNT
 2128 8d22 6700 0110 	         BEQ     CHKBP3         | COUNT ZERO
 2129 8d26 5380      	         SUBQ.L  #1,%D0         | COUNT DOWN
 2130 8d28 2480      	         MOVE.L  %D0,(%A2)      |  SAVE IT
 2131 8d2a 6700 0108 	         BEQ     CHKBP3         | COUNT WENT TO ZERO
 2132 8d2e 6008      	         BRA.S   TRACE03
 2133               	
 2134 8d30 5888      	TRACE08: ADDQ.L  #4,%A0         | BUMP TABLE POINTER
 2135 8d32 588A      	         ADDQ.L  #4,%A2         | BUMP COUNT TABLE POINTER
 2136 8d34 5387      	         SUBQ.L  #1,%D7         | LOOP AROUND
 2137 8d36 66E4      	         BNE.S   TRACE01
 2138               	
 2139 8d38 6100 FBCA 	TRACE03: BSR     TDISPLY        | DO TRACE DISPLAY
 2140 8d3c 53B8 04DA 	         SUBQ.L  #1,TRACECNT    | TRACE COUNT
 2141 8d40 6700 F4F0 	         BEQ     MACSBUG        | STOP WHEN ZERO
 2142 8d44 6008      	         BRA.S   UNTRACE        | CONTINUE WITH TRACE
 2143               	
 2144               	* END UP HERE AFTER BREAKPOINTING ONE INSTRUCTION
 2145               	* -- PUT BP BACK IN AND CONTINUE TO RUN
 2146               	
 2147 8d46 42B8 04DA 	TRACE39: CLR.L   TRACECNT
 2148 8d4a 613A      	         BSR.S   SWAPIN         | PUT BP INTO USER'S MEMORY
 2149 8d4c 600E      	         BRA.S   UNSTACK        | CONTINUE TO RUN
 2150               	
 2151 8d4e 0078 8000 	UNTRACE: ORI.W   #0x8000,REGSR+2 | SET UP TRACE BIT!
 2151      0406 
 2152               	         AV9 = 0x0024
 2153               	         ADDR2MEM TRACE,AV9     | TAKE TRACE VECTOR
 2153 8d54 487A FF64 	>  PEA TRACE(%PC)
 2153 8d58 21DF 0024 	>  MOVE.L (%A7)+,AV9
 2154               	
 2155 8d5c 2278 0448 	UNSTACK: MOVE.L  REGUS,%A1
68K GAS  tutor13.s 			page 42


 2156 8d60 4E61      	         MOVE.L  %A1,%USP       | US = TARGET'S USER STACK
 2157 8d62 2478 0400 	         MOVE.L  REGPC,%A2      | A2 = TARGET'S PC
 2158               	
 2159               	         .align  2              | INSURE MEMORY AT LOCATION OF PC
 2160 8d66 3012      	         MOVE.W  (%A2),%D0      | * ADDR TRAP ERROR * IF NO MEMORY
 2161               	
 2162 8d68 2278 0444 	         MOVE.L  REGA7,%A1      | A1 = TARGET SYSTEM STACK (SS)
 2163               	
 2164               	         .align  2              | INSURE MEMORY AT TARGET'S STACK
 2165 8d6c 230A      	         MOVE.L  %A2,-(%A1)     | MOVE PC ONTO TARGET'S STACK
 2166               	
 2167 8d6e 3038 0406 	         MOVE.W  REGSR+2,%D0
 2168 8d72 3300      	         MOVE.W  %D0,-(%A1)     | SR ONTO TARGET'S STACK
 2169               	
 2170 8d74 21C9 04D6 	         MOVE.L  %A1,TEMP       | TEMP = TARGETS SS
 2171               	
 2172 8d78 4FF8 0408 	         LEA     REGS,%A7       | A7 = POINTER TO PSUEDO REGISTERS
 2173 8d7c 4CDF 7FFF 	         MOVEM.L (%A7)+,%D0-%D7/%A0-%A6 | ARM MOST OF TARGET REGISTERS
 2174 8d80 2E78 04D6 	         MOVE.L  TEMP,%A7       | SS = TARGET'S
 2175               	
 2176 8d84 4E73      	         RTE                    | GO BACK TO THE USER
 2177               	
 2178 8d86 6114      	SWAPIN:  BSR.S   SWAPOUT        | MAKE SURE THEY ARE ALL OUT
 2179               	
 2180               	         SAVEAV4 = 0x04d2
 2181 8d88 21F8 0010 	         MOVE.L  AV4,SAVEAV4    | SAVE VECTOR (WHOM EVER'S IT WAS)
 2181      04D2 
 2182 8d8e 4DFA 0054 	         LEA     CHKBP(%PC),%A6
 2183 8d92 21CE 0010 	         MOVE.L  %A6,AV4        | REPLACE IT WITH THE "CHKBP" RTN
 2184 8d96 4DFA 002A 	         LEA     SWAPIN1(%PC),%A6 | A6 = ROUTINE ADDRESS
 2185 8d9a 6010      	         BRA.S   SWAP
 2186               	
 2187               	         BPSTATUS = 0x04e0
 2188 8d9c 4A78 04E0 	SWAPOUT: TST.W   BPSTATUS        | SEE IF OUT ALREADY
 2189 8da0 6740      	         BEQ.S   SWAPEND         | YES...DONE
 2190 8da2 21F8 04D2 	         MOVE.L  SAVEAV4,AV4     | NO....REPLACE THE VECTOR
 2190      0010 
 2191               	
 2192 8da8 4DFA 0028 	         LEA     SWAPOUT1(%PC),%A6 | A6 = ROUTINE ADDRESS
 2193 8dac 41F8 0470 	SWAP:    LEA     BPADD,%A0       | A0 = ADDRESS OF TABLE
 2194 8db0 45F8 0494 	         LEA     BPCNT,%A2       | A2 = ADDRESS OF COUNTS
 2195 8db4 7E09      	         MOVEQ   #9,%D7          | DO 9 BP
 2196               	         BPDATA = 0x04b8
 2197 8db6 47F8 04B8 	         LEA     BPDATA,%A3      | CONTENT TABLE
 2198               	
 2199 8dba 2850      	SWAP1:   MOVE.L  (%A0),%A4       | GET POSSIBLE ADDDRESS
 2200 8dbc 4A90      	         TST.L   (%A0)           | IS POSSIBLE ADDRESS ZERO
 2201 8dbe 671A      	         BEQ.S   SWAP99          | ZERO MEANS NO BP DEFINED
 2202 8dc0 4ED6      	         JMP     (%A6)           | GO TO RIGHT ROUTINE
 2203               	
 2204               	SWAPIN1:
 2205 8dc2 3014      	         MOVE.W  (%A4),%D0       | USER'S PROGRAM GOES INTO TABLE
 2206               	
 2207 8dc4 3680      	         MOVE.W  %D0,(%A3)
 2208 8dc6 38BC 4AFB 	         MOVE.W  #BKPOINT,(%A4)  | PUT BREAKPOINT IN
 2209               	
 2210 8dca 31FC 0001 	         MOVE.W  #1,BPSTATUS     | FLAG AS BP IN
68K GAS  tutor13.s 			page 43


 2210      04E0 
 2211 8dd0 6008      	         BRA.S   SWAP99
 2212               	
 2213 8dd2 3013      	SWAPOUT1:MOVE.W  (%A3),%D0       | GET CONTENTS FROM TABLE
 2214 8dd4 3880      	         MOVE.W  %D0,(%A4)       | PUT CONTENTS BACK INTO PROGRAM
 2215               	
 2216 8dd6 4278 04E0 	         CLR.W   BPSTATUS        | FLAG AS BREAKPOINTS OUT
 2217 8dda 5888      	SWAP99:  ADDQ.L  #4,%A0          | BUMP ADDRESS TABLE POINTER
 2218 8ddc 548B      	         ADDQ.L  #2,%A3          | BUMP CONTENT TABLE POINTER
 2219 8dde 5387      	         SUBQ.L  #1,%D7
 2220 8de0 66D8      	         BNE.S   SWAP1
 2221 8de2 4E75      	SWAPEND: RTS
 2222               	
 2223               	*  ILLEGAL INSTRUCTION ENTRY POINT
 2224               	*   BREAKPOINT TEST
 2225               	*
 2226 8de4 46FC 2700 	CHKBP:   MOVE.W  #0x2700,%SR     | MASK OF INT.
 2227               	         SAVEREGS
 2227               	>  TEMP =0x04d6
 2227 8de8 21CF 0444 	>  MOVE.L %A7,REGA7
 2227 8dec 4FFA 000A 	>  LEA SV16(%PC),%A7
 2227 8df0 21CF 04D6 	>  MOVE.L %A7,TEMP
 2227 8df4 6000 FE96 	>  JRA SAVE
 2227               	> SV16:
 2228 8df8 2038 0400 	         MOVE.L  REGPC,%D0       | GET PROGRAM COUNTER TO COMPARE
 2229 8dfc 2A40      	         MOVE.L  %D0,%A5         | A5 = TARGET PC
 2230 8dfe 3215      	         MOVE.W  (%A5),%D1       | SEE WHAT OP CODE WAS XEQ
 2231               	
 2232 8e00 619A      	         BSR.S   SWAPOUT         | TAKE BREAKPOINTS OUT
 2233               	
 2234 8e02 0C41 4AFB 	         CMPI.W  #BKPOINT,%D1    | USED FOR BP
 2235 8e06 6616      	         BNE.S   CHKBP11         | NOT AT BREAKPOINT
 2236               	
 2237 8e08 41F8 0470 	         LEA     BPADD,%A0       | A0 = ADDRESS OF BP ADDRESSES
 2238 8e0c 45F8 0494 	         LEA     BPCNT,%A2       | A2 = ADDRESS OF BP COUNTS
 2239 8e10 7E09      	         MOVEQ   #9,%D7          | D7 = LOOP COUNT
 2240               	
 2241 8e12 BBD0      	CHKBP1:  CMP.L   (%A0),%A5       | SEE IF WE ARE THERE
 2242 8e14 6712      	         BEQ.S   CHKBP2          | AT BREAKPOINT; AT AN ADDRESS
 2243               	
 2244 8e16 5888      	         ADDQ.L  #4,%A0          | BUMP BOTH POINTERS
 2245 8e18 588A      	         ADDQ.L  #4,%A2
 2246 8e1a 5387      	         SUBQ.L  #1,%D7
 2247 8e1c 66F4      	         BNE.S   CHKBP1
 2248               	
 2249               	* IS NOT A BREAKPOINT; ASSUME ILLEGAL INSTRUCTION
 2250 8e1e 4BFA 0028 	CHKBP11: LEA     MSG009(%PC),%A5 | "ILLEGAL INSTRUCTION"
 2251 8e22 4278 04DE 	         CLR.W   TRACEON         | RESET TRACE MODE
 2252 8e26 6010      	         BRA.S   CHKBP4
 2253               	
 2254               	* AT BREAKPOINT...CHECK COUNT
 2255 8e28 2012      	CHKBP2:  MOVE.L  (%A2),%D0       | GET COUNT
 2256 8e2a 6708      	         BEQ.S   CHKBP3          | COUNT ZERO
 2257 8e2c 5380      	         SUBQ.L  #1,%D0          | DECREMENT
 2258 8e2e 2480      	         MOVE.L  %D0,(%A2)       | PUT COUNT BACK
 2259 8e30 6600 F7F4 	         BNE     GOCMD1          | COUNT NOT ZERO; KEEP GOING
 2260               	
68K GAS  tutor13.s 			page 44


 2261 8e34 4BFA 0026 	CHKBP3:  LEA     MSG014(%PC),%A5 | "AT BREAKPOINT"
 2262               	
 2263 8e38 6100 F2CC 	CHKBP4:  BSR     FIXDCRLF
 2264 8e3c 6100 0DB2 	         BSR     OUT1CR
 2265 8e40 6100 FAC2 	         BSR     TDISPLY         | PRINT TRACE DISPLAY
 2266 8e44 6000 F3EC 	         BRA     MACSBUG
 2267               	
 2268 8e48 494C 4C45 	MSG009:  .ascii  "ILLEGAL INSTRUCTION"
 2268      4741 4C20 
 2268      494E 5354 
 2268      5255 4354 
 2268      494F 4E
 2269 8e5b 04        	         DC.B    EOT
 2270               	
 2271 8e5c 4154 2042 	MSG014:  .ascii  "AT BREAKPOINT"
 2271      5245 414B 
 2271      504F 494E 
 2271      54
 2272 8e69 04        	         DC.B    EOT
 2273               	
 2274 8e6a 2E50 4320 	MSG020:  .ascii  ".PC within \"DEBUGGER\""
 2274      7769 7468 
 2274      696E 2022 
 2274      4445 4255 
 2274      4747 4552 
 2275 8e7f 0704      	         DC.B    BELL,EOT
 2276               	
 2277 8e81 00        	         DC.B    0              | PAD BYTE
 2278               	
 2279               	*-------------------------------------------------------------------------
 2280               	* File HE        HELP Command                                     12/01/81
 2281               	
 2282               	* HELP  COMMAND
 2283               	*  PRINT: REGISTERS AND COMMANDS IN TABLES
 2284               	
 2285 8e82 4BFA 0066 	HECMD:   LEA     MSG002(%PC),%A5
 2286 8e86 6100 F26A 	         BSR     FIXDATA
 2287 8e8a 6100 0D64 	         BSR     OUT1CR          | PRINT
 2288               	
 2289 8e8e 49FA F478 	         LEA     SOLIST(%PC),%A4 | A4 = POINTER TO COMMAND LIST
 2290               	
 2291 8e92 6100 0E02 	         BSR     FIXBUF
 2292 8e96 143C 0008 	         MOVE.B  #8,%D2          | D2 = # CMDS PER LINE
 2293 8e9a 321C      	HELP4:   MOVE.W  (%A4)+,%D1      | GET 2 BYTE COMMAND
 2294 8e9c 0C41 FFFF 	         CMPI.W  #0xFFFF,%D1
 2295 8ea0 6740      	         BEQ.S   HELP6           | DONE PRINT LAST BUFFER
 2296 8ea2 548C      	         ADDQ.L  #2,%A4          | BUMP POINTER UP BY 2
 2297 8ea4 4A41      	         TST.W   %D1             | IS THE INVISIBLE INDICATOR ON?
 2298 8ea6 6BF2      	         BMI.S   HELP4           | YES... THEN BYPASS THIS ONE
 2299 8ea8 3601      	         MOVE.W  %D1,%D3         | SAVE XX FOR "XX" AND "NOXX" IN HELP
 2300 8eaa 0241 7F7F 	         ANDI.W  #0x7F7F,%D1     | REMOVE CONTROL BITS
 2301 8eae 3CC1      	         MOVE.W  %D1,(%A6)+      | NO.... MOVE THIS COMMAND TO "PRINT" LINE
 2302 8eb0 2CFC 2020 	         MOVE.L  #0x20202020,(%A6)+  | MOVE BLANKS FOR SPACING
 2302      2020 
 2303 8eb6 6118      	         BSR.S   HELP81          | PRINT THE LINE IF FULL
 2304 8eb8 0803 0007 	         BTST    #7,%D3          | IS "NO" OPTION SUPPORTED?
 2305 8ebc 6710      	         BEQ.S   EOHLOOP         | NO...BYPASS THIS COMMAND, ELSE...
68K GAS  tutor13.s 			page 45


 2306 8ebe 3CFC 4E4F 	         MOVE.W  #0x4e4f,(%A6)+  | "NO  "   IN MSG
 2307 8ec2 0243 7F7F 	         ANDI.W  #0x7F7F,%D3     | RESET CONTROL BITS
 2308 8ec6 3CC3      	         MOVE.W  %D3,(%A6)+      | "NOCC"   IN MSG (WHERE CC=COMMAND CODE)
 2309 8ec8 3CFC 2020 	         MOVE.W  #0x2020,(%A6)+  | "NOCC  " IN MSG    "    "    "      "
 2310 8ecc 6102      	         BSR.S   HELP81          | PRINT THE LINE IF FULL
 2311 8ece 60CA      	EOHLOOP: BRA.S   HELP4           | NEXT COMMAND.
 2312               	
 2313               	*        DISPLAY LINE OF COMMANDS (IF FULL)
 2314               	
 2315 8ed0 5302      	HELP81:  SUBQ.B  #1,%D2          | D2 = COUNT OF COMMANDS PER LINE
 2316 8ed2 660C      	         BNE.S   HELP85          | NOT FULL, JUST RETURN FOR MORE
 2317 8ed4 6100 0D1A 	         BSR     OUT1CR          | YES, THEN WRITE IT
 2318 8ed8 6100 0DBC 	         BSR     FIXBUF          | SET-UP LINE FOR NEXT COMMANDS
 2319 8edc 143C 0008 	         MOVE.B  #8,%D2          | D2 = MAX NUMBER CAN BE PLACED IN LINE
 2320 8ee0 4E75      	HELP85:  RTS
 2321               	
 2322 8ee2 6100 0D0C 	HELP6:   BSR     OUT1CR          | PRINT ANY REMAINING PORTION
 2323               	*        BRA.S   HELP1           | SEE IF COMPLETE
 2324 8ee6 6000 F34A 	         BRA     MACSBUG         | HELP IS COMPLETE SO RETURN
 2325               	
 2326 8eea 2E50 4320 	MSG002:  .ascii  ".PC .SR .US .SS"
 2326      2E53 5220 
 2326      2E55 5320 
 2326      2E53 53
 2327 8ef9 0D0A      	         DC.B    CR,LF
 2328               	
 2329 8efb 2E44 3020 	         .ascii  ".D0 .D1 .D2 .D3 .D4 .D5 .D6 .D7"
 2329      2E44 3120 
 2329      2E44 3220 
 2329      2E44 3320 
 2329      2E44 3420 
 2330 8f1a 0D0A      	         DC.B    CR,LF
 2331               	
 2332 8f1c 2E41 3020 	         .ascii    ".A0 .A1 .A2 .A3 .A4 .A5 .A6 .A7"
 2332      2E41 3120 
 2332      2E41 3220 
 2332      2E41 3320 
 2332      2E41 3420 
 2333 8f3b 0D0A      	         DC.B    CR,LF
 2334               	
 2335 8f3d 2E52 3020 	         .ascii  ".R0 .R1 .R2 .R3 .R4 .R5 .R6"
 2335      2E52 3120 
 2335      2E52 3220 
 2335      2E52 3320 
 2335      2E52 3420 
 2336 8f58 0D0A 04   	         DC.B    CR,LF,EOT
 2337               	
 2338 8f5b 00        	         DC.B    0              | PAD BYTE
 2339               	
 2340               	*-------------------------------------------------------------------------
 2341               	* File HEX2DEC   HEX2DEC convert hex to decimal                   11/02/81
 2342               	
 2343               	*    CONVERT BINARY TO DECIMAL  REG  D0 PUT IN ( A6) BUFFER AS ASCII
 2344               	
 2345 8f5c 48E7 7B00 	HEX2DEC: MOVEM.L %D1-%D4/%D6-%D7,-(%A7)   | SAVE REGISTERS
 2346 8f60 2E00      	         MOVE.L  %D0,%D7          | SAVE IT HERE
 2347 8f62 6A08      	         BPL.S   HX2DC
68K GAS  tutor13.s 			page 46


 2348 8f64 4487      	         NEG.L   %D7              | CHANGE TO POSITIVE
 2349 8f66 6B4E      	         BMI.S   HX2DC57          | SPECIAL CASE (-0)
 2350 8f68 1CFC 002D 	         MOVE.B  #'-',(%A6)+      | PUT IN NEG SIGN
 2351 8f6c 4244      	HX2DC:   CLR.W   %D4              | FOR ZERO SURPRESS
 2352 8f6e 7C0A      	         MOVEQ   #10,%D6          | COUNTER
 2353 8f70 7401      	HX2DC0:  MOVEQ   #1,%D2           | VALUE TO SUB
 2354 8f72 2206      	         MOVE.L  %D6,%D1          | COUNTER
 2355 8f74 5381      	         SUBQ.L  #1,%D1           | ADJUST - FORM POWER OF TEN
 2356 8f76 671A      	         BEQ.S   HX2DC2           | IF POWER IS ZERO
 2357 8f78 3602      	HX2DC1:  MOVE.W  %D2,%D3          | D3=LOWER WORD
 2358 8f7a C6FC 000A 	         MULU    #10,%D3
 2359 8f7e 4842      	         SWAP    %D2              | D2=UPPER WORD
 2360 8f80 C4FC 000A 	         MULU    #10,%D2
 2361 8f84 4843      	         SWAP    %D3              | ADD UPPER TO UPPER
 2362 8f86 D443      	         ADD.W   %D3,%D2
 2363 8f88 4842      	         SWAP    %D2              | PUT UPPER IN UPPER
 2364 8f8a 4843      	         SWAP    %D3              | PUT LOWER IN LOWER
 2365 8f8c 3403      	         MOVE.W  %D3,%D2          | D2=UPPER & LOWER
 2366 8f8e 5381      	         SUBQ.L  #1,%D1
 2367 8f90 66E6      	         BNE.S   HX2DC1
 2368 8f92 4280      	HX2DC2:  CLR.L   %D0              | HOLDS SUB AMT
 2369 8f94 BE82      	HX2DC22: CMP.L   %D2,%D7
 2370 8f96 6D06      	         BLT.S   HX2DC3           | IF NO MORE SUB POSSIBLE
 2371 8f98 5280      	         ADDQ.L  #1,%D0           | BUMP SUBS
 2372 8f9a 9E82      	         SUB.L   %D2,%D7          | COUNT DOWN BY POWERS OF TEN
 2373 8f9c 60F6      	         BRA.S   HX2DC22          | DO MORE
 2374 8f9e 4A00      	HX2DC3:  TST.B   %D0              | ANY VALUE?
 2375 8fa0 6604      	         BNE.S   HX2DC4
 2376 8fa2 4A44      	         TST.W   %D4              | ZERO SURPRESS
 2377 8fa4 6708      	         BEQ.S   HX2DC5
 2378 8fa6 0600 0030 	HX2DC4:  ADDI.B  #0x30,%D0         | BINARY TO ASCII
 2379 8faa 1CC0      	         MOVE.B  %D0,(%A6)+       | PUT IN BUFFER
 2380 8fac 1800      	         MOVE.B  %D0,%D4          | MARK AS NON ZERO SURPRESS
 2381 8fae 5386      	HX2DC5:  SUBQ.L  #1,%D6           | NEXT POWER
 2382 8fb0 66BE      	         BNE.S   HX2DC0
 2383 8fb2 4A44      	         TST.W   %D4              | SEE IF ANYTHING PRINTED
 2384 8fb4 6604      	         BNE.S   HX2DC6
 2385 8fb6 1CFC 0030 	HX2DC57: MOVE.B  #'0',(%A6)+      | PRINT AT LEST A ZERO
 2386 8fba 4CDF 00DE 	HX2DC6:  MOVEM.L (%A7)+,%D1-%D4/%D6-%D7 | RESTORE REGISTERS
 2387 8fbe 4E75      	         RTS                      | END OF ROUTINE
 2388               	
 2389               	*-------------------------------------------------------------------------
 2390               	* File LOAD      LO & VE (Load & Verify) Commands.                02/22/82
 2391               	
 2392               	* THIS FUNCTION
 2393               	*   1.) READS A "S-RECORD"
 2394               	*   2.) FORMATS THE DATA ON THE STACK
 2395               	*   3.) CALCULATES THE CHECKSUM
 2396               	*   4.) THEN STORES (VERIFIES) THE DATA TO MEMORY
 2397               	*
 2398               	* WHEN VERIFYING RECORDS MAKE BE SKIPPED WHILE DISPLAYING THE MISS-MATCHED
 2399               	*  RECORDS.  DISPLAY FORMAT
 2400               	*   S1CCAAAA.-.-.-33.-
 2401               	*     CC                     BYTE COUNT
 2402               	*       AAAA                 ADDRESS
 2403               	*           .-.-.-  .-       DATA FIELDS THAT MATCHED
 2404               	*                 33         DATA MISS MATCH (DISPLAY DATA FROM S-RECORD)
68K GAS  tutor13.s 			page 47


 2405               	
 2406               	*   ***LOAD*** AND ***VERIFY***  "S" RECORDS
 2407               	*
 2408               	*        %D4 = ERROR FLAG
 2409               	*
 2410               	*        %D5 = V000I0CC
 2411               	*             0.......  = LOAD
 2412               	*             8.......  = VERIFY
 2413               	*             ....0...  = CALCULATE CHECKSUM
 2414               	*             ....8...  = IGNORE CHECKSUM
 2415               	*             ......CC  = CHECKSUM
 2416               	
 2417 8fc0 7A01      	VECMD:   MOVEQ   #1,%D5         | MARK THE MODE
 2418 8fc2 E29D      	         ROR.L   #1,%D5         | D5 = $80000000
 2419 8fc4 6002      	         BRA.S   CHKCHKS        | GO CHECK CHECKSUM OPTION
 2420               	
 2421 8fc6 4285      	LOCMD:   CLR.L   %D5            | READ MODE
 2422 8fc8 4284      	CHKCHKS: CLR.L   %D4            | RESET ERROR FLAG
 2423 8fca 6100 118A 	         BSR     SCANPORT       | SET UP OUTPUT P1,P2,P3 ETC
 2424               	
 2425               	* SEE IF CHECKSUM -C OPTION AND =SEND THIS OPTION
 2426               	
 2427 8fce BBCE      	READ01:  CMP.L   %A6,%A5        |SEE IF AT END OF BUFFER
 2428 8fd0 643C      	         BCC.S   READ09
 2429 8fd2 101D      	         MOVE.B  (%A5)+,%D0     | GET A CHARACTER
 2430 8fd4 0C00 003D 	READ03:  CMPI.B  #'=',%D0       | SEE IF EQUAL SIGN
 2431 8fd8 6730      	         BEQ.S   READ08
 2432               	
 2433 8fda 0C00 0058 	         CMPI.B  #'X',%D0       | SEE IF ECHO
 2434 8fde 6606      	         BNE.S   READ021
 2435 8fe0 1A3C FFFF 	         MOVE.B  #-1,%D5        | D5.B = ECHO TO PORT ONE
 2436 8fe4 60E8      	         BRA.S   READ01
 2437               	
 2438 8fe6 0C00 002D 	READ021: CMPI.B  #'-',%D0       |SEE IF MINUS SIGN
 2439 8fea 66E2      	         BNE.S   READ01
 2440 8fec BBCE      	         CMP.L   %A6,%A5        | SEE IF AT END OF BUFFER
 2441 8fee 671E      	         BEQ.S   READ09
 2442 8ff0 101D      	         MOVE.B  (%A5)+,%D0     | GRAB SECOND CHARACTER
 2443 8ff2 0C00 0043 	         CMPI.B  #'C',%D0       | SEE IF LETTER C AS IN -C
 2444 8ff6 66DC      	         BNE.S   READ03
 2445 8ff8 0045 8000 	         ORI.W   #0x8000,%D5     | MARK AS IGNORE CHECKSUM
 2446 8ffc 60D0      	         BRA.S   READ01
 2447               	
 2448 8ffe 4286      	READS1:  CLR.L   %D6            | D6 = TYPE "S1"
 2449 9000 5983      	         SUBQ.L  #4,%D3         | BYTE COUNT
 2450               	
 2451 9002 4280      	         CLR.L   %D0
 2452 9004 6100 013C 	         BSR     READHEX4       | FORM ADDRESS
 2453 9008 6066      	         BRA.S   READS202
 2454               	
 2455 900a 6100 0C08 	READ08:  BSR     OUTPUT2        | SEND REST OF LINE(+CR) TO PORT
 2456               	
 2457 900e 11C5 04E2 	READ09:  MOVE.B  %D5,ECHOPT1    | MOVE ECHO FLAG
 2458 9012 21F8 0630 	         MOVE.L  OUTPORT1,OUTTO | SEND OUTPUT TO CONSOLE
 2458      061C 
 2459               	
 2460 9018 4FF8 0786 	READ0:   LEA     SYSTACK,%A7    | FORCE STACK (FOR ERROR RECOVERY)
68K GAS  tutor13.s 			page 48


 2461               	
 2462 901c 4E54 FFBC 	         LINK    %A4,#-((BUFFSIZE/2)+4) | CREATE BUFFER ON STACK
 2463               	
 2464 9020 4205      	         CLR.B   %D5            | ZERO CHECKSUM
 2465               	
 2466 9022 6100 0C72 	         BSR     FIXBUF         | START OF INPUT BUFFER
 2467 9026 6100 0F9A 	         BSR     PORTIN2        | GET A RECORD FROM PORT
 2468               	
 2469 902a 264D      	         MOVE.L  %A5,%A3        | START ADDRESS OF BUFFER
 2470 902c 101B      	READ00:  MOVE.B  (%A3)+,%D0     | GET FIRST CHARACTER
 2471 902e BDCB      	         CMP.L   %A3,%A6
 2472 9030 65E6      	         BCS.S   READ0          | END OF BUFFER WITHOUT "S"
 2473               	
 2474 9032 0C00 0053 	READ005: CMPI.B  #'S',%D0       | SEE IF IT IS AN S
 2475 9036 66F4      	         BNE.S   READ00         | GET ANOTHER CHARACTER
 2476 9038 6100 00C4 	         BSR     GETCHR         | GET RECORD TYPE
 2477 903c 2C00      	         MOVE.L  %D0,%D6
 2478               	
 2479 903e 6100 00B0 	         BSR     READHEX        | GET CHAR COUNT
 2480 9042 4283      	         CLR.L   %D3
 2481 9044 1600      	         MOVE.B  %D0,%D3
 2482               	
 2483 9046 0C06 0030 	         CMPI.B  #'0',%D6       | "S0"???
 2484 904a 67CC      	         BEQ.S   READ0          | JUST IGNORE
 2485 904c 0C06 0031 	         CMPI.B  #'1',%D6
 2486 9050 67AC      	         BEQ.S   READS1         | S1 RECORD TYPE (2 BYTE ADDRESS)
 2487 9052 0C06 0038 	         CMPI.B  #'8',%D6
 2488 9056 6700 00F6 	         BEQ     READS8         | S8 RECORD TYPE
 2489 905a 0C06 0039 	         CMPI.B  #'9',%D6
 2490 905e 6700 00FE 	         BEQ     READS9         | S9 RECORD TYPE
 2491 9062 0C06 0032 	         CMPI.B  #'2',%D6
 2492 9066 66CA      	         BNE.S   READ005        | KEEP LOOKING FOR "Sn"
 2493               	
 2494 9068 7C02      	READS2:  MOVEQ   #2,%D6         | D6 = TYPE = S2 (3 BYTE ADDRESS)
 2495 906a 6100 00D0 	         BSR     READHEX6
 2496 906e 5B83      	         SUBQ.L  #5,%D3         | BYTE COUNT
 2497 9070 2943 FFBC 	READS202:MOVE.L  %D3,CC(%A4)
 2498               	
 2499 9074 2940 FFC0 	         MOVE.L  %D0,ADDRESS(%A4) | ADDRESS + OFFSET
 2500 9078 45EC FFC4 	         LEA     LDATA(%A4),%A2   | A2 = STORE TO STACK POINTER
 2501               	
 2502 907c 6172      	READ100: BSR.S   READHEX        | GET DATA BYTE
 2503 907e 14C0      	         MOVE.B  %D0,(%A2)+     | MOVE DATA TO STACK
 2504 9080 51CB FFFA 	         DBRA    %D3,READ100
 2505               	
 2506 9084 4A45      	         TST.W   %D5
 2507 9086 6B0A      	         BMI.S   READ120        | IGNORE CHECKSUM
 2508               	
 2509 9088 1E05      	         MOVE.B  %D5,%D7
 2510 908a 6164      	         BSR.S   READHEX        | GET CHECKSUM FROM DATA
 2511 908c 4607      	         NOT.B   %D7            | CALCULATED CHECKSUM
 2512 908e B007      	         CMP.B   %D7,%D0
 2513 9090 664C      	         BNE.S   READCKSM       | ERROR
 2514               	READ120:
 2515               	
 2516               	* STORE DATA (VERIFY) TO MEMORY
 2517               	
68K GAS  tutor13.s 			page 49


 2518 9092 262C FFBC 	         MOVE.L  CC(%A4),%D3    | BYTE COUNT
 2519 9096 266C FFC0 	         MOVE.L  ADDRESS(%A4),%A3 | MEMORY STORE ADDRESS
 2520 909a 45EC FFC4 	         LEA     LDATA(%A4),%A2   | DATA ADDRESS ON STACK
 2521               	
 2522 909e 4A85      	         TST.L   %D5
 2523 90a0 6B10      	         BMI.S   READ400        | VERIFY
 2524               	
 2525 90a2 1692      	READ130: MOVE.B  (%A2),(%A3)    | STORE DATA
 2526 90a4 B70A      	         CMP.B   (%A2)+,(%A3)+  | VERIFY DATA STORED
 2527 90a6 6600 045C 	         BNE     SETME          | DATA DID NOT STORE
 2528 90aa 51CB FFF6 	         DBRA    %D3,READ130
 2529 90ae 6000 FF68 	READ135: BRA     READ0
 2530               	
 2531               	***     VERIFY
 2532               	
 2533 90b2 43ED 0008 	READ400: LEA     8(%A5),%A1     | A1 = PTR TO INPUT STRING
 2534 90b6 D3C6      	         ADD.L   %D6,%A1
 2535               	
 2536 90b8 4287      	         CLR.L   %D7            | D7 = MISS-MATCH FLAG
 2537               	
 2538 90ba B70A      	READ410: CMP.B   (%A2)+,(%A3)+  | VERIFY DATA
 2539 90bc 6618      	         BNE.S   READ440        | MISS-MATCH
 2540 90be 12FC 002E 	         MOVE.B  #'.',(%A1)+    | OVERLAY INPUT STRING IF OK
 2541 90c2 12FC 002D 	         MOVE.B  #'-',(%A1)+
 2542 90c6 51CB FFF2 	READ420: DBRA    %D3,READ410
 2543               	
 2544 90ca 4A87      	         TST.L   %D7
 2545 90cc 67E0      	         BEQ.S   READ135        | RECORD OK
 2546               	
 2547 90ce 2C49      	         MOVE.L  %A1,%A6        | DONOT DISPLAY CHECKSUM
 2548 90d0 6100 0B1E 	READ430: BSR     OUT1CR         | DISPLAY IT
 2549 90d4 60D8      	         BRA.S   READ135        | READ NEXT RECORD
 2550               	
 2551 90d6 7EFF      	READ440: MOVEQ   #-1,%D7        | D7 = Set miss-match flag
 2552 90d8 78FF      	         MOVEQ   #-1,%D4        | D4 = Set Summary error flag
 2553 90da 5489      	         ADDQ.L  #2,%A1
 2554 90dc 60E8      	         BRA.S   READ420
 2555               	
 2556 90de 78FF      	READCKSM:MOVEQ   #-1,%D4        | D4 = Set summary error flag
 2557 90e0 4BFA 0051 	         LEA     MSGLOAD2(%PC),%A5
 2558 90e4 6100 F010 	         BSR     FIXDADD
 2559 90e8 2007      	         MOVE.L  %D7,%D0
 2560 90ea 6100 08CC 	         BSR     PNT2HX         | CALCULATED CHECKSUM
 2561 90ee 60E0      	         BRA.S   READ430
 2562               	
 2563 90f0 6114      	READHEX: BSR.S   GETHEXC        | FORM BYTE
 2564 90f2 E900      	         ASL.B   #4,%D0
 2565 90f4 1200      	         MOVE.B  %D0,%D1
 2566 90f6 610E      	         BSR.S   GETHEXC
 2567 90f8 8001      	         OR.B    %D1,%D0        | D0 = BYTE FORMED
 2568 90fa DA00      	         ADD.B   %D0,%D5        | UPDATE CHECKSUM
 2569 90fc 4E75      	         RTS
 2570               	
 2571 90fe 101B      	GETCHR:  MOVE.B  (%A3)+,%D0
 2572 9100 BDCB      	         CMP.L   %A3,%A6
 2573 9102 65DA      	         BCS.S   READCKSM       | OVERFLOW
 2574 9104 4E75      	         RTS
68K GAS  tutor13.s 			page 50


 2575               	
 2576 9106 61F6      	GETHEXC: BSR.S   GETCHR
 2577 9108 0400 0030 	         SUBI.B  #0x30,%D0       | SEE IF LESS THAN ZERO
 2578 910c 6D10      	         BLT.S   RHEX3
 2579 910e 0C00 0009 	         CMPI.B  #0x09,%D0       | SEE IF GT 9
 2580 9112 6F08      	         BLE.S   RHEX2
 2581 9114 5F00      	         SUBQ.B  #7,%D0         | NORMALIZE $A TO 10
 2582 9116 0C00 0010 	         CMPI.B  #0x10,%D0       | SEE IF TOO LARGE
 2583 911a 6402      	         BCC.S   RHEX3
 2584 911c 4E75      	RHEX2:   RTS
 2585               	
 2586 911e 4BFA 000A 	RHEX3:   LEA     MSGLOAD1(%PC),%A5 |"NOT HEX=X?"  MESSAGE
 2587 9122 6100 EFD2 	         BSR     FIXDADD
 2588 9126 1CE3      	         MOVE.B  -(%A3),(%A6)+  | BAD CHARACTER
 2589 9128 60A6      	         BRA.S   READ430        | GO TRY NEXT RECORD
 2590               	
 2591 912a 4E4F 5420 	MSGLOAD1:.ascii  "NOT HEX="
 2591      4845 583D 
 2592 9132 04        	         DC.B    EOT
 2593               	
 2594 9133 2043 484B 	MSGLOAD2:.ascii  " CHKSUM="
 2594      5355 4D3D 
 2595 913b 04        	         DC.B    EOT
 2596               	
 2597 913c 4280      	READHEX6:CLR.L   %D0            | FORM ADDRESS (3 BYTE)
 2598 913e 61B0      	         BSR.S   READHEX
 2599 9140 E180      	         ASL.L   #8,%D0
 2600 9142 61AC      	READHEX4:BSR.S   READHEX        | FORM ADDRESS (2 BYTE)
 2601 9144 E180      	         ASL.L   #8,%D0
 2602 9146 61A8      	         BSR.S   READHEX
 2603 9148 D0B8 044C 	         ADD.L   OFFSET,%D0
 2604 914c 4E75      	         RTS
 2605               	
 2606 914e 61EC      	READS8:  BSR.S   READHEX6
 2607 9150 21C0 0400 	READS800:MOVE.L  %D0,REGPC      | SAVE IT IN THE USER PREG
 2608               	
 2609 9154 4A84      	         TST.L   %D4
 2610 9156 6600 EF58 	         BNE     ERROR          | DISPLAY "ERROR"
 2611 915a 6000 F0D6 	         BRA     MACSBUG        | END OF ROUTINE
 2612               	
 2613 915e 4280      	READS9:  CLR.L   %D0
 2614 9160 61E0      	         BSR.S   READHEX4       | GET ADDRESS
 2615 9162 60EC      	         BRA.S   READS800
 2616               	
 2617               	*-------------------------------------------------------------------------
 2618               	* File MDDI      MD[S] (Memory Display) Command                   06/16/82
 2619               	
 2620               	*   ***MD***   MEMORY DISPLAY         ENTRY POINT
 2621               	*     FORMAT:  MD[S] <ADDRESS> [<COUNT>] [;DI]
 2622               	* 1.  IF "S" USED IN COMMAND THEN IT WILL DUMP 16 LINES, (1 Screen), AND
 2623               	*     PROMPT-ENTER CR FOR 16 MORE LINES ETC OR ANY MACSBUG COMMAND.
 2624               	*
 2625               	
 2626               	MDCMD:   .align  2
 2627 9164 6100 0FF0 	         BSR     SCANPORT       | WHERE TO SEND OUTPUT
 2628 9168 21F9 0000 	         MOVE.L  INPORT1.L,INFROM | ONLY ALLOW INPUT FROM PORT1
 2628      062C 0620 
68K GAS  tutor13.s 			page 51


 2629               	
 2630 9170 7CFF      	         MOVEQ   #-1,%D6        | D6 = HOW MANY LINES PER PAGE
 2631               	
 2632 9172 97CB      	         SUB.L   %A3,%A3        | A4 = DEFAULT ZERO  START
 2633 9174 284B      	         MOVE.L  %A3,%A4        |  A3 = END ADDR
 2634               	
 2635 9176 4287      	         CLR.L   %D7            | D7 = DO NOT DISASSEMBLE
 2636 9178 244D      	         MOVE.L  %A5,%A2
 2637 917a BDCA      	PRINT8:  CMP.L   %A2,%A6        | LOOK FOR OPTIONS
 2638 917c 651A      	         BCS.S   PRINTDI        | NO  OPTIONS
 2639 917e 0C1A 003B 	         CMPI.B  #';',(%A2)+
 2640 9182 66F6      	         BNE.S   PRINT8
 2641               	
 2642 9184 2C4A      	         MOVE.L  %A2,%A6
 2643 9186 538E      	         SUBQ.L  #1,%A6         | A6 = POINTER TO ;
 2644               	
 2645 9188 0C1A 0044 	         CMPI.B  #'D',(%A2)+
 2646 918c 6600 EF28 	PRINTMB: BNE     SYNTAX         | COMMAND SYNTAX ERROR
 2647 9190 0C1A 0049 	         CMPI.B  #'I',(%A2)+
 2648 9194 66F6      	         BNE.S   PRINTMB
 2649 9196 7EFF      	         MOVEQ   #-1,%D7        | DISASSEMBLE OPTION
 2650               	PRINTDI:
 2651               	
 2652               	* LOOK FOR "S" IN COMMAND
 2653 9198 1015      	         MOVE.B  (%A5),%D0
 2654 919a 0C00 0053 	         CMPI.B  #'S',%D0
 2655 919e 6608      	         BNE.S   PRINT5         | NO "S" IN COMMAND
 2656 91a0 528D      	         ADDQ.L  #1,%A5         | MOVE PAST "S"
 2657               	
 2658 91a2 7C10      	         MOVEQ   #16,%D6        | DO 16 LINES AT A TIME
 2659 91a4 97CB      	         SUB.L   %A3,%A3
 2660 91a6 538B      	         SUBQ.L  #1,%A3         | MAX END ADDRESS
 2661               	
 2662 91a8 41FA 001A 	PRINT5:  LEA     PRINT7(%PC),%A0 | WHERE TO GO IF NO PARAMETERS
 2663 91ac 6100 08C6 	         BSR     FNEXTF         | FIND NEXT FIELD
 2664 91b0 6100 F988 	         BSR     GETA
 2665 91b4 2840      	         MOVE.L  %D0,%A4        | A4 = GET ADDRESS
 2666               	
 2667 91b6 6100 08BC 	         BSR     FNEXTF
 2668 91ba 6100 090C 	         BSR     GETEXP         | D0 = GET COUNT
 2669 91be D08C      	         ADD.L   %A4,%D0        | END=START+COUNT-1
 2670 91c0 5380      	         SUBQ.L  #1,%D0         | BACK OFF ONE
 2671 91c2 2640      	         MOVE.L  %D0,%A3        | A3 = END ADDRESS
 2672               	
 2673 91c4 4A87      	PRINT7:  TST.L   %D7
 2674 91c6 672A      	         BEQ.S   PUTADR         | NOT DISASSEMBLE
 2675               	
 2676 91c8 6100 0ACC 	PRINTDI5:BSR     FIXBUF         | DI OPTION
 2677 91cc 48E7 0310 	         MOVEM.L %A3/%D6-%D7,-(%A7)
 2678 91d0 4CD4 0007 	         MOVEM.L (%A4),%D0-%D2  | D0-D2 = DATA TO DISASSEMBLE
 2679 91d4 6100 289E 	         BSR     DCODE68K       | DISASSEMBLE
 2680 91d8 6100 0A16 	         BSR     OUT1CR
 2681 91dc 4CDF 08C0 	         MOVEM.L (%A7)+,%A3/%D6-%D7
 2682               	
 2683 91e0 5386      	         SUBQ.L  #1,%D6
 2684 91e2 676C      	         BEQ.S   PRINT9         | "MDS" COMMAND
 2685               	
68K GAS  tutor13.s 			page 52


 2686 91e4 B7CC      	         CMP.L   %A4,%A3        |  END CHECK
 2687 91e6 64E0      	         BCC.S   PRINTDI5
 2688 91e8 6066      	         BRA.S   PRINT9
 2689               	
 2690 91ea 7C10      	PRINT3:  MOVEQ   #16,%D6        | D6 = LINE BLOCK COUNT
 2691 91ec 97CB      	         SUB.L   %A3,%A3
 2692 91ee 538B      	         SUBQ.L  #1,%A3         | A3 = MAX END ADDRESS
 2693 91f0 60D2      	         BRA.S   PRINT7
 2694               	
 2695               	* START A NEW  LINE
 2696               	*
 2697 91f2 6100 0AA2 	PUTADR:  BSR     FIXBUF         | SET UP OUTPUT BUFFER
 2698 91f6 200C      	         MOVE.L  %A4,%D0        | CURRENT LINE ADDRESS
 2699 91f8 6100 07DA 	         BSR     FRELADDR       | FORM RELATIVE ADDRESS
 2700 91fc 1CFC 0020 	         MOVE.B  #0x20,(%A6)+   | FORMAT  SPACE
 2701 9200 204C      	         MOVE.L  %A4,%A0        | A0 IS SCANNING ADDRESS
 2702 9202 7610      	         MOVEQ   #0x10,%D3      | SET UP COUNTER FOR LOOP
 2703               	
 2704 9204 1018      	NXTBP:   MOVE.B  (%A0)+,%D0     | GET BYTE TO PRINT
 2705 9206 6100 07B0 	         BSR     PNT2HX         | PRINT IT
 2706 920a 1CFC 0020 	         MOVE.B  #0x20,(%A6)+   | SPACE BETWEEN EACH HEX
 2707               	
 2708 920e 0C03 0009 	         CMPI.B  #9,%D3         | HALF LINE SPACING
 2709 9212 6604      	         BNE.S   NXTBP3
 2710 9214 1CFC 0020 	         MOVE.B  #0x20,(%A6)+
 2711               	NXTBP3:
 2712               	
 2713 9218 5383      	         SUBQ.L  #1,%D3
 2714 921a 66E8      	         BNE.S   NXTBP          | LOOP TILL D3 IS ZERO
 2715               	
 2716 921c 1CFC 0020 	         MOVE.B  #0x20,(%A6)+   | MOVE A SPACE
 2717 9220 204C      	         MOVE.L  %A4,%A0        | RELOAD SCANNER FOR ASCII PRINTS
 2718 9222 7610      	         MOVEQ   #0x10,%D3      | RELOAD COUNTER
 2719               	
 2720 9224 1018      	NXTCHR:  MOVE.B  (%A0)+,%D0     | FETCH BYTE
 2721 9226 0200 007F 	         ANDI.B  #0x7F,%D0      | REMOVE HIGH ORDER BIT, (ASCII ONLY USES 7 BITS)
 2722 922a 0C00 0020 	         CMPI.B  #0x20,%D0      | SEE IF IT IS CONTROL CHAR
 2723 922e 6D06      	         BLT.S   NOTCHR         | BYPASS IF IT IS... ELSE
 2724 9230 0C00 007F 	         CMPI.B  #0x7F,%D0      | IS IT A "7F"?    (CAUSES PRINTER PROBLEM)
 2725 9234 6D04      	         BLT.S   PUTCHR         | NO... THEN PRINT IT, ELSE SUBSTITUTE "."
 2726 9236 103C 002E 	NOTCHR:  MOVE.B  #0x2E,%D0      | CHANGE UNPRINTABLE TO PERIOD
 2727               	
 2728 923a 1CC0      	PUTCHR:  MOVE.B  %D0,(%A6)+     | MOVE "EDITTED" CHARACTER TO PRINT LINE
 2729 923c 5383      	         SUBQ.L  #1,%D3         | LOOP AROUND FOR NEXT CHAR
 2730 923e 66E4      	         BNE.S   NXTCHR         | ANY LEFT?
 2731 9240 6100 09AE 	         BSR     OUT1CR         | NO... THEN PRINT THE COMPLETE LINE
 2732 9244 508C      	         ADDQ.L  #0x08,%A4      | UPDATE STARTING ADDRESS OF NEXT ADDRESS
 2733 9246 508C      	         ADDQ.L  #0x08,%A4      | ........
 2734 9248 B7CC      	         CMP.L   %A4,%A3        |  DOES NEW LINE START PAST END
 2735 924a 6504      	         BCS.S   PRINT9         | SEE IF STILL GOING
 2736 924c 5386      	         SUBQ.L  #1,%D6         | DECR THE COUNTER
 2737 924e 66A2      	         BNE.S   PUTADR         | DO ANOTHER LINE
 2738               	
 2739 9250 4BFA F0A8 	PRINT9:  LEA     MSG001(%PC),%A5 | SET UP FOR PROMPT
 2740 9254 6100 EE9C 	         BSR     FIXDATA
 2741 9258 1CFC 003E 	         MOVE.B  #'>',(%A6)+    | PROMPT SAME AS MACSBUG
 2742 925c 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+
68K GAS  tutor13.s 			page 53


 2743 9260 6100 09A8 	         BSR     OUTPUT         | PRINT IT
 2744               	
 2745 9264 6100 0A30 	         BSR     FIXBUF         | RESET BUFFER
 2746 9268 6100 0A34 	         BSR     PORTIN1        | TAKE IN INPUT
 2747 926c BBCE      	         CMP.L   %A6,%A5        | SEE IF ANYTHING ENTERED
 2748 926e 6700 FF7A 	         BEQ     PRINT3         | NOTHING ENTERED; DO 16 MORE LINES
 2749 9272 42B8 061C 	         CLR.L   OUTTO
 2750 9276 6000 EFFC 	         BRA     DECODE6        | GO MAKE SURE 2ND DIGIT IS BLANK
 2751               	
 2752               	*-------------------------------------------------------------------------
 2753               	* File MMDI      Modify Memory command WITH asm/disasm            11/27/81
 2754               	
 2755               	* MODIFY MEMORY
 2756               	*  COMMON REGISTER USAGE
 2757               	*   %A6  IO BUFFER POINTER  END
 2758               	*   %A5  IO BUFFER POINTER  START
 2759               	*   %A4  ADDRESS TO MODIFY
 2760               	*   A3
 2761               	*   A2
 2762               	*   A1
 2763               	*   A0
 2764               	*   %D7  DATA READ (DATA STORED)
 2765               	*   %D6  SIZE  1/2/4 BYTES  (ASM/DISASM 2 - 10 BYTES)
 2766               	*   %D5  OVERRIDE BYTE (80xX=NON VERIFY)  (XX80=BYTE SIZE)
 2767               	*
 2768               	* ;OPTIONS
 2769               	*   ;W  WORD
 2770               	*   ;L  LONG WORD (4 BYTES)
 2771               	*   ;DI DISASSEMBLE
 2772               	*     ;O  ODD ADDRESSES ONLY
 2773               	*     ;V  EVEN ADDRESSES ONLY
 2774               	*       ;N  NON-VERIFY
 2775               	*
 2776               	
 2777 927a 6100 0816 	MMDI:    BSR     CKWADR
 2778 927e 6100 0818 	         BSR     CKADDR
 2779 9282 4286      	         CLR.L   %D6            | SIZE = 0
 2780 9284 D9C6      	MMDI22:  ADD.L   %D6,%A4        | PC = PC + SIZE
 2781 9286 6100 0A0E 	MMDI23:  BSR     FIXBUF         | A5 & A6 = POINTER TO BUFFER
 2782               	
 2783               	*                  ENTRY
 2784               	*                   A4 = PROGRAM COUNTER
 2785               	*                   A5 = POINTER TO STORE DISASSEMBLED LINE
 2786 928a 4CD4 0007 	         MOVEM.L   (%A4),%D0-%D2 | DATA TO DISASSEMBLE
 2787 928e 6100 27E4 	         BSR       DCODE68K
 2788               	*                  RETURN
 2789               	*                   A4 = NEW PROGRAM COUNTER
 2790               	*                   A5 = PTR START BUFFER
 2791               	*                   A6 = PRT END BUFFER
 2792               	*                   D6 = NUMBER OF BYTES DISASSEMBLED
 2793               	
 2794 9292 1CFC 003F 	         MOVE.B  #'?',(%A6)+
 2795 9296 6100 0972 	         BSR     OUTPUT
 2796               	
 2797 929a 6100 09FA 	MMDI31:  BSR     FIXBUF
 2798 929e 6100 0A10 	         BSR     PORTIN1N       | INPUT ASSEMBLY SOURCE (NO LINE FEED)
 2799 92a2 BDCD      	         CMP.L   %A5,%A6
68K GAS  tutor13.s 			page 54


 2800 92a4 6606      	         BNE.S   MMDI34
 2801 92a6 6100 0948 	         BSR     OUT1CR         | NOTHING INPUT; OUTPUT LINE FEED
 2802 92aa 60DA      	         BRA.S   MMDI23
 2803               	
 2804 92ac 99C6      	MMDI34:  SUB.L   %D6,%A4        | BACKUP PC
 2805               	
 2806 92ae 0C15 002E 	         CMPI.B  #'.',(%A5)
 2807 92b2 6700 01DE 	         BEQ     MM905          | CLOSE
 2808               	
 2809 92b6 47F8 0797 	         LEA     SYSTACK+17,%A3 | STORE BUFFER
 2810               	
 2811               	*                  A3 = STORE POINTER
 2812               	*                  A4 = PROGRAM COUNTER
 2813               	*                  A5 = POINTER TO DATA TO ASSEMBLE
 2814               	*                  A6 = POINTER TO END OF SOURCE DATA
 2815               	
 2816 92ba 6100 15D2 	         BSR     CODE68K        | ASSEMBLE
 2817               	
 2818               	*                  A3 = POINTER TO LINE ASSEMBLED
 2819               	*                  A4 = PROGRAM COUNTER
 2820               	*                  A6 = POINTER END OF LINE ASSEMBLED
 2821               	*                  D0-D2 = DATA ASSEMBLED
 2822               	*                  D6 = NUMBER OF BYTES ASSEMBLED
 2823               	*                  D7 = ERROR FLAG & POSITION OF ERROR
 2824               	
 2825 92be 2A4B      	         MOVE.L  %A3,%A5
 2826 92c0 D7FC 0000 	         ADD.L   #78,%A3        | A3 = MAX LINE
 2826      004E 
 2827 92c6 B7CE      	MMDI26:  CMP.L   %A6,%A3
 2828 92c8 6506      	         BCS.S   MMDI27
 2829 92ca 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE FILL LINE
 2830 92ce 60F6      	         BRA.S   MMDI26
 2831 92d0 6100 091E 	MMDI27:  BSR     OUT1CR         | PRINT LINE JUST ENTERED
 2832               	
 2833 92d4 4A07      	         TST.B   %D7
 2834 92d6 6620      	         BNE.S   MMDI30         | ERROR; DON"T STORE DATA
 2835               	
 2836 92d8 45F8 078A 	         LEA     SYSTACK+4,%A2  | A2 = TEMP AREA
 2837 92dc 48E2 E000 	         MOVEM.L %D0/%D1/%D2,-(%A2) | STORE DATA
 2838 92e0 2206      	         MOVE.L  %D6,%D1        | D1 = NUMBER OF BYTES TO STORE
 2839 92e2 5381      	         SUBQ.L  #1,%D1
 2840 92e4 224C      	         MOVE.L  %A4,%A1        | A1 = DATA STORE POINTER
 2841 92e6 101A      	MMDI29:  MOVE.B  (%A2)+,%D0
 2842 92e8 1280      	         MOVE.B  %D0,(%A1)
 2843 92ea 1419      	         MOVE.B  (%A1)+,%D2     | INSURE DATA STORED
 2844 92ec B400      	         CMP.B   %D0,%D2
 2845 92ee 6600 0196 	         BNE     MM90
 2846 92f2 51C9 FFF2 	         DBRA    %D1,MMDI29
 2847 92f6 608C      	         BRA.S   MMDI22
 2848               	
 2849 92f8 6100 099C 	MMDI30:  BSR     FIXBUF
 2850 92fc 1CFC 0020 	MMDI44:  MOVE.B  #BLANK,(%A6)+  | SPACES
 2851 9300 51CF FFFA 	         DBRA    %D7,MMDI44
 2852               	
 2853 9304 1D7C 0058 	         MOVE.B  #'X',-1(%A6)   | X UNDER ERROR
 2853      FFFF 
 2854 930a 1CFC 003F 	         MOVE.B  #'?',(%A6)+    | ? ALLOW REINPUT
68K GAS  tutor13.s 			page 55


 2855 930e 6100 08FA 	         BSR     OUTPUT
 2856 9312 6086      	         BRA.S   MMDI31
 2857               	
 2858               	MCMD:    .align  2              | "M" Alias for "MM" Command
 2859               	MMCMD:   .align  2              | "MM" Command -Memory Modify-
 2860 9314 41FA EDA0 	         LEA     SYNTAX(%PC),%A0 | A0=ERROR RETURN
 2861 9318 6100 075A 	         BSR     FNEXTF
 2862 931c 6100 F81C 	         BSR     GETA
 2863 9320 2840      	         MOVE.L  %D0,%A4        |  A4= ADDRESS OF DATA
 2864 9322 7C01      	         MOVEQ   #1,%D6         | SIZE = BYTE
 2865 9324 4285      	         CLR.L   %D5            | NO OVERRIDE
 2866               	
 2867 9326 BDCD      	MM05:    CMP.L   %A5,%A6
 2868 9328 6566      	         BCS.S   MM10           | AT END OF BUFFER
 2869               	
 2870               	* LOOK FOR ;OPTIONS
 2871 932a 101D      	         MOVE.B  (%A5)+,%D0
 2872 932c 0C00 003B 	         CMPI.B  #';',%D0
 2873 9330 66F4      	         BNE.S   MM05           | IGNORE NOT ;
 2874               	
 2875 9332 101D      	         MOVE.B  (%A5)+,%D0     |  GET NEXT CHAR
 2876 9334 0C00 0044 	         CMPI.B  #'D',%D0
 2877 9338 660A      	         BNE.S   MM045
 2878               	
 2879 933a 0C1D 0049 	         CMPI.B  #'I',(%A5)+    | DISSAMBLY OPTION
 2880 933e 66E6      	         BNE.S   MM05
 2881 9340 6000 FF38 	         BRA     MMDI
 2882               	
 2883 9344 0C00 0057 	MM045:   CMPI.B  #'W',%D0
 2884 9348 6742      	         BEQ.S   MM065          | ;W   D6=2
 2885               	
 2886 934a 0C00 004C 	         CMPI.B  #'L',%D0
 2887 934e 6608      	         BNE.S   MM054
 2888 9350 1C3C 0004 	         MOVE.B  #4,%D6         | ;L   D6=4
 2889 9354 4205      	         CLR.B   %D5            | RESET BYTE OVERRIDE
 2890 9356 60CE      	         BRA.S   MM05
 2891               	
 2892 9358 0C00 004E 	MM054:   CMPI.B  #'N',%D0
 2893 935c 6606      	         BNE.S   MM056
 2894 935e 0045 8000 	         ORI.W   #0x8000,%D5     | ;N  D5=$8000
 2895 9362 60C2      	         BRA.S   MM05
 2896               	
 2897 9364 0C00 004F 	MM056:   CMPI.B  #'O',%D0
 2898 9368 6608      	         BNE.S   MM058
 2899 936a 200C      	         MOVE.L  %A4,%D0        | ;O
 2900 936c 0000 0001 	         ORI.B   #1,%D0         | FORCE ODD ADDRESS
 2901 9370 600E      	         BRA.S   MM060
 2902               	
 2903 9372 0C00 0056 	MM058:   CMPI.B  #'V',%D0
 2904 9376 6600 ED3E 	         BNE     SYNTAX         | ERROR
 2905 937a 200C      	         MOVE.L  %A4,%D0        | ;V
 2906 937c 0200 00FE 	         ANDI.B  #0xFE,%D0       | FORCE EVEN ADDRESS
 2907 9380 2840      	MM060:   MOVE.L  %D0,%A4
 2908 9382 0005 0080 	         ORI.B   #0x80,%D5       | BYTE OVERRIDE
 2909 9386 1C3C 0002 	MM064:   MOVE.B  #2,%D6         | SIZE = WORD (2 BYTES)
 2910 938a 609A      	         BRA.S   MM05
 2911               	
68K GAS  tutor13.s 			page 56


 2912 938c 4205      	MM065:   CLR.B   %D5            | RESET BYTE OVERRIDE
 2913 938e 60F6      	         BRA.S   MM064
 2914               	
 2915               	* FORMAT ADDRESS FOR PRINTING
 2916 9390 200C      	MM10:    MOVE.L  %A4,%D0
 2917 9392 0C06 0001 	         CMPI.B  #1,%D6
 2918 9396 6708      	         BEQ.S   MM11           | "BYTE"
 2919 9398 4A05      	         TST.B   %D5
 2920 939a 6B04      	         BMI.S   MM11           | BYTE OVERRIDE
 2921 939c 6100 06F4 	         BSR     CKWADR         | CHK ALLIGNMENT
 2922 93a0 6100 06F6 	MM11:    BSR     CKADDR
 2923 93a4 6100 08F0 	         BSR     FIXBUF
 2924 93a8 6100 062A 	         BSR     FRELADDR       | FORM RELATIVE ADDRESS
 2925 93ac 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 2926               	
 2927 93b0 4A45      	         TST.W   %D5
 2928 93b2 6B2C      	         BMI.S   MM18           | NON-VERIFY (DON"T READ MEMORY)
 2929               	
 2930               	* READ DATA FROM MEMORY & FORMAT IT
 2931 93b4 4A05      	         TST.B   %D5
 2932 93b6 6B0C      	         BMI.S   MM12           | BYTE OVERRIDE
 2933               	
 2934 93b8 0C06 0002 	         CMPI.B  #2,%D6
 2935 93bc 6710      	         BEQ.S   MM14           | WORD
 2936 93be 0C06 0004 	         CMPI.B  #4,%D6
 2937 93c2 6714      	         BEQ.S   MM16           | LONG WORD
 2938               	
 2939               	* BYTE
 2940               	MM12:
 2941 93c4 1E14      	         MOVE.B  (%A4),%D7      | D7 = DATA READ
 2942 93c6 2007      	         MOVE.L  %D7,%D0
 2943 93c8 6100 05EE 	         BSR     PNT2HX         | FORMAT BYTE
 2944 93cc 6012      	         BRA.S   MM18
 2945               	
 2946               	* WORD
 2947               	MM14:
 2948 93ce 3E14      	         MOVE.W  (%A4),%D7
 2949 93d0 2007      	         MOVE.L  %D7,%D0
 2950 93d2 6100 05DC 	         BSR     PNT4HX         | FORMAT WORD
 2951 93d6 6008      	         BRA.S   MM18
 2952               	
 2953               	* LONG WORD
 2954               	MM16:
 2955 93d8 2E14      	         MOVE.L  (%A4),%D7
 2956 93da 2007      	         MOVE.L  %D7,%D0
 2957 93dc 6100 05C4 	         BSR     PNT8HX         | FORMAT LONG WORD
 2958               	
 2959 93e0 1CFC 0020 	MM18:    MOVE.B  #BLANK,(%A6)+  | SPACE
 2960 93e4 1CFC 003F 	         MOVE.B  #'?',(%A6)+
 2961 93e8 6100 0820 	         BSR     OUTPUT
 2962               	
 2963               	* READ USER INPUT
 2964               	*  [DATA] (CR)   NEXT
 2965               	*           ^    LAST
 2966               	*           =    SAME
 2967               	*           .    EXIT
 2968               	
68K GAS  tutor13.s 			page 57


 2969 93ec 6100 08A8 	         BSR     FIXBUF
 2970 93f0 6100 08AC 	         BSR     PORTIN1
 2971 93f4 BDCD      	         CMP.L   %A5,%A6
 2972 93f6 6700 0082 	         BEQ     MM50           | NO DATA (CR ONLY)
 2973               	
 2974 93fa 41FA 005A 	         LEA     MM40(%PC),%A0  | A0 = NO PARAMETER RETURN
 2975 93fe 6100 0674 	         BSR     FNEXTF         | FIND NEXT FIELD
 2976               	
 2977               	* IF = ^ OR .  TAKE ACTION
 2978 9402 1015      	         MOVE.B  (%A5),%D0
 2979 9404 0C00 003D 	         CMPI.B  #'=',%D0
 2980 9408 6786      	         BEQ.S   MM10
 2981 940a 0C00 002E 	         CMPI.B  #'.',%D0
 2982 940e 6700 EE22 	         BEQ     MACSBUG
 2983 9412 0C00 005E 	         CMPI.B  #'^',%D0
 2984 9416 6768      	         BEQ.S   MM60
 2985               	
 2986 9418 6100 06AE 	         BSR     GETEXP         | GET DATA
 2987 941c 2E00      	         MOVE.L  %D0,%D7        | D7=DATA STORED
 2988               	
 2989               	* WE HAVE DATA; STORE IT
 2990 941e 4A05      	         TST.B   %D5
 2991 9420 6B0C      	         BMI.S   MM22           | BYTE OVERRIDE
 2992               	
 2993 9422 0C06 0002 	         CMPI.B  #2,%D6
 2994 9426 6714      	         BEQ.S   MM24           | WORD
 2995 9428 0C06 0004 	         CMPI.B  #4,%D6
 2996 942c 671C      	         BEQ.S   MM26           | LONG WORD
 2997               	
 2998               	* BYTE
 2999               	MM22:
 3000 942e 1880      	         MOVE.B  %D0,(%A4)      | STORE DATA
 3001 9430 4A45      	         TST.W   %D5
 3002 9432 6B22      	         BMI.S   MM40           | NO-VERIFY
 3003 9434 1014      	         MOVE.B  (%A4),%D0
 3004 9436 B007      	         CMP.B   %D7,%D0
 3005 9438 664C      	         BNE.S   MM90           | NO MATCH
 3006 943a 601A      	         BRA.S   MM40
 3007               	
 3008               	* WORD
 3009               	MM24:
 3010 943c 3880      	         MOVE.W  %D0,(%A4)      | STORE
 3011 943e 4A45      	         TST.W   %D5
 3012 9440 6B14      	         BMI.S   MM40           | DO NOT VERIFY
 3013 9442 3014      	         MOVE.W  (%A4),%D0
 3014 9444 B047      	         CMP.W   %D7,%D0
 3015 9446 663E      	         BNE.S   MM90           | NO MATCH
 3016 9448 600C      	         BRA.S   MM40
 3017               	
 3018               	* LONG WORD
 3019               	MM26:
 3020 944a 2880      	         MOVE.L  %D0,(%A4)
 3021 944c 4A45      	         TST.W   %D5
 3022 944e 6B06      	         BMI.S   MM40           | DO NOT VERIFY
 3023 9450 2014      	         MOVE.L  (%A4),%D0
 3024 9452 B087      	         CMP.L   %D7,%D0
 3025 9454 6630      	         BNE.S   MM90           | NO MATCH
68K GAS  tutor13.s 			page 58


 3026               	
 3027               	* LOOK FOR  . = ^
 3028 9456 1015      	MM40:    MOVE.B  (%A5),%D0
 3029 9458 0C00 002E 	         CMPI.B  #'.',%D0
 3030 945c 6700 EDD4 	         BEQ     MACSBUG        | DONE
 3031 9460 0C00 005E 	         CMPI.B  #'^',%D0
 3032 9464 671A      	         BEQ.S   MM60           | BACKUP ADDRESS
 3033 9466 0C00 003D 	         CMPI.B  #'=',%D0
 3034 946a 6700 FF24 	         BEQ     MM10           | ADDRESS STAYS THE SAME
 3035 946e 0C00 0020 	         CMPI.B  #BLANK,%D0
 3036 9472 6706      	         BEQ.S   MM50
 3037 9474 BDCD      	         CMP.L   %A5,%A6
 3038 9476 6600 EC3E 	         BNE     SYNTAX         | ERROR
 3039               	
 3040               	* ADDRESS LOW TO HIGH
 3041 947a D9C6      	MM50:    ADD.L   %D6,%A4
 3042 947c 6000 FF12 	         BRA     MM10
 3043               	
 3044               	* ADDRESS HIGH TO LOW
 3045 9480 99C6      	MM60:    SUB.L   %D6,%A4
 3046 9482 6000 FF0C 	         BRA     MM10
 3047               	
 3048 9486 4BFA 00B6 	MM90:    LEA     MSG017(%PC),%A5 | "DATA DID NOT STORE"
 3049 948a 6100 EC7A 	MM95:    BSR     FIXDCRLF
 3050 948e 6000 EC18 	         BRA     MSG
 3051               	
 3052 9492 4BFA EC03 	MM905:   LEA     MSGEOT(%PC),%A5
 3053 9496 60F2      	         BRA.S   MM95
 3054               	
 3055               	*-------------------------------------------------------------------------
 3056               	* File MS        Memory set command                               11/02/81
 3057               	
 3058               	*    ***MS***   MEMORY SET
 3059               	*     FORMAT: MS  ADDRESS HEX HEX,HEX,"ASCII"  ETC.
 3060               	*     COMMAS OR SPACES BETWEEN FIELDS
 3061               	*     FIELDS ARE SIZE ADJUSTED (STORES UP TO 4 BYTES)
 3062               	*     ASCII ENCLOSED IN SINGLE QUOTES-ANY LENGTH
 3063               	
 3064 9498 41FA EC1C 	MSCMD:   LEA     SYNTAX(%PC),%A0 | IF NO PARAMETERS
 3065 949c 6100 05D6 	         BSR     FNEXTF         | FIND NEXT FIELD
 3066 94a0 6100 F698 	         BSR     GETA           | GET ADDRESS
 3067 94a4 6100 05F2 	         BSR     CKADDR         | CHECK VALID ADDRESS
 3068               	
 3069 94a8 2240      	         MOVE.L  %D0,%A1        | A1=START (OPEN) ADDRESS
 3070 94aa 41FA ED86 	SETM1:   LEA     MACSBUG(%PC),%A0 | IF NO PARAMTER
 3071 94ae 6100 05C4 	         BSR     FNEXTF         | FIND NEXT FIELD
 3072 94b2 284D      	         MOVE.L  %A5,%A4        | SAVE ADDRESS OF PARAMTER
 3073 94b4 1015      	         MOVE.B  (%A5),%D0      | CHECK OUT NEXT CHARACTER
 3074 94b6 0C00 0027 	         CMPI.B  #0x27,%D0      | SEE IF IT IS QUOTE MARK
 3075 94ba 6730      	         BEQ.S   SETM5          | SPECIAL ROUTINE
 3076 94bc 0C00 004E 	         CMPI.B  #'N',%D0       | SEE IF NEXT LINE FEATURE
 3077 94c0 674E      	         BEQ.S   SETM7
 3078 94c2 6100 0632 	         BSR     GETNUMA        | GET THE DATA
 3079 94c6 2649      	         MOVE.L  %A1,%A3        | ADDRESS
 3080 94c8 220D      	         MOVE.L  %A5,%D1        | COMPUTE BYTES OF DATA
 3081 94ca 928C      	         SUB.L   %A4,%D1        | LEN=END-START
 3082 94cc E281      	         ASR.L   #1,%D1         | BYTES=CHAR/2
68K GAS  tutor13.s 			page 59


 3083 94ce 6402      	         BCC.S   SETM3          | TAKE CARE OF ODD CHARACTER
 3084 94d0 5281      	         ADDQ.L  #1,%D1         | WHOLE NUMBER OF BYTES
 3085 94d2 2401      	SETM3:   MOVE.L  %D1,%D2        | D1 SCANS DOWN
 3086 94d4 5382      	         SUBQ.L  #1,%D2         | KNOCK IT DOWN TO INDEX
 3087 94d6 1780 2000 	         MOVE.B  %D0,0(%A3,%D2.W) | INDEXED BECAUSE BACKWARD
 3088               	
 3089 94da 1633 2000 	         MOVE.B  0(%A3,%D2.W),%D3 | REREAD TO CHECK IF STORED OK
 3090               	
 3091 94de B600      	         CMP.B   %D0,%D3        | ARE SAME?
 3092 94e0 6622      	         BNE.S   SETME          | "DATA DID NOT STORE"
 3093               	
 3094 94e2 E080      	         ASR.L   #8,%D0         | SHIFT ONE BYTE
 3095 94e4 5289      	         ADDQ.L  #1,%A1         | BUMP ADDRESS
 3096 94e6 5381      	         SUBQ.L  #1,%D1
 3097 94e8 66E8      	         BNE.S   SETM3
 3098 94ea 60BE      	         BRA.S   SETM1          | GO DO NEXT DATA
 3099               	
 3100               	*  DATA IN IN ASCII STRING
 3101 94ec 528D      	SETM5:   ADDQ.L  #1,%A5         | GET PAST QUOTE MARK
 3102 94ee BBCE      	SETM6:   CMP.L   %A6,%A5        | SEE IF END OF BUFFER
 3103 94f0 6C00 ED40 	         BGE     MACSBUG
 3104 94f4 101D      	         MOVE.B  (%A5)+,%D0     | GRAB CHARACTER
 3105 94f6 0C00 0027 	         CMPI.B  #0x27,%D0      | SEE IF QUOTE MARK
 3106 94fa 67AE      	         BEQ.S   SETM1          | IF SO-END OF STRING
 3107 94fc 1280      	         MOVE.B  %D0,(%A1)      | SAVE DATA
 3108               	
 3109 94fe 1219      	         MOVE.B  (%A1)+,%D1     | REREAD FOR CHECK
 3110               	
 3111 9500 B001      	         CMP.B   %D1,%D0        | SEE IF SAME
 3112 9502 67EA      	         BEQ.S   SETM6
 3113 9504 4BFA 0038 	SETME:   LEA     MSG017(%PC),%A5 | "DATA DID NOT STORE"
 3114 9508 6100 EBFC 	         BSR     FIXDCRLF
 3115 950c 6000 EB9A 	         BRA     MSG
 3116               	
 3117 9510 6100 0784 	SETM7:   BSR     FIXBUF         | DISPLAY CURRENT ADDRESS
 3118 9514 2009      	         MOVE.L  %A1,%D0
 3119 9516 6100 048A 	         BSR     PNT8HX         | PUT ADDRESS IN BUFFER
 3120 951a 2CFC 2020 	         MOVE.L  #0x20203f20,(%A6)+ | "  ? " PROMPT
 3120      3F20 
 3121 9520 6100 06E8 	         BSR     OUTPUT         | DUMP BUFFER WITH NO LF CR
 3122 9524 6100 0770 	         BSR     FIXBUF         | GET READY FOR INPUT
 3123 9528 1AFC 0020 	         MOVE.B  #BLANK,(%A5)+  | ADVANCE IN BUFFER
 3124 952c 2C4D      	         MOVE.L  %A5,%A6        |  BECAUSE OF SNAFU IN FINDNP
 3125 952e 6100 076E 	         BSR     PORTIN1        | INPUT FROM CONSOLE
 3126 9532 1025      	         MOVE.B  -(%A5),%D0     | JUST BACK UP IN BUFFER
 3127 9534 BBCE      	         CMP.L   %A6,%A5
 3128 9536 6700 ECFA 	         BEQ     MACSBUG
 3129 953a 6000 FF6E 	         BRA     SETM1          | DO DECODE IT
 3130               	
 3131 953e 4441 5441 	MSG017:  .ascii  "DATA DID NOT STORE"
 3131      2044 4944 
 3131      204E 4F54 
 3131      2053 544F 
 3131      5245 
 3132 9550 0D0A 04   	         DC.B    CR,LF,EOT
 3133               	
 3134 9553 00        	         DC.B    0              | PAD BYTE
68K GAS  tutor13.s 			page 60


 3135               	
 3136               	*-------------------------------------------------------------------------
 3137               	* File MTSETUP   MTSETUP memory test setup                        11/02/81
 3138               	
 3139               	*
 3140               	* SET UP PARMS FOR BLOCK TEST AND BLOCK INITIALIZE
 3141               	*
 3142               	
 3143               	MTSETUP: .align  2
 3144 9554 21CF 04D6 	         MOVE.L  %A7,TEMP        | STACK FOR EXCEPTION RETURN
 3145 9558 41FA EB5C 	         LEA     SYNTAX(%PC),%A0 | WHERE TO GO IF NO PARAMETERS
 3146 955c 6100 0516 	         BSR     FNEXTF          | FIND NEXT FIELD
 3147 9560 6100 F5D8 	         BSR     GETA            | GET ADDR1
 3148 9564 6100 052C 	         BSR     CKWADR          | CHECK WORD BOUNDRY ADDRESS
 3149 9568 2640      	         MOVE.L  %D0,%A3         | SAVE STARTING ADDRESS
 3150               	
 3151 956a 41FA EB4A 	         LEA     SYNTAX(%PC),%A0 | SET UP TO TRY "TO" ADDRESS
 3152 956e 6100 0504 	         BSR     FNEXTF
 3153 9572 6100 F5C6 	         BSR     GETA            | GET ADDR2
 3154 9576 6100 051A 	         BSR     CKWADR
 3155 957a 2240      	         MOVE.L  %D0,%A1         | A1 = END ADDRESS?
 3156 957c 204B      	         MOVE.L  %A3,%A0         | A0 = STARTING ADDRESS
 3157 957e 6100 EB44 	         BSR     P2PHY           | DISPLAY TWO ADDRESSES
 3158 9582 B3C8      	         CMP.L   %A0,%A1
 3159 9584 6500 EB30 	         BCS     SYNTAX          | END ADDR TOO SMALL
 3160 9588 5489      	         ADDQ.L  #2,%A1          | ADJUST END ADDR
 3161 958a 4E75      	         RTS
 3162               	
 3163               	*-------------------------------------------------------------------------
 3164               	* File OF        OF & PERIOD Command                              12/18/81
 3165               	
 3166               	* .*  HANDLER
 3167               	*   GET TWO CHARACTERS FOLLOWING PERIOD
 3168               	
 3169 958c E149      	PERCMD:  LSL.W   #8,%D1
 3170 958e 1215      	         MOVE.B  (%A5),%D1       | D1 = 2ND,3RD CHARACTERS
 3171 9590 538D      	         SUBQ.L  #1,%A5          | A5 = POINTER TO 2ND CHAR  (1ST REAL CHARACTER)
 3172               	
 3173 9592 41FA 0030 	         LEA     REGTBL(%PC),%A0
 3174 9596 4287      	PER4:    CLR.L   %D7
 3175 9598 3E18      	         MOVE.W  (%A0)+,%D7      | SAVE FIRST WORD FOR END OF TABLE TEST
 3176 959a 3018      	         MOVE.W  (%A0)+,%D0      | GET REAL REGISTER ID INTO D0
 3177 959c 0C47 FFFF 	         CMPI.W  #0xFFFF,%D7     | ARE WE AT THE END OF THE TABLE?
 3178 95a0 6700 EAFC 	         BEQ     WHAT            | YES...THEN WE DIDNT FIND IT
 3179               	
 3180 95a4 0C00 0040 	         CMPI.B  #'@',%D0
 3181 95a8 660E      	         BNE.S   PER3            | NOT @
 3182               	
 3183               	* THIRD CHAR MUST BE NUMERIC 0 - 7
 3184 95aa 1001      	         MOVE.B  %D1,%D0         | ALLEGED DIGIT
 3185 95ac 0C00 0030 	         CMPI.B  #'0',%D0
 3186 95b0 6BE4      	         BMI.S   PER4            | NOT A DIGIT
 3187 95b2 0C00 0038 	         CMPI.B  #'8',%D0
 3188 95b6 6ADE      	         BPL.S   PER4            | NOT A DIGIT
 3189               	
 3190 95b8 B041      	PER3:    CMP.W   %D1,%D0
 3191 95ba 66DA      	         BNE.S   PER4            | MISS-MATCH
68K GAS  tutor13.s 			page 61


 3192               	
 3193               	*******************************************************************
 3194               	*        AT THIS TIME WE HAVE FOUND THE ENTRY IN THE "REG TABLE"  *
 3195               	*        WE NOW NEED TO EXTRACT AND USE THE OFFSET                *
 3196               	*******************************************************************
 3197               	
 3198 95bc 41FA EA42 	         LEA     FIRST(%PC),%A0  | A0 = Start of VERSAbug RO
 3199 95c0 D1C7      	         ADD.L   %D7,%A0         | Add offset
 3200 95c2 4ED0      	         JMP     (%A0)           | Now go to the calculated location
 3201               	
 3202               	***************
 3203               	REGTBL:
 3204               	***************
 3205               	
 3206 95c4 1606      	         DC.W    SETA7-FIRST    | Stack Register Routine
 3207 95c6 4137      	         .ascii  "A7"
 3208               	
 3209 95c8 15FA      	         DC.W    SETPC-FIRST    | Program Counter Routine
 3210 95ca 5043      	         .ascii  "PC"
 3211               	
 3212 95cc 1600      	         DC.W    SETSR-FIRST    | Status Register Routine
 3213 95ce 5352      	         .ascii  "SR"
 3214               	
 3215 95d0 1616      	         DC.W    SETUS-FIRST    | User Stack Routine
 3216 95d2 5553      	         .ascii  "US"
 3217               	
 3218 95d4 1610      	         DC.W    SETSS-FIRST    | System Stack Routine
 3219 95d6 5353      	         .ascii  "SS"
 3220               	
 3221 95d8 15EE      	         DC.W    SETD-FIRST     | Data Register Routine
 3222 95da 4440      	         .ascii  "D@"
 3223               	
 3224 95dc 15F4      	         DC.W    SETA-FIRST     | Address Register Routine
 3225 95de 4140      	         .ascii  "A@"
 3226               	
 3227 95e0 16D0      	         DC.W    PNTCLSA-FIRST  | All Address Registers Routine
 3228 95e2 4120      	         .ascii  "A "
 3229               	
 3230 95e4 16C6      	         DC.W    PNTCLSD-FIRST  | All Data Registers Routine
 3231 95e6 4420      	         .ascii  "D "
 3232               	
 3233 95e8 161C      	         DC.W    SETRN-FIRST    | All Registers Routine
 3234 95ea 5240      	         .ascii  "R@"
 3235               	
 3236 95ec FFFF      	         DC.W    0xFFFF         | END OF TABLE
 3237               	
 3238               	*    PRINT & INPUT REGISTER ROUTINES
 3239               	
 3240 95ee 49F8 0408 	SETD:    LEA     REGS,%A4       | START OF REGISTERS
 3241 95f2 6034      	         BRA.S   SETR
 3242               	
 3243 95f4 49F8 0428 	SETA:    LEA     REGS+32,%A4    | OFFSET IN REGISTER TABLE
 3244 95f8 602E      	         BRA.S   SETR
 3245               	
 3246 95fa 49F8 0400 	SETPC:   LEA     REGPC,%A4      | WHERE PC IS
 3247 95fe 6030      	         BRA.S   SETR0
 3248               	
68K GAS  tutor13.s 			page 62


 3249 9600 49F8 0404 	SETSR:   LEA     REGSR,%A4      | WHERE SR IS
 3250 9604 602A      	         BRA.S   SETR0
 3251               	
 3252 9606 2238 0404 	SETA7:   MOVE.L  REGSR,%D1      | GET CONDITION CODES
 3253 960a 0241 2000 	         ANDI.W  #0x2000,%D1    | CHECK SUPERVISOR BIT
 3254 960e 6706      	         BEQ.S   SETUS
 3255 9610 49F8 0444 	SETSS:   LEA     REGA7,%A4      | WHERE SUPERVISOR STACK IS
 3256 9614 601A      	         BRA.S   SETR0
 3257               	
 3258 9616 49F8 0448 	SETUS:   LEA     REGUS,%A4      | USER STACK
 3259 961a 6014      	         BRA.S   SETR0
 3260               	
 3261 961c 49F8 044C 	SETRN:   LEA     OFFSET,%A4     | SET OFFSET
 3262 9620 0C01 0037 	         CMPI.B  #'7',%D1
 3263 9624 6700 EA90 	         BEQ     SYNTAX         | NOT ALLOWED TO CHANGE A7
 3264               	
 3265               	*  ROUTINE TO ENTER DATA FOR A SINGLE REGISTER
 3266               	*   A5-A6 ARE COMMAND BUFFER
 3267               	*   %D0 HAS REGISTER DIGIT %A4 HAS CLASS OFFSET
 3268               	
 3269 9628 6100 057C 	SETR:    BSR     GETHEX         | GET REG NUMBER
 3270 962c E588      	         LSL.L   #2,%D0         | SHIFT LEFT...MULT BY 4
 3271 962e D9C0      	         ADD.L   %D0,%A4        | A4 NOW HAS EXACT ADDRESS
 3272 9630 548D      	SETR0:   ADDQ.L  #2,%A5         | NOW FIND PARAMETERS
 3273 9632 103C 003A 	         MOVE.B  #':',%D0       | SEE IF COLON IN COMMAND
 3274 9636 6154      	         BSR.S   SCAN
 3275 9638 671E      	         BEQ.S   SETR5
 3276               	*SEE IF ANY PARAMER (HEX)
 3277 963a 41FA 0016 	         LEA     SETR4(%PC),%A0 | WHERE TO GO IF NO PARAMETERS
 3278 963e 6100 0434 	         BSR     FNEXTF         | FIND NEXT FIELD
 3279               	
 3280 9642 0C00 002E 	         CMPI.B  #'.',%D0
 3281 9646 6706      	         BEQ.S   SEMACS         | PERIOD; GET OUT
 3282               	
 3283 9648 6100 F4F0 	         BSR     GETA           | GET ADDRESS VALUE
 3284 964c 2880      	         MOVE.L  %D0,(%A4)      | SAVE NEW VALUE
 3285 964e 6000 EBE2 	SEMACS:  BRA     MACSBUG
 3286               	
 3287               	*JUST PRINT IT
 3288               	
 3289 9652 6148      	SETR4:   BSR.S   PRINTR         | FIX UP TO PRINT
 3290 9654 6000 EA52 	         BRA     MSG            | GO PRINT MESSAGE-GO TO MACSBUG
 3291               	
 3292 9658 6102      	SETR5:   BSR.S   SETSR1
 3293 965a 60F2      	         BRA.S   SEMACS
 3294               	
 3295 965c 613E      	SETSR1:  BSR.S   PRINTR         | FIX UP TO PRINT
 3296 965e 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 3297 9662 1CFC 003F 	         MOVE.B  #'?',(%A6)+    | PROMPT
 3298 9666 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 3299 966a 6100 059E 	         BSR     OUTPUT         | PRINT IT
 3300               	
 3301 966e 6100 0626 	         BSR     FIXBUF
 3302 9672 6100 062A 	         BSR     PORTIN1
 3303               	
 3304 9676 41FA 0012 	         LEA     SETSR15(%PC),%A0 | A0=DEFAULT (NO PARM) ADDRESS
 3305 967a 6100 03F8 	         BSR     FNEXTF         | FIND FIELD
68K GAS  tutor13.s 			page 63


 3306               	
 3307 967e 0C00 002E 	         CMPI.B  #'.',%D0
 3308 9682 67CA      	         BEQ.S   SEMACS         | PERIOD; GET OUT
 3309               	
 3310 9684 6100 F4B4 	         BSR     GETA           | CONVERT IT
 3311 9688 2880      	         MOVE.L  %D0,(%A4)      | STORE NEW DATA
 3312               	
 3313               	SETSR15: .align  2
 3314 968a 4E75      	         RTS
 3315               	
 3316               	* SEE IF CHARACTER IS IN BUFFER
 3317               	
 3318 968c 204D      	SCAN:    MOVE.L  %A5,%A0        | A0 IS WORKING SCANNER
 3319 968e B1CE      	SCAN2:   CMP.L   %A6,%A0        | SEE IF AT END OF BUFFER
 3320 9690 6208      	         BHI.S   RETURN5
 3321 9692 B010      	         CMP.B   (%A0),%D0      | LOOK AT CHARACTER
 3322 9694 6704      	         BEQ.S   RETURN5
 3323 9696 5288      	         ADDQ.L  #1,%A0         | GET PAST CHARACTER
 3324 9698 60F4      	         BRA.S   SCAN2
 3325 969a 4E75      	RETURN5: RTS
 3326               	
 3327               	* ROUTINE TO SET UP TO PRINT REG
 3328               	
 3329 969c 6100 05F8 	PRINTR:  BSR     FIXBUF
 3330               	
 3331 96a0 568E      	         ADDQ.L  #3,%A6         | GET PAST REG NAME (.XX)
 3332 96a2 1CFC 003D 	         MOVE.B  #'=',(%A6)+    | PUT IN EQUAL SIGN
 3333 96a6 2014      	         MOVE.L  (%A4),%D0      | GET VALUE
 3334 96a8 B9FC 0000 	         CMPA.L  #REGSR,%A4     | SEE IF THIS IS CONDITION CODES
 3334      0404 
 3335 96ae 6606      	         BNE.S   PRINTR2
 3336 96b0 6100 02FE 	         BSR     PNT4HX         | JUST PRINT WORD
 3337 96b4 4E75      	         RTS
 3338               	
 3339 96b6 6100 02EA 	PRINTR2: BSR     PNT8HX         | PRINT THE VALUE
 3340 96ba 4E75      	         RTS
 3341               	
 3342               	*
 3343               	*   PRINT ALL REGISTERS IN A CLASS (A OR D OR R)
 3344               	*
 3345               	
 3346               	OFCMD:   .align  2              | "OF" Command -Display Offset registers-
 3347 96bc 1E3C 0052 	SETO:    MOVE.B  #'R',%D7
 3348 96c0 47F8 044C 	         LEA     OFFSET,%A3
 3349 96c4 6012      	         BRA.S   PNTCLSB
 3350               	
 3351 96c6 1E3C 0044 	PNTCLSD: MOVE.B  #'D',%D7       | CLASS=DATA
 3352 96ca 47F8 0408 	         LEA     REGS,%A3       | OFFSET
 3353 96ce 6008      	         BRA.S   PNTCLSB
 3354               	
 3355 96d0 1E3C 0041 	PNTCLSA: MOVE.B  #'A',%D7       | CLASS=ADDRESS
 3356 96d4 47F8 0428 	         LEA     REGS+32,%A3    | OFFSET
 3357 96d8 6104      	PNTCLSB: BSR.S   PNTCLS
 3358 96da 6000 EB56 	         BRA     MACSBUG
 3359               	
 3360 96de 6100 05B6 	PNTCLS:  BSR     FIXBUF
 3361 96e2 4286      	         CLR.L   %D6            | REGISTER COUNTER
68K GAS  tutor13.s 			page 64


 3362 96e4 611C      	PNTCLS1: BSR.S   PNTREG         | PRINT THE REGISTER
 3363 96e6 0C06 0004 	         CMPI.B  #4,%D6         | DISPLAY AFTER 3&7
 3364 96ea 660A      	         BNE.S   PNTCLS2
 3365 96ec 6100 0502 	         BSR     OUT1CR
 3366 96f0 6100 05A4 	         BSR     FIXBUF
 3367 96f4 60EE      	         BRA.S   PNTCLS1        | DO SOME MORE
 3368               	
 3369 96f6 0C06 0008 	PNTCLS2: CMPI.B  #8,%D6         | AT END?
 3370 96fa 66E8      	         BNE.S   PNTCLS1
 3371 96fc 6100 04F2 	         BSR     OUT1CR         | PRINT IT
 3372 9700 4E75      	         RTS
 3373               	
 3374               	*  SUBROUTINE TO PRINT REGISTER  X#=01234567.
 3375               	
 3376 9702 1CC7      	PNTREG:  MOVE.B  %D7,(%A6)+     | CLASS
 3377 9704 1006      	         MOVE.B  %D6,%D0        | REG#
 3378 9706 6100 02B8 	         BSR     PUTHEX
 3379 970a 1CFC 003D 	         MOVE.B  #'=',(%A6)+    | EQUAL SIGN
 3380 970e 2006      	         MOVE.L  %D6,%D0        | COMPUTE ADDRESS OF REG
 3381 9710 E588      	         LSL.L   #2,%D0         | MULT BY FOUR
 3382 9712 D08B      	         ADD.L   %A3,%D0        | ADD IN OFFSET
 3383 9714 2840      	         MOVE.L  %D0,%A4        | SET UP TO GET DEFFERED
 3384 9716 B9FC 0000 	         CMPA.L  #REGA7,%A4     | SEE IF REG A7
 3384      0444 
 3385 971c 660E      	         BNE.S   PNTREG1
 3386 971e 2038 0404 	         MOVE.L  REGSR,%D0      | GET STATUS REGISTER
 3387 9722 0240 2000 	         ANDI.W  #0x2000,%D0    | CHECK SUPERVISOR BIT
 3388 9726 6604      	         BNE.S   PNTREG1
 3389 9728 49F8 0448 	         LEA     REGUS,%A4      | TAKE ADDRESS OF USER STACK
 3390 972c 2014      	PNTREG1: MOVE.L  (%A4),%D0      | GET REG CONTENT
 3391 972e 6100 0272 	         BSR     PNT8HX         |PUT IN BUFFER
 3392 9732 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 3393 9736 5286      	         ADDQ.L  #1,%D6         | BUMP REG#
 3394 9738 4E75      	         RTS
 3395               	
 3396               	*-------------------------------------------------------------------------
 3397               	* File PF        "PFCMD", Port format                             05/19/82
 3398               	
 3399               	* **PF**   PF      DISPLAY PORT PROFILE
 3400               	*          PF1     DISPLAY/CHANGE PORT 1
 3401               	*          PF2     DISPLAY/CHANGE PORT 2
 3402               	
 3403 973a 1C15      	PFCMD:   MOVE.B  (%A5),%D6      | D6 = PORT #
 3404 973c 0C06 0031 	         CMPI.B  #'1',%D6
 3405 9740 675A      	         BEQ.S   PFCMD1         | CHANGE PORT 1
 3406 9742 0C06 0032 	         CMPI.B  #'2',%D6
 3407 9746 6754      	         BEQ.S   PFCMD1         | CHANGE PORT 2
 3408               	
 3409 9748 43F8 064C 	         LEA     MD1CON,%A1     | PRINT BOTH PORTS
 3410 974c 4BFA 00A2 	         LEA     MSG003(%PC),%A5
 3411 9750 6132      	         BSR.S   PFPT           | DISPLAY/CHANGE
 3412 9752 6100 04B6 	         BSR     OUTPUT
 3413               	
 3414               	         NULLPADS = 0x0618
 3415 9756 43F8 0618 	         LEA     NULLPADS,%A1
 3416 975a 4BFA 009F 	         LEA     MSG004(%PC),%A5
 3417 975e 6124      	         BSR.S   PFPT
68K GAS  tutor13.s 			page 65


 3418 9760 6100 04A8 	         BSR     OUTPUT
 3419               	
 3420               	         CRPADS = 0x061a
 3421 9764 43F8 061A 	         LEA     CRPADS,%A1
 3422 9768 4BFA 009C 	         LEA     MSG005(%PC),%A5
 3423 976c 6116      	         BSR.S   PFPT
 3424               	
 3425 976e 4BFA 00A1 	         LEA     MSG031(%PC),%A5 | TELL WHERE XONOFF IS
 3426 9772 6100 E982 	         BSR     FIXDADD
 3427               	         OPTIONS = 0x04e6
 3428 9776 203C 0000 	         MOVE.L  #OPTIONS,%D0
 3428      04E6 
 3429 977c 6100 022C 	         BSR     PNT6HX         | "OPTIONS@AAAAAA"
 3430 9780 6000 E926 	         BRA     MSG
 3431               	
 3432 9784 6100 E980 	PFPT:    BSR     FIXDCRLF       | FORMAT FROM A5
 3433 9788 1011      	         MOVE.B  (%A1),%D0
 3434 978a 6100 022C 	         BSR     PNT2HX         | FORMAT DATA
 3435 978e 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE
 3436 9792 1029 0001 	         MOVE.B  1(%A1),%D0
 3437 9796 6100 0220 	         BSR     PNT2HX         | FORMAT DATA PORT 2
 3438 979a 4E75      	         RTS
 3439               	
 3440 979c 43F8 064C 	PFCMD1:  LEA     MD1CON,%A1
 3441 97a0 4BFA 004E 	         LEA     MSG003(%PC),%A5
 3442 97a4 6120      	         BSR.S   PFCH           | DISPLAY/CHANGE
 3443               	
 3444 97a6 43F8 0618 	         LEA     NULLPADS,%A1
 3445 97aa 4BFA 004F 	         LEA     MSG004(%PC),%A5
 3446 97ae 6116      	         BSR.S   PFCH
 3447               	
 3448 97b0 43F8 061A 	         LEA     CRPADS,%A1
 3449 97b4 4BFA 0050 	         LEA     MSG005(%PC),%A5
 3450 97b8 610C      	         BSR.S   PFCH
 3451 97ba 6100 07BE 	         BSR     INITSER        | PLACE NEW SBITS INTO ACIA
 3452 97be 6100 04D6 	         BSR     FIXBUF         | BLANK LINE FOR SPACING
 3453 97c2 6000 E8E4 	         BRA     MSG
 3454               	
 3455 97c6 6100 E92A 	PFCH:    BSR     FIXDATA        | FORMAT FROM A5
 3456 97ca 0C06 0031 	         CMPI.B  #'1',%D6
 3457 97ce 6702      	         BEQ.S   PFCH2          | PORT 1
 3458 97d0 5289      	         ADDQ.L  #1,%A1         | PORT 2
 3459 97d2 1011      	PFCH2:   MOVE.B  (%A1),%D0
 3460 97d4 6100 01E2 	         BSR     PNT2HX         | FORMAT DATA
 3461 97d8 1CFC 003F 	         MOVE.B  #'?',(%A6)+
 3462 97dc 6100 042C 	         BSR     OUTPUT
 3463               	
 3464 97e0 6100 04BC 	         BSR     PORTIN1        | INPUT LINE
 3465 97e4 BDCD      	         CMP.L   %A5,%A6
 3466 97e6 6706      	         BEQ.S   PFCH4          | NOTHING INPUT
 3467               	
 3468 97e8 6100 030C 	         BSR     GETNUMA
 3469 97ec 1280      	         MOVE.B  %D0,(%A1)
 3470 97ee 4E75      	PFCH4:   RTS
 3471               	
 3472 97f0 464F 524D 	MSG003:  .ascii  "FORMAT=   "
 3472      4154 3D20 
68K GAS  tutor13.s 			page 66


 3472      2020 
 3473 97fa 04        	         DC.B    EOT
 3474               	
 3475 97fb 4348 4152 	MSG004:  .ascii  "CHAR NULL="
 3475      204E 554C 
 3475      4C3D 
 3476 9805 04        	         DC.B    EOT
 3477               	
 3478 9806 432F 5220 	MSG005:  .ascii  "C/R  NULL="
 3478      204E 554C 
 3478      4C3D 
 3479 9810 04        	         DC.B    EOT
 3480               	
 3481 9811 0D0A      	MSG031:  DC.B    CR,LF
 3482 9813 4F50 5449 	         .ascii  "OPTIONS@"
 3482      4F4E 5340 
 3483 981b 04        	         DC.B    EOT
 3484               	
 3485               	*-------------------------------------------------------------------------
 3486               	* File RAMTEST   RAMTEST                                          11/02/81
 3487               	
 3488               	***********************************************************************
 3489               	* MEMORY TEST SUBROUTINE.                                             *
 3490               	*                                                                     *
 3491               	*        A0=BEGINNING ADDRESS (MUST BE EVEN ADDRESS)                  *
 3492               	*        A1=ENDING ADDRESS+1  (MUST BE EVEN ADDRESS)                  *
 3493               	*        A2=FAILING ADDRESS                                           *
 3494               	*        D0=DATA WRITTEN TO RAM                                       *
 3495               	*        D1=DATA READ FROM RAM                                        *
 3496               	*                                                                     *
 3497               	*        ZERO FLAG IS SET IF TEST IS SUCCESSFUL                       *
 3498               	*           REGISTERS D2,D3,D4 DESTROYED                              *
 3499               	***********************************************************************
 3500               	
 3501               	*       -1ST TEST-
 3502               	RAMTEST: .align  2
 3503 981c 2608      	         MOVE.L  %A0,%D3        | D3 = BEGINNING ADDRESS
 3504 981e 2443      	         MOVE.L  %D3,%A2        | USE A2 AS POINTER IN MEMORY
 3505 9820 70FE      	WALK3:   MOVEQ   #-2,%D0        | PREPARE FOR "WALKING BIT" TEST
 3506               	WALK0:
 3507 9822 3480      	         MOVE.W  %D0,(%A2)      | STORE D0 INTO MEMORY
 3508 9824 3212      	         MOVE.W  (%A2),%D1      | D1 CONTAINS RAM DATA
 3509 9826 B240      	         CMP.W   %D0,%D1        | WRITTEN VS. READ
 3510 9828 6642      	         BNE.S   RAMERR         | STOP ON ERROR
 3511 982a E358      	         ROL.W   #1,%D0         | ROLL A ZERO IN A FIELD OF ONES
 3512 982c 65F4      	         BCS.S   WALK0          | CONTINUE TILL DONE
 3513               	
 3514 982e 7001      	         MOVEQ   #0x00000001,%D0 | THIS TIME, WALK A 1 THROUGH ZEROS
 3515               	WALK1:
 3516 9830 3480      	         MOVE.W  %D0,(%A2)      | STORE D0 INTO MEMORY
 3517 9832 3212      	         MOVE.W  (%A2),%D1      | D1 CONTAINS RAM DATA
 3518 9834 B240      	         CMP.W   %D0,%D1        | WRITTEN VS. READ
 3519 9836 6634      	         BNE.S   RAMERR         | STOP ON ERROR
 3520 9838 E340      	         ASL.W   #1,%D0         | ROLL A ONE TO THE NEXT POSITION
 3521 983a 64F4      	         BCC.S   WALK1          | CONTINUE TILL DONE
 3522               	
 3523 983c 45EA 0100 	         LEA     0x0100(%A2),%A2 | GO TO NEXT 256TH POSITION
68K GAS  tutor13.s 			page 67


 3524 9840 B5C9      	         CMP.L   %A1,%A2        | CHECK TO SEE IF DONE
 3525 9842 6DDC      	         BLT.S   WALK3          | CONTINUE
 3526               	
 3527               	* -2ND TEST-
 3528 9844 2443      	         MOVE.L  %D3,%A2        | SET A2 TO POINT TO START OF MEMORY
 3529 9846 7000      	         MOVEQ   #0x00000000,%D0 | CLEAR D0
 3530               	MTCLR:
 3531 9848 34C0      	         MOVE.W  %D0,(%A2)+     | CLEAR MEMORY
 3532 984a B5C9      	         CMP.L   %A1,%A2        | DONE?
 3533 984c 66FA      	         BNE.S   MTCLR          | NO... ZERO ALL OF MEMORY
 3534               	
 3535 984e 74FF      	         MOVEQ   #-1,%D2        | SET D2 = FFFF
 3536               	MTSTOR1:
 3537 9850 3222      	         MOVE.W  -(%A2),%D1     | FIRST READ BACK MEMORY
 3538 9852 B240      	         CMP.W   %D0,%D1        | CHK AGAINST WHAT WAS WRITTEN
 3539 9854 6616      	         BNE.S   RAMERR         | STOP ON ERROR
 3540 9856 3482      	         MOVE.W  %D2,(%A2)      | STORE COMPLEMENT
 3541 9858 B5C3      	         CMP.L   %D3,%A2        | DONE?
 3542 985a 66F4      	         BNE.S   MTSTOR1        | NO... COMPLEMENT ALL OF MEMORY
 3543 985c 3002      	         MOVE.W  %D2,%D0        | D0=WHAT WAS WRITTEN
 3544 985e 4642      	         NOT.W   %D2            | SAVE COMPLEMENT FOR LATER
 3545               	
 3546               	MTSTOR0:
 3547 9860 3212      	         MOVE.W  (%A2),%D1      | READ BACK MEMORY
 3548 9862 B240      	         CMP.W   %D0,%D1        | CHK AGAINST WHAT WAS WRITTEN
 3549 9864 6606      	         BNE.S   RAMERR         | STOP ON ERROR
 3550 9866 34C2      	         MOVE.W  %D2,(%A2)+     | STORE COMPLEMENT
 3551 9868 B5C9      	         CMP.L   %A1,%A2        | DONE?
 3552 986a 66F4      	         BNE.S   MTSTOR0        | NO...KEEP LOOPING, YES...
 3553               	
 3554 986c 2043      	RAMERR:  MOVE.L  %D3,%A0        | RESTORE A0
 3555 986e 4E75      	         RTS                    | RETURN
 3556               	
 3557               	*-------------------------------------------------------------------------
 3558               	* File TM        TM  Transparent mode                             12/28/81
 3559               	
 3560               	*    TM  [[EXIT CHAR]TRAILING CHAR]
 3561               	*
 3562               	*  In transparent mode the terminal is physically connected to the
 3563               	*  host; at the same time the terminal is watched by TM software
 3564               	*  for the EXIT character.  When the exit character is transmitted
 3565               	*  by the terminal it goes directly to the host; and at the same
 3566               	*  time the TM software reconfigures the hardware.  If a nonnull
 3567               	*  trailing character is present it is now sent via port 2 to
 3568               	*  the host.
 3569               	
 3570               	*   TRANSPARENT MODE
 3571               	
 3572 9870 41FA 0012 	TMCMD:   LEA     P2CMD0(%PC),%A0
 3573 9874 6100 01FE 	         BSR     FNEXTF         | FIND NEXT FIELD
 3574 9878 11DD 04EB 	         MOVE.B  (%A5)+,TMCHARS+1 | QUIT CHARACTER
 3575 987c 6100 01F6 	         BSR     FNEXTF         | FIND NEXT FIELD
 3576 9880 11DD 04EA 	         MOVE.B  (%A5)+,TMCHARS | OPTIONAL TRAILING CHAR
 3577 9884 3E38 04EA 	P2CMD0:  MOVE.W  TMCHARS,%D7
 3578 9888 6100 03E8 	         BSR     GETSER1        | ADDRESS FOR PORT1 INTO A0
 3579 988c 4BFA 007A 	         LEA     MSG006(%PC),%A5 | "TRANSPARENT MODE"
 3580 9890 6100 E874 	         BSR     FIXDCRLF       | SET UP FOR MESSAGE
68K GAS  tutor13.s 			page 68


 3581 9894 2007      	         MOVE.L  %D7,%D0        | EXIT CHARACTER
 3582 9896 6100 0120 	         BSR     PNT2HX         | PRINT 2 HEX CHARACTERS
 3583 989a 3CFC 203D 	         MOVE.W  #0x203d,(%A6)+ | " ="
 3584 989e 1007      	         MOVE.B  %D7,%D0        | SEE IF CONTROL CHAR
 3585 98a0 0C00 0020 	         CMPI.B  #BLANK,%D0
 3586 98a4 6A0A      	         BPL.S   P2CMD01
 3587 98a6 2CFC 2043 	         MOVE.L  #0x2043544c,(%A6)+ | " CTL"
 3587      544C 
 3588 98ac 0600 0040 	         ADDI.B  #64,%D0        | MAKE IT A PRINTABLE CHARACTER
 3589 98b0 1CFC 0020 	P2CMD01: MOVE.B  #BLANK,(%A6)+
 3590 98b4 1CC0      	         MOVE.B  %D0,(%A6)+
 3591 98b6 3CFC 0D0A 	         MOVE.W  #0x0D0A,(%A6)+
 3592 98ba 6100 0334 	         BSR     OUT1CR         | GO PRINT BUFFER WITH CRLF
 3593               	
 3594 98be 1039 0000 	         MOVE.B  MD1CON.L,%D0   | PROGRAM ACIA FOR TRANSPARENT MODE
 3594      064C 
 3595 98c4 0200 009F 	         ANDI.B  #0x9F,%D0
 3596 98c8 0000 0040 	         ORI.B   #0x40,%D0      | FORCE RTS HIGH
 3597 98cc 1080      	         MOVE.B  %D0,(%A0)
 3598 98ce 0810 0000 	P2CMD2:  BTST.B  #0x0,(%A0)     | READ STATUS
 3599 98d2 67FA      	         BEQ.S   P2CMD2
 3600 98d4 1028 0002 	         MOVE.B  2(%A0),%D0     | RECEIVE CHAR FROM PORT 1
 3601 98d8 0200 007F 	         ANDI.B  #0x7F,%D0
 3602 98dc B007      	         CMP.B   %D7,%D0        | SEE IF QUIT CHARACTER (CTL A USUALLY)
 3603 98de 66EE      	         BNE.S   P2CMD2
 3604 98e0 1039 0000 	         MOVE.B  MD1CON.L,%D0   | REPROGRAM FOR NON-TRANSPARENT
 3604      064C 
 3605 98e6 0200 009F 	         ANDI.B  #0x9F,%D0
 3606 98ea 1080      	         MOVE.B  %D0,(%A0)
 3607               	
 3608 98ec E047      	         ASR.W   #8,%D7
 3609 98ee 4A07      	         TST.B   %D7
 3610 98f0 6712      	         BEQ.S   P2CMD6
 3611               	* SPECIAL SECOND CHAR TO HOST SEQUENCE
 3612 98f2 203C 0000 	         MOVE.L  #DELAYC1,%D0
 3612      1000 
 3613 98f8 5380      	P2CMD4:  SUBQ.L  #1,%D0         | DELAY; ALLOW HOST TO SYNC
 3614 98fa 66FC      	         BNE.S   P2CMD4
 3615 98fc 6100 0386 	         BSR     GETSER2
 3616 9900 1147 0002 	         MOVE.B  %D7,2(%A0)     | SEND CHAR
 3617 9904 6000 E92C 	P2CMD6:  BRA     MACSBUG
 3618               	
 3619 9908 2A54 5241 	MSG006:  .ascii  "*TRANSPARENT* EXIT=$"
 3619      4E53 5041 
 3619      5245 4E54 
 3619      2A20 4558 
 3619      4954 3D24 
 3620 991c 04        	         DC.B    EOT
 3621               	
 3622 991d 00        	         DC.B    0              | PAD BYTE
 3623               	         .align  2
 3624               	
 3625               	*-------------------------------------------------------------------------
 3626               	* File W         Software Abort, Hex print routines               06/05/82
 3627               	
 3628               	*
 3629               	*   HANDLE THE ABORT BUTTON
68K GAS  tutor13.s 			page 69


 3630               	*
 3631 991e 46FC 2700 	ABORTB:  MOVE.W  #0x2700,%SR
 3632               	         SAVEREGS
 3632               	>  TEMP =0x04d6
 3632 9922 21CF 0444 	>  MOVE.L %A7,REGA7
 3632 9926 4FFA 000A 	>  LEA SV17(%PC),%A7
 3632 992a 21CF 04D6 	>  MOVE.L %A7,TEMP
 3632 992e 6000 F35C 	>  JRA SAVE
 3632               	> SV17:
 3633 9932 6100 060A 	         BSR     FAULTSER       | RESET SERIAL PORTS
 3634 9936 4BFA 0016 	         LEA     MSG012(%PC),%A5 | "SOFTWARE ABORT"
 3635               	
 3636 993a 6100 063E 	         BSR     INITSER        | RESET SERIAL PORTS (CLEAR TM MODE)
 3637 993e 6100 E7C6 	         BSR     FIXDCRLF       | MOVE MESSAGE TO BUFFER
 3638 9942 6100 02C6 	EVECT4:  BSR     OUTPUT         | MSG TO PORT1
 3639 9946 6100 EFBC 	ABORT335:BSR     TDISPLY        | DISPLAY REGISTERS
 3640 994a 6000 E8E6 	         BRA     MACSBUG
 3641               	
 3642 994e 0A0A      	MSG012:  DC.B    LF,LF
 3643 9950 534F 4654 	         .ascii  "SOFTWARE ABORT"
 3643      5741 5245 
 3643      2041 424F 
 3643      5254 
 3644 995e 0D0A 04   	         DC.B    CR,LF,EOT
 3645               	
 3646 9961 00        	         DC.B    0              | PAD BYTE
 3647               	         .align  2
 3648               	
 3649 9962 21FC 3F3F 	ABORTE:MOVE.L    #0x3f3f3f3f,0x30   | "????" UNKNOWN INTERRUPT
 3649      3F3F 0030 
 3650               	
 3651               	*    SAVE REGISTERS AND PRINT VECTOR MSG
 3652               	*
 3653               	         .align  2
 3654               	EVECTL:  SAVEREGS
 3654               	>  TEMP =0x04d6
 3654 996a 21CF 0444 	>  MOVE.L %A7,REGA7
 3654 996e 4FFA 000A 	>  LEA SV18(%PC),%A7
 3654 9972 21CF 04D6 	>  MOVE.L %A7,TEMP
 3654 9976 6000 F314 	>  JRA SAVE
 3654               	> SV18:
 3655 997a 6100 05C2 	         BSR     FAULTSER       | RESET SERIAL PORTS
 3656 997e 6100 0316 	EVECT2:  BSR     FIXBUF         | PRINT MESSAGE "XXXX TRAP ERROR"
 3657 9982 3CFC 0D0A 	         MOVE.W  #0x0D0A,(%A6)+
 3658               	         AV12 = 0x0030
 3659 9986 2CF8 0030 	         MOVE.L  AV12,(%A6)+    | TYPE OF ERROR
 3660 998a 4BFA 0008 	         LEA     MSG010(%PC),%A5 | "TRAP ERROR"
 3661 998e 6100 E766 	         BSR     FIXDADD
 3662 9992 60AE      	         BRA.S   EVECT4
 3663               	
 3664 9994 2054 5241 	MSG010:  .ascii  " TRAP ERROR"
 3664      5020 4552 
 3664      524F 52
 3665 999f 0D0A 04   	         DC.B    CR,LF,EOT
 3666               	
 3667               	*
 3668               	*  PRINT HEX ROUTINES
68K GAS  tutor13.s 			page 70


 3669               	*
 3670               	*
 3671               	* PRINT 8 HEX CHARACTERS
 3672               	*
 3673               	*  %D0,%D1,%D2 DESTROYED
 3674               	*
 3675               	         .align 2
 3676 99a2 4840      	PNT8HX:  SWAP    %D0            | FLIP REG HALVES
 3677 99a4 610A      	         BSR.S   PNT4HX         | DO TOP WORD
 3678 99a6 4840      	         SWAP    %D0            | NOW DO LOWER WORD
 3679 99a8 6006      	         BRA.S   PNT4HX
 3680               	* PRINT 6 HEX CHARACTERS
 3681 99aa 4840      	PNT6HX:  SWAP    %D0            | FLIP REGISTER HALVES
 3682 99ac 610A      	         BSR.S   PNT2HX
 3683 99ae 4840      	         SWAP    %D0            | FLIP BACK REG HALVES
 3684               	* PRINT 4 HEX CHARACTERS IN D0.W
 3685 99b0 3200      	PNT4HX:  MOVE.W  %D0,%D1        |  SAVE IN TEMP
 3686 99b2 E058      	         ROR.W   #8,%D0         | GET BITS 15-8 INTO LOWER BYTE
 3687 99b4 6102      	         BSR.S   PNT2HX         | PRINT IT
 3688 99b6 3001      	         MOVE.W  %D1,%D0        | PULL IT BACK
 3689               	* PRINT 2 HEX CHARACTERS IN D0.B
 3690 99b8 3400      	PNT2HX:  MOVE.W  %D0,%D2        | SAVE IN TEMP REG
 3691 99ba E850      	         ROXR.W  #4,%D0         | FORM UPPER NIBBLE
 3692 99bc 6102      	         BSR.S   PUTHEX         | PUT ASCII INTO PRINT BUFFER
 3693 99be 3002      	         MOVE.W  %D2,%D0        | GET BACK FROM TEMP
 3694               	* CONVERT D0.NIBBLE TO HEX & PUT IT IN PRINT BUFFER
 3695               	*
 3696 99c0 0200 000F 	PUTHEX:  ANDI.B  #0x0F,%D0      | SAVE LOWER NIBBLE
 3697 99c4 0000 0030 	         ORI.B   #0x30,%D0      | CONVERT TO ASCII
 3698 99c8 0C00 0039 	         CMPI.B  #0x39,%D0      | SEE IF IT IS>9
 3699 99cc 6F02      	         BLE.S   SAVHEX
 3700 99ce 5E40      	         ADD     #7,%D0         | ADD TO MAKE 10=>A
 3701 99d0 1CC0      	SAVHEX:  MOVE.B  %D0,(%A6)+     | PUT IT IN PRINT BUFFER
 3702 99d2 4E75      	         RTS
 3703               	
 3704               	* FORMAT RELATIVE ADDRESS  AAAAAA+Rn
 3705               	*        ENTER     %D0 = VALUE
 3706               	*                  %A6 = STORE POINTER
 3707               	*
 3708 99d4 48E7 4780 	FRELADDR:MOVEM.L %D1/%D5-%D7/%A0,-(%A7)
 3709 99d8 41F8 044C 	         LEA     OFFSET,%A0
 3710 99dc 7EFF      	         MOVEQ   #-1,%D7        | D7 = DIFF. BEST FIT
 3711 99de 4286      	         CLR.L   %D6            | D6 = OFFSET POSITION
 3712               	
 3713 99e0 2200      	FREL10:  MOVE.L  %D0,%D1
 3714 99e2 4A90      	         TST.L   (%A0)
 3715 99e4 670C      	         BEQ.S   FREL15         | ZERO OFFSET
 3716 99e6 9290      	         SUB.L   (%A0),%D1      | D1 = DIFF.
 3717 99e8 6B08      	         BMI.S   FREL15         | NO FIT
 3718               	
 3719 99ea B287      	         CMP.L   %D7,%D1
 3720 99ec 6404      	         BCC.S   FREL15         | OLD FIT BETTER
 3721               	
 3722 99ee 2E01      	         MOVE.L  %D1,%D7        | D7 = NEW BEST FIT
 3723 99f0 2A06      	         MOVE.L  %D6,%D5        | D5 = POSITION
 3724               	
 3725 99f2 5888      	FREL15:  ADDQ.L  #4,%A0
68K GAS  tutor13.s 			page 71


 3726 99f4 5286      	         ADDQ.L  #1,%D6
 3727 99f6 0C46 0008 	         CMPI.W  #8,%D6
 3728 99fa 66E4      	         BNE.S   FREL10         | MORE OFFSETS TO CHECK
 3729               	
 3730 99fc 4A87      	         TST.L   %D7
 3731 99fe 6B1C      	         BMI.S   FREL25         | NO FIT
 3732 9a00 4A46      	         TST     %D6
 3733 9a02 6606      	         BNE.S   FREL20
 3734 9a04 4AB8 044C 	         TST.L   OFFSET
 3735 9a08 6712      	         BEQ.S   FREL25         | R0 = 000000; NO FIT
 3736               	
 3737 9a0a 2007      	FREL20:  MOVE.L  %D7,%D0
 3738 9a0c 619C      	         BSR.S   PNT6HX         | FORMAT OFFSET
 3739 9a0e 1CFC 002B 	         MOVE.B  #'+',(%A6)+    | +
 3740 9a12 1CFC 0052 	         MOVE.B  #'R',(%A6)+    | R
 3741 9a16 0605 0030 	         ADDI.B  #'0',%D5       | MAKE ASCII
 3742 9a1a 600A      	         BRA.S   FREL30
 3743               	
 3744 9a1c 618C      	FREL25:  BSR.S   PNT6HX         | FORMAT ADDRESS AS IS
 3745 9a1e 1A3C 0020 	         MOVE.B  #BLANK,%D5
 3746 9a22 1CC5      	         MOVE.B  %D5,(%A6)+     | THREE SPACES FOR ALIGNMENT
 3747 9a24 1CC5      	         MOVE.B  %D5,(%A6)+
 3748 9a26 1CC5      	FREL30:  MOVE.B  %D5,(%A6)+
 3749               	
 3750 9a28 4CDF 01E2 	         MOVEM.L (%A7)+,%D1/%D5-%D7/%A0
 3751 9a2c 4E75      	         RTS
 3752               	
 3753               	*
 3754               	*
 3755               	*   PRINT HEX (ZERO SURPRESS)
 3756               	*
 3757 9a2e 4284      	PNTZHX:  CLR.L   %D4            | IS ZERO WHEN SURPRESSING
 3758 9a30 2200      	         MOVE.L  %D0,%D1        | SAVE IN TEMP
 3759 9a32 6738      	         BEQ.S   PNTZ81         | IF ZERO
 3760 9a34 6A08      	         BPL.S   PNTZ0
 3761 9a36 4481      	         NEG.L   %D1            | CHANGE TO POSITIVE VALUE
 3762 9a38 6B32      	         BMI.S   PNTZ81         | WATCH OUT SPECIAL CASE $80000000
 3763 9a3a 1CFC 002D 	         MOVE.B  #'-',(%A6)+    | PUT SIGN INTO BUFFER
 3764 9a3e 7408      	PNTZ0:   MOVEQ   #8,%D2         | 8 POSSIBLE CHARACTERS
 3765 9a40 2001      	PNTZ1:   MOVE.L  %D1,%D0        | UNSAVE IT
 3766 9a42 2602      	         MOVE.L  %D2,%D3        | COUNT DOWN FROM HERE
 3767 9a44 5383      	         SUBQ.L  #1,%D3         | BACK OFF ONE
 3768 9a46 670C      	         BEQ.S   PNTZ4          | IF NO ROTATE SKIP THIS
 3769 9a48 E880      	PNTZ2:   ASR.L   #4,%D0         | ROTATE LRIGHT
 3770 9a4a 0280 0FFF 	         ANDI.L  #0xFFFFFFF,%D0 | CLEAR TOP NIBBLE
 3770      FFFF 
 3771 9a50 5383      	         SUBQ.L  #1,%D3
 3772 9a52 66F4      	         BNE.S   PNTZ2
 3773 9a54 0200 000F 	PNTZ4:   ANDI.B  #0xF,%D0       | SAVE ONLY NIBBLE
 3774 9a58 6604      	         BNE.S   PNTZ3
 3775 9a5a 4A04      	         TST.B   %D4            | SEE IF STILL SURPRESSING
 3776 9a5c 6706      	         BEQ.S   PNTZ8
 3777 9a5e 6100 FF60 	PNTZ3:   BSR     PUTHEX         | PUT A HEX CHAR IN BUFFER
 3778 9a62 1800      	         MOVE.B  %D0,%D4        | MARK AS NON-SURPRESSING MODE
 3779 9a64 5382      	PNTZ8:   SUBQ.L  #1,%D2         | DO ANOTHER CHAR
 3780 9a66 66D8      	         BNE.S   PNTZ1
 3781 9a68 4A04      	         TST.B   %D4            | SEE IF ANYTHING PRINTED
68K GAS  tutor13.s 			page 72


 3782 9a6a 6604      	         BNE.S   PNTZ9
 3783 9a6c 1CFC 0030 	PNTZ81:  MOVE.B  #'0',(%A6)+    | MOVE AT LEAST ONE ZERO
 3784 9a70 4E75      	PNTZ9:   RTS
 3785               	
 3786               	* FIND NEXT FIELD... (%A5) POINTS TO FIELD, (%A0) NULL FIELD RETURN
 3787               	*   *-*-WARNING-*-* IF (%A0) RETURN IS USED;  RETURN MUST BE AT
 3788               	*                   SAME SUBROUTINE LEVEL OR STACK GETS SCREWED UP
 3789               	*
 3790               	*  SKIP LEADING SPACES
 3791               	*  TERMINATE NULL FIELD ON COMA ,SEMICOLEN OR A5=A6
 3792               	
 3793 9a72 528D      	FNEXTF1: ADDQ.L  #1,%A5
 3794               	
 3795 9a74 1015      	FNEXTF:  MOVE.B  (%A5),%D0      | ENTRY POINT
 3796 9a76 BBCE      	         CMP.L   %A6,%A5
 3797 9a78 6414      	         BCC.S   FNEXTF7        | AT END OF BUFFER
 3798 9a7a 0C00 0020 	         CMPI.B  #BLANK,%D0
 3799 9a7e 67F2      	         BEQ.S   FNEXTF1        | SPACE
 3800               	
 3801 9a80 0C00 002C 	         CMPI.B  #',',%D0
 3802 9a84 6708      	         BEQ.S   FNEXTF7        | COMMA - NULL FIELD
 3803 9a86 0C00 003B 	         CMPI.B  #';',%D0
 3804 9a8a 6702      	         BEQ.S   FNEXTF7        | SEMICOLON - NULL FIELD
 3805 9a8c 4E75      	         RTS                    | NORMAL FOUND FIELD RETURN
 3806               	
 3807 9a8e 588F      	FNEXTF7: ADDQ.L  #4,%A7         | TRIM STACK
 3808 9a90 4ED0      	         JMP     (%A0)          | NULL FIELD RETURN
 3809               	
 3810               	**************************************************************
 3811               	* THIS ROUTINE MAKES SURE YOU ARE ON THE CORRECT BOUNDRY.    *
 3812               	*  %D0 = ARGUMENT...   CHECKS ADDRESS AND WORD ALIGNMENTS.   *
 3813               	**************************************************************
 3814               	
 3815 9a92 E298      	CKWADR:  ROR.L   #1,%D0
 3816 9a94 E398      	         ROL.L   #1,%D0
 3817 9a96 6508      	         BCS.S   CKADR39        | NOT WORD ALIGNED
 3818               	
 3819 9a98 0C80 0100 	CKADDR:  CMPI.L  #0x1000000,%D0 | VALID ADDRESS?
 3819      0000 
 3820 9a9e 6514      	         BCS.S   CKADR99        | GOOD ADDRESS
 3821               	
 3822 9aa0 4BFA 0014 	CKADR39: LEA     MSG018(%PC),%A5
 3823 9aa4 6100 E64C 	         BSR     FIXDATA
 3824 9aa8 6100 FEF8 	         BSR     PNT8HX
 3825 9aac 6100 0142 	         BSR     OUT1CR
 3826 9ab0 6000 E780 	         BRA     MACSBUG
 3827               	
 3828 9ab4 4E75      	CKADR99: RTS
 3829               	
 3830 9ab6 494E 5641 	MSG018:  .ascii  "INVALID ADDRESS="
 3830      4C49 4420 
 3830      4144 4452 
 3830      4553 533D 
 3831 9ac6 04        	         DC.B    EOT
 3832               	
 3833 9ac7 00        	         DC.B    0              | PAD BYTE
 3834               	         .align  2
68K GAS  tutor13.s 			page 73


 3835               	
 3836               	* EVALUATE EXPRESSION
 3837               	*  NUMBER PLUS OR MINUS NUMBER....
 3838               	*
 3839 9ac8 2F07      	GETEXP:  MOVE.L  %D7,-(%A7)     | SAVE D7
 3840 9aca 4287      	         CLR.L   %D7
 3841 9acc 6128      	GETEXP21:BSR.S   GETNUMA        | GET NUMBER
 3842 9ace DE80      	         ADD.L   %D0,%D7        | D7 = NUMBER BEING BUILT
 3843 9ad0 121D      	GETEXP15:MOVE.B  (%A5)+,%D1     | D1 = TERMINATING CHAR
 3844 9ad2 4280      	         CLR.L   %D0            | D0 = NEXT NUMBER (=0 1ST TIME)
 3845 9ad4 0C01 002B 	         CMPI.B  #'+',%D1
 3846 9ad8 67F2      	         BEQ.S   GETEXP21       | PLUS
 3847 9ada 0C01 002D 	         CMPI.B  #'-',%D1
 3848 9ade 6606      	         BNE.S   GETEXP39       | NOT MINUS
 3849 9ae0 6114      	         BSR.S   GETNUMA        | GET NEXT NUMBER
 3850 9ae2 9E80      	         SUB.L   %D0,%D7
 3851 9ae4 60EA      	         BRA.S   GETEXP15
 3852               	
 3853 9ae6 2007      	GETEXP39:MOVE.L  %D7,%D0        | D0 = VALUE BUILT
 3854 9ae8 538D      	         SUBQ.L  #1,%A5         | A5 = CHAR AFTER EXPRESSION
 3855 9aea 2E1F      	         MOVE.L  (%A7)+,%D7     | RESTORE D7
 3856 9aec 4E75      	         RTS
 3857               	
 3858               	*   ROUTINES TO CONVERT STRING TO BINARY VALUE
 3859               	*
 3860               	*        ACCEPTS PREFIXES:
 3861               	*         % binary
 3862               	*         @ octal
 3863               	*         & decimal
 3864               	*         $ hex
 3865               	*
 3866 9aee 610A      	GETNUMD: BSR.S   GETDECNU       | GET DECIMAL NUMBER
 3867 9af0 6600 E5BE 	GETNUMD9:BNE     ERROR
 3868 9af4 4E75      	         RTS
 3869               	
 3870 9af6 610A      	GETNUMA: BSR.S   GETHEXNU       | GET HEX NUMBER
 3871 9af8 60F6      	         BRA.S   GETNUMD9
 3872               	
 3873 9afa 48E7 7C80 	GETDECNU:MOVEM.L %D1-%D5/%A0,-(%A7) | DECODE AS A DECIMAL NUMBER
 3874 9afe 760A      	         MOVEQ   #10,%D3        | D3 = BASE (DECIMAL)
 3875 9b00 6006      	         BRA.S   GETN20
 3876               	
 3877 9b02 48E7 7C80 	GETHEXNU:MOVEM.L %D1-%D5/%A0,-(%A7) | DECODE AS A HEX NUMBER
 3878 9b06 7610      	         MOVEQ   #16,%D3        | D3 = BASE
 3879               	
 3880 9b08 4244      	GETN20:  CLR.W   %D4            | D4 = FLAG FOR CHARACTER HIT
 3881 9b0a 4281      	         CLR.L   %D1            | D1 = TEMP RESULTS
 3882 9b0c 0C15 0020 	         CMPI.B  #BLANK,(%A5)
 3883 9b10 6778      	         BEQ.S   GETN80         | FIRST CHAR SPACE; ERROR
 3884               	
 3885 9b12 BBCE      	GETN30:  CMP.L   %A6,%A5        | SEE IF AT END OF BUFFER
 3886 9b14 677A      	         BEQ.S   GETN90
 3887 9b16 4280      	         CLR.L   %D0
 3888 9b18 101D      	         MOVE.B  (%A5)+,%D0     | D0 = CHARACTER
 3889               	
 3890 9b1a 41FA 007E 	         LEA     GETNDATA(%PC),%A0 | POINTER TO TERMINATE CHARS
 3891 9b1e 1A18      	GETN40:  MOVE.B  (%A0)+,%D5     | D5 = TERMINATION CHAR
68K GAS  tutor13.s 			page 74


 3892 9b20 6706      	         BEQ.S   GETN50         | NOT TERM.CHAR
 3893 9b22 B005      	         CMP.B   %D5,%D0
 3894 9b24 6768      	         BEQ.S   GETN85         | FOUND TERMINATION CHAR; EXIT
 3895 9b26 60F6      	         BRA.S   GETN40
 3896               	
 3897 9b28 0C00 0025 	GETN50:  CMPI.B  #'%',%D0       | SEE IF FLAGGED AS BINARY
 3898 9b2c 660A      	         BNE.S   GETN60
 3899 9b2e 7602      	         MOVEQ   #2,%D3         | BASE IS BINARY
 3900 9b30 4A44      	GETN55:  TST.W   %D4            | ANYTHING ENTERED
 3901 9b32 6656      	         BNE.S   GETN80         | CONFLICT
 3902               	
 3903 9b34 78FF      	GETN57:  MOVEQ   #-1,%D4        | SET DATA ENTERED FLAG
 3904 9b36 60DA      	         BRA.S   GETN30
 3905               	
 3906 9b38 0C00 0040 	GETN60:  CMPI.B  #'@',%D0       | SEE IF FLAGGED AS OCTAL
 3907 9b3c 6604      	         BNE.S   GETN65
 3908 9b3e 7608      	         MOVEQ   #8,%D3         | BASE IS OCTAL
 3909 9b40 60EE      	         BRA.S   GETN55
 3910               	
 3911 9b42 0C00 0026 	GETN65:  CMPI.B  #'&',%D0       | SEE IF FLAGGED AS DECIMAL
 3912 9b46 6604      	         BNE.S   GETN70
 3913 9b48 760A      	         MOVEQ   #10,%D3        | BASE IS DECIMAL
 3914 9b4a 60E4      	         BRA.S   GETN55
 3915               	
 3916 9b4c 0C00 0024 	GETN70:  CMPI.B  #'$',%D0       | SEE IF FLAGGED AS HEX
 3917 9b50 6604      	         BNE.S   GETN75
 3918 9b52 7610      	         MOVEQ   #16,%D3        | BASE IS 16
 3919 9b54 60DA      	         BRA.S   GETN55
 3920               	
 3921 9b56 0400 0030 	GETN75:  SUBI.B  #0x30,%D0
 3922 9b5a 6D2E      	         BLT.S   GETN80         | LESS THAN ZERO
 3923 9b5c 0C00 0009 	         CMPI.B  #9,%D0
 3924 9b60 6F0E      	         BLE.S   GETN77         | VALUE 0 - 9
 3925 9b62 0C00 0011 	         CMPI.B  #0x11,%D0
 3926 9b66 6D22      	         BLT.S   GETN80         | LESS THAN A
 3927 9b68 0C00 0016 	         CMPI.B  #0x16,%D0
 3928 9b6c 6E1C      	         BGT.S   GETN80         | GREATER THAN F
 3929 9b6e 5F00      	         SUBQ.B  #7,%D0         | MAKE BINARY
 3930               	
 3931 9b70 B043      	GETN77:  CMP.W   %D3,%D0        | IS INPUT LARGER THAN BASE
 3932 9b72 6416      	         BCC.S   GETN80         | LARGER THAN BASE
 3933 9b74 2401      	         MOVE.L  %D1,%D2        | GET READY TO MULTIPLY D1*BASE
 3934 9b76 4841      	         SWAP    %D1
 3935 9b78 C2C3      	         MULU    %D3,%D1        | TOP PART
 3936 9b7a 4841      	         SWAP    %D1
 3937 9b7c 4A41      	         TST.W   %D1            | CHECK FOR OVERFLOW
 3938 9b7e 660A      	         BNE.S   GETN80         | VALUE IS TOO LARGE
 3939 9b80 C4C3      	         MULU    %D3,%D2        | NOW WORK ON LOW WORD
 3940 9b82 D282      	         ADD.L   %D2,%D1        | PUT IT BACK TOGETHER
 3941 9b84 6904      	         BVS.S   GETN80         | OVERFLOW?
 3942 9b86 D280      	         ADD.L   %D0,%D1        | ADD IN NEW STUFF
 3943 9b88 68AA      	         BVC.S   GETN57
 3944 9b8a 70FF      	GETN80:  MOVEQ   #-1,%D0        | ERROR RETURN (BNE)
 3945 9b8c 6006      	         BRA.S   GETN95
 3946               	
 3947 9b8e 538D      	GETN85:  SUBQ.L  #1,%A5         | BACK UP TO POINT AT SPACE/PREVIOUS CHAR
 3948 9b90 2001      	GETN90:  MOVE.L  %D1,%D0        | SET UP RESULT FOR RETURN
68K GAS  tutor13.s 			page 75


 3949 9b92 4281      	         CLR.L   %D1            | NORMAL RETURN (BEQ)
 3950 9b94 4CDF 013E 	GETN95:  MOVEM.L (%A7)+,%D1-%D5/%A0 | RESTORE SOME REGISTERS
 3951 9b98 4E75      	         RTS
 3952               	
 3953 9b9a 2028 2B2C 	GETNDATA:.ascii  " (+,-.:;=^]"
 3953      2D2E 3A3B 
 3953      3D5E 5D
 3954 9ba5 00        	         DC.B    0              | TERMINATE CHARS
 3955               	
 3956               	*
 3957               	*  ***GETHEX***  GET HEX (BINARY VALUE FROM ASCII)
 3958               	*   D0.B HAS ASCII CHAR  RETURNS $0-$F BINARY
 3959               	*
 3960 9ba6 0C00 0030 	GETHEX:CMPI.B    #0x30,%D0      | IS IT LESS THAN ZERO
 3961 9baa 6D1C      	       BLT.S     PNMSG011
 3962 9bac 0C00 0039 	       CMPI.B    #0x39,%D0      | IS IT GREATER THAN 9
 3963 9bb0 6F0E      	       BLE.S     GTHX2          | GOOD HEX
 3964               	
 3965 9bb2 0C00 0041 	       CMPI.B    #0x41,%D0      | IS IT LESS THAN "A"
 3966 9bb6 6D10      	       BLT.S     PNMSG011
 3967 9bb8 0C00 0046 	       CMPI.B    #0x46,%D0      | IS IT GT "F"
 3968 9bbc 6E0A      	       BGT.S     PNMSG011
 3969 9bbe 5F00      	       SUBQ.B    #7,%D0         | MAKE IT SMALLER A=10
 3970 9bc0 0280 0000 	GTHX2: ANDI.L    #0xF,%D0
 3970      000F 
 3971 9bc6 4E75      	       RTS
 3972               	
 3973 9bc8 6100 00CC 	PNMSG011:BSR     FIXBUF         | PRINT NOT A HEX DIGIT
 3974 9bcc 1CC0      	         MOVE.B  %D0,(%A6)+     | PUT IN OFFENDING CHAR
 3975 9bce 4BFA 000A 	         LEA     MSG011(%PC),%A5 | "  IS NOT A HEX DIGIT"
 3976 9bd2 6100 E522 	         BSR     FIXDADD
 3977 9bd6 6000 E4D0 	         BRA     MSG            | GO PRINT IT AND ENTER MACSBUG
 3978               	
 3979 9bda 2020 4953 	MSG011:  .ascii  "  IS NOT A HEX DIGIT"
 3979      204E 4F54 
 3979      2041 2048 
 3979      4558 2044 
 3979      4947 4954 
 3980 9bee 04        	         DC.B    EOT
 3981               	
 3982 9bef 00        	         DC.B    0              | PAD BYTE
 3983               	         .align  2
 3984               	
 3985               	*-------------------------------------------------------------------------
 3986               	* File X         COMMON I/O                                       05/17/82
 3987               	
 3988               	******************************
 3989               	*
 3990               	*    SEND LINE TO PORT1 WITH CR/LF
 3991               	*
 3992 9bf0 1CFC 000D 	OUT1CR:  MOVE.B  #CR,(%A6)+
 3993 9bf4 1CFC 000A 	         MOVE.B  #LF,(%A6)+
 3994 9bf8 4AB8 061C 	         TST.L   OUTTO          | SEE IF ALTERNATE ADDRESS
 3995 9bfc 6706      	         BEQ.S   OUT1CRX
 3996 9bfe 2F38 061C 	         MOVE.L  OUTTO,-(%A7)   | PUSH ON STACK
 3997 9c02 4E75      	         RTS                    | GO DO IT
 3998               	
68K GAS  tutor13.s 			page 76


 3999 9c04 2F38 0630 	OUT1CRX: MOVE.L  OUTPORT1,-(%A7) | GO TO I/O ADDRESS
 4000 9c08 4E75      	         RTS                    | (THIS NORMALLY GOES TO OUT1CR0)
 4001               	*
 4002               	OUT1CR0: .align  2
 4003               	*
 4004               	*    OUTPUT BUFFER TO PORT1
 4005               	*
 4006 9c0a 48E7 F0C0 	OUTPUT:  MOVEM.L %D0-%D3/%A0-%A1,-(%A7) | GET SOME WORKING ROOM
 4007 9c0e 4283      	         CLR.L   %D3            | D3 = NO OFFSET INTO NULL CHARACTERS
 4008 9c10 6160      	         BSR.S   GETSER1        | A0 = GET SERIAL PORT 1 ADDRESS
 4009 9c12 601E      	         BRA.S   OUTP2
 4010               	*
 4011               	*    SEND LINE TO PORT2 WITH CR
 4012               	*
 4013 9c14 1CFC 000D 	OUTPUT2: MOVE.B  #0xD,(%A6)+    | TACK ON A "CR"
 4014 9c18 4AB8 061C 	         TST.L   OUTTO          | SEE IF ALTERNATE ADDRESS
 4015 9c1c 6706      	         BEQ.S   OUTPUT2X
 4016 9c1e 2F38 061C 	         MOVE.L  OUTTO,-(%A7)   | PUSH ON STACK
 4017 9c22 4E75      	         RTS                    | GO DO IT
 4018               	
 4019 9c24 2F38 0638 	OUTPUT2X:MOVE.L  OUTPORT2,-(%A7) | GO TO IO ROUTINE
 4020 9c28 4E75      	         RTS                    | (THIS NORMALLY GOES TO OUTPUT20)
 4021               	*
 4022               	OUTPUT20:.align  2
 4023               	*
 4024               	*     OUTPUT BUFFER TO PORT2
 4025               	*
 4026 9c2a 48E7 F0C0 	OUTPUT21:MOVEM.L %D0-%D3/%A0-%A1,-(%A7)
 4027 9c2e 7601      	         MOVEQ   #1,%D3         | SIGNAL FOR PORT2
 4028 9c30 6152      	         BSR.S   GETSER2        | RETURNS SERIAL PORT 2 BASE ADDRESS IN A0
 4029               	*
 4030               	*   SEND BUFFER TO PORT
 4031               	*
 4032 9c32 BBCE      	OUTP2:   CMP.L   %A6,%A5        | SEE IF AT OR BEYOND END OF LINE
 4033 9c34 6506      	         BCS.S   OUTP3          | NO... KEEP GOING, ELSE
 4034 9c36 4CDF 030F 	         MOVEM.L (%A7)+,%D0-%D3/%A0-%A1 | RESTORE REGISTERS
 4035 9c3a 4E75      	         RTS                    | END OF ROUTINE
 4036               	
 4037 9c3c 101D      	OUTP3:   MOVE.B  (%A5)+,%D0     | GRAB BYTE TO OUTPUT
 4038 9c3e 6102      	         BSR.S   OUTCH1         | GO PRINT IT
 4039 9c40 60F0      	         BRA.S   OUTP2          | GO DO ANOTHER
 4040               	
 4041               	*   SEND CHARACTER IN D0.B TO PORT1
 4042               	*   WHOSE BASE ADDRESS IS IN A0
 4043               	*   D3=0 FOR PORT1  D3=1 FOR PORT2
 4044               	*   PUTS IN NULL PADDING AS NEEDED
 4045               	*
 4046 9c42 6100 01D6 	OUTCH1:  BSR     OUTCH          | GO PRINT D0
 4047 9c46 4A00      	         TST.B   %D0            | SEE IF NULL
 4048 9c48 6726      	         BEQ.S   OUTCHRTS       | JUST END IF NULL
 4049 9c4a 4282      	         CLR.L   %D2            | CLEAR UPPER BYTES OF NULL LOOP COUNTER
 4050 9c4c 43F8 0618 	         LEA     NULLPADS,%A1   | FORM ADDRESS OF PADS
 4051 9c50 D3C3      	         ADD.L   %D3,%A1        | D3=0 FOR PORT1 1=PORT2
 4052 9c52 1411      	         MOVE.B  (%A1),%D2      | DEFAULT NULL PADS
 4053 9c54 0C00 000D 	         CMPI.B  #0xD,%D0       | SEE IF CR
 4054 9c58 6608      	         BNE.S   OUTCH2
 4055 9c5a 43F8 061A 	         LEA     CRPADS,%A1     | FORM ADDRESS OF CR PADS
68K GAS  tutor13.s 			page 77


 4056 9c5e D3C3      	         ADD.L   %D3,%A1        | D3=0 FOR PORT1  1=PORT2
 4057 9c60 1411      	         MOVE.B  (%A1),%D2      | NULLS AFTER CR
 4058 9c62 4A82      	OUTCH2:  TST.L   %D2            | SEE IF ANY PADDS TO BE SEND
 4059 9c64 670A      	         BEQ.S   OUTCHRTS       | 0=NONE
 4060 9c66 4280      	         CLR.L   %D0            | 0=NULL CHAR TO BE SEND
 4061 9c68 6100 01B0 	OUTCH3:  BSR     OUTCH          | SEND A NULL
 4062 9c6c 5382      	         SUBQ.L  #1,%D2         | LOOP AROUND
 4063 9c6e 66F8      	         BNE.S   OUTCH3
 4064 9c70 4E75      	OUTCHRTS:RTS                    | END OF OUTCH ROUTINE
 4065               	
 4066               	*
 4067               	*   GET BASE ADDRESS OF SERIAL PORT 1 IN  A0
 4068               	*
 4069               	
 4070 9c72 41F9 0001 	GETSER1: LEA     SER1,%A0       | DEFAULT
 4070      0040 
 4071               	         ALTSER1 = 0x0624
 4072 9c78 4AB8 0624 	         TST.L   ALTSER1        | IF ALTERNATE IS ZERO
 4073 9c7c 6704      	         BEQ.S   RETURN         | THEN RETURN
 4074 9c7e 2078 0624 	         MOVE.L  ALTSER1,%A0    | ELSE USE ALTERNATE SERIAL PORT 1
 4075 9c82 4E75      	RETURN:  RTS                    | RETURN (USED FROM A COUPLE OF PLACES)
 4076               	
 4077               	*
 4078               	*   GET BASE ADDRESS OF SERIAL PORT 2 IN A0
 4079               	*
 4080               	
 4081 9c84 41F9 0001 	GETSER2: LEA     SER2,%A0       | DEFAULT SERIAL PORT 2
 4081      0041 
 4082               	         ALTSER2 = 0x0628
 4083 9c8a 4AB8 0628 	         TST.L   ALTSER2        | IF ALTERNATE IS ZERO
 4084 9c8e 67F2      	         BEQ.S   RETURN         | THEN RETURN
 4085 9c90 2078 0628 	         MOVE.L  ALTSER2,%A0    | ELSE USE ALTERNATE SERIAL PORT 2
 4086 9c94 4E75      	         RTS                    | RETURN
 4087               	*
 4088               	*     FIX THE BUFFER %A5 & %A6 SET TO START OF BUFFER QUE
 4089               	*
 4090 9c96 4BF8 0540 	FIXBUF:  LEA     BUFFER,%A5
 4091 9c9a 2C4D      	         MOVE.L  %A5,%A6
 4092 9c9c 4E75      	         RTS
 4093               	
 4094               	*   INPUT A LINE FROM PORT1
 4095               	*
 4096 9c9e 4AB8 0620 	PORTIN1: TST.L   INFROM         | SEE IF ALTERNAME ADDRESS
 4097 9ca2 6706      	         BEQ.S   PORTIN1X
 4098 9ca4 2F38 0620 	         MOVE.L  INFROM,-(%A7)  | PUSH ON STACK
 4099 9ca8 4E75      	         RTS                    | GO DO IT
 4100 9caa 2F38 062C 	PORTIN1X:MOVE.L  INPORT1,-(%A7) | GO TO IO ROUTINE
 4101 9cae 4E75      	         RTS                    | NORMALLY GOES TO PORTIN10
 4102               	
 4103 9cb0 48E7 F9E0 	PORTIN1N:MOVEM.L %D0-%D4/%D7/%A0-%A2,-(%A7)
 4104 9cb4 4A38 04E8 	         TST.B   XONOFF+2
 4105 9cb8 6608      	         BNE.S   PORTIN1V       | OVERRIDE "No Auto Line Feed"
 4106 9cba 7E01      	         MOVEQ   #1,%D7         | "No Auto Line Feed" Entry point
 4107 9cbc 6006      	         BRA.S   PORTIN1W
 4108               	
 4109               	* ENTRY ALSO POSSIBLE FROM:  PORTIN2
 4110 9cbe 48E7 F9E0 	PORTIN10:MOVEM.L %D0-%D4/%D7/%A0-%A2,-(%A7)
68K GAS  tutor13.s 			page 78


 4111 9cc2 4287      	PORTIN1V:CLR.L   %D7            | "Auto Line Feed" Entry point.
 4112 9cc4 4283      	PORTIN1W:CLR.L   %D3            | FLAG AS PORT1
 4113 9cc6 61AA      	         BSR.S   GETSER1        | MOVE ADDRESS INTO A0
 4114               	
 4115 9cc8 6100 02DC 	READBUF: BSR     INCHNE         | GO GET SOME DATA  (NO ECHO)
 4116 9ccc 4A00      	         TST.B   %D0            | CHECK FOR NULLS
 4117 9cce 67F8      	         BEQ.S   READBUF
 4118 9cd0 3800      	         MOVE.W  %D0,%D4        | SAVE FOR A WHILE
 4119 9cd2 6100 FF6E 	         BSR     OUTCH1         | ECHO WHAT IS IN D0
 4120 9cd6 3004      	         MOVE.W  %D4,%D0        | RESTORE IT
 4121 9cd8 0C00 000A 	         CMPI.B  #LF,%D0        | SEE IF LINE FEED
 4122 9cdc 67EA      	         BEQ.S   READBUF        | DONT PUT IT IN BUFFER
 4123               	
 4124 9cde 0C00 0018 	         CMPI.B  #CTLX,%D0      | SEE IF CTRL-X "CANCEL LINE"
 4125 9ce2 6610      	         BNE.S   CHKCTLH        | No... Then go check for backspace
 4126 9ce4 700D      	         MOVEQ   #CR,%D0        | Yes.. 1) Send a carriage return
 4127 9ce6 6100 FF5A 	         BSR     OUTCH1
 4128 9cea 700A      	         MOVEQ   #LF,%D0        |       2) Send a line feed
 4129 9cec 6100 FF54 	         BSR     OUTCH1
 4130 9cf0 2C4D      	         MOVE.L  %A5,%A6        |       3) Set BUFFER at start again
 4131 9cf2 60D4      	         BRA.S   READBUF        |       4) Restart this routine
 4132               	
 4133 9cf4 0C00 0008 	CHKCTLH: CMPI.B  #CTLH,%D0      | CTRL-H? (Backspace)
 4134 9cf8 6714      	         BEQ.S   BS4CTLH        | Yes...  Go backspace 1 character
 4135 9cfa 0C00 007F 	         CMPI.B  #DEL,%D0       | DEL?    (Also a Backspace)
 4136 9cfe 6624      	         BNE.S   CHKCTLD        | No....  Then go check for CTRL D
 4137 9d00 BDCD      	BKSPACE: CMP.L   %A5,%A6        | Yes...  Usually need an extra "Backspace"
 4138 9d02 67C4      	         BEQ.S   READBUF        | If at start of buffer, don"t back up any more.
 4139 9d04 103C 0008 	         MOVE.B  #CTLH,%D0      | Backspace cursor.
 4140 9d08 6100 FF38 	         BSR     OUTCH1
 4141 9d0c 6004      	         BRA.S   BLANKIT        | Bypass check for start of buffer
 4142               	
 4143               	BS4CTLH: .align  2              | CTL-H already backed up 1 character.
 4144 9d0e BDCD      	         CMP.L   %A5,%A6        | At beginning of buffer?
 4145 9d10 67B6      	         BEQ.S   READBUF        | Yes...  Then don"t back up any more.
 4146 9d12 7020      	BLANKIT: MOVEQ   #0x20,%D0      | Now blank out previous character.
 4147 9d14 6100 FF2C 	         BSR     OUTCH1
 4148 9d18 1026      	         MOVE.B  -(%A6),%D0     | Remove last character from buffer.
 4149 9d1a 103C 0008 	         MOVE.B  #CTLH,%D0      | Backup cursor again.
 4150 9d1e 6100 FF22 	         BSR     OUTCH1
 4151 9d22 60A4      	         BRA.S   READBUF        | Go get next character.
 4152               	
 4153 9d24 0C00 0004 	CHKCTLD: CMPI.B  #CTLD,%D0      | CTL D?  (REPRINT)
 4154 9d28 6626      	         BNE.S   CHKCR          | No....  Then go check if a "CR".
 4155 9d2a 700D      	         MOVEQ   #CR,%D0        |  Yes...  Print "CR"
 4156 9d2c 6100 FF14 	         BSR     OUTCH1
 4157 9d30 700A      	         MOVEQ   #LF,%D0        | Print "LF"
 4158 9d32 6100 FF0E 	         BSR     OUTCH1
 4159 9d36 2F0D      	         MOVE.L  %A5,-(%A7)     | SAVE ON STACK FOR A MOMENT
 4160 9d38 6100 FED0 	         BSR     OUTPUT         | GO PRINT BUFFER
 4161 9d3c 2A5F      	         MOVE.L  (%A7)+,%A5     | GET BACK FROM STACK
 4162 9d3e 6088      	         BRA.S   READBUF
 4163               	
 4164 9d40 1CC0      	CHARSAVE:MOVE.B  %D0,(%A6)+     | SAVE DATA INTO BUFFER
 4165 9d42 220E      	         MOVE.L  %A6,%D1        | CALCULATE ROOM USED
 4166 9d44 928D      	         SUB.L   %A5,%D1        | DONT USE MORE THAN "BUFFSIZE"
 4167 9d46 0C41 0080 	         CMPI.W  #BUFFSIZE,%D1
68K GAS  tutor13.s 			page 79


 4168 9d4a 6B00 FF7C 	         BMI     READBUF        | We're OK, go get next character.
 4169 9d4e 60B0      	         BRA.S   BKSPACE        | If not, handle as though a "CNTL-H"
 4170               	
 4171 9d50 0C00 000D 	CHKCR:   CMPI.B  #CR,%D0        | CR?  (End of command line).
 4172 9d54 66EA      	         BNE.S   CHARSAVE       | No.. Then go store this character.
 4173               	
 4174 9d56 4A07      	         TST.B   %D7            | Check "Auto Line Feed" switch
 4175 9d58 6606      	         BNE.S   NOAUTOLF       | Yes.. Bypass sending Line feed.
 4176 9d5a 700A      	         MOVEQ   #LF,%D0        | No... Set one up and...
 4177 9d5c 6100 FEE4 	         BSR     OUTCH1         | Send it!
 4178               	NOAUTOLF:.align  2
 4179               	
 4180 9d60 4CDF 079F 	 MOVEM.L (%A7)+,%D0-%D4/%D7/%A0-%A2 | Restore Regs.
 4181 9d64 4E75      	         RTS                    | RETURN TO CALLER
 4182               	
 4183               	*-------------------------------------------------------------------------
 4184               	* File Y         TUTOR     I/O Routine                            05/19/82
 4185               	
 4186               	LTIME    =       205000         | LONG TIMER 5 SEC @ 8 MHZ
 4187               	STIME    =       41000          | SHORT TIMER  100 MLS @ 8 MHZ
 4188               	
 4189               	PDI1     =       0x010000       | PARALLEL PORT ADDRESS
 4190               	PITCDDR  =       0x010009       | PORT C DATA DIRECTION REGISTER
 4191               	PITPCDR  =       0x010019       | PORT C DATA REGISTER
 4192               	PITTCR   =       0x010021       | TIMER CONTROL REGISTER
 4193               	PSTATUS  =       0xB            | PRINTER STATUS
 4194               	PBDATA   =       3              | PRINTER CONTROL--BUSY,PAPER,SELECT
 4195               	PDATA    =       1              | PRINTER DATA
 4196               	SER1     =       0x010040       | TERMINAL
 4197               	SER2     =       0x010041       | SERIAL PORT2 ADDRESS
 4198               	
 4199               	*        PRINTER DRIVER
 4200               	*
 4201               	*    SEND BUFFER TO PRINTER
 4202               	*
 4203               	PRCRLF:  .align  2
 4204               	
 4205 9d66 48E7 0006 	         MOVEM.L %A5-%A6,-(%A7) | SAVE REGISTERS
 4206               	*
 4207               	*   SEND LINE
 4208               	*
 4209 9d6a BBCE      	LIST:    CMP.L   %A6,%A5        | SEE IF AT END OF BUFFER
 4210 9d6c 6B06      	         BMI.S   LIST1
 4211 9d6e 4CDF 6000 	         MOVEM.L (%A7)+,%A5-%A6 | RESTORE REGISTERS
 4212 9d72 4E75      	         RTS
 4213               	*
 4214 9d74 101D      	LIST1:   MOVE.B  (%A5)+,%D0     | GRAB BYTE
 4215 9d76 6102      	         BSR.S   CHRPRINT       | PRINT CHAR
 4216 9d78 60F0      	         BRA.S   LIST
 4217               	
 4218               	* OUTPUT CHAR IN %D0 TO PRINTER
 4219 9d7a 48E7 C186 	CHRPRINT:MOVEM.L %D0/%D1/%D7/%A0/%A5/%A6,-(%A7) | SAVE SOME REGISTERS
 4220 9d7e 6100 00D2 	LIST2:   BSR     CHKBRK         | CHECK FOR BREAK
 4221               	
 4222 9d82 2078 064E 	         MOVE.L  PDIPORT,%A0    | A0 = ADDRESS OF PORT
 4223               	
 4224 9d86 102F 0003 	         MOVE.B  3(%A7),%D0     | D0 = CHAR TO BE SENT
68K GAS  tutor13.s 			page 80


 4225               	* CHANGE CONTROL CHARS TO "."
 4226 9d8a 0200 007F 	         ANDI.B  #0x7F,%D0
 4227 9d8e 0C00 000D 	         CMPI.B  #CR,%D0
 4228 9d92 6716      	         BEQ.S   LIST25         | OK CARRIAGE RETURN
 4229 9d94 0C00 000A 	         CMPI.B  #LF,%D0
 4230 9d98 6710      	         BEQ.S   LIST25         | OK LINE FEED
 4231 9d9a 0C00 0020 	         CMPI.B  #0x20,%D0
 4232 9d9e 6D06      	         BLT.S   LIST24
 4233 9da0 0C00 007F 	         CMPI.B  #0x7F,%D0
 4234 9da4 6D04      	         BLT.S   LIST25
 4235 9da6 103C 002E 	LIST24:  MOVE.B  #'.',%D0       | MAKE CHAR A PERIOD
 4236               	LIST25:  .align  2
 4237               	
 4238 9daa 1140 0001 	         MOVE.B  %D0,PDATA(%A0) | SEND DATA
 4239 9dae 13FC 0068 	         MOVE.B  #0x68,PDI1+13  | STROBE PRINTER
 4239      0001 000D 
 4240               	
 4241 9db6 13FC 0060 	         MOVE.B  #0x60,PDI1+13
 4241      0001 000D 
 4242               	
 4243               	*
 4244               	*
 4245 9dbe 6100 0092 	LIST3:   BSR     CHKBRK         | CHECK FOR BREAK
 4246 9dc2 1028 0003 	         MOVE.B  PBDATA(%A0),%D0
 4247 9dc6 0200 0003 	         ANDI.B  #3,%D0         | PAPER OUT? DESELECTED?
 4248 9dca 5300      	         SUBQ.B  #1,%D0
 4249 9dcc 6728      	         BEQ.S   LIST5
 4250               	         CRTPNT = 0x0652
 4251 9dce 3E38 0652 	         MOVE.W  CRTPNT,%D7
 4252 9dd2 4278 0652 	         CLR.W   CRTPNT
 4253 9dd6 4BFA 002C 	         LEA     MSG007(%PC),%A5
 4254 9dda 6100 E316 	         BSR     FIXDATA
 4255 9dde 6100 FE2A 	         BSR     OUTPUT
 4256               	*
 4257               	*   WAIT FOR BREAK OR PRINTER TO BE READY
 4258               	*
 4259 9de2 616E      	LERR1:   BSR.S   CHKBRK
 4260 9de4 1028 0003 	         MOVE.B  PBDATA(%A0),%D0
 4261 9de8 0200 0003 	         ANDI.B  #3,%D0
 4262 9dec 5300      	         SUBQ.B  #1,%D0
 4263 9dee 66F2      	         BNE.S   LERR1          | PRINTER NOT READY
 4264 9df0 31C7 0652 	         MOVE.W  %D7,CRTPNT     | RESTORE POSSIBLE "PA" SWITCH
 4265 9df4 6088      	         BRA.S   LIST2          | TRY AGAIN
 4266               	
 4267 9df6 0828 0000 	LIST5:   BTST.B  #0,PSTATUS(%A0) | ACKNOWLEDGE?
 4267      000B 
 4268 9dfc 67C0      	         BEQ.S   LIST3
 4269               	
 4270 9dfe 4CDF 6183 	         MOVEM.L (%A7)+,%D0/%D1/%D7/%A0/%A5/%A6 | RESTORE REGISTERS
 4271 9e02 4E75      	         RTS
 4272               	
 4273 9e04 0D0A      	MSG007:  DC.B    CR,LF
 4274 9e06 5052 494E 	         .ascii  "PRINTER NOT READY"
 4274      5445 5220 
 4274      4E4F 5420 
 4274      5245 4144 
 4274      59
68K GAS  tutor13.s 			page 81


 4275 9e17 0D0A 04   	         DC.B    CR,LF,EOT
 4276               	
 4277               	         .align  2
 4278               	
 4279               	*
 4280               	*       SEND CHARACTER IN D0.B TO SERIAL PORT IN (%A0) (NO NULL PADS)
 4281               	*
 4282 9e1a 6136      	OUTCH:   BSR.S   CHKBRK         | CHECK FOR BREAK
 4283 9e1c 1210      	         MOVE.B  (%A0),%D1      | READ STATUS AGAIN
 4284 9e1e 0201 0002 	         ANDI.B  #0x2,%D1       | CHECK FOR READY TO SEND
 4285 9e22 67F6      	         BEQ.S   OUTCH          | STILL NOT READY
 4286 9e24 1140 0002 	         MOVE.B  %D0,2(%A0)     | SEND CHARACTER  ****************
 4287               	
 4288               	* IF PRINT FLAG SET GOTO PRINTER
 4289 9e28 670A      	         BEQ.S   OUTCH21        | NULL; IGNORE SENDING TO PRINTER
 4290 9e2a 4A78 0652 	         TST.W   CRTPNT
 4291 9e2e 6704      	         BEQ.S   OUTCH21        | CRT ONLY
 4292 9e30 6100 FF48 	         BSR     CHRPRINT       | GOTO PRINTER
 4293               	OUTCH21: .align  2
 4294               	
 4295               	*   CHECK FOR CONTROL W
 4296 9e34 1210      	         MOVE.B  (%A0),%D1      | READ STATUS
 4297 9e36 0201 0001 	         ANDI.B  #1,%D1
 4298 9e3a 6714      	         BEQ.S   CTLW9          | CHAR NOT READY
 4299 9e3c 1228 0002 	         MOVE.B  2(%A0),%D1     | READ CHARACTER
 4300 9e40 0C01 0017 	         CMPI.B  #CTLW,%D1
 4301 9e44 660A      	         BNE.S   CTLW9          | NOT CNTL/W
 4302 9e46 610A      	CTLWH:   BSR.S   CHKBRK         | CHECK FOR BREAK
 4303 9e48 1210      	         MOVE.B  (%A0),%D1      | READ STATUS
 4304 9e4a 0201 0001 	         ANDI.B  #1,%D1
 4305 9e4e 67F6      	         BEQ.S   CTLWH          | WAIT FOR ANY CHAR TO CONTINUE
 4306 9e50 4E75      	CTLW9:   RTS
 4307               	*
 4308               	*   CHECK FOR BREAK ON PORT #1
 4309               	*
 4310 9e52 2F08      	CHKBRK:  MOVE.L  %A0,-(%A7)     | SAVE A0 * * *
 4311 9e54 6100 FE1C 	         BSR     GETSER1        | RETURNS ADDRESS IN A0
 4312 9e58 1210      	         MOVE.B  (%A0),%D1      | READ STATUS
 4313 9e5a 0201 0010 	         ANDI.B  #0x10,%D1
 4314 9e5e 661E      	         BNE.S   BREAK
 4315 9e60 205F      	         MOVE.L  (%A7)+,%A0     | RESTORE A0 * * *
 4316 9e62 4E75      	         RTS
 4317               	
 4318               	*    WHAT TO DO WHEN THE BREAK IS PRESSED
 4319               	*
 4320               	
 4321 9e64 4228 0002 	BREAK2:  CLR.B   2(%A0)         | SEND NULL TO ACIA TO RESET
 4322 9e68 0810 0001 	BREAK1:  BTST.B  #1,(%A0)       | CHECK IF "TRANSMIT READY"
 4323 9e6c 67FA      	         BEQ.S   BREAK1         | WAIT FOR READY
 4324               	
 4325 9e6e 1028 0002 	         MOVE.B  2(%A0),%D0     | READ TWO CHARS
 4326 9e72 1028 0002 	         MOVE.B  2(%A0),%D0
 4327               	
 4328 9e76 0810 0004 	         BTST.B  #4,(%A0)       | SEE IF BREAK BUTTON RELEASED
 4329 9e7a 66E8      	         BNE.S   BREAK2         | NO... KEEP LOOPING
 4330 9e7c 4E75      	         RTS
 4331               	
68K GAS  tutor13.s 			page 82


 4332 9e7e 61E4      	BREAK:   BSR.S   BREAK2
 4333 9e80 4BFA 000E 	         LEA     MSG013(%PC),%A5 | MSG:  "BREAK"
 4334               	
 4335 9e84 6100 E280 	BREAK79: BSR     FIXDCRLF
 4336 9e88 6100 FD80 	         BSR     OUTPUT         | PRINT MESSAGE
 4337 9e8c 6000 E3A4 	         BRA     MACSBUG        | AND REENTER MACSBUG
 4338               	
 4339 9e90 0A0A      	MSG013:  DC.B    LF,LF
 4340 9e92 4252 4541 	         .ascii  "BREAK"
 4340      4B
 4341 9e97 0D0A 0A04 	         DC.B    CR,LF,LF,EOT
 4342               	
 4343 9e9b 00        	         DC.B    0              | PAD BYTE
 4344               	
 4345               	***  OUTPUT BUFFER TO TAPE  ***
 4346 9e9c 48E7 F8C0 	TAPEOUT: MOVEM.L %D0-%D4/%A0-%A1,-(%A7) | SAVE REGISTERS
 4347 9ea0 204D      	         MOVE.L  %A5,%A0        | REMEMBER WHERE BUFFER STARTS
 4348 9ea2 227C 0001 	         MOVEA.L #PDI1,%A1
 4348      0000 
 4349 9ea8 4229 0021 	         CLR.B   0x21(%A1)
 4350 9eac 0C50 5330 	         CMPI.W  #0x5330,(%A0)  | "S0" HEADER RECORD?
 4351 9eb0 6612      	         BNE.S   TAPEOUT2       | NO
 4352 9eb2 137C 0002 	         MOVE.B  #2,9(%A1)      | YES, PC0 INPUT, PC1 OUTPUT
 4352      0009 
 4353 9eb8 363C 02BC 	         MOVE.W  #700,%D3       | OUTPUT NULLS (HEADER)
 4354 9ebc 4200      	TAPEOUT1:CLR.B   %D0
 4355 9ebe 6120      	         BSR.S   TAPEO
 4356 9ec0 5343      	         SUBQ.W  #1,%D3
 4357 9ec2 66F8      	         BNE.S   TAPEOUT1
 4358 9ec4 BBCE      	TAPEOUT2:CMP.L   %A6,%A5        | SEE IF AT OR BEYOND END OF LINE
 4359 9ec6 6512      	         BCS.S   TAPEOUT4       | NO. KEEP GOING.
 4360 9ec8 1638 0654 	         MOVE.B  TAPENULS,%D3   | OUTPUT NULLS AFTER EACH RECORD
 4361 9ecc 4200      	TAPEOUT5:CLR.B   %D0            | YES. OUTPUT A NULL
 4362 9ece 6110      	         BSR.S   TAPEO
 4363 9ed0 5303      	         SUBQ.B  #1,%D3
 4364 9ed2 66F8      	         BNE.S   TAPEOUT5
 4365 9ed4 4CDF 031F 	         MOVEM.L (%A7)+,%D0-%D4/%A0-%A1 | RESTORE REGISTERS
 4366 9ed8 4E75      	         RTS
 4367 9eda 101D      	TAPEOUT4:MOVE.B  (%A5)+,%D0     | GRAB BYTE TO OUTPUT
 4368 9edc 6102      	         BSR.S   TAPEO          | GO OUTPUT IT
 4369 9ede 60E4      	         BRA.S   TAPEOUT2       | GO DO ANOTHER
 4370               	*
 4371               	* OUTPUTS THE CHARACTER IN D0.B TO TAPE
 4372               	* A LOGIC `0" IS RECORDED AS ONE SQUARE WAVE PERIOD OF
 4373               	*        1 MILLISEC DURATION, 50% DUTY CYCLE
 4374               	* A LOGIC `1" IS RECORDED AS ONE SQUARE WAVE PERIOD OF
 4375               	*        500 MICROSEC DURATION, 50% DUTY CYCLE
 4376               	*
 4377 9ee0 003C 0010 	TAPEO:   ORI.B   #0b10000,%CCR | SET X BIT IN SR
 4378 9ee4 E310      	         ROXL.B  #1,%D0        | DATA BIT INTO X
 4379 9ee6 E312      	TAPEO1:  ROXL.B  #1,%D2        | DATA BIT INTO D2
 4380 9ee8 613E      	         BSR.S   TIMERTST      | WAIT UNTIL LAST PULSE DONE
 4381 9eea 08A9 0000 	         BCLR.B  #0,0x21(%A1)  | HALT TIMER
 4381      0021 
 4382 9ef0 721E      	         MOVEQ   #30,%D1       | TIMER COUNT FOR A `1"
 4383 9ef2 0802 0000 	         BTST.L  #0,%D2        | SENDING A `1"?
 4384 9ef6 6606      	         BNE.S   TAPEO2        | YES.
68K GAS  tutor13.s 			page 83


 4385 9ef8 0681 0000 	         ADDI.L  #32,%D1       | NO. TIMER COUNT FOR 0
 4385      0020 
 4386 9efe 03C9 0025 	TAPEO2:  MOVEP.L %D1,0x25(%A1) | SET TIMER PRELOAD REGISTER
 4387 9f02 08E9 0001 	         BSET.B  #1,0x19(%A1)  | SEND 1 TO TAPE
 4387      0019 
 4388 9f08 08E9 0000 	         BSET.B  #0,0x21(%A1)  | START TIMER
 4388      0021 
 4389 9f0e 6118      	         BSR.S   TIMERTST      | WAIT UNTIL PULSE DONE
 4390 9f10 08A9 0000 	         BCLR.B  #0,0x21(%A1)  | HALT TIMER
 4390      0021 
 4391 9f16 08A9 0001 	         BCLR.B  #1,0x19(%A1)  | SEND 0 TO TAPE
 4391      0019 
 4392 9f1c 08E9 0000 	         BSET.B  #0,0x21(%A1)  | START TIMER
 4392      0021 
 4393 9f22 E300      	         ASL.B   #1,%D0        | SENT 8 BITS?
 4394 9f24 66C0      	         BNE.S   TAPEO1        | NO. CONTINUE
 4395 9f26 4E75      	         RTS
 4396               	*
 4397               	* WAITS UNTIL PROGRAMMED TIME DELAY HAS ELAPSED
 4398               	* (IF TIMER IS RUNNING)
 4399               	* ALSO CHECKS FOR BREAK
 4400               	* USES D1
 4401               	*
 4402 9f28 6100 FF28 	TIMERTST:BSR     CHKBRK         | CHECK FOR BREAK
 4403 9f2c 0829 0000 	         BTST.B  #0,0x21(%A1)   | IS TIMER RUNNING?
 4403      0021 
 4404 9f32 6708      	         BEQ.S   TIMERTS1       | NO. RETURN
 4405 9f34 0829 0000 	         BTST.B  #0,0x35(%A1)   | HAS TIME DELAY ELAPSED?
 4405      0035 
 4406 9f3a 67EC      	         BEQ.S   TIMERTST       | NO. WAIT
 4407 9f3c 4E75      	TIMERTS1:RTS
 4408               	
 4409               	*   IF FAULT THEN INITIALIZE AN ACIA
 4410               	*
 4411 9f3e 48E7 8080 	FAULTSER:MOVEM.L %D0/%A0,-(%A7) | FREE UP SOME WORKING REGISTERS
 4412               	
 4413               	* DELAY TO ALLOW ACIA TO FINISH TRANSMITTING
 4414               	*  LONGEST TIME FOR TWO CHARACTERS; 110 BAUD, 16MHZ NO WAIT STATES
 4415 9f42 203C 0000 	         MOVE.L  #50000,%D0     | DELAY A WHILE
 4415      C350 
 4416 9f48 5380      	FAULTAC4:SUBQ.L  #1,%D0         | LOOP AROUND
 4417 9f4a 66FC      	         BNE.S   FAULTAC4
 4418               	
 4419 9f4c 6100 FD24 	         BSR     GETSER1        | MOVE ADDRESS INTO A0
 4420 9f50 1010      	         MOVE.B  (%A0),%D0      | READ STATUS
 4421 9f52 0200 0070 	         ANDI.B  #0x70,%D0      | SEE IF FAULT
 4422 9f56 6708      	         BEQ.S   FAULTAC2
 4423 9f58 10BC 0043 	         MOVE.B  #RESET,(%A0)   | MASTER RESET
 4424 9f5c 10B8 064C 	         MOVE.B  MD1CON,(%A0)   | HOW TO PROGRAM IT
 4425               	
 4426 9f60 6100 FD22 	FAULTAC2:BSR     GETSER2        | MOVE ADDRESS INTO A0
 4427 9f64 1010      	         MOVE.B  (%A0),%D0
 4428 9f66 0200 0070 	         ANDI.B  #0x70,%D0
 4429 9f6a 6708      	         BEQ.S   FAULTAC3
 4430 9f6c 10BC 0043 	         MOVE.B  #RESET,(%A0)   | MASTER RESET
 4431 9f70 10B8 064D 	         MOVE.B  MD1CON+1,(%A0) | HOW TO PROGRAM IT
 4432               	FAULTAC3:
68K GAS  tutor13.s 			page 84


 4433 9f74 4CDF 0101 	         MOVEM.L (%A7)+,%A0/%D0 | RESTORE REGISTERS
 4434 9f78 4E75      	         RTS
 4435               	
 4436               	*   INITIALIZE BOTH ACIAs
 4437               	*
 4438 9f7a 48E7 8080 	INITSER: MOVEM.L %D0/%A0,-(%A7) | FREE UP SOME WORKING REGISTERS
 4439               	
 4440               	* DELAY TO ALLOW ACIA TO FINISH TRANSMITTING
 4441               	*  LONGEST TIME FOR TWO CHARACTERS; 110 BAUD, 16MHZ NO WAIT STATES
 4442 9f7e 203C 0000 	         MOVE.L  #50000,%D0     | DELAY A WHILE
 4442      C350 
 4443 9f84 5380      	INITAC3: SUBQ.L  #1,%D0         | LOOP AROUND
 4444 9f86 66FC      	         BNE.S   INITAC3
 4445               	
 4446 9f88 6100 FCE8 	         BSR     GETSER1        | MOVE ADDRESS INTO A0
 4447 9f8c 10BC 0043 	         MOVE.B  #RESET,(%A0)   | MASTER RESET
 4448 9f90 10B8 064C 	         MOVE.B  MD1CON,(%A0)   | HOW TO PROGRAM IT
 4449 9f94 6100 FCEE 	         BSR     GETSER2        | MOVE ADDRESS INTO A0
 4450 9f98 10BC 0043 	         MOVE.B  #RESET,(%A0)   | MASTER RESET
 4451 9f9c 10B8 064D 	         MOVE.B  MD1CON+1,(%A0) | HOW TO PROGRAM IT
 4452 9fa0 4CDF 0101 	         MOVEM.L (%A7)+,%A0/%D0 | RESTORE REGISTERS
 4453 9fa4 4E75      	         RTS
 4454               	
 4455               	*    INPUT CHARACTER FROM PORT1
 4456               	*    ACIA ADDRESS IN (%A0)
 4457               	*
 4458               	
 4459 9fa6 1210      	INCHNE:  MOVE.B  (%A0),%D1      | (INCH NO ECHO) LOAD STATUS SIDE
 4460 9fa8 0201 0010 	         ANDI.B  #0x10,%D1      |              CHECK FOR BREAK
 4461 9fac 6600 FED0 	         BNE     BREAK          |              GO PROCESS IT
 4462               	
 4463 9fb0 1210      	         MOVE.B  (%A0),%D1      | LOAD STATUS SIDE
 4464 9fb2 0201 0001 	         ANDI.B  #1,%D1         | SEE IF READY
 4465 9fb6 67EE      	         BEQ.S   INCHNE         | IF NOT READY
 4466 9fb8 1028 0002 	         MOVE.B  2(%A0),%D0     | READ DATA SIDE   *****************
 4467 9fbc 0200 007F 	         ANDI.B  #0x7F,%D0      |  DROP PARITY BIT
 4468 9fc0 4E75      	         RTS
 4469               	
 4470               	*  INPUT A LINE FROM PORT2 (ACIA2)
 4471               	*   [ECHO TO PORT1 (ACIA1)]
 4472               	*                  XONOFF
 4473               	*                   0000     NULL  NULL    DO NOTHING
 4474               	*                   0817   BKSPACE CNTL/W
 4475               	*                   1214     X-ON  X-OFF   READER ON OFF
 4476               	*
 4477 9fc2 4AB8 0620 	PORTIN2: TST.L   INFROM         | SEE IF ALTERNATE ADDRESS
 4478 9fc6 6706      	         BEQ.S   PORTIN2X
 4479 9fc8 2F38 0620 	         MOVE.L  INFROM,-(%A7)
 4480 9fcc 4E75      	         RTS                    | GO DO IT
 4481 9fce 2F38 0634 	PORTIN2X:MOVE.L  INPORT2,-(%A7) | GO TO IO ROUTINE
 4482 9fd2 4E75      	         RTS                    | (THIS NORMALLY GOES TO PORTIN20)
 4483               	*
 4484 9fd4 48E7 7090 	PORTIN20:MOVEM.L %D1-%D3/%A0/%A3,-(%A7) | SAVE WORKING REGISTERS
 4485               	
 4486 9fd8 6100 FCAA 	         BSR     GETSER2
 4487 9fdc 2648      	         MOVE.L  %A0,%A3        | A3 = ADDRESS OF PORT 2
 4488 9fde 6100 FC92 	         BSR     GETSER1        | A0 = ADDRESS OF PORT 1
68K GAS  tutor13.s 			page 85


 4489               	
 4490 9fe2 243C 0003 	         MOVE.L  #LTIME,%D2     | D2 = 5 SEC DEADMAN @ 8MHZ
 4490      20C8 
 4491               	
 4492 9fe8 614A      	PORT2100:BSR.S   P2READY
 4493 9fea 6704      	         BEQ.S   PORT2120       | PORT2 DATA IN NOT-READY
 4494               	
 4495 9fec 615C      	         BSR.S   RES            | READ/ECHO/STORE CHAR
 4496 9fee 60F8      	         BRA.S   PORT2100
 4497               	
 4498 9ff0 7601      	PORT2120:MOVEQ   #1,%D3         | D3 = MLS TIMER (ONE TICK)
 4499 9ff2 6140      	PORT2130:BSR.S   P2READY
 4500 9ff4 6622      	         BNE.S   PORT2250       | PORT2 DATA IN READY
 4501               	
 4502 9ff6 5382      	         SUBQ.L  #1,%D2
 4503 9ff8 6B2A      	         BMI.S   PORT2300       | SECOND TIME OUT
 4504               	
 4505 9ffa 5383      	         SUBQ.L  #1,%D3
 4506 9ffc 66F4      	         BNE.S   PORT2130       | MLS TIMER
 4507               	
 4508 9ffe 1038 04E6 	PORT2140:MOVE.B  XONOFF,%D0
 4509 a002 670C      	         BEQ.S   PORT2150       | NULL; IGNORE READER ON
 4510 a004 1213      	         MOVE.B  (%A3),%D1
 4511 a006 0201 0002 	         ANDI.B  #2,%D1
 4512 a00a 67E4      	         BEQ.S   PORT2120       | PORT2 DATA OUT NOT-READY
 4513 a00c 1740 0002 	         MOVE.B  %D0,2(%A3)     | SEND START READER CHAR
 4514               	PORT2150:
 4515               	
 4516 a010 263C 0000 	         MOVE.L  #STIME,%D3     | D3 = 100 MLS @ 8MHZ
 4516      A028 
 4517 a016 60DA      	         BRA.S   PORT2130
 4518               	
 4519 a018 611A      	PORT2250:BSR.S   P2READY
 4520 a01a 6702      	         BEQ.S   PORT2260      | PORT2 DATA IN NOT-READY
 4521 a01c 612C      	         BSR.S   RES           | READ/ECHO/STORE CHAR
 4522               	
 4523 a01e 5383      	PORT2260:SUBQ.L  #1,%D3
 4524 a020 6BDC      	         BMI.S   PORT2140      | CHARACTER TIME OUT
 4525 a022 60F4      	         BRA.S   PORT2250
 4526               	
 4527 a024 4BFA 0006 	PORT2300:LEA     MSG030(%PC),%A5 | TIMEOUT ERROR
 4528 a028 6000 FE5A 	         BRA     BREAK79
 4529               	
 4530 a02c 5449 4D45 	MSG030:  .ascii  "TIMEOUT"
 4530      4F55 54
 4531 a033 04        	         DC.B    EOT
 4532               	
 4533 a034 1210      	P2READY: MOVE.B  (%A0),%D1     | CHECK FOR ACTIVITY ON PORT1
 4534 a036 0201 0010 	         ANDI.B  #0x10,%D1     | CHECK FOR BREAK
 4535 a03a 6600 FE42 	         BNE     BREAK
 4536 a03e 1228 0002 	         MOVE.B  2(%A0),%D1    | READ POSSIBLE CHAR PORT 1; IGNORE
 4537               	
 4538 a042 1213      	         MOVE.B  (%A3),%D1     | READ STATUS OF PORT2
 4539 a044 0201 0001 	         ANDI.B  #1,%D1        | SEE IF CHARACTER SENT
 4540 a048 4E75      	         RTS
 4541               	
 4542 a04a 122B 0002 	RES:     MOVE.B  2(%A3),%D1    | D1 = CHAR READ FROM PORT2
68K GAS  tutor13.s 			page 86


 4543 a04e 0201 007F 	         ANDI.B  #0x7F,%D1     | DROP PARITY BIT
 4544               	
 4545 a052 4A78 04E2 	         TST.W   ECHOPT1       | SEE IF ECHO ON
 4546 a056 6704      	         BEQ.S   RES140
 4547 a058 1141 0002 	         MOVE.B  %D1,2(%A0)    | SEND TO DATA SIDE (PORT1)
 4548               	RES140:
 4549               	
 4550 a05c 0C01 000D 	         CMPI.B  #CR,%D1
 4551 a060 671C      	         BEQ.S   RES190        | END OF LINE
 4552               	
 4553 a062 0C01 0020 	         CMPI.B  #0x20,%D1     | IGNORE CONTROL CHARACTERS (NULLS)
 4554 a066 6D14      	         BLT.S   RES150
 4555 a068 1C81      	         MOVE.B  %D1,(%A6)     | SAVE CHAR IN BUFFER
 4556               	
 4557 a06a 263C 0001 	         MOVE.L  #LTIME/2,%D3  | D3 = 2 1/2 SEC @ 8MHZ (CHARATER  TIMER)
 4557      9064 
 4558               	
 4559 a070 220E      	         MOVE.L  %A6,%D1       | CHECK BUFFER FULL
 4560 a072 928D      	         SUB.L   %A5,%D1
 4561 a074 0C41 0050 	         CMPI.W  #BUFSIZE,%D1
 4562 a078 6A02      	         BPL.S   RES150        | FULL
 4563 a07a 528E      	         ADDQ.L  #1,%A6        | INCREMENT STORE POINTER
 4564 a07c 4E75      	RES150:  RTS
 4565               	
 4566 a07e BDCD      	RES190:  CMP.L   %A5,%A6
 4567 a080 67FA      	         BEQ.S   RES150        | NULL RECORD; IGNORE
 4568               	
 4569 a082 588F      	         ADDQ.L  #4,%A7        | TRIM STACK
 4570               	
 4571 a084 1038 04E7 	         MOVE.B  XONOFF+1,%D0
 4572 a088 670C      	         BEQ.S   RES195        | XOFF = NULL CHAR; IGNORE
 4573 a08a 1213      	RES194:  MOVE.B  (%A3),%D1
 4574 a08c 0201 0002 	         ANDI.B  #2,%D1
 4575 a090 67F8      	         BEQ.S   RES194        | PORT2 DATA OUT NOT-READY
 4576 a092 1740 0002 	         MOVE.B  %D0,2(%A3)    | STOP READER
 4577               	RES195:
 4578               	
 4579 a096 4CDF 090E 	         MOVEM.L (%A7)+,%D1-%D3/%A0/%A3 | RESTORE THE REGISTERS
 4580 a09a 4E75      	         RTS
 4581               	
 4582               	*
 4583               	* INPUT A LINE FROM AUDIO TAPE (PI/T)
 4584               	* [ECHO TO PORT1 (ACIA1)]
 4585               	*
 4586 a09c 48E7 78F0 	TAPEIN:  MOVEM.L %D1-%D4/%A0-%A3,-(%A7) | SAVE WORKING REGISTERS
 4587 a0a0 6100 FBD0 	         BSR     GETSER1        | ACIA1 ADDRESS INTO A0
 4588 a0a4 227C 0001 	         MOVEA.L #PDI1,%A1
 4588      0000 
 4589 a0aa 13FC 0002 	         MOVE.B  #2,PITCDDR     | PC0 INPUT, PC1 OUTPUT.
 4589      0001 0009 
 4590               	
 4591               	* SYNCHRONIZE ON S CHARACTER
 4592 a0b2 4201      	         CLR.B   %D1
 4593 a0b4 613C      	TAPEIN10:BSR.S   TAPEIN40       | GET TAPE
 4594 a0b6 65FC      	         BCS.S   TAPEIN10       | WAIT FOR LOW
 4595 a0b8 6138      	TAPEIN11:BSR.S   TAPEIN40       | GET TAPE
 4596 a0ba 64FC      	         BCC.S   TAPEIN11       | WAIT FOR HIGH
68K GAS  tutor13.s 			page 87


 4597 a0bc 6154      	         BSR.S   STARTIMR       | START TIMER
 4598 a0be E301      	TAPEIN12:ASL.B   #1,%D1
 4599 a0c0 6110      	         BSR.S   TAPEIN30       | GET ONE BIT FROM TAPE
 4600 a0c2 0C01 0053 	         CMPI.B  #'S',%D1       | S?
 4601 a0c6 66F6      	         BNE.S   TAPEIN12       | NO. GET NEXT BIT
 4602 a0c8 6072      	         BRA.S   TAPEIN51
 4603               	
 4604               	* GET ONE CHARACTER FROM THE TAPE
 4605 a0ca 7202      	TAPEIN20:MOVEQ   #2,%D1         | SET STOP BIT
 4606 a0cc 6104      	TAPEIN21:BSR.S   TAPEIN30       | GET 1 BIT FROM TAPE
 4607 a0ce E301      	         ASL.B   #1,%D1         | STOP IN CARRY
 4608 a0d0 64FA      	         BCC.S   TAPEIN21       | NO
 4609               	*FALL INTO LOAD BIT ROUTINE FOR LAST BIT
 4610 a0d2 611E      	TAPEIN30:BSR.S   TAPEIN40       | GET TAPE
 4611 a0d4 65FC      	         BCS.S   TAPEIN30       | WAIT FOR LOW
 4612 a0d6 611A      	TAPEIN31:BSR.S   TAPEIN40       | GET TAPE
 4613 a0d8 64FC      	         BCC.S   TAPEIN31       | WAIT FOR HIGH
 4614 a0da 4239 0001 	         CLR.B   PITTCR         | STOP TIMER
 4614      0021 
 4615 a0e0 0749 002D 	         MOVEP.L 0x2D(%A1),%D3  | GET PERIOD MEASUREMENT
 4616 a0e4 612C      	         BSR.S   STARTIMR       | START TIMER
 4617 a0e6 0483 00FF 	         SUBI.L  #0xFFFFFF-94,%D3 | IS IT A LOGIC 1?
 4617      FFA1 
 4618 a0ec 6502      	         BLO.S   TAPEIN32       | NO
 4619 a0ee 5201      	         ADDQ.B  #1,%D1         | YES. STORE LOGIC 1
 4620 a0f0 4E75      	TAPEIN32:RTS
 4621               	
 4622               	* READ THE TAPE LEVEL INTO THE CARRY AND CHECK FOR BREAK
 4623 a0f2 1410      	TAPEIN40:MOVE.B  (%A0),%D2      | CHECK FOR ACTIVITY ON PORT1
 4624 a0f4 0202 0010 	         ANDI.B  #0x10,%D2      | CHECK FOR BREAK
 4625 a0f8 6600 FD84 	         BNE     BREAK
 4626 a0fc 1410      	         MOVE.B  (%A0),%D2      | SEE IF CHARACTER SENT
 4627 a0fe 0202 0001 	         ANDI.B  #1,%D2
 4628 a102 6704      	         BEQ.S   TAPEIN41       | NONE SENT.
 4629 a104 1428 0002 	         MOVE.B  2(%A0),%D2     | READ WHAT WAS SENT
 4630 a108 1439 0001 	TAPEIN41:MOVE.B  PITPCDR,%D2    | READ PI/T
 4630      0019 
 4631 a10e E202      	         ASR.B   #1,%D2         | DATA INTO CARRY
 4632 a110 4E75      	         RTS
 4633               	
 4634               	*STARTS PROGRAMMABLE TIMER
 4635 a112 283C 00FF 	STARTIMR:MOVE.L  #0x00FFFFFF,%D4 | INIT. COUNT. PRELOAD REG.
 4635      FFFF 
 4636 a118 09C9 0025 	         MOVEP.L %D4,0x25(%A1)
 4637 a11c 13FC 0001 	         MOVE.B  #1,PITTCR      | START TIMER
 4637      0001 0021 
 4638               	
 4639 a124 4E75      	         RTS
 4640               	
 4641 a126 0C01 0020 	TAPEIN53:CMPI.B  #0x20,%D1
 4642 a12a 6D0E      	         BLT.S   TAPEIN50       | IGNORE CONTROL CHARACTERS
 4643 a12c 1C81      	         MOVE.B  %D1,(%A6)      | SAVE CHARACTER IN BUFFER
 4644 a12e 220E      	         MOVE.L  %A6,%D1        | CHECK BUFFER FULL
 4645 a130 928D      	         SUB.L   %A5,%D1
 4646 a132 0C41 0050 	         CMPI.W  #BUFSIZE,%D1
 4647 a136 6A02      	         BPL.S   TAPEIN50       | FULL
 4648 a138 528E      	         ADDQ.L  #1,%A6         | INCREMENT BUFFER POINTER
68K GAS  tutor13.s 			page 88


 4649               	
 4650 a13a 618E      	TAPEIN50:BSR.S   TAPEIN20       | GET ONE CHARACTER FROM TAPE
 4651 a13c 0201 007F 	TAPEIN51:ANDI.B  #0x7F,%D1      | DROP PARITY BIT
 4652 a140 4A78 04E2 	         TST.W   ECHOPT1        | SEE IF ECHO ON
 4653 a144 6704      	         BEQ.S   TAPEIN52
 4654 a146 1141 0002 	         MOVE.B  %D1,2(%A0)     | SEND TO PORT1
 4655 a14a 0C01 000A 	TAPEIN52:CMPI.B  #LF,%D1        | END OF LINE?
 4656 a14e 66D6      	         BNE.S   TAPEIN53       | NO.
 4657 a150 4CDF 0F1E 	         MOVEM.L (%A7)+,%D1-%D4/%A0-%A3 | RESTORE REGISTERS
 4658 a154 4E75      	         RTS
 4659               	
 4660               	*     SCAN COMMAND LINE FOR PORT NUMBER
 4661               	*     DU LO VE MD
 4662               	*
 4663 a156 42B8 0620 	SCANPORT:CLR.L   INFROM         | DEFAULT IS WHATEVER IS CALLED
 4664 a15a 42B8 061C 	         CLR.L   OUTTO
 4665 a15e 1015      	         MOVE.B  (%A5),%D0      | NO....GET CHARACTER
 4666 a160 0C00 0020 	         CMPI.B  #BLANK,%D0     |     IS IT A BLANK?
 4667 a164 6750      	         BEQ.S   SCANP6         |     YES..EXIT
 4668               	
 4669 a166 0C00 0031 	         CMPI.B  #'1',%D0       | SEE IF PORT 1 OVERRIDE
 4670 a16a 660E      	         BNE.S   SCANP4
 4671 a16c 21F8 062C 	         MOVE.L  INPORT1,INFROM
 4671      0620 
 4672 a172 21F8 0630 	         MOVE.L  OUTPORT1,OUTTO
 4672      061C 
 4673 a178 603A      	         BRA.S   SCANP7
 4674               	
 4675 a17a 0C00 0032 	SCANP4:  CMPI.B  #'2',%D0       | SEE IF PORT 2 OVERRIDE
 4676 a17e 660E      	         BNE.S   SCANP5
 4677 a180 21F8 0634 	         MOVE.L  INPORT2,INFROM
 4677      0620 
 4678 a186 21F8 0638 	         MOVE.L  OUTPORT2,OUTTO
 4678      061C 
 4679 a18c 6026      	         BRA.S   SCANP7
 4680               	
 4681 a18e 0C00 0033 	SCANP5:  CMPI.B  #'3',%D0       | SEE IF PORT3 OVERRIDE
 4682 a192 660E      	         BNE.S   SCANP8
 4683 a194 21F8 063C 	         MOVE.L  INPORT3,INFROM
 4683      0620 
 4684 a19a 21F8 0640 	         MOVE.L  OUTPORT3,OUTTO
 4684      061C 
 4685 a1a0 6012      	         BRA.S   SCANP7
 4686               	
 4687 a1a2 0C00 0034 	SCANP8:  CMPI.B  #'4',%D0       | SEE IF PORT4 OVERRIDE
 4688 a1a6 660E      	         BNE.S   SCANP6
 4689 a1a8 21F8 0644 	         MOVE.L  INPORT4,INFROM
 4689      0620 
 4690 a1ae 21F8 0648 	         MOVE.L  OUTPORT4,OUTTO
 4690      061C 
 4691               	
 4692 a1b4 528D      	SCANP7:  ADDQ.L  #1,%A5         | ADJUST GET CHAR POINTER
 4693 a1b6 4E75      	SCANP6:  RTS
 4694               	
 4695               	*       *  P A  *      "PRINTER ATTACH" COMMAND          *
 4696               	*                                                        *
 4697               	* IF THE "PRINTER" HAS BEEN ATTACHED, ALL CHARACTERS     *
68K GAS  tutor13.s 			page 89


 4698               	* ENTERED AND TRANSMITTED VIA THE CONSOLE WILL PRINT ON  *
 4699               	* THE HARD COPY PRINTER. -- TO TERMINATE, ENTER "NOPA"   *
 4700               	*                                                        *
 4701               	* THIS COMMAND MAKES USE OF THE "NO" OPTION.  THERE IS A *
 4702               	* 4 BYTE HARD BRANCH INFRONT OF THE REGULAR ENTRY POINT. *
 4703               	**********************************************************
 4704               	
 4705 a1b8 6000 0006 	         BRA     NOPACMD        | ENTRY FOR "NOPA"
 4706               	
 4707               	*
 4708 a1bc 70FF      	PACMD:   MOVEQ   #-1,%D0        | ENTRY FOR "PA" (D0=-1[CRT & PRINT])
 4709 a1be 6002      	         BRA.S   SETCRTPR       | GO ACTUALLY SET THE SWITCH
 4710 a1c0 4280      	NOPACMD: CLR.L   %D0            | D0 = ZEROS... "CRT" ONLY
 4711 a1c2 31C0 0652 	SETCRTPR:MOVE.W  %D0,CRTPNT     | SET THE "CRT" AND "PRINTER" SWITCH
 4712 a1c6 6000 E06A 	         BRA     MACSBUG        | GO BE "READY"
 4713               	
 4714               	*-------------------------------------------------------------------------
 4715               	* File CODE68K   68K ONE LINE ASSEMBLER                           07/23/82
 4716               	
 4717               	* EVALUATE EXPRESSION
 4718               	*  NUMBER PLUS OR MINUS NUMBER....
 4719               	*
 4720               	EV:      .align  2
 4721 a1ca 2F07      	         MOVE.L  %D7,-(%A7)     | SAVE D7
 4722 a1cc 4287      	         CLR.L   %D7
 4723 a1ce 6120      	EV21:    BSR.S   GETFIELD       | GET NUMBER
 4724 a1d0 DE80      	         ADD.L   %D0,%D7        | D7 = NUMBER BEING BUILT
 4725 a1d2 121D      	EV15:    MOVE.B  (%A5)+,%D1     | D1 = TERMINATING CHAR
 4726 a1d4 4280      	         CLR.L   %D0            | D0 = NEXT NUMBER (=0 1ST TIME)
 4727 a1d6 0C01 002B 	         CMPI.B  #'+',%D1
 4728 a1da 67F2      	         BEQ.S   EV21           | PLUS
 4729 a1dc 0C01 002D 	         CMPI.B  #'-',%D1
 4730 a1e0 6606      	         BNE.S   EV39           | NOT MINUS
 4731 a1e2 610C      	         BSR.S   GETFIELD       | GET NEXT NUMBER
 4732 a1e4 9E80      	         SUB.L   %D0,%D7
 4733 a1e6 60EA      	         BRA.S   EV15
 4734               	
 4735 a1e8 2007      	EV39:    MOVE.L  %D7,%D0        | D0 = VALUE BUILT
 4736 a1ea 538D      	         SUBQ.L  #1,%A5         | A5 = CHAR AFTER EXPRESSION
 4737 a1ec 2E1F      	         MOVE.L  (%A7)+,%D7     | RESTORE D7
 4738 a1ee 4E75      	         RTS
 4739               	
 4740               	GETFIELD:.align  2
 4741 a1f0 0C15 002A 	         CMPI.B  #'*',(%A5)
 4742 a1f4 6606      	         BNE.S   GETF305
 4743               	
 4744 a1f6 2004      	         MOVE.L  %D4,%D0        | D0 = PROGRAM COUNTER
 4745 a1f8 528D      	         ADDQ.L  #1,%A5
 4746 a1fa 6036      	         BRA.S   GETF333
 4747               	
 4748 a1fc 0C15 0027 	GETF305: CMPI.B  #0x27,(%A5)
 4749 a200 662A      	         BNE.S   GETF325        | NOT LITERAL
 4750               	
 4751 a202 528D      	         ADDQ.L  #1,%A5
 4752 a204 4280      	         CLR.L   %D0
 4753               	
 4754 a206 3229 000C 	         MOVE.W  TLENGTH(%A1),%D1 | D1 = SIZE
68K GAS  tutor13.s 			page 90


 4755 a20a 6704      	         BEQ.S   GETF308        | .B = 0
 4756 a20c EA49      	         LSR.W   #5,%D1         | .W = 1
 4757 a20e 5381      	         SUBQ.L  #1,%D1         | .L = 3
 4758               	GETF308:
 4759               	
 4760 a210 E188      	GETF311: LSL.L   #8,%D0
 4761 a212 101D      	         MOVE.B  (%A5)+,%D0
 4762 a214 0C15 0027 	         CMPI.B  #0x27,(%A5)
 4763 a218 6706      	         BEQ.S   GETF312        | CLOSING QUOTE
 4764 a21a 51C9 FFF4 	         DBF     %D1,GETF311
 4765 a21e 6056      	         BRA.S   ER1            | OVERFLOW
 4766               	
 4767 a220 528D      	GETF312: ADDQ.L  #1,%A5         | MOVE PAST CLOSING QUOTE
 4768 a222 6002      	         BRA.S   GETF314
 4769               	
 4770 a224 E188      	GETF313: LSL.L   #8,%D0
 4771 a226 51C9 FFFC 	GETF314: DBF     %D1,GETF313    | LEFT NORNALIZE
 4772 a22a 6006      	         BRA.S   GETF333
 4773               	
 4774 a22c 6100 F8CC 	GETF325: BSR     GETDECNU       | GET DECIMAL NUMBER
 4775 a230 6644      	         BNE.S   ER1            | MESSED UP NUMBER
 4776               	
 4777 a232 4E75      	GETF333: RTS
 4778               	
 4779               	XBASE:   .align  2
 4780               	
 4781               	* FIND AND SET SIZE
 4782               	* BIT 5432109876543210
 4783               	*     ........00......  = BYTE
 4784               	*     ........01......  = WORD
 4785               	*     ........10......  = LONG
 4786               	*
 4787 a234 8469 000C 	FSIZE:   OR.W    TLENGTH(%A1),%D2 | SET SIZE BITS
 4788 a238 4E75      	         RTS
 4789               	
 4790               	*  %D0 = VALUE 0 - 7
 4791               	*  %D1 = 0 IF D@     = 1 IF A@
 4792 a23a 4281      	GETREGD: CLR.L   %D1
 4793 a23c 0C1D 0044 	         CMPI.B  #'D',(%A5)+
 4794 a240 6634      	         BNE.S   ER1
 4795 a242 4280      	GET41:   CLR.L   %D0
 4796 a244 101D      	         MOVE.B  (%A5)+,%D0
 4797 a246 0400 0030 	         SUBI.B  #'0',%D0
 4798 a24a 6B2A      	         BMI.S   ER1
 4799 a24c 0C00 0007 	         CMPI.B  #0x7,%D0
 4800 a250 6E24      	         BGT.S   ER1
 4801 a252 4E75      	         RTS
 4802               	
 4803 a254 4281      	GETREGA: CLR.L   %D1
 4804 a256 123C 0008 	         MOVE.B  #8,%D1
 4805 a25a 0C1D 0041 	         CMPI.B  #'A',(%A5)+
 4806 a25e 6616      	         BNE.S   ER1
 4807 a260 60E0      	         BRA.S   GET41
 4808               	
 4809 a262 4241      	GETREGAD:CLR     %D1
 4810 a264 101D      	         MOVE.B  (%A5)+,%D0
 4811 a266 0C00 0044 	         CMPI.B  #'D',%D0
68K GAS  tutor13.s 			page 91


 4812 a26a 67D6      	         BEQ.S   GET41
 4813 a26c 123C 0008 	         MOVE.B  #8,%D1
 4814 a270 0C00 0041 	         CMPI.B  #'A',%D0
 4815 a274 67CC      	         BEQ.S   GET41
 4816 a276 6000 078C 	ER1:     BRA     ER
 4817               	
 4818 a27a 3E3C 01FD 	EADA:    MOVE.W  #0x1FD,%D7     | DATA ALTERABLE ONLY
 4819 a27e 6022      	         BRA.S   EA
 4820               	
 4821 a280 3E3C 07E4 	EAC:     MOVE.W  #0x7E4,%D7     | CONTROL ONLY
 4822 a284 601C      	         BRA.S   EA
 4823               	
 4824 a286 3E3C 01FC 	EAM:     MOVE.W  #0x1FC,%D7     | MEMORY ALTERABLE ONLY
 4825 a28a 6016      	         BRA.S   EA
 4826               	
 4827 a28c 3E3C 0800 	EAZ:     MOVE.W  #0x800,%D7     | IMMEDIATE ONLY
 4828 a290 6010      	         BRA.S   EA
 4829               	
 4830 a292 3E3C 0FFD 	EADADDR: MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 4831 a296 600A      	         BRA.S   EA
 4832               	
 4833 a298 3E3C 01FF 	EAA:     MOVE.W  #0x1FF,%D7     | ALTERABLE ADDRESSING
 4834 a29c 6004      	         BRA.S   EA
 4835               	
 4836 a29e 3E3C 0FFF 	EAALL:   MOVE.W  #0xFFF,%D7     | ALL MODES
 4837               	
 4838               	*  ...............1  D@         | DATA REGISTER
 4839               	*  ..............1.  A@
 4840               	*  .............1..  (A@)
 4841               	*  ............1...  -(A@)
 4842               	*  ...........1....  (A@)+
 4843               	*  ..........1.....  DATA(A@)
 4844               	*  .........1......  DATA(A@,R@)
 4845               	*  ........1.......  DATA  (SHORT)
 4846               	*  .......1........  DATA  (LONG)
 4847               	*  ......1.........  DATA(%PC)
 4848               	*  .....1..........  DATA(PC,R@)
 4849               	*  ....1...........  #DATA
 4850               	*  1...............  SPECIAL CASE JMP.L
 4851               	
 4852               	* %D0 = VALUE CALCULATED
 4853               	* %D2 = MASK WORD (1ST WORD OF INSTRUCTION)
 4854               	* %D3 = OFFSET FOR DATA STORE (TDATA+..)
 4855               	* %D4 = EXTENSION WORD
 4856               	* %D5 = <DATA>
 4857               	* %D6 = MODE AS BUILT   .........XXXXXX
 4858               	* %D7 = MODES ALLOWED
 4859               	*
 4860               	* %A4 = BASE ADDRESS FOR DATA STORE (TDATA+..)[A4,%D3]
 4861               	EA:      .align  2
 4862 a2a2 4285      	         CLR.L   %D5            | ZERO VALUE
 4863 a2a4 4286      	         CLR.L   %D6            | MODE = 000000
 4864 a2a6 1015      	         MOVE.B  (%A5),%D0
 4865 a2a8 0C00 0023 	         CMPI.B  #'#',%D0
 4866 a2ac 6646      	         BNE.S   EA10
 4867               	
 4868               	* IMMEDIATE MODE
68K GAS  tutor13.s 			page 92


 4869               	
 4870 a2ae 0807 000B 	         BTST    #11,%D7
 4871 a2b2 67C2      	         BEQ.S   ER1
 4872               	
 4873 a2b4 1C3C 003C 	         MOVE.B  #0x3C,%D6      | D6 = MODE  111100
 4874 a2b8 528D      	         ADDQ.L  #1,%A5
 4875               	
 4876 a2ba 6100 FF0E 	         BSR     EV             | EVALUATE EXPRESSION
 4877 a2be 2A00      	         MOVE.L  %D0,%D5        | D5 = VALUE
 4878               	
 4879 a2c0 4A29 000B 	         TST.B   TLSPEC(%A1)
 4880 a2c4 670A      	         BEQ.S   EA0633         | .SIZE NOT SPECIFIED (.W ASSUMED)
 4881               	
 4882 a2c6 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0
 4883 a2ca 6714      	         BEQ.S   EA0635         | .BYTE
 4884               	
 4885 a2cc 4A00      	         TST.B   %D0
 4886 a2ce 6B18      	         BMI.S   EA0637         | .LONG
 4887               	
 4888 a2d0 6100 0238 	EA0633:  BSR     EA16BIT        | .WORD     -32K TO +64K
 4889 a2d4 3985 3000 	EA0634:  MOVE.W  %D5,(%A4,%D3.W)
 4890 a2d8 5429 000A 	         ADDQ.B  #2,TNB(%A1)    | BYTE COUNT
 4891 a2dc 5483      	         ADDQ.L  #2,%D3         | OFFSET
 4892 a2de 4E75      	         RTS
 4893               	
 4894 a2e0 6100 023E 	EA0635:  BSR     EA8BIT         | -127 TO +255
 4895 a2e4 6690      	         BNE.S   ER1
 4896 a2e6 60EC      	         BRA.S   EA0634
 4897               	
 4898 a2e8 2985 3000 	EA0637:  MOVE.L  %D5,(%A4,%D3.W)
 4899 a2ec 5829 000A 	         ADDQ.B  #4,TNB(%A1)
 4900 a2f0 5883      	         ADDQ.L  #4,%D3
 4901 a2f2 4E75      	         RTS
 4902               	
 4903               	EA10:    .align  2
 4904 a2f4 0C15 002D 	         CMPI.B  #'-',(%A5)
 4905 a2f8 6626      	         BNE.S   EA11
 4906               	
 4907 a2fa 0C2D 0028 	         CMPI.B  #'(',1(%A5)
 4907      0001 
 4908 a300 6600 0090 	         BNE     EA41           | MAY BE "-<DATA>
 4909               	
 4910 a304 548D      	         ADDQ.L  #2,%A5
 4911 a306 3C3C 0020 	         MOVE.W  #0x0020,%D6    | MODE = -(A@)    100AAA
 4912               	
 4913 a30a 0807 0004 	         BTST    #4,%D7
 4914 a30e 6700 FF66 	         BEQ     ER1            | THIS MODE NOT ALLOWED
 4915               	
 4916 a312 6100 FF40 	         BSR     GETREGA
 4917 a316 8C40      	         OR.W    %D0,%D6
 4918               	
 4919 a318 0C1D 0029 	         CMPI.B  #')',(%A5)+
 4920 a31c 6670      	         BNE.S   ER3            | NO CLOSING PAREN
 4921 a31e 4E75      	         RTS
 4922               	
 4923 a320 0C00 0041 	EA11:    CMPI.B  #'A',%D0
 4924 a324 6612      	         BNE.S   EA21
68K GAS  tutor13.s 			page 93


 4925               	
 4926 a326 1C3C 0008 	         MOVE.B  #0x08,%D6      | MODE = 001...
 4927 a32a 0807 0001 	         BTST    #1,%D7
 4928 a32e 675E      	         BEQ.S   ER3            | MODE NOT ALLOWED
 4929               	
 4930 a330 6100 FF22 	         BSR     GETREGA
 4931 a334 8C40      	         OR.W    %D0,%D6
 4932 a336 4E75      	         RTS
 4933               	
 4934 a338 0C00 0044 	EA21:    CMPI.B  #'D',%D0
 4935 a33c 660E      	         BNE.S   EA31
 4936               	
 4937 a33e 0807 0000 	         BTST    #0,%D7
 4938 a342 674A      	         BEQ.S   ER3            | MODE NOT ALLOWED
 4939               	
 4940 a344 6100 FEF4 	         BSR     GETREGD        | MODE = D@   000AAA
 4941 a348 8C40      	         OR.W    %D0,%D6
 4942 a34a 4E75      	         RTS
 4943               	
 4944 a34c 0C00 0028 	EA31:    CMPI.B  #'(',%D0
 4945 a350 6640      	         BNE.S   EA41
 4946               	
 4947               	* POSSIBLE
 4948               	*  (A@)
 4949               	*  (A@)+
 4950               	*  (A@,R@)  IMPLIED ZERO DISPLACEMENT
 4951               	*
 4952 a352 528D      	         ADDQ.L  #1,%A5
 4953 a354 6100 FEFE 	         BSR     GETREGA
 4954 a358 8C40      	         OR.W    %D0,%D6
 4955               	
 4956 a35a 101D      	         MOVE.B  (%A5)+,%D0
 4957 a35c 0C00 002C 	         CMPI.B  #',',%D0
 4958 a360 6700 00D0 	         BEQ     EA5116         | MODE = (A@,R@)  ;IMPLIED D5 = 0 DATA
 4959               	
 4960 a364 0C00 0029 	         CMPI.B  #')',%D0       | LOOK FOR CLOSING )
 4961 a368 6624      	         BNE.S   ER3
 4962               	
 4963 a36a 0C15 0020 	         CMPI.B  #BLANK,(%A5)   | LOOK FOR BLANK
 4964 a36e 6714      	         BEQ.S   EA35           | MODE = (A@)
 4965               	
 4966 a370 0C15 002B 	         CMPI.B  #'+',(%A5)
 4967 a374 660E      	         BNE.S   EA35
 4968 a376 528D      	         ADDQ.L  #1,%A5
 4969               	
 4970 a378 0046 0018 	         ORI.W   #0x18,%D6      | MODE = 011...    (A@)+
 4971               	
 4972 a37c 0807 0003 	         BTST    #3,%D7
 4973 a380 670C      	         BEQ.S   ER3            | MODE NOT ALLOWED
 4974               	
 4975 a382 4E75      	EA34:    RTS
 4976               	
 4977 a384 0046 0010 	EA35:    ORI.W   #0x10,%D6      | MODE = 010...   (A@)
 4978               	
 4979 a388 0807 0002 	         BTST    #2,%D7
 4980 a38c 66F4      	         BNE.S   EA34           | MODE ALLOWED
 4981 a38e 6000 0674 	ER3:     BRA     ER             | MODE NOT ALLOWED
68K GAS  tutor13.s 			page 94


 4982               	
 4983               	* POSSIBLE
 4984               	*   <DATA>   SHORT
 4985               	*   <DATA>   LONG
 4986               	*   <DATA>(A@)
 4987               	*   <DATA>(A@,R@)
 4988               	*   <DATA>(A@,R@.W)
 4989               	*   <DATA>(A@,R@.L)
 4990               	*   <DATA>(%PC)
 4991               	*   <DATA>(PC,R@)
 4992               	*   <DATA>(PC,R@.W)
 4993               	*   <DATA>(PC,R@.L)
 4994               	*
 4995 a392 6100 FE36 	EA41:    BSR     EV             | EVALUATE EXPRESSION
 4996 a396 2A00      	         MOVE.L  %D0,%D5        | D5 = <DATA>
 4997               	
 4998 a398 1015      	         MOVE.B  (%A5),%D0
 4999 a39a 0C00 002C 	         CMPI.B  #',',%D0
 5000 a39e 6706      	         BEQ.S   EA4102
 5001 a3a0 0C00 0020 	         CMPI.B  #BLANK,%D0
 5002 a3a4 6642      	         BNE.S   EA4120
 5003               	
 5004               	*  <DATA>         ONLY
 5005               	* CHECK IF NEGATIVE NUMBER
 5006               	
 5007 a3a6 2005      	EA4102:  MOVE.L  %D5,%D0
 5008 a3a8 6A02      	         BPL.S   EA4105         | POSITIVE NUMBER
 5009 a3aa 4680      	         NOT.L   %D0
 5010 a3ac 0240 8000 	EA4105:  ANDI.W  #0x8000,%D0
 5011 a3b0 4A80      	         TST.L   %D0
 5012 a3b2 661E      	         BNE.S   EA4135         | .LONG
 5013               	
 5014               	*  <DATA>.W
 5015 a3b4 0807 0007 	         BTST    #7,%D7
 5016 a3b8 6608      	         BNE.S   EA4127         | SHORT ALLOWED
 5017 a3ba 0807 000F 	         BTST    #15,%D7
 5018 a3be 67CE      	         BEQ.S   ER3            | MODE NOT ALLOWED
 5019 a3c0 6010      	         BRA.S   EA4135         | SPECIAL CASE (JMP.L)
 5020               	
 5021 a3c2 0046 0038 	EA4127:  ORI.W   #0x38,%D6      | EA = ABSOULTE SHORT
 5022 a3c6 3985 3000 	         MOVE.W  %D5,(%A4,%D3.W) | D5 = DATA
 5023 a3ca 5429 000A 	         ADDQ.B  #2,TNB(%A1)    | BYTE COUNT
 5024 a3ce 5483      	         ADDQ.L  #2,%D3
 5025 a3d0 4E75      	         RTS
 5026               	
 5027               	*EA4134  CMPI.B  #'L',%D0
 5028               	*        BNE.S   ER3
 5029               	
 5030               	*  <DATA>.L
 5031 a3d2 0046 0039 	EA4135:  ORI.W   #0x39,%D6      | EA = ABSOLUTE LONG
 5032 a3d6 2985 3000 	         MOVE.L  %D5,(%A4,%D3.W)
 5033 a3da 5829 000A 	         ADDQ.B  #4,TNB(%A1)    | BYTE COUNT
 5034 a3de 5883      	         ADDQ.L  #4,%D3
 5035 a3e0 0807 0008 	         BTST    #8,%D7
 5036 a3e4 67A8      	         BEQ.S   ER3            | MODE NOT ALLOWED
 5037 a3e6 4E75      	         RTS
 5038               	
68K GAS  tutor13.s 			page 95


 5039 a3e8 528D      	EA4120:  ADDQ.L  #1,%A5
 5040 a3ea 0C00 0028 	         CMPI.B  #'(',%D0
 5041 a3ee 669E      	         BNE.S   ER3
 5042               	
 5043 a3f0 0C15 0050 	         CMPI.B  #'P',(%A5)
 5044 a3f4 6700 008E 	         BEQ     EA61
 5045               	
 5046               	* <DATA>(A@.......
 5047 a3f8 6100 011A 	         BSR     EA16BITS       | -32K TO +32K
 5048               	
 5049 a3fc 6100 FE56 	         BSR     GETREGA
 5050 a400 8C40      	         OR.W    %D0,%D6
 5051               	
 5052 a402 1015      	         MOVE.B  (%A5),%D0
 5053 a404 0C00 0029 	         CMPI.B  #')',%D0
 5054 a408 6624      	         BNE.S   EA5115
 5055               	
 5056               	* <DATA>(A@)
 5057 a40a 528D      	         ADDQ.L  #1,%A5
 5058               	
 5059 a40c 0807 0005 	         BTST    #5,%D7
 5060 a410 6700 00A0 	         BEQ     ER4            | MODE NOT ALLOWED
 5061               	
 5062 a414 0046 0028 	         ORI.W   #0x0028,%D6    | MODE = 101AAA
 5063               	
 5064 a418 0C85 0001 	         CMPI.L  #0x10000,%D5
 5064      0000 
 5065 a41e 6A00 0092 	         BPL     ER4
 5066               	
 5067 a422 3985 3000 	         MOVE.W  %D5,(%A4,%D3.W)
 5068 a426 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 5069 a42a 5483      	         ADDQ.L  #2,%D3
 5070 a42c 4E75      	         RTS
 5071               	
 5072 a42e 6100 05BA 	EA5115:  BSR     COMMA
 5073               	
 5074               	*  <DATA>(A@,-----    ADDRESS REGISTER WITH INDEX
 5075 a432 48C5      	EA5116:  EXT.L   %D5
 5076 a434 6100 00F2 	         BSR     EA8BITS        | -128 TO +127
 5077 a438 6678      	         BNE.S   ER4
 5078 a43a 0245 00FF 	         ANDI.W  #0x00FF,%D5
 5079 a43e 0046 0030 	         ORI.W   #0x0030,%D6    | MODE  110---
 5080               	
 5081 a442 0807 0006 	         BTST    #6,%D7
 5082 a446 676A      	         BEQ.S   ER4            | MODE NOT ALLOWED
 5083               	
 5084 a448 6100 FE18 	         BSR     GETREGAD
 5085 a44c 8041      	         OR.W    %D1,%D0
 5086 a44e E858      	         ROR.W   #4,%D0
 5087 a450 8A40      	         OR.W    %D0,%D5        | EXTENSION WORD
 5088               	
 5089               	* BIT 11 EXTENSION WORD
 5090               	*   0 = SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REGISTER
 5091               	*   1 = LONG VALUE IN INDEX REGISTER  (DEFAULT)
 5092               	*
 5093 a452 101D      	         MOVE.B  (%A5)+,%D0
 5094 a454 0C00 0029 	         CMPI.B  #')',%D0
68K GAS  tutor13.s 			page 96


 5095 a458 671E      	         BEQ.S   EA5119         | DEFAULT   .W
 5096               	
 5097 a45a 0C00 002E 	         CMPI.B  #'.',%D0
 5098 a45e 6652      	         BNE.S   ER4
 5099               	
 5100 a460 101D      	         MOVE.B  (%A5)+,%D0
 5101 a462 0C00 0057 	         CMPI.B  #'W',%D0
 5102 a466 670A      	         BEQ.S   EA5118
 5103               	
 5104 a468 0C00 004C 	         CMPI.B  #'L',%D0
 5105 a46c 6644      	         BNE.S   ER4            | NEITHER .W NOR .L
 5106               	
 5107 a46e 0045 0800 	         ORI.W   #0x0800,%D5    | EXTENSION WORD, W/L BIT = .L
 5108               	
 5109 a472 0C1D 0029 	EA5118:  CMPI.B  #')',(%A5)+
 5110 a476 663A      	         BNE.S   ER4            | NO CLOSING ")"
 5111               	
 5112 a478 3985 3000 	EA5119:  MOVE.W  %D5,(%A4,%D3.W)
 5113 a47c 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 5114 a480 5483      	         ADDQ.L  #2,%D3
 5115 a482 4E75      	EA5119E: RTS
 5116               	
 5117               	*  <DATA>(P-----
 5118 a484 528D      	EA61:    ADDQ.L  #1,%A5
 5119 a486 0C1D 0043 	         CMPI.B  #'C',(%A5)+
 5120 a48a 6600 0578 	         BNE     ER
 5121               	
 5122 a48e 9AA9 000E 	         SUB.L   PCOUNTER(%A1),%D5 | D5 = D5 - PC
 5123 a492 5585      	         SUBQ.L  #2,%D5         | D5 = D5 - (PC + 2)
 5124               	
 5125 a494 101D      	         MOVE.B  (%A5)+,%D0
 5126 a496 0C00 0029 	         CMPI.B  #')',%D0
 5127 a49a 661A      	         BNE.S   EA71
 5128               	
 5129               	*  <DATA>(%PC)
 5130 a49c 0046 003A 	         ORI.W   #0x3A,%D6      | MODE = 111010
 5131               	
 5132 a4a0 6172      	         BSR.S   EA16BITS       | -32K TO +32K
 5133 a4a2 3985 3000 	         MOVE.W  %D5,(%A4,%D3.W)
 5134 a4a6 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 5135 a4aa 5483      	         ADDQ.L  #2,%D3
 5136               	
 5137 a4ac 0807 0009 	         BTST    #9,%D7
 5138 a4b0 66D0      	         BNE.S   EA5119E
 5139 a4b2 6000 0550 	ER4:     BRA     ER
 5140               	
 5141               	*  <DATA>(PC----          PROGRAM COUNTER WITH INDEX
 5142 a4b6 3C3C 003B 	EA71:    MOVE.W  #0x003B,%D6    | MODE = 111011
 5143               	
 5144 a4ba 0C00 002C 	         CMPI.B  #',',%D0
 5145 a4be 66F2      	         BNE.S   ER4
 5146               	
 5147 a4c0 0807 000A 	         BTST    #10,%D7
 5148 a4c4 67EC      	         BEQ.S   ER4            | MODE NOT ALLOWED
 5149               	
 5150 a4c6 6160      	         BSR.S   EA8BITS        | -128 TO +127
 5151 a4c8 66E8      	         BNE.S   ER4
68K GAS  tutor13.s 			page 97


 5152               	
 5153 a4ca 0245 00FF 	         ANDI.W  #0x00FF,%D5    | D5 = VALUE
 5154 a4ce 6100 FD92 	         BSR     GETREGAD
 5155 a4d2 8041      	         OR.W    %D1,%D0
 5156               	
 5157 a4d4 E858      	         ROR.W   #4,%D0
 5158 a4d6 8A40      	         OR.W    %D0,%D5        | D5 = EXTENSION WORD
 5159               	
 5160 a4d8 101D      	         MOVE.B  (%A5)+,%D0
 5161 a4da 0C00 0029 	         CMPI.B  #')',%D0
 5162 a4de 671E      	         BEQ.S   EA7115         | DEFAULT  .W
 5163               	
 5164 a4e0 0C00 002E 	         CMPI.B  #'.',%D0
 5165 a4e4 66CC      	         BNE.S   ER4
 5166               	
 5167 a4e6 101D      	         MOVE.B  (%A5)+,%D0
 5168 a4e8 0C00 0057 	         CMPI.B  #'W',%D0
 5169 a4ec 670A      	         BEQ.S   EA7113
 5170               	
 5171 a4ee 0C00 004C 	         CMPI.B  #'L',%D0
 5172 a4f2 66BE      	         BNE.S   ER4
 5173 a4f4 0045 0800 	         ORI.W   #0x0800,%D5    | EXTENSION WORD W/L = .L
 5174               	
 5175 a4f8 0C1D 0029 	EA7113:  CMPI.B  #')',(%A5)+
 5176 a4fc 66B4      	         BNE.S   ER4            | NO CLOSING ")"
 5177               	
 5178 a4fe 3985 3000 	EA7115:  MOVE.W  %D5,(%A4,%D3.W)
 5179 a502 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 5180 a506 5483      	         ADDQ.L  #2,%D3
 5181 a508 4E75      	         RTS
 5182               	
 5183               	****************************************************************************
 5184               	*
 5185               	*        ROUTINES TO TEST FOR VALID EFFECTIVE ADDRESSES
 5186               	*
 5187               	*        EA16BIT   tests that -32768 <= %D5 <= 65535.  (signed or unsigned)
 5188               	*        EA16BITS  tests that -32768 <= %D5 <= 32767.  (signed only)
 5189               	*        EA8BIT    tests that   -128 <= %D5 <=   255.  (signed or unsigned)
 5190               	*        EA8BITS   tests that   -128 <= %D5 <=   127.  (signed only)
 5191               	*
 5192               	*        The 16-bit tests branch to ER if invalid, else return.
 5193               	*        The  8-bit tests return condition codes <EQ> if valid, else <NE>.
 5194               	*        %D5 is preserved unless a branch to ER results.
 5195               	*        %D1 is destroyed.
 5196               	*
 5197               	****************************************************************************
 5198               	
 5199               	EA16BIT:
 5200 a50a 610C      	         BSR.S   EA16BITC       | CHECK RANGE -32768 TO 32767.  IF
 5201 a50c 2205      	         MOVE.L  %D5,%D1        | INVALID, CHECK WHETHER THE HIGH 16
 5202 a50e 4841      	         SWAP    %D1            | BITS ARE 0 (WHICH IMPLIES THAT
 5203 a510 4A41      	         TST.W   %D1            | D5 <= 65535).  IF NOT, FALL THRU TO
 5204 a512 6728      	         BEQ.S   EASEX          | THE 16-BIT SIGNED TEST--WE WILL
 5205               	*                               | FAIL AND GO TO ER.
 5206               	
 5207               	EA16BITS:
 5208 a514 487A 04EE 	         PEA     ER(%PC)        | SET UP TO RETURN TO ER IF INVALID.
68K GAS  tutor13.s 			page 98


 5209               	
 5210 a518 223C 0000 	EA16BITC:MOVE.L  #0x7FFF,%D1    | D1  <--  2^16-1.
 5210      7FFF 
 5211 a51e 600E      	         BRA.S   EAS            | GO TO THE COMMON TEST ROUTINE.
 5212               	
 5213               	EA8BIT:
 5214 a520 610A      	         BSR.S   EA8BITC        | CHECK RANGE -128 TO 127.  IF INVALID,
 5215 a522 2205      	         MOVE.L  %D5,%D1        | CHECK WHETHER THE HIGH 24 BITS ARE
 5216 a524 E089      	         LSR.L   #8,%D1         | 0 (WHICH IMPLIES THAT D5 <= 255).
 5217 a526 4E75      	         RTS
 5218               	
 5219               	EA8BITS:
 5220 a528 6102      	         BSR.S   EA8BITC        |JUST CHECK FOR -127 <= D5 <= 128.
 5221 a52a 4E75      	         RTS                    | (BSR PUTS NEEDED ADDRESS ON STACK!)
 5222               	
 5223 a52c 727F      	EA8BITC: MOVEQ   #0x7F,%D1      | D1  <--  2^8 - 1.
 5224               	
 5225               	*                  *** NOTE: THIS ROUTINE PLAYS WITH THE STACK ***
 5226 a52e BA81      	EAS:     CMP.L   %D1,%D5        | IF D5 > 2^N-1, RETURN WITH <NE> (INVAL).
 5227 a530 6E0A      	         BGT.S   EASEX
 5228 a532 4681      	         NOT.L   %D1            | IF D5 < -2^N,  RETURN WITH <NE> (INVAL).
 5229 a534 BA81      	         CMP.L   %D1,%D5
 5230 a536 6D04      	         BLT.S   EASEX
 5231               	
 5232 a538 588F      	         ADDQ.L  #4,%A7         | POP THE RETURN ADDRESS OFF THE STACK,
 5233 a53a 4281      	         CLR.L   %D1            | SET <EQ> (VALID), AND RETURN.
 5234               	
 5235 a53c 4E75      	EASEX:   RTS
 5236               	
 5237               	ADR:     .MACRO a1
 5238               	         DC.W    M\a1-XBASE
 5239               	         .ENDM
 5240               	
 5241               	TBLKEYS: .align  2              | INDEX
 5242               	         ADR     ABCD           |  0  ABCD SBCD
 5242 a53e 0810      	>  DC.W MABCD-XBASE
 5243               	         ADR     ADD            |  1  ADD  SUB
 5243 a540 08C8      	>  DC.W MADD-XBASE
 5244               	         ADR     ADDA           |  2  ADDA CMPA SUBA
 5244 a542 0970      	>  DC.W MADDA-XBASE
 5245               	         ADR     ADDI           |  3  ADDI CMPI SUBI
 5245 a544 0922      	>  DC.W MADDI-XBASE
 5246               	         ADR     ADDQ           |  4  ADDQ SUBQ
 5246 a546 0998      	>  DC.W MADDQ-XBASE
 5247               	         ADR     ADDX           |  5  ADDX SUBX
 5247 a548 09DA      	>  DC.W MADDX-XBASE
 5248               	         ADR     AND            |  6  AND  EOR OR
 5248 a54a 0A1C      	>  DC.W MAND-XBASE
 5249               	         ADR     ASL            |  7  ASL  LSL ROL ROXL
 5249 a54c 0ACA      	>  DC.W MASL-XBASE
 5250               	         ADR     DBCC           |  8  DBCC
 5250 a54e 0BB6      	>  DC.W MDBCC-XBASE
 5251               	         ADR     BCHG           |  9  BCHG
 5251 a550 0B3A      	>  DC.W MBCHG-XBASE
 5252               	         ADR     BRA            | 10  BRA BSR BCC
 5252 a552 0BC4      	>  DC.W MBRA-XBASE
 5253               	         ADR     BSET           | 11  BSET
68K GAS  tutor13.s 			page 99


 5253 a554 0B92      	>  DC.W MBSET-XBASE
 5254               	         ADR     CHK            | 12  CHK  DIVS DIVU MILS MULU
 5254 a556 0C1C      	>  DC.W MCHK-XBASE
 5255               	         ADR     CLR            | 13  CLR NEG NEGX NOT TST
 5255 a558 0C36      	>  DC.W MCLR-XBASE
 5256               	         ADR     CMPM           | 14  CMPM
 5256 a55a 0C44      	>  DC.W MCMPM-XBASE
 5257               	         ADR     MOVEQ          | 15  MOVEQ
 5257 a55c 0E24      	>  DC.W MMOVEQ-XBASE
 5258               	         ADR     EXG            | 16  EXG
 5258 a55e 0C6E      	>  DC.W MEXG-XBASE
 5259               	         ADR     EXT            | 17  EXT
 5259 a560 0CA8      	>  DC.W MEXT-XBASE
 5260               	         ADR     JMP            | 18  JMP  JSR
 5260 a562 0FB8      	>  DC.W MJMP-XBASE
 5261               	         ADR     LEA            | 19  LEA
 5261 a564 0FE4      	>  DC.W MLEA-XBASE
 5262               	         ADR     LINK           | 20  LINK
 5262 a566 102E      	>  DC.W MLINK-XBASE
 5263               	         ADR     MOVE           | 21  MOVE
 5263 a568 0E70      	>  DC.W MMOVE-XBASE
 5264               	         ADR     CMMD2          | 22  NOP RESET RTE RTR RTS TRAPV
 5264 a56a 07DE      	>  DC.W MCMMD2-XBASE
 5265               	         ADR     STOP           | 23  STOP
 5265 a56c 104C      	>  DC.W MSTOP-XBASE
 5266               	         ADR     SWAP           | 24  SWAP
 5266 a56e 100C      	>  DC.W MSWAP-XBASE
 5267               	         ADR     TRAP           | 25  TRAP
 5267 a570 1064      	>  DC.W MTRAP-XBASE
 5268               	         ADR     UNLK           | 26  UNLK
 5268 a572 1076      	>  DC.W MUNLK-XBASE
 5269               	         ADR     MOVEM          | 27  MOVEM
 5269 a574 0CC2      	>  DC.W MMOVEM-XBASE
 5270               	         ADR     ANDI           | 28  ANDI EORI ORI
 5270 a576 0938      	>  DC.W MANDI-XBASE
 5271               	         ADR     SCC            | 29  NBCD SCC TAS
 5271 a578 0B2C      	>  DC.W MSCC-XBASE
 5272               	         ADR     BCLR           | 30  BCLR
 5272 a57a 0B9E      	>  DC.W MBCLR-XBASE
 5273               	         ADR     BTST           | 31  BTST
 5273 a57c 0BAA      	>  DC.W MBTST-XBASE
 5274               	         ADR     MOVEA          | 32  MOVEA
 5274 a57e 0F8C      	>  DC.W MMOVEA-XBASE
 5275               	         ADR     MOVEP          | 33  MOVEP
 5275 a580 0DC2      	>  DC.W MMOVEP-XBASE
 5276               	         ADR     CMP            | 34  CMP
 5276 a582 0856      	>  DC.W MCMP-XBASE
 5277               	         ADR     EOR            | 35  EOR
 5277 a584 0A7E      	>  DC.W MEOR-XBASE
 5278               	         ADR     PEA            | 36  PEA
 5278 a586 0FFE      	>  DC.W MPEA-XBASE
 5279               	         ADR     DC             | 37  DC.W
 5279 a588 1080      	>  DC.W MDC-XBASE
 5280               	
 5281               	* \1,\2 = MNEMONIC (\2 SIGN BIT SET AS LAST CHARACTER)
 5282               	* \3    = INDEX TO TABLKEYS
 5283               	* \4,\5 = FIRST WORD MASK
68K GAS  tutor13.s 			page 100


 5284               	* \6    = NO OPERAND ALLOWED IF SIGN SET
 5285               	* \7    = .S ALLOWED (.W NOT ALLOWED)
 5286               	OPC:     .MACRO a1,a2,a3,a4,a5,a6,a7
 5287               	         .ascii  "\a1"
 5288               	         DC.B    \a2
 5289               	         DC.B    \a3 + \a6 + \a7
 5290               	         DC.B    0x\a4
 5291               	         DC.B    0x\a5
 5292               	         .ENDM
 5293               	
 5294               	NOC      =       0x80           | (BIT 7 SET) NO OPERAND
 5295               	NW       =       0x40           | (BIT 6 SET) .W NOT ALLOWED
 5296               	
 5297               	TBLOPC:  OPC     ABC,0xc4,0,C1,00,0,0  | ABCD
 5297 a58a 4142 43   	>  .ascii "ABC"
 5297 a58d C4        	>  DC.B 0xc4
 5297 a58e 00        	>  DC.B 0+0+0
 5297 a58f C1        	>  DC.B 0xC1
 5297 a590 00        	>  DC.B 0x00
 5298               	         OPC     ADD,0xc1,2,D0,C0,0,0  | ADDA
 5298 a591 4144 44   	>  .ascii "ADD"
 5298 a594 C1        	>  DC.B 0xc1
 5298 a595 02        	>  DC.B 2+0+0
 5298 a596 D0        	>  DC.B 0xD0
 5298 a597 C0        	>  DC.B 0xC0
 5299               	         OPC     ADD,0xc9,3,06,00,0,0  | ADDI
 5299 a598 4144 44   	>  .ascii "ADD"
 5299 a59b C9        	>  DC.B 0xc9
 5299 a59c 03        	>  DC.B 3+0+0
 5299 a59d 06        	>  DC.B 0x06
 5299 a59e 00        	>  DC.B 0x00
 5300               	         OPC     ADD,0xd1,4,50,00,0,0  | ADDQ
 5300 a59f 4144 44   	>  .ascii "ADD"
 5300 a5a2 D1        	>  DC.B 0xd1
 5300 a5a3 04        	>  DC.B 4+0+0
 5300 a5a4 50        	>  DC.B 0x50
 5300 a5a5 00        	>  DC.B 0x00
 5301               	         OPC     ADD,0xd8,5,D1,00,0,0  | ADDX
 5301 a5a6 4144 44   	>  .ascii "ADD"
 5301 a5a9 D8        	>  DC.B 0xd8
 5301 a5aa 05        	>  DC.B 5+0+0
 5301 a5ab D1        	>  DC.B 0xD1
 5301 a5ac 00        	>  DC.B 0x00
 5302               	         OPC     AD,0xc4,1,D0,00,0,0   | ADD
 5302 a5ad 4144      	>  .ascii "AD"
 5302 a5af C4        	>  DC.B 0xc4
 5302 a5b0 01        	>  DC.B 1+0+0
 5302 a5b1 D0        	>  DC.B 0xD0
 5302 a5b2 00        	>  DC.B 0x00
 5303               	         OPC     AND,0xc9,28,02,00,0,0 | ANDI
 5303 a5b3 414E 44   	>  .ascii "AND"
 5303 a5b6 C9        	>  DC.B 0xc9
 5303 a5b7 1C        	>  DC.B 28+0+0
 5303 a5b8 02        	>  DC.B 0x02
 5303 a5b9 00        	>  DC.B 0x00
 5304               	         OPC     AN,0xc4,6,C0,00,0,0   | AND
 5304 a5ba 414E      	>  .ascii "AN"
68K GAS  tutor13.s 			page 101


 5304 a5bc C4        	>  DC.B 0xc4
 5304 a5bd 06        	>  DC.B 6+0+0
 5304 a5be C0        	>  DC.B 0xC0
 5304 a5bf 00        	>  DC.B 0x00
 5305               	         OPC     AS,0xcc,7,E1,00,0,0   | ASL
 5305 a5c0 4153      	>  .ascii "AS"
 5305 a5c2 CC        	>  DC.B 0xcc
 5305 a5c3 07        	>  DC.B 7+0+0
 5305 a5c4 E1        	>  DC.B 0xE1
 5305 a5c5 00        	>  DC.B 0x00
 5306               	         OPC     AS,0xd2,07,E0,00,0,0  | ASR
 5306 a5c6 4153      	>  .ascii "AS"
 5306 a5c8 D2        	>  DC.B 0xd2
 5306 a5c9 07        	>  DC.B 07+0+0
 5306 a5ca E0        	>  DC.B 0xE0
 5306 a5cb 00        	>  DC.B 0x00
 5307               	         OPC     BR,0xc1,10,60,00,0,NW | BRA
 5307 a5cc 4252      	>  .ascii "BR"
 5307 a5ce C1        	>  DC.B 0xc1
 5307 a5cf 4A        	>  DC.B 10+0+NW
 5307 a5d0 60        	>  DC.B 0x60
 5307 a5d1 00        	>  DC.B 0x00
 5308               	         OPC     BH,0xc9,10,62,00,0,NW | BHI
 5308 a5d2 4248      	>  .ascii "BH"
 5308 a5d4 C9        	>  DC.B 0xc9
 5308 a5d5 4A        	>  DC.B 10+0+NW
 5308 a5d6 62        	>  DC.B 0x62
 5308 a5d7 00        	>  DC.B 0x00
 5309               	         OPC     BL,0xd3,10,63,00,0,NW | BLS
 5309 a5d8 424C      	>  .ascii "BL"
 5309 a5da D3        	>  DC.B 0xd3
 5309 a5db 4A        	>  DC.B 10+0+NW
 5309 a5dc 63        	>  DC.B 0x63
 5309 a5dd 00        	>  DC.B 0x00
 5310               	         OPC     BC,0xc3,10,64,00,0,NW | BCC
 5310 a5de 4243      	>  .ascii "BC"
 5310 a5e0 C3        	>  DC.B 0xc3
 5310 a5e1 4A        	>  DC.B 10+0+NW
 5310 a5e2 64        	>  DC.B 0x64
 5310 a5e3 00        	>  DC.B 0x00
 5311               	         OPC     BC,0xd3,10,65,00,0,NW | BCS
 5311 a5e4 4243      	>  .ascii "BC"
 5311 a5e6 D3        	>  DC.B 0xd3
 5311 a5e7 4A        	>  DC.B 10+0+NW
 5311 a5e8 65        	>  DC.B 0x65
 5311 a5e9 00        	>  DC.B 0x00
 5312               	         OPC     BN,0xc5,10,66,00,0,NW | BNE
 5312 a5ea 424E      	>  .ascii "BN"
 5312 a5ec C5        	>  DC.B 0xc5
 5312 a5ed 4A        	>  DC.B 10+0+NW
 5312 a5ee 66        	>  DC.B 0x66
 5312 a5ef 00        	>  DC.B 0x00
 5313               	         OPC     BE,0xd1,10,67,00,0,NW | BEQ
 5313 a5f0 4245      	>  .ascii "BE"
 5313 a5f2 D1        	>  DC.B 0xd1
 5313 a5f3 4A        	>  DC.B 10+0+NW
 5313 a5f4 67        	>  DC.B 0x67
68K GAS  tutor13.s 			page 102


 5313 a5f5 00        	>  DC.B 0x00
 5314               	         OPC     BV,0xc3,10,68,00,0,NW | BVC
 5314 a5f6 4256      	>  .ascii "BV"
 5314 a5f8 C3        	>  DC.B 0xc3
 5314 a5f9 4A        	>  DC.B 10+0+NW
 5314 a5fa 68        	>  DC.B 0x68
 5314 a5fb 00        	>  DC.B 0x00
 5315               	         OPC     BV,0xd3,10,69,00,0,NW | BVS
 5315 a5fc 4256      	>  .ascii "BV"
 5315 a5fe D3        	>  DC.B 0xd3
 5315 a5ff 4A        	>  DC.B 10+0+NW
 5315 a600 69        	>  DC.B 0x69
 5315 a601 00        	>  DC.B 0x00
 5316               	         OPC     BP,0xcc,10,6A,00,0,NW | BPL
 5316 a602 4250      	>  .ascii "BP"
 5316 a604 CC        	>  DC.B 0xcc
 5316 a605 4A        	>  DC.B 10+0+NW
 5316 a606 6A        	>  DC.B 0x6A
 5316 a607 00        	>  DC.B 0x00
 5317               	         OPC     BM,0xc9,10,6B,00,0,NW | BMI
 5317 a608 424D      	>  .ascii "BM"
 5317 a60a C9        	>  DC.B 0xc9
 5317 a60b 4A        	>  DC.B 10+0+NW
 5317 a60c 6B        	>  DC.B 0x6B
 5317 a60d 00        	>  DC.B 0x00
 5318               	         OPC     BG,0xc5,10,6C,00,0,NW | BGE
 5318 a60e 4247      	>  .ascii "BG"
 5318 a610 C5        	>  DC.B 0xc5
 5318 a611 4A        	>  DC.B 10+0+NW
 5318 a612 6C        	>  DC.B 0x6C
 5318 a613 00        	>  DC.B 0x00
 5319               	         OPC     BL,0xd4,10,6D,00,0,NW | BLT
 5319 a614 424C      	>  .ascii "BL"
 5319 a616 D4        	>  DC.B 0xd4
 5319 a617 4A        	>  DC.B 10+0+NW
 5319 a618 6D        	>  DC.B 0x6D
 5319 a619 00        	>  DC.B 0x00
 5320               	         OPC     BG,0xd4,10,6E,00,0,NW | BGT
 5320 a61a 4247      	>  .ascii "BG"
 5320 a61c D4        	>  DC.B 0xd4
 5320 a61d 4A        	>  DC.B 10+0+NW
 5320 a61e 6E        	>  DC.B 0x6E
 5320 a61f 00        	>  DC.B 0x00
 5321               	         OPC     BL,0xc5,10,6F,00,0,NW | BLE
 5321 a620 424C      	>  .ascii "BL"
 5321 a622 C5        	>  DC.B 0xc5
 5321 a623 4A        	>  DC.B 10+0+NW
 5321 a624 6F        	>  DC.B 0x6F
 5321 a625 00        	>  DC.B 0x00
 5322               	         OPC     BCH,0xc7,9,01,40,0,0  | BCHG
 5322 a626 4243 48   	>  .ascii "BCH"
 5322 a629 C7        	>  DC.B 0xc7
 5322 a62a 09        	>  DC.B 9+0+0
 5322 a62b 01        	>  DC.B 0x01
 5322 a62c 40        	>  DC.B 0x40
 5323               	         OPC     BCL,0xd2,30,01,80,0,0 | BCLR      DYNAMIC
 5323 a62d 4243 4C   	>  .ascii "BCL"
68K GAS  tutor13.s 			page 103


 5323 a630 D2        	>  DC.B 0xd2
 5323 a631 1E        	>  DC.B 30+0+0
 5323 a632 01        	>  DC.B 0x01
 5323 a633 80        	>  DC.B 0x80
 5324               	         OPC     BSE,0xd4,11,01,C0,0,0 | BSET
 5324 a634 4253 45   	>  .ascii "BSE"
 5324 a637 D4        	>  DC.B 0xd4
 5324 a638 0B        	>  DC.B 11+0+0
 5324 a639 01        	>  DC.B 0x01
 5324 a63a C0        	>  DC.B 0xC0
 5325               	         OPC     BS,0xd2,10,61,00,0,NW | BSR
 5325 a63b 4253      	>  .ascii "BS"
 5325 a63d D2        	>  DC.B 0xd2
 5325 a63e 4A        	>  DC.B 10+0+NW
 5325 a63f 61        	>  DC.B 0x61
 5325 a640 00        	>  DC.B 0x00
 5326               	         OPC     BTS,0xd4,31,01,00,0,0 | BTST
 5326 a641 4254 53   	>  .ascii "BTS"
 5326 a644 D4        	>  DC.B 0xd4
 5326 a645 1F        	>  DC.B 31+0+0
 5326 a646 01        	>  DC.B 0x01
 5326 a647 00        	>  DC.B 0x00
 5327               	         OPC     B,0xd4,10,60,00,0,NW  | BT
 5327 a648 42        	>  .ascii "B"
 5327 a649 D4        	>  DC.B 0xd4
 5327 a64a 4A        	>  DC.B 10+0+NW
 5327 a64b 60        	>  DC.B 0x60
 5327 a64c 00        	>  DC.B 0x00
 5328               	         OPC     CH,0xcb,12,41,80,0,0  | CHK
 5328 a64d 4348      	>  .ascii "CH"
 5328 a64f CB        	>  DC.B 0xcb
 5328 a650 0C        	>  DC.B 12+0+0
 5328 a651 41        	>  DC.B 0x41
 5328 a652 80        	>  DC.B 0x80
 5329               	         OPC     CL,0xd2,13,42,00,0,0  | CLR
 5329 a653 434C      	>  .ascii "CL"
 5329 a655 D2        	>  DC.B 0xd2
 5329 a656 0D        	>  DC.B 13+0+0
 5329 a657 42        	>  DC.B 0x42
 5329 a658 00        	>  DC.B 0x00
 5330               	         OPC     CMP,0xc1,2,B0,C0,0,0  | CMPA
 5330 a659 434D 50   	>  .ascii "CMP"
 5330 a65c C1        	>  DC.B 0xc1
 5330 a65d 02        	>  DC.B 2+0+0
 5330 a65e B0        	>  DC.B 0xB0
 5330 a65f C0        	>  DC.B 0xC0
 5331               	         OPC     CMP,0xc9,3,0C,00,0,0  | CMPI
 5331 a660 434D 50   	>  .ascii "CMP"
 5331 a663 C9        	>  DC.B 0xc9
 5331 a664 03        	>  DC.B 3+0+0
 5331 a665 0C        	>  DC.B 0x0C
 5331 a666 00        	>  DC.B 0x00
 5332               	         OPC     CMP,0xcd,14,B1,08,0,0 | CMPM
 5332 a667 434D 50   	>  .ascii "CMP"
 5332 a66a CD        	>  DC.B 0xcd
 5332 a66b 0E        	>  DC.B 14+0+0
 5332 a66c B1        	>  DC.B 0xB1
68K GAS  tutor13.s 			page 104


 5332 a66d 08        	>  DC.B 0x08
 5333               	         OPC     CM,0xd0,34,B0,00,0,0  | CMP
 5333 a66e 434D      	>  .ascii "CM"
 5333 a670 D0        	>  DC.B 0xd0
 5333 a671 22        	>  DC.B 34+0+0
 5333 a672 B0        	>  DC.B 0xB0
 5333 a673 00        	>  DC.B 0x00
 5334               	         OPC     DB,0xd4,8,50,C8,0,NW  | DBT
 5334 a674 4442      	>  .ascii "DB"
 5334 a676 D4        	>  DC.B 0xd4
 5334 a677 48        	>  DC.B 8+0+NW
 5334 a678 50        	>  DC.B 0x50
 5334 a679 C8        	>  DC.B 0xC8
 5335               	         OPC     DB,0xc6,8,51,C8,0,NW  | DBF
 5335 a67a 4442      	>  .ascii "DB"
 5335 a67c C6        	>  DC.B 0xc6
 5335 a67d 48        	>  DC.B 8+0+NW
 5335 a67e 51        	>  DC.B 0x51
 5335 a67f C8        	>  DC.B 0xC8
 5336               	         OPC     DBR,0xc1,8,51,C8,0,NW | DBRA
 5336 a680 4442 52   	>  .ascii "DBR"
 5336 a683 C1        	>  DC.B 0xc1
 5336 a684 48        	>  DC.B 8+0+NW
 5336 a685 51        	>  DC.B 0x51
 5336 a686 C8        	>  DC.B 0xC8
 5337               	         OPC     DBH,0xc9,8,52,C8,0,NW | DBHI
 5337 a687 4442 48   	>  .ascii "DBH"
 5337 a68a C9        	>  DC.B 0xc9
 5337 a68b 48        	>  DC.B 8+0+NW
 5337 a68c 52        	>  DC.B 0x52
 5337 a68d C8        	>  DC.B 0xC8
 5338               	         OPC     DBL,0xd3,8,53,C8,0,NW | DBLS
 5338 a68e 4442 4C   	>  .ascii "DBL"
 5338 a691 D3        	>  DC.B 0xd3
 5338 a692 48        	>  DC.B 8+0+NW
 5338 a693 53        	>  DC.B 0x53
 5338 a694 C8        	>  DC.B 0xC8
 5339               	         OPC     DBC,0xc3,8,54,C8,0,NW | DBCC
 5339 a695 4442 43   	>  .ascii "DBC"
 5339 a698 C3        	>  DC.B 0xc3
 5339 a699 48        	>  DC.B 8+0+NW
 5339 a69a 54        	>  DC.B 0x54
 5339 a69b C8        	>  DC.B 0xC8
 5340               	         OPC     DBC,0xd3,8,55,C8,0,NW | DBCS
 5340 a69c 4442 43   	>  .ascii "DBC"
 5340 a69f D3        	>  DC.B 0xd3
 5340 a6a0 48        	>  DC.B 8+0+NW
 5340 a6a1 55        	>  DC.B 0x55
 5340 a6a2 C8        	>  DC.B 0xC8
 5341               	         OPC     DBN,0xc5,8,56,C8,0,NW | DBNE
 5341 a6a3 4442 4E   	>  .ascii "DBN"
 5341 a6a6 C5        	>  DC.B 0xc5
 5341 a6a7 48        	>  DC.B 8+0+NW
 5341 a6a8 56        	>  DC.B 0x56
 5341 a6a9 C8        	>  DC.B 0xC8
 5342               	         OPC     DBE,0xd1,8,57,C8,0,NW | DBEQ
 5342 a6aa 4442 45   	>  .ascii "DBE"
68K GAS  tutor13.s 			page 105


 5342 a6ad D1        	>  DC.B 0xd1
 5342 a6ae 48        	>  DC.B 8+0+NW
 5342 a6af 57        	>  DC.B 0x57
 5342 a6b0 C8        	>  DC.B 0xC8
 5343               	         OPC     DBV,0xc3,8,58,C8,0,NW | DBVC
 5343 a6b1 4442 56   	>  .ascii "DBV"
 5343 a6b4 C3        	>  DC.B 0xc3
 5343 a6b5 48        	>  DC.B 8+0+NW
 5343 a6b6 58        	>  DC.B 0x58
 5343 a6b7 C8        	>  DC.B 0xC8
 5344               	         OPC     DBV,0xd3,8,59,C8,0,NW | DBVS
 5344 a6b8 4442 56   	>  .ascii "DBV"
 5344 a6bb D3        	>  DC.B 0xd3
 5344 a6bc 48        	>  DC.B 8+0+NW
 5344 a6bd 59        	>  DC.B 0x59
 5344 a6be C8        	>  DC.B 0xC8
 5345               	         OPC     DBP,0xcc,8,5A,C8,0,NW | DBPL
 5345 a6bf 4442 50   	>  .ascii "DBP"
 5345 a6c2 CC        	>  DC.B 0xcc
 5345 a6c3 48        	>  DC.B 8+0+NW
 5345 a6c4 5A        	>  DC.B 0x5A
 5345 a6c5 C8        	>  DC.B 0xC8
 5346               	         OPC     DBM,0xc9,8,5B,C8,0,NW | DBMI
 5346 a6c6 4442 4D   	>  .ascii "DBM"
 5346 a6c9 C9        	>  DC.B 0xc9
 5346 a6ca 48        	>  DC.B 8+0+NW
 5346 a6cb 5B        	>  DC.B 0x5B
 5346 a6cc C8        	>  DC.B 0xC8
 5347               	         OPC     DBG,0xc5,8,5C,C8,0,NW | DBGE
 5347 a6cd 4442 47   	>  .ascii "DBG"
 5347 a6d0 C5        	>  DC.B 0xc5
 5347 a6d1 48        	>  DC.B 8+0+NW
 5347 a6d2 5C        	>  DC.B 0x5C
 5347 a6d3 C8        	>  DC.B 0xC8
 5348               	         OPC     DBL,0xd4,8,5D,C8,0,NW | DBLT
 5348 a6d4 4442 4C   	>  .ascii "DBL"
 5348 a6d7 D4        	>  DC.B 0xd4
 5348 a6d8 48        	>  DC.B 8+0+NW
 5348 a6d9 5D        	>  DC.B 0x5D
 5348 a6da C8        	>  DC.B 0xC8
 5349               	         OPC     DBG,0xd4,8,5E,C8,0,NW | DBGT
 5349 a6db 4442 47   	>  .ascii "DBG"
 5349 a6de D4        	>  DC.B 0xd4
 5349 a6df 48        	>  DC.B 8+0+NW
 5349 a6e0 5E        	>  DC.B 0x5E
 5349 a6e1 C8        	>  DC.B 0xC8
 5350               	         OPC     DBL,0xc5,8,5F,C8,0,NW | DBLE
 5350 a6e2 4442 4C   	>  .ascii "DBL"
 5350 a6e5 C5        	>  DC.B 0xc5
 5350 a6e6 48        	>  DC.B 8+0+NW
 5350 a6e7 5F        	>  DC.B 0x5F
 5350 a6e8 C8        	>  DC.B 0xC8
 5351               	         OPC     DC.,0xd7,37,00,00,0,0 | DC.W  (WORD ONLY)
 5351 a6e9 4443 2E   	>  .ascii "DC."
 5351 a6ec D7        	>  DC.B 0xd7
 5351 a6ed 25        	>  DC.B 37+0+0
 5351 a6ee 00        	>  DC.B 0x00
68K GAS  tutor13.s 			page 106


 5351 a6ef 00        	>  DC.B 0x00
 5352               	         OPC     DIV,0xd3,12,81,C0,0,0 | DIVS
 5352 a6f0 4449 56   	>  .ascii "DIV"
 5352 a6f3 D3        	>  DC.B 0xd3
 5352 a6f4 0C        	>  DC.B 12+0+0
 5352 a6f5 81        	>  DC.B 0x81
 5352 a6f6 C0        	>  DC.B 0xC0
 5353               	         OPC     DIV,0xd5,12,80,C0,0,0 | DIVU
 5353 a6f7 4449 56   	>  .ascii "DIV"
 5353 a6fa D5        	>  DC.B 0xd5
 5353 a6fb 0C        	>  DC.B 12+0+0
 5353 a6fc 80        	>  DC.B 0x80
 5353 a6fd C0        	>  DC.B 0xC0
 5354               	         OPC     EOR,0xc9,28,0A,00,0,0 | EORI
 5354 a6fe 454F 52   	>  .ascii "EOR"
 5354 a701 C9        	>  DC.B 0xc9
 5354 a702 1C        	>  DC.B 28+0+0
 5354 a703 0A        	>  DC.B 0x0A
 5354 a704 00        	>  DC.B 0x00
 5355               	         OPC     EO,0xd2,35,B1,00,0,0  | EOR
 5355 a705 454F      	>  .ascii "EO"
 5355 a707 D2        	>  DC.B 0xd2
 5355 a708 23        	>  DC.B 35+0+0
 5355 a709 B1        	>  DC.B 0xB1
 5355 a70a 00        	>  DC.B 0x00
 5356               	         OPC     EX,0xc7,16,C1,00,0,0  | EXG
 5356 a70b 4558      	>  .ascii "EX"
 5356 a70d C7        	>  DC.B 0xc7
 5356 a70e 10        	>  DC.B 16+0+0
 5356 a70f C1        	>  DC.B 0xC1
 5356 a710 00        	>  DC.B 0x00
 5357               	         OPC     EX,0xd4,17,48,00,0,0  | EXT
 5357 a711 4558      	>  .ascii "EX"
 5357 a713 D4        	>  DC.B 0xd4
 5357 a714 11        	>  DC.B 17+0+0
 5357 a715 48        	>  DC.B 0x48
 5357 a716 00        	>  DC.B 0x00
 5358               	         OPC     JM,0xd0,18,4E,C0,0,NW | JMP
 5358 a717 4A4D      	>  .ascii "JM"
 5358 a719 D0        	>  DC.B 0xd0
 5358 a71a 52        	>  DC.B 18+0+NW
 5358 a71b 4E        	>  DC.B 0x4E
 5358 a71c C0        	>  DC.B 0xC0
 5359               	         OPC     JS,0xd2,18,4E,80,0,NW | JSR
 5359 a71d 4A53      	>  .ascii "JS"
 5359 a71f D2        	>  DC.B 0xd2
 5359 a720 52        	>  DC.B 18+0+NW
 5359 a721 4E        	>  DC.B 0x4E
 5359 a722 80        	>  DC.B 0x80
 5360               	         OPC     LE,0xc1,19,41,C0,0,0  | LEA
 5360 a723 4C45      	>  .ascii "LE"
 5360 a725 C1        	>  DC.B 0xc1
 5360 a726 13        	>  DC.B 19+0+0
 5360 a727 41        	>  DC.B 0x41
 5360 a728 C0        	>  DC.B 0xC0
 5361               	         OPC     LIN,0xcb,20,4E,50,0,0 | LINK
 5361 a729 4C49 4E   	>  .ascii "LIN"
68K GAS  tutor13.s 			page 107


 5361 a72c CB        	>  DC.B 0xcb
 5361 a72d 14        	>  DC.B 20+0+0
 5361 a72e 4E        	>  DC.B 0x4E
 5361 a72f 50        	>  DC.B 0x50
 5362               	         OPC     LS,0xcc,7,E3,08,0,0   | LSL
 5362 a730 4C53      	>  .ascii "LS"
 5362 a732 CC        	>  DC.B 0xcc
 5362 a733 07        	>  DC.B 7+0+0
 5362 a734 E3        	>  DC.B 0xE3
 5362 a735 08        	>  DC.B 0x08
 5363               	         OPC     LS,0xd2,07,E2,08,0,0  | LSR
 5363 a736 4C53      	>  .ascii "LS"
 5363 a738 D2        	>  DC.B 0xd2
 5363 a739 07        	>  DC.B 07+0+0
 5363 a73a E2        	>  DC.B 0xE2
 5363 a73b 08        	>  DC.B 0x08
 5364               	         OPC     MOVE,0xc1,32,00,04,0,0| MOVEA
 5364 a73c 4D4F 5645 	>  .ascii "MOVE"
 5364 a740 C1        	>  DC.B 0xc1
 5364 a741 20        	>  DC.B 32+0+0
 5364 a742 00        	>  DC.B 0x00
 5364 a743 04        	>  DC.B 0x04
 5365               	         OPC     MOVE,0xcd,27,48,80,0,0| MOVEM
 5365 a744 4D4F 5645 	>  .ascii "MOVE"
 5365 a748 CD        	>  DC.B 0xcd
 5365 a749 1B        	>  DC.B 27+0+0
 5365 a74a 48        	>  DC.B 0x48
 5365 a74b 80        	>  DC.B 0x80
 5366               	         OPC     MOVE,0xd0,33,01,08,0,0| MOVEP
 5366 a74c 4D4F 5645 	>  .ascii "MOVE"
 5366 a750 D0        	>  DC.B 0xd0
 5366 a751 21        	>  DC.B 33+0+0
 5366 a752 01        	>  DC.B 0x01
 5366 a753 08        	>  DC.B 0x08
 5367               	         OPC     MOVE,0xd1,15,70,00,0,0| MOVEQ
 5367 a754 4D4F 5645 	>  .ascii "MOVE"
 5367 a758 D1        	>  DC.B 0xd1
 5367 a759 0F        	>  DC.B 15+0+0
 5367 a75a 70        	>  DC.B 0x70
 5367 a75b 00        	>  DC.B 0x00
 5368               	         OPC     MOV,0xc5,21,00,00,0,0 | MOVE
 5368 a75c 4D4F 56   	>  .ascii "MOV"
 5368 a75f C5        	>  DC.B 0xc5
 5368 a760 15        	>  DC.B 21+0+0
 5368 a761 00        	>  DC.B 0x00
 5368 a762 00        	>  DC.B 0x00
 5369               	         OPC     MUL,0xd3,12,C1,C0,0,0 | MULS
 5369 a763 4D55 4C   	>  .ascii "MUL"
 5369 a766 D3        	>  DC.B 0xd3
 5369 a767 0C        	>  DC.B 12+0+0
 5369 a768 C1        	>  DC.B 0xC1
 5369 a769 C0        	>  DC.B 0xC0
 5370               	         OPC     MUL,0xd5,12,C0,C0,0,0 | MULU
 5370 a76a 4D55 4C   	>  .ascii "MUL"
 5370 a76d D5        	>  DC.B 0xd5
 5370 a76e 0C        	>  DC.B 12+0+0
 5370 a76f C0        	>  DC.B 0xC0
68K GAS  tutor13.s 			page 108


 5370 a770 C0        	>  DC.B 0xC0
 5371               	         OPC     NBC,0xc4,29,48,0,0,0  | NBCD
 5371 a771 4E42 43   	>  .ascii "NBC"
 5371 a774 C4        	>  DC.B 0xc4
 5371 a775 1D        	>  DC.B 29+0+0
 5371 a776 48        	>  DC.B 0x48
 5371 a777 00        	>  DC.B 0x0
 5372               	         OPC     NEG,0xd8,13,40,00,0,0 | NEGX
 5372 a778 4E45 47   	>  .ascii "NEG"
 5372 a77b D8        	>  DC.B 0xd8
 5372 a77c 0D        	>  DC.B 13+0+0
 5372 a77d 40        	>  DC.B 0x40
 5372 a77e 00        	>  DC.B 0x00
 5373               	         OPC     NE,0xc7,13,44,00,0,0  | NEG
 5373 a77f 4E45      	>  .ascii "NE"
 5373 a781 C7        	>  DC.B 0xc7
 5373 a782 0D        	>  DC.B 13+0+0
 5373 a783 44        	>  DC.B 0x44
 5373 a784 00        	>  DC.B 0x00
 5374               	         OPC     NO,0xd0,22,4E,71,NOC,0| NOP
 5374 a785 4E4F      	>  .ascii "NO"
 5374 a787 D0        	>  DC.B 0xd0
 5374 a788 96        	>  DC.B 22+NOC+0
 5374 a789 4E        	>  DC.B 0x4E
 5374 a78a 71        	>  DC.B 0x71
 5375               	         OPC     NO,0xd4,13,46,00,0,0  | NOT
 5375 a78b 4E4F      	>  .ascii "NO"
 5375 a78d D4        	>  DC.B 0xd4
 5375 a78e 0D        	>  DC.B 13+0+0
 5375 a78f 46        	>  DC.B 0x46
 5375 a790 00        	>  DC.B 0x00
 5376               	         OPC     OR,0xc9,28,00,00,0,0  | ORI
 5376 a791 4F52      	>  .ascii "OR"
 5376 a793 C9        	>  DC.B 0xc9
 5376 a794 1C        	>  DC.B 28+0+0
 5376 a795 00        	>  DC.B 0x00
 5376 a796 00        	>  DC.B 0x00
 5377               	         OPC     O,0xd2,6,80,00,0,0    | OR
 5377 a797 4F        	>  .ascii "O"
 5377 a798 D2        	>  DC.B 0xd2
 5377 a799 06        	>  DC.B 6+0+0
 5377 a79a 80        	>  DC.B 0x80
 5377 a79b 00        	>  DC.B 0x00
 5378               	         OPC     PE,0xc1,36,48,40,0,0  | PEA
 5378 a79c 5045      	>  .ascii "PE"
 5378 a79e C1        	>  DC.B 0xc1
 5378 a79f 24        	>  DC.B 36+0+0
 5378 a7a0 48        	>  DC.B 0x48
 5378 a7a1 40        	>  DC.B 0x40
 5379               	         OPC     RESE,0xd4,22,4E,70,NOC,0 | RESET
 5379 a7a2 5245 5345 	>  .ascii "RESE"
 5379 a7a6 D4        	>  DC.B 0xd4
 5379 a7a7 96        	>  DC.B 22+NOC+0
 5379 a7a8 4E        	>  DC.B 0x4E
 5379 a7a9 70        	>  DC.B 0x70
 5380               	         OPC     RO,0xcc,7,E7,18,0,0   | ROL
 5380 a7aa 524F      	>  .ascii "RO"
68K GAS  tutor13.s 			page 109


 5380 a7ac CC        	>  DC.B 0xcc
 5380 a7ad 07        	>  DC.B 7+0+0
 5380 a7ae E7        	>  DC.B 0xE7
 5380 a7af 18        	>  DC.B 0x18
 5381               	         OPC     RO,0xd2,07,E6,18,0,0  | ROR
 5381 a7b0 524F      	>  .ascii "RO"
 5381 a7b2 D2        	>  DC.B 0xd2
 5381 a7b3 07        	>  DC.B 07+0+0
 5381 a7b4 E6        	>  DC.B 0xE6
 5381 a7b5 18        	>  DC.B 0x18
 5382               	         OPC     ROX,0xcc,7,E5,10,0,0  | ROXL
 5382 a7b6 524F 58   	>  .ascii "ROX"
 5382 a7b9 CC        	>  DC.B 0xcc
 5382 a7ba 07        	>  DC.B 7+0+0
 5382 a7bb E5        	>  DC.B 0xE5
 5382 a7bc 10        	>  DC.B 0x10
 5383               	         OPC     ROX,0xd2,07,E4,10,0,0 | ROXR
 5383 a7bd 524F 58   	>  .ascii "ROX"
 5383 a7c0 D2        	>  DC.B 0xd2
 5383 a7c1 07        	>  DC.B 07+0+0
 5383 a7c2 E4        	>  DC.B 0xE4
 5383 a7c3 10        	>  DC.B 0x10
 5384               	         OPC     RT,0xc5,22,4E,73,NOC,0| RTE
 5384 a7c4 5254      	>  .ascii "RT"
 5384 a7c6 C5        	>  DC.B 0xc5
 5384 a7c7 96        	>  DC.B 22+NOC+0
 5384 a7c8 4E        	>  DC.B 0x4E
 5384 a7c9 73        	>  DC.B 0x73
 5385               	         OPC     RT,0xd2,22,4E,77,NOC,0| RTR
 5385 a7ca 5254      	>  .ascii "RT"
 5385 a7cc D2        	>  DC.B 0xd2
 5385 a7cd 96        	>  DC.B 22+NOC+0
 5385 a7ce 4E        	>  DC.B 0x4E
 5385 a7cf 77        	>  DC.B 0x77
 5386               	         OPC     RT,0xd3,22,4E,75,NOC,0| RTS
 5386 a7d0 5254      	>  .ascii "RT"
 5386 a7d2 D3        	>  DC.B 0xd3
 5386 a7d3 96        	>  DC.B 22+NOC+0
 5386 a7d4 4E        	>  DC.B 0x4E
 5386 a7d5 75        	>  DC.B 0x75
 5387               	         OPC     SBC,0xc4,0,81,00,0,0  | SBCD
 5387 a7d6 5342 43   	>  .ascii "SBC"
 5387 a7d9 C4        	>  DC.B 0xc4
 5387 a7da 00        	>  DC.B 0+0+0
 5387 a7db 81        	>  DC.B 0x81
 5387 a7dc 00        	>  DC.B 0x00
 5388               	         OPC     S,0xc6,29,51,C0,0,0   | SF
 5388 a7dd 53        	>  .ascii "S"
 5388 a7de C6        	>  DC.B 0xc6
 5388 a7df 1D        	>  DC.B 29+0+0
 5388 a7e0 51        	>  DC.B 0x51
 5388 a7e1 C0        	>  DC.B 0xC0
 5389               	         OPC     SH,0xc9,29,52,C0,0,0  | SHI
 5389 a7e2 5348      	>  .ascii "SH"
 5389 a7e4 C9        	>  DC.B 0xc9
 5389 a7e5 1D        	>  DC.B 29+0+0
 5389 a7e6 52        	>  DC.B 0x52
68K GAS  tutor13.s 			page 110


 5389 a7e7 C0        	>  DC.B 0xC0
 5390               	         OPC     SL,0xd3,29,53,C0,0,0  | SLS
 5390 a7e8 534C      	>  .ascii "SL"
 5390 a7ea D3        	>  DC.B 0xd3
 5390 a7eb 1D        	>  DC.B 29+0+0
 5390 a7ec 53        	>  DC.B 0x53
 5390 a7ed C0        	>  DC.B 0xC0
 5391               	         OPC     SC,0xc3,29,54,C0,0,0  | SCC
 5391 a7ee 5343      	>  .ascii "SC"
 5391 a7f0 C3        	>  DC.B 0xc3
 5391 a7f1 1D        	>  DC.B 29+0+0
 5391 a7f2 54        	>  DC.B 0x54
 5391 a7f3 C0        	>  DC.B 0xC0
 5392               	         OPC     SC,0xd3,29,55,C0,0,0  | SCS
 5392 a7f4 5343      	>  .ascii "SC"
 5392 a7f6 D3        	>  DC.B 0xd3
 5392 a7f7 1D        	>  DC.B 29+0+0
 5392 a7f8 55        	>  DC.B 0x55
 5392 a7f9 C0        	>  DC.B 0xC0
 5393               	         OPC     SN,0xc5,29,56,C0,0,0  | SNE
 5393 a7fa 534E      	>  .ascii "SN"
 5393 a7fc C5        	>  DC.B 0xc5
 5393 a7fd 1D        	>  DC.B 29+0+0
 5393 a7fe 56        	>  DC.B 0x56
 5393 a7ff C0        	>  DC.B 0xC0
 5394               	         OPC     SE,0xd1,29,57,C0,0,0  | SEQ
 5394 a800 5345      	>  .ascii "SE"
 5394 a802 D1        	>  DC.B 0xd1
 5394 a803 1D        	>  DC.B 29+0+0
 5394 a804 57        	>  DC.B 0x57
 5394 a805 C0        	>  DC.B 0xC0
 5395               	         OPC     SV,0xc3,29,58,C0,0,0  | SVC
 5395 a806 5356      	>  .ascii "SV"
 5395 a808 C3        	>  DC.B 0xc3
 5395 a809 1D        	>  DC.B 29+0+0
 5395 a80a 58        	>  DC.B 0x58
 5395 a80b C0        	>  DC.B 0xC0
 5396               	         OPC     SV,0xd3,29,59,C0,0,0  | SVS
 5396 a80c 5356      	>  .ascii "SV"
 5396 a80e D3        	>  DC.B 0xd3
 5396 a80f 1D        	>  DC.B 29+0+0
 5396 a810 59        	>  DC.B 0x59
 5396 a811 C0        	>  DC.B 0xC0
 5397               	         OPC     SP,0xcc,29,5A,C0,0,0  | SPL
 5397 a812 5350      	>  .ascii "SP"
 5397 a814 CC        	>  DC.B 0xcc
 5397 a815 1D        	>  DC.B 29+0+0
 5397 a816 5A        	>  DC.B 0x5A
 5397 a817 C0        	>  DC.B 0xC0
 5398               	         OPC     SM,0xc9,29,5B,C0,0,0  | SMI
 5398 a818 534D      	>  .ascii "SM"
 5398 a81a C9        	>  DC.B 0xc9
 5398 a81b 1D        	>  DC.B 29+0+0
 5398 a81c 5B        	>  DC.B 0x5B
 5398 a81d C0        	>  DC.B 0xC0
 5399               	         OPC     SG,0xc5,29,5C,C0,0,0  | SGE
 5399 a81e 5347      	>  .ascii "SG"
68K GAS  tutor13.s 			page 111


 5399 a820 C5        	>  DC.B 0xc5
 5399 a821 1D        	>  DC.B 29+0+0
 5399 a822 5C        	>  DC.B 0x5C
 5399 a823 C0        	>  DC.B 0xC0
 5400               	         OPC     SL,0xd4,29,5D,C0,0,0  | SLT
 5400 a824 534C      	>  .ascii "SL"
 5400 a826 D4        	>  DC.B 0xd4
 5400 a827 1D        	>  DC.B 29+0+0
 5400 a828 5D        	>  DC.B 0x5D
 5400 a829 C0        	>  DC.B 0xC0
 5401               	         OPC     SG,0xd4,29,5E,C0,0,0  | SGT
 5401 a82a 5347      	>  .ascii "SG"
 5401 a82c D4        	>  DC.B 0xd4
 5401 a82d 1D        	>  DC.B 29+0+0
 5401 a82e 5E        	>  DC.B 0x5E
 5401 a82f C0        	>  DC.B 0xC0
 5402               	         OPC     SL,0xc5,29,5F,C0,0,0  | SLE
 5402 a830 534C      	>  .ascii "SL"
 5402 a832 C5        	>  DC.B 0xc5
 5402 a833 1D        	>  DC.B 29+0+0
 5402 a834 5F        	>  DC.B 0x5F
 5402 a835 C0        	>  DC.B 0xC0
 5403               	         OPC     STO,0xd0,23,4E,72,0,0 | STOP
 5403 a836 5354 4F   	>  .ascii "STO"
 5403 a839 D0        	>  DC.B 0xd0
 5403 a83a 17        	>  DC.B 23+0+0
 5403 a83b 4E        	>  DC.B 0x4E
 5403 a83c 72        	>  DC.B 0x72
 5404               	         OPC     S,0xd4,29,50,C0,0,0   | ST
 5404 a83d 53        	>  .ascii "S"
 5404 a83e D4        	>  DC.B 0xd4
 5404 a83f 1D        	>  DC.B 29+0+0
 5404 a840 50        	>  DC.B 0x50
 5404 a841 C0        	>  DC.B 0xC0
 5405               	         OPC     SUB,0xc1,2,90,C0,0,0  | SUBA
 5405 a842 5355 42   	>  .ascii "SUB"
 5405 a845 C1        	>  DC.B 0xc1
 5405 a846 02        	>  DC.B 2+0+0
 5405 a847 90        	>  DC.B 0x90
 5405 a848 C0        	>  DC.B 0xC0
 5406               	         OPC     SUB,0xc9,3,04,00,0,0  | SUBI
 5406 a849 5355 42   	>  .ascii "SUB"
 5406 a84c C9        	>  DC.B 0xc9
 5406 a84d 03        	>  DC.B 3+0+0
 5406 a84e 04        	>  DC.B 0x04
 5406 a84f 00        	>  DC.B 0x00
 5407               	         OPC     SUB,0xd1,4,51,00,0,0  | SUBQ
 5407 a850 5355 42   	>  .ascii "SUB"
 5407 a853 D1        	>  DC.B 0xd1
 5407 a854 04        	>  DC.B 4+0+0
 5407 a855 51        	>  DC.B 0x51
 5407 a856 00        	>  DC.B 0x00
 5408               	         OPC     SUB,0xd8,5,91,00,0,0  | SUBX
 5408 a857 5355 42   	>  .ascii "SUB"
 5408 a85a D8        	>  DC.B 0xd8
 5408 a85b 05        	>  DC.B 5+0+0
 5408 a85c 91        	>  DC.B 0x91
68K GAS  tutor13.s 			page 112


 5408 a85d 00        	>  DC.B 0x00
 5409               	         OPC     SU,0xc2,1,90,00,0,0   | SUB
 5409 a85e 5355      	>  .ascii "SU"
 5409 a860 C2        	>  DC.B 0xc2
 5409 a861 01        	>  DC.B 1+0+0
 5409 a862 90        	>  DC.B 0x90
 5409 a863 00        	>  DC.B 0x00
 5410               	         OPC     SWA,0xd0,24,48,40,0,0 | SWAP
 5410 a864 5357 41   	>  .ascii "SWA"
 5410 a867 D0        	>  DC.B 0xd0
 5410 a868 18        	>  DC.B 24+0+0
 5410 a869 48        	>  DC.B 0x48
 5410 a86a 40        	>  DC.B 0x40
 5411               	         OPC     TA,0xd3,29,4A,C0,0,0  | TAS
 5411 a86b 5441      	>  .ascii "TA"
 5411 a86d D3        	>  DC.B 0xd3
 5411 a86e 1D        	>  DC.B 29+0+0
 5411 a86f 4A        	>  DC.B 0x4A
 5411 a870 C0        	>  DC.B 0xC0
 5412               	         OPC     TRAP,0xd6,22,4E,76,NOC,0 | TRAPV
 5412 a871 5452 4150 	>  .ascii "TRAP"
 5412 a875 D6        	>  DC.B 0xd6
 5412 a876 96        	>  DC.B 22+NOC+0
 5412 a877 4E        	>  DC.B 0x4E
 5412 a878 76        	>  DC.B 0x76
 5413               	         OPC     TRA,0xd0,25,4E,40,0,0 | TRAP
 5413 a879 5452 41   	>  .ascii "TRA"
 5413 a87c D0        	>  DC.B 0xd0
 5413 a87d 19        	>  DC.B 25+0+0
 5413 a87e 4E        	>  DC.B 0x4E
 5413 a87f 40        	>  DC.B 0x40
 5414               	         OPC     TS,0xd4,13,4A,00,0,0  | TST
 5414 a880 5453      	>  .ascii "TS"
 5414 a882 D4        	>  DC.B 0xd4
 5414 a883 0D        	>  DC.B 13+0+0
 5414 a884 4A        	>  DC.B 0x4A
 5414 a885 00        	>  DC.B 0x00
 5415               	         OPC     UNL,0xcb,26,4E,58,0,0 | UNLK
 5415 a886 554E 4C   	>  .ascii "UNL"
 5415 a889 CB        	>  DC.B 0xcb
 5415 a88a 1A        	>  DC.B 26+0+0
 5415 a88b 4E        	>  DC.B 0x4E
 5415 a88c 58        	>  DC.B 0x58
 5416               	
 5417 a88d 00        	         DC.B    0              | PAD BYTE
 5418               	
 5419               	TBLOPCE: .align  2
 5420               	
 5421               	* WITHOUT LABEL FIELD
 5422               	* 012345678901234567890123456789012345678901234567890
 5423               	* AAAAAA DDDDDDDDDDDDDDDDDDDD OPCODE  OPERAND
 5424               	*        FDATA                FOC     FOP
 5425               	
 5426               	* 012345678901234567890123456789012345678901234567890
 5427               	* AAAAAA DDDDDDDDDDDDDDDDDDDD LLLLLLLL OPCODE  OPERAND
 5428               	*        FDATA                FOL      FOC     FOP
 5429               	
68K GAS  tutor13.s 			page 113


 5430               	* %A3 = STORE POINTER
 5431               	* %A4 = PROGRAM COUNTER
 5432               	* %A5 = SOURCE PTR BEGINNING
 5433               	* %A6 = SOURCE PTR END+1
 5434               	*
 5435               	OUTBSIZE =       80        | BUFFER SIZE
 5436               	FDATA    =       10        | OFFSET TO DATA
 5437               	FOL      =       31        | OFFSET TO LABEL
 5438               	FOC      =       31        | OFFSET TO OP-CODE (NO LABEL FIELD)
 5439               	FOP      =       39        | OFFSET TO OPERAND (NO LABEL FIELD)
 5440               	
 5441 a88e 4E51 FFDE 	CODE68K: LINK    %A1,#0-(ESKE-ESKB)
 5442 a892 2F49 001E 	         MOVE.L  %A1,LINK(%A7)   | SAVE LINKAGE
 5443 a896 224F      	         MOVE.L  %A7,%A1         | A1 = BASE REGISTER TO DATA
 5444               	
 5445 a898 1CBC 0020 	         MOVE.B  #BLANK,(%A6)    | INSURE LAST CHAR IS SPACE
 5446               	
 5447 a89c 204B      	         MOVE.L  %A3,%A0
 5448 a89e 704F      	         MOVEQ   #OUTBSIZE-1,%D0
 5449 a8a0 10FC 0020 	M300:    MOVE.B  #BLANK,(%A0)+   | SPACE FILL BUFFER
 5450 a8a4 51C8 FFFA 	         DBRA    %D0,M300
 5451 a8a8 5588      	         SUBQ.L  #2,%A0
 5452 a8aa 2348 001A 	         MOVE.L  %A0,PTRBUFE(%A1) | PTR TO END OF BUFFER
 5453               	
 5454 a8ae 234C 000E 	         MOVE.L  %A4,PCOUNTER(%A1)| FORMAT PC
 5455 a8b2 280C      	         MOVE.L  %A4,%D4          | D4 = P-COUNTER
 5456 a8b4 200C      	         MOVE.L  %A4,%D0
 5457               	
 5458 a8b6 2F0E      	         MOVE.L  %A6,-(%A7)       | SAVE A6
 5459 a8b8 2C4B      	         MOVE.L  %A3,%A6
 5460 a8ba 6100 F118 	         BSR     FRELADDR       | FORM RELATIVE ADDRESS
 5461 a8be 2C5F      	         MOVE.L  (%A7)+,%A6     | RESTORE A6
 5462               	
 5463 a8c0 7E01      	         MOVEQ   #1,%D7         | POSSIBLE ERROR CODE
 5464 a8c2 200C      	         MOVE.L  %A4,%D0
 5465 a8c4 E298      	         ROR.L   #1,%D0
 5466 a8c6 6B00 0140 	         BMI     ERDONE         | PC ODD ADDRESS
 5467               	
 5468 a8ca 7E1F      	         MOVEQ   #FOL,%D7       | POSSIBLE ERROR CODE
 5469 a8cc 0C1D 0020 	         CMPI.B  #BLANK,(%A5)+
 5470 a8d0 6600 0136 	         BNE     ERDONE         | 1ST CHAR NOT SPACE
 5471               	
 5472 a8d4 137C 0002 	         MOVE.B  #2,TNB(%A1)    | INZ # OF BYTES
 5472      000A 
 5473 a8da 337C 0040 	         MOVE.W  #0x40,TLENGTH(%A1) |SIZE = .W (DEFAULT)
 5473      000C 
 5474 a8e0 4229 000B 	         CLR.B   TLSPEC(%A1)    | DEFAULT (SIZE NOT SPECIFIED)
 5475               	
 5476 a8e4 204B      	         MOVE.L  %A3,%A0        | A0 = STORE ADDRESS
 5477 a8e6 D1FC 0000 	         ADD.L   #FOC,%A0
 5477      001F 
 5478               	
 5479 a8ec 6100 010C 	M340:    BSR     GETCHARF       | GET PAST SPACES
 5480 a8f0 0C00 0020 	         CMPI.B  #BLANK,%D0
 5481 a8f4 67F6      	         BEQ.S   M340
 5482               	
 5483 a8f6 538D      	         SUBQ.L  #1,%A5         | FORMAT OP-CODE
68K GAS  tutor13.s 			page 114


 5484 a8f8 6100 0100 	M350:    BSR     GETCHARF
 5485 a8fc 10C0      	         MOVE.B  %D0,(%A0)+
 5486 a8fe 0C00 002E 	         CMPI.B  #'.',%D0
 5487 a902 6628      	         BNE.S   M352
 5488               	
 5489 a904 1355 000B 	         MOVE.B  (%A5),TLSPEC(%A1) | NOT DEFAULT
 5490 a908 0C15 0057 	         CMPI.B  #'W',(%A5)
 5491 a90c 671E      	         BEQ.S   M352
 5492 a90e 0C15 0053 	         CMPI.B  #'S',(%A5)
 5493 a912 6718      	         BEQ.S   M352           | .SHORT = .WORD
 5494 a914 4269 000C 	         CLR.W   TLENGTH(%A1)
 5495 a918 0C15 0042 	         CMPI.B  #'B',(%A5)
 5496 a91c 670E      	         BEQ.S   M352           | SIZE = .W
 5497 a91e 337C 0080 	         MOVE.W  #0x80,TLENGTH(%A1)
 5497      000C 
 5498 a924 0C15 004C 	         CMPI.B  #'L',(%A5)
 5499 a928 6600 00D8 	         BNE     ERF
 5500               	
 5501 a92c 0C00 0020 	M352:    CMPI.B  #BLANK,%D0
 5502 a930 66C6      	         BNE.S   M350           | NOT SPACE CONTINUE
 5503               	
 5504               	* SEARCH OP-CODE TABLE
 5505 a932 41FA FC56 	         LEA     TBLOPC(%PC),%A0 | A0 = PTR TO TABLE OF CODES
 5506 a936 244B      	M410:    MOVE.L  %A3,%A2        | A3 = START OF STORE BUFFER
 5507 a938 D5FC 0000 	         ADD.L   #FOC,%A2       | A2 = PTR TO OP-CODE JUST FORMATTED
 5507      001F 
 5508               	
 5509 a93e 1018      	M415:    MOVE.B  (%A0)+,%D0     |  XXXXXXDD
 5510 a940 4880      	         EXT.W   %D0            | XXXXSSDD  SIGN EXTENDED
 5511 a942 0200 007F 	         ANDI.B  #0x7F,%D0
 5512 a946 B01A      	         CMP.B   (%A2)+,%D0
 5513 a948 6606      	         BNE.S   M420           | NON-MATCH
 5514 a94a 4A40      	         TST.W   %D0
 5515 a94c 6AF0      	         BPL.S   M415           | SIGN RESET; CONTINUE
 5516 a94e 6018      	         BRA.S   M430           | MATCH COMPLETE
 5517               	
 5518 a950 4A40      	M420:    TST.W   %D0            | SEQUENCE TO NEXT CODE
 5519 a952 6B04      	         BMI.S   M426
 5520 a954 1018      	M424:    MOVE.B  (%A0)+,%D0
 5521 a956 6AFC      	         BPL.S   M424           | FINISH THIS OP-CODE
 5522 a958 5688      	M426:    ADDQ.L  #3,%A0         | ADJUST PTR TO TABLE
 5523 a95a 45FA FF32 	         LEA     TBLOPCE(%PC),%A2
 5524 a95e B5C8      	         CMP.L   %A0,%A2
 5525 a960 66D4      	         BNE.S   M410
 5526               	
 5527 a962 7E1F      	M428:    MOVEQ   #FOC,%D7       | ERROR CODE
 5528 a964 6000 00A2 	         BRA     ERDONE
 5529               	
 5530               	* GET GOTO INDEX
 5531               	* GET FIRST WORD MASK
 5532 a968 1012      	M430:    MOVE.B  (%A2),%D0      | MUST TERMINATE OP-CODE
 5533 a96a 0C00 0020 	         CMPI.B  #BLANK,%D0     | WITH SPACE OR PERIOD
 5534 a96e 6706      	         BEQ.S   M432
 5535 a970 0C00 002E 	         CMPI.B  #'.',%D0
 5536 a974 66EC      	         BNE.S   M428           | ERROR
 5537               	M432:
 5538               	
68K GAS  tutor13.s 			page 115


 5539 a976 4280      	         CLR.L   %D0
 5540 a978 1018      	         MOVE.B  (%A0)+,%D0     | D0 =  KEYS  INDEX
 5541 a97a 1200      	         MOVE.B  %D0,%D1        | D1 =  KEYS (INDEX)
 5542 a97c 0200 003F 	         ANDI.B  #0x3F,%D0      | D0 =        INDEX
 5543 a980 E380      	         ASL.L   #1,%D0         | INDEX * TWO
 5544 a982 1418      	         MOVE.B  (%A0)+,%D2
 5545 a984 E14A      	         LSL.W   #8,%D2
 5546 a986 1418      	         MOVE.B  (%A0)+,%D2     | D2 = FIRST WORD MASK
 5547 a988 3282      	         MOVE.W  %D2,(%A1)      | *D2,TDATA(A1)
 5548               	
 5549               	* INSURE .S .W MATCH OP-CODE
 5550               	
 5551 a98a 1629 000B 	         MOVE.B  TLSPEC(%A1),%D3 | D3 = .n SPECIFIED
 5552 a98e 671A      	         BEQ.S   M4326          | NOT SPECIFIED
 5553 a990 0801 0006 	         BTST    #6,%D1
 5554 a994 670E      	         BEQ.S   M4324          | .W ALLOWED (.S NOT ALLOWED)
 5555 a996 0C03 0057 	         CMPI.B  #'W',%D3
 5556 a99a 67C6      	         BEQ.S   M428           | .W NOT ALLOWED
 5557 a99c 0C03 0042 	         CMPI.B  #'B',%D3
 5558 a9a0 67C0      	         BEQ.S   M428           | .B NOT ALLOWED
 5559 a9a2 6006      	         BRA.S   M4326
 5560               	
 5561 a9a4 0C03 0053 	M4324:   CMPI.B  #'S',%D3
 5562 a9a8 67B8      	         BEQ.S   M428           | .S NOT ALLOWED
 5563               	M4326:
 5564               	
 5565               	* CALCULATE GOTO ADDRESS
 5566               	
 5567 a9aa 41FA FB92 	         LEA     TBLKEYS(%PC),%A0 | A0 = PTR TO KEYS
 5568 a9ae 3030 0000 	         MOVE.W  (%A0,%D0.W),%D0  | D0 = 16 BIT OFFSET
 5569 a9b2 45FA F880 	         LEA     XBASE(%PC),%A2   | A2 = BASE ADDRESS
 5570 a9b6 D5C0      	         ADD.L   %D0,%A2          | A2 = COMPUTED GO TO  ADDRESS
 5571               	
 5572               	* FORMAT OPERAND IF REGUIRED
 5573               	
 5574 a9b8 4A01      	         TST.B   %D1            | LOOK AT KEY
 5575 a9ba 6B22      	         BMI.S   M440           | OPERAND NOT REQUIRED
 5576               	
 5577 a9bc 204B      	         MOVE.L  %A3,%A0
 5578 a9be D1FC 0000 	         ADD.L   #FOP,%A0       | STORE POINTER
 5578      0027 
 5579 a9c4 2348 0012 	         MOVE.L  %A0,PTROP(%A1) |  POINTER TO OPERAND (FORMATED)
 5580 a9c8 6130      	M435:    BSR.S   GETCHARF       | D0 = CHAR
 5581 a9ca 0C00 0020 	         CMPI.B  #BLANK,%D0
 5582 a9ce 67F8      	         BEQ.S   M435           | SKIP SPACES
 5583               	
 5584 a9d0 10C0      	M437:    MOVE.B  %D0,(%A0)+     | MOVE REST OF SOURCE LINE
 5585 a9d2 6126      	         BSR.S   GETCHARF       | D0 = CHAR
 5586 a9d4 BDCD      	         CMP.L   %A5,%A6
 5587 a9d6 6AF8      	         BPL.S   M437
 5588 a9d8 2348 001A 	         MOVE.L  %A0,PTRBUFE(%A1) | POINTER TO END FORMATED SOURCE
 5589 a9dc 2C48      	         MOVE.L  %A0,%A6        | A6 = POINTER TO END OF SOURCE
 5590               	M440:
 5591               	
 5592 a9de 2A69 0012 	         MOVE.L  PTROP(%A1),%A5 | A5 = PTR TO OPERAND
 5593 a9e2 49E9 0002 	         LEA     TDATA+2(%A1),%A4 | A4 = BASE ADDR FOR DATA STORE
 5594 a9e6 4283      	         CLR.L   %D3            | D3 = OFFSET FOR DATA STORE
68K GAS  tutor13.s 			page 116


 5595 a9e8 4ED2      	         JMP     (%A2)          | GOTO ROUTINE
 5596               	*                               | D2 = MASK
 5597               	*                               | D4 = P-COUNTER
 5598               	
 5599 a9ea 0C1D 002C 	COMMA:   CMPI.B  #',',(%A5)+
 5600 a9ee 6614      	         BNE.S   ER             | NOT COMMA
 5601 a9f0 4E75      	         RTS
 5602               	
 5603 a9f2 BDCD      	GETCHAR: CMP.L   %A5,%A6
 5604 a9f4 6B0E      	         BMI.S   ER
 5605 a9f6 101D      	         MOVE.B  (%A5)+,%D0
 5606 a9f8 4E75      	         RTS
 5607               	
 5608 a9fa BDCD      	GETCHARF:CMP.L   %A5,%A6
 5609 a9fc 6B04      	         BMI.S   ERF
 5610 a9fe 101D      	         MOVE.B  (%A5)+,%D0
 5611 aa00 4E75      	         RTS
 5612               	
 5613 aa02 2A48      	ERF:     MOVE.L  %A0,%A5
 5614               	
 5615 aa04 2E0D      	ER:      MOVE.L  %A5,%D7        | D7 = ERROR FLAG
 5616 aa06 9E8B      	         SUB.L   %A3,%D7        | ..& POSITION OF ERROR
 5617 aa08 4286      	ERDONE:  CLR.L   %D6            | D6 = (ZERO) BYTE COUNT
 5618 aa0a 6024      	         BRA.S   CMMD35
 5619               	
 5620 aa0c 0C15 0020 	CMMD2:   CMPI.B  #BLANK,(%A5)
 5621 aa10 66F2      	         BNE.S   ER             | OPERAND DID NOT END WITH SPACE
 5622               	
 5623               	MCMMD2:  .align  2              | NO OPERAND SEQUENCE
 5624 aa12 3282      	         MOVE.W  %D2,(%A1)      | *D2,TDATA(A1)
 5625               	
 5626 aa14 1629 000A 	         MOVE.B  TNB(%A1),%D3   | FORMAT DATA
 5627 aa18 2C03      	         MOVE.L  %D3,%D6        | D7 = NUMBER OF BYTES
 5628 aa1a 45D1      	         LEA     (%A1),%A2      | A2 = PTR TO HEX DATA  *TDATA(A1),A2
 5629 aa1c 2C4B      	         MOVE.L  %A3,%A6        | D3 = NUMBER OF BYTES
 5630 aa1e DDFC 0000 	         ADD.L   #FDATA,%A6     | A6 = STORE PTR
 5630      000A 
 5631 aa24 101A      	FPR315:  MOVE.B  (%A2)+,%D0
 5632 aa26 6100 EF90 	         BSR     PNT2HX
 5633 aa2a 5383      	         SUBQ.L  #1,%D3
 5634 aa2c 66F6      	         BNE.S   FPR315         | MORE BYTES
 5635               	
 5636 aa2e 4287      	         CLR.L   %D7            | RESET ERROR FLAG
 5637               	
 5638 aa30 4CD1 0007 	CMMD35:  MOVEM.L (%A1),%D0-%D2  | D0-D2 = DATA   *TDATA(A1),D0-D2
 5639               	
 5640 aa34 2C69 001A 	         MOVE.L  PTRBUFE(%A1),%A6 | A6 = POINTER TO END OF BUFFER
 5641               	
 5642 aa38 2869 000E 	         MOVE.L  PCOUNTER(%A1),%A4 | A4 = ORGINAL PC
 5643               	
 5644 aa3c 2269 001E 	         MOVE.L  LINK(%A1),%A1
 5645 aa40 4E59      	         UNLK    %A1
 5646 aa42 4E75      	         RTS                    | RETURN TO REQUESTOR
 5647               	*                               | A3 = POINTER TO START OF BUFFER
 5648               	*                               | D6 = NUMBER OF BYTES ASSEMBLED
 5649               	*                               | D7 = ERROR FLAG (POSITION)
 5650               	
68K GAS  tutor13.s 			page 117


 5651               	*  SIZE = BYTE
 5652               	*    DY,DX
 5653               	*    -(AY),-(AX)
 5654               	*    ....RX@.SS...RY@
 5655               	MABCD:   .align  2              | (INDEX 0) ABCD SBCD
 5656 aa44 4A29 000B 	         TST.B   TLSPEC(%A1)
 5657 aa48 6708      	         BEQ.S   MABCD9         | DEFAULT SIZE = BYTE
 5658 aa4a 0C69 0000 	         CMPI.W  #0x00,TLENGTH(%A1)
 5658      000C 
 5659 aa50 66B2      	         BNE.S   ER             | NOT .B
 5660               	MABCD9:
 5661               	
 5662 aa52 3E3C 0011 	         MOVE.W  #0x11,%D7
 5663 aa56 6100 F84A 	         BSR     EA
 5664               	
 5665 aa5a 618E      	         BSR.S   COMMA
 5666               	
 5667 aa5c 2006      	         MOVE.L  %D6,%D0
 5668 aa5e 0240 0007 	         ANDI.W  #7,%D0
 5669 aa62 8440      	         OR.W    %D0,%D2
 5670               	
 5671 aa64 0806 0005 	         BTST    #5,%D6
 5672 aa68 6716      	         BEQ.S   MABCD55        | D@,D@ MODE
 5673               	
 5674 aa6a 0042 0008 	         ORI.W   #0x0008,%D2    | -(A@),-(A@) MODE
 5675               	
 5676 aa6e 3E3C 0010 	         MOVE.W  #0x10,%D7
 5677 aa72 6100 F82E 	         BSR     EA
 5678               	
 5679 aa76 0246 0007 	         ANDI.W  #7,%D6
 5680 aa7a EE5E      	         ROR.W   #7,%D6
 5681 aa7c 8446      	         OR.W    %D6,%D2
 5682 aa7e 608C      	         BRA.S   CMMD2
 5683               	
 5684 aa80 6100 F7B8 	MABCD55: BSR     GETREGD        | D@,D@
 5685 aa84 EE58      	         ROR.W   #7,%D0
 5686 aa86 8440      	         OR.W    %D0,%D2
 5687 aa88 6082      	CMMD2S10:BRA.S   CMMD2
 5688               	
 5689               	MCMP:    .align  2              | (INDEX 34)
 5690 aa8a 6100 F812 	         BSR     EAALL
 5691 aa8e 2806      	         MOVE.L  %D6,%D4        | D4 = SOURCE MODE
 5692               	
 5693 aa90 6166      	         BSR.S   COMMAS20
 5694               	
 5695 aa92 0C15 0041 	         CMPI.B  #'A',(%A5)
 5696 aa96 6700 0116 	         BEQ     MADDA21        | DESTINATION = A@
 5697               	
 5698 aa9a 0C04 003C 	         CMPI.B  #0x3C,%D4
 5699 aa9e 6748      	         BEQ.S   MCMP56         | SOURCE  ....I  #<DATA>,...
 5700               	
 5701 aaa0 6100 F792 	         BSR     FSIZE
 5702               	
 5703 aaa4 3E3C 0009 	         MOVE.W  #0x009,%D7
 5704 aaa8 6100 F7F8 	         BSR     EA             | D@ + (A@)+
 5705 aaac 2006      	         MOVE.L  %D6,%D0        | MMMRRR
 5706 aaae 0240 0038 	         ANDI.W  #0x38,%D0      | MMM...
68K GAS  tutor13.s 			page 118


 5707               	
 5708 aab2 672C      	         BEQ.S   MCMP39         | DESTINATION  D@
 5709               	
 5710 aab4 0C00 0018 	         CMPI.B  #0x18,%D0
 5711 aab8 6600 FF4A 	         BNE     ER
 5712               	
 5713 aabc 0246 000F 	         ANDI.W  #0xF,%D6       | (AY)+,(AX)+
 5714 aac0 EE5E      	         ROR.W   #7,%D6
 5715 aac2 8446      	         OR.W    %D6,%D2        | ....AX@.........
 5716 aac4 0042 0100 	         ORI.W   #0x0100,%D2    | ...1AX@.........
 5717               	
 5718 aac8 2004      	         MOVE.L  %D4,%D0
 5719 aaca 0240 0038 	         ANDI.W  #0x38,%D0
 5720 aace 0C40 0018 	         CMPI.W  #0x18,%D0
 5721 aad2 6600 FF30 	         BNE     ER             | NOT (A@)+
 5722 aad6 0244 000F 	         ANDI.W  #0xF,%D4       | ............1AY@
 5723 aada 8444      	         OR.W    %D4,%D2
 5724 aadc 6000 FF2E 	         BRA     CMMD2
 5725               	
 5726               	*  <EA>,D@
 5727 aae0 EE5E      	MCMP39:  ROR.W   #7,%D6
 5728 aae2 8446      	         OR.W    %D6,%D2
 5729               	
 5730 aae4 8444      	         OR.W    %D4,%D2
 5731 aae6 600E      	         BRA.S   CMMD2S11
 5732               	
 5733 aae8 343C 0C00 	MCMP56:  MOVE.W  #0x0C00,%D2    | #<DATA>,<EA>      MASK = CMPI
 5734               	
 5735 aaec 6100 F746 	         BSR     FSIZE
 5736               	
 5737 aaf0 6100 F788 	         BSR     EADA
 5738 aaf4 8446      	         OR.W    %D6,%D2
 5739 aaf6 6090      	CMMD2S11:BRA.S   CMMD2S10
 5740               	
 5741 aaf8 6000 FEF0 	COMMAS20:BRA     COMMA
 5742               	
 5743               	MADD:    .align  2              | (INDEX 1)
 5744 aafc 6100 F7A0 	         BSR     EAALL
 5745 ab00 2806      	         MOVE.L  %D6,%D4        | D4 = SOURCE MODE
 5746               	
 5747 ab02 61F4      	         BSR.S   COMMAS20
 5748               	
 5749 ab04 0C15 0041 	         CMPI.B  #'A',(%A5)
 5750 ab08 6700 00A4 	         BEQ     MADDA21        | DESTINATION = A@
 5751               	
 5752 ab0c 0C04 003C 	         CMPI.B  #0x3C,%D4
 5753 ab10 6728      	         BEQ.S   MADD56         | SOURCE  ....I  #<DATA>,...
 5754               	
 5755 ab12 6100 F720 	         BSR     FSIZE
 5756               	
 5757 ab16 3E3C 01FF 	         MOVE.W  #0x1FF,%D7
 5758 ab1a 6100 F786 	         BSR     EA             | ALTERABLE + D@
 5759 ab1e 2006      	         MOVE.L  %D6,%D0        | MMMRRR
 5760 ab20 0240 0038 	         ANDI.W  #0x38,%D0      | MMM...
 5761 ab24 6608      	         BNE.S   MADD46         | DESTINATION NOT  D@
 5762               	
 5763               	*  <EA>,D@
68K GAS  tutor13.s 			page 119


 5764 ab26 EE5E      	         ROR.W   #7,%D6
 5765 ab28 8446      	         OR.W    %D6,%D2
 5766               	
 5767 ab2a 8444      	         OR.W    %D4,%D2
 5768 ab2c 60C8      	         BRA.S   CMMD2S11
 5769               	
 5770               	MADD46:  .align  2              | D@,<EA>
 5771 ab2e 0042 0100 	         ORI.W   #0x100,%D2
 5772               	
 5773 ab32 EE5C      	         ROR.W   #7,%D4
 5774 ab34 8444      	         OR.W    %D4,%D2        | <EA> AS DESTINATION
 5775               	
 5776 ab36 8446      	         OR.W    %D6,%D2        | D@  AS SOURCE
 5777 ab38 60BC      	         BRA.S   CMMD2S11
 5778               	
 5779 ab3a 2002      	MADD56:  MOVE.L  %D2,%D0        | #<DATA>,<EA>
 5780 ab3c 343C 0600 	         MOVE.W  #0x0600,%D2    | MASK = ADDI
 5781               	
 5782 ab40 0C40 D000 	         CMPI.W  #0xD000,%D0
 5783 ab44 6704      	         BEQ.S   MADD58
 5784 ab46 343C 0400 	         MOVE.W  #0x400,%D2     | MASK = SUBI
 5785               	MADD58:
 5786               	
 5787 ab4a 6100 F6E8 	         BSR     FSIZE
 5788               	
 5789 ab4e 6100 F72A 	         BSR     EADA           | DATA ALTERABLE ONLY
 5790 ab52 8446      	         OR.W    %D6,%D2
 5791 ab54 60A0      	         BRA.S   CMMD2S11
 5792               	
 5793 ab56 2A69 0012 	MADDI:   MOVE.L  PTROP(%A1),%A5 | (INDEX 3) CMPI
 5794 ab5a 6100 F6D8 	         BSR     FSIZE
 5795               	
 5796 ab5e 6100 F72C 	         BSR     EAZ
 5797               	
 5798 ab62 6194      	         BSR.S   COMMAS20
 5799               	
 5800 ab64 6100 F714 	         BSR     EADA           | DATA ALTERABLE ONLY
 5801 ab68 8446      	         OR.W    %D6,%D2
 5802 ab6a 608A      	         BRA.S   CMMD2S11
 5803               	
 5804               	*  SIZE =  BYTE, WORD, LONG
 5805               	*  #<DATA>,SR
 5806               	*  #<DATA>,<EA>    DATA ALTERABLE ONLY
 5807               	MANDI:   .align  2              | (INDEX 28) ANDI EORI ORI
 5808 ab6c 6100 F6C6 	         BSR     FSIZE
 5809               	
 5810 ab70 6100 F71A 	         BSR     EAZ
 5811               	
 5812 ab74 6182      	         BSR.S   COMMAS20
 5813               	
 5814 ab76 0C15 0053 	         CMPI.B  #'S',(%A5)
 5815 ab7a 670A      	         BEQ.S   MANDI23
 5816               	
 5817 ab7c 6100 F6FC 	         BSR     EADA
 5818 ab80 8446      	         OR.W    %D6,%D2
 5819 ab82 6000 FF72 	         BRA     CMMD2S11
 5820               	
68K GAS  tutor13.s 			page 120


 5821 ab86 0C2D 0052 	MANDI23: CMPI.B  #'R',1(%A5)    | #<DATA>,SR
 5821      0001 
 5822 ab8c 6600 FE76 	         BNE     ER
 5823 ab90 0C69 0080 	         CMPI.W  #0x0080,TLENGTH(%A1)
 5823      000C 
 5824 ab96 6700 FE6C 	         BEQ     ER             | .L NOT ALLOWED WITH SR
 5825 ab9a 0042 003C 	         ORI.W   #0x003C,%D2
 5826 ab9e 548D      	         ADDQ.L  #2,%A5         | POINTER TO END OF OPERAND
 5827 aba0 6000 FE6A 	         BRA     CMMD2
 5828               	
 5829               	MADDA:   .align  2              | (INDEX 2)
 5830 aba4 6100 F6F8 	         BSR     EAALL
 5831 aba8 8446      	         OR.W    %D6,%D2
 5832               	
 5833 abaa 6100 FE3E 	         BSR     COMMA
 5834               	
 5835 abae 8446      	MADDA21: OR.W    %D6,%D2
 5836 abb0 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0
 5837 abb4 6700 FE4E 	         BEQ     ER             | .BYTE NOT ALLOWED
 5838 abb8 E348      	         LSL.W   #1,%D0         | .W = 011......
 5839 abba 0040 00C0 	         ORI.W   #0x00C0,%D0    | .L = 111......
 5840 abbe 8440      	         OR.W    %D0,%D2
 5841               	
 5842 abc0 6100 F692 	         BSR     GETREGA
 5843 abc4 EE58      	         ROR.W   #7,%D0
 5844 abc6 8440      	         OR.W    %D0,%D2
 5845 abc8 6000 FE42 	         BRA     CMMD2
 5846               	
 5847               	MADDQ:   .align  2              | (INDEX 4)
 5848 abcc 6100 F666 	         BSR     FSIZE
 5849               	
 5850 abd0 6100 0682 	         BSR     GETIMM
 5851               	
 5852 abd4 4A80      	         TST.L   %D0
 5853 abd6 6700 FE2C 	         BEQ     ER             | DATA = ZERO
 5854 abda 0C00 0009 	         CMPI.B  #9,%D0
 5855 abde 6A00 FE24 	         BPL     ER             | VALUE TOO BIG
 5856 abe2 0240 0007 	         ANDI.W  #0x7,%D0       | MAKE 8 = 0
 5857 abe6 EE58      	         ROR.W   #7,%D0         | SHIFT DATA TO BITS 9-11
 5858 abe8 8440      	         OR.W    %D0,%D2
 5859               	
 5860 abea 6100 FDFE 	         BSR     COMMA
 5861               	
 5862 abee 6100 F6A8 	         BSR     EAA            | ALTERABLE ADDRESSING
 5863               	
 5864 abf2 8446      	         OR.W    %D6,%D2
 5865 abf4 2002      	         MOVE.L  %D2,%D0
 5866 abf6 0240 00C0 	         ANDI.W  #0xC0,%D0
 5867 abfa 660E      	         BNE.S   MADDQ25
 5868               	
 5869               	* BYTE SIZE; ADDRESS REGISTER DIRECT NOT ALLOWED
 5870 abfc 2002      	         MOVE.L  %D2,%D0
 5871 abfe 0240 0038 	         ANDI.W  #0x38,%D0
 5872 ac02 0C00 0008 	         CMPI.B  #0x08,%D0
 5873 ac06 6700 FDFC 	         BEQ     ER
 5874 ac0a 6000 FE00 	MADDQ25: BRA     CMMD2
 5875               	
68K GAS  tutor13.s 			page 121


 5876               	* SIZE = BYTE, WORD, LONG
 5877               	*    DY,DX
 5878               	*    -(AY),-(AX)
 5879               	*    ....RX@.SS...RY@
 5880               	MADDX:   .align  2              | (INDEX 5)
 5881 ac0e 6100 F624 	         BSR     FSIZE
 5882               	
 5883 ac12 3E3C 0011 	         MOVE.W  #0x11,%D7
 5884 ac16 6100 F68A 	         BSR     EA
 5885               	
 5886 ac1a 6100 FDCE 	         BSR     COMMA
 5887               	
 5888 ac1e 2006      	         MOVE.L  %D6,%D0
 5889 ac20 0240 0007 	         ANDI.W  #7,%D0
 5890 ac24 8440      	         OR.W    %D0,%D2
 5891               	
 5892 ac26 0806 0005 	         BTST    #5,%D6
 5893 ac2a 6718      	         BEQ.S   MADDX5         | D@,D@ MODE
 5894               	
 5895 ac2c 0042 0008 	         ORI.W   #0x0008,%D2    | -(A@),-(A@) MODE
 5896               	
 5897 ac30 3E3C 0010 	         MOVE.W  #0x10,%D7
 5898 ac34 6100 F66C 	         BSR     EA
 5899               	
 5900 ac38 0246 0007 	         ANDI.W  #7,%D6
 5901 ac3c EE5E      	         ROR.W   #7,%D6
 5902 ac3e 8446      	         OR.W    %D6,%D2
 5903 ac40 6000 FDCA 	         BRA     CMMD2
 5904               	
 5905 ac44 6100 F5F4 	MADDX5:  BSR     GETREGD        | D@,D@
 5906 ac48 EE58      	         ROR.W   #7,%D0
 5907 ac4a 8440      	         OR.W    %D0,%D2
 5908 ac4c 6000 FDBE 	         BRA     CMMD2
 5909               	
 5910               	*  SIZE = BYTE, WORD, LONG
 5911               	*         <EA>,D@
 5912               	*         D@,<EA>
 5913 ac50 6100 F5E2 	MAND:    BSR     FSIZE          | (INDEX 6)
 5914               	
 5915 ac54 0C15 0023 	         CMPI.B  #'#',(%A5)
 5916 ac58 6740      	         BEQ.S   MAND90
 5917               	
 5918 ac5a 6100 0082 	         BSR     A5TODEST       | MOVE A5 TO DESTINATION
 5919               	
 5920 ac5e 1015      	         MOVE.B  (%A5),%D0      | D0 = 1ST CHAR OF DESTINATION
 5921 ac60 2A69 0012 	         MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO OPERAND
 5922 ac64 0C00 0044 	         CMPI.B  #'D',%D0
 5923 ac68 671A      	         BEQ.S   MAND77
 5924               	
 5925 ac6a 0042 0100 	         ORI.W   #0x0100,%D2    | D@,<EA>
 5926               	
 5927 ac6e 6100 F5CA 	         BSR     GETREGD
 5928 ac72 EE58      	         ROR.W   #7,%D0
 5929 ac74 8440      	         OR.W    %D0,%D2
 5930               	
 5931 ac76 6100 FD72 	         BSR     COMMA
 5932               	
68K GAS  tutor13.s 			page 122


 5933 ac7a 6100 F60A 	         BSR     EAM            | ALTERABLE MEMORY
 5934 ac7e 8446      	         OR.W    %D6,%D2
 5935 ac80 6000 FD8A 	         BRA     CMMD2
 5936               	
 5937 ac84 6100 F60C 	MAND77:  BSR     EADADDR        | <EA>,D@
 5938 ac88 8446      	         OR.W    %D6,%D2
 5939               	
 5940 ac8a 6100 FD5E 	         BSR     COMMA
 5941               	
 5942 ac8e 6100 F5AA 	         BSR     GETREGD
 5943 ac92 EE58      	         ROR.W   #7,%D0
 5944 ac94 8440      	         OR.W    %D0,%D2
 5945 ac96 6000 FD74 	         BRA     CMMD2
 5946               	
 5947 ac9a 0242 F000 	MAND90:  ANDI.W  #0xF000,%D2
 5948 ac9e 0C42 C000 	         CMPI.W  #0xC000,%D2
 5949 aca2 6708      	         BEQ.S   MAND97         | AND
 5950 aca4 343C 0000 	         MOVE.W  #0x0000,%D2    | CHANGE TO "ORI"
 5951 aca8 6000 FEC2 	MAND91:  BRA     MANDI
 5952 acac 343C 0200 	MAND97:  MOVE.W  #0x0200,%D2    | CHANGE TO "ADDI"
 5953 acb0 60F6      	         BRA.S   MAND91
 5954               	
 5955 acb2 6100 F580 	MEOR:    BSR     FSIZE          | (INDEX 35)
 5956               	
 5957 acb6 0C15 0023 	         CMPI.B  #'#',(%A5)
 5958 acba 6716      	         BEQ.S   MEOR90
 5959               	
 5960 acbc 6100 F57C 	         BSR     GETREGD
 5961 acc0 EE58      	         ROR.W   #7,%D0
 5962 acc2 8440      	         OR.W    %D0,%D2
 5963               	
 5964 acc4 6100 FD24 	         BSR     COMMA
 5965               	
 5966 acc8 6100 F5B0 	         BSR     EADA           | DATA ALTERABLE ADDRESSING
 5967 accc 8446      	         OR.W    %D6,%D2
 5968 acce 6000 FD3C 	         BRA     CMMD2
 5969               	
 5970 acd2 2A69 0012 	MEOR90:  MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO OPERAND
 5971 acd6 343C 0A00 	         MOVE.W  #0x0A00,%D2    | CHANGE TO "EORI"
 5972 acda 6000 FE90 	         BRA     MANDI
 5973               	
 5974 acde 4281      	A5TODEST:CLR.L   %D1            | MOVE A5 TO DESTINATION
 5975 ace0 6100 FD10 	A5300:   BSR     GETCHAR
 5976 ace4 0C00 0028 	         CMPI.B  #'(',%D0
 5977 ace8 6602      	         BNE.S   A5305
 5978 acea 2200      	         MOVE.L  %D0,%D1
 5979 acec 0C00 0029 	A5305:   CMPI.B  #')',%D0
 5980 acf0 67EC      	         BEQ.S   A5TODEST
 5981 acf2 0C00 002C 	         CMPI.B  #',',%D0
 5982 acf6 66E8      	         BNE.S   A5300
 5983 acf8 4A41      	         TST     %D1
 5984 acfa 66E4      	         BNE.S   A5300
 5985 acfc 4E75      	         RTS
 5986               	
 5987               	MASL:    .align  2              | (INDEX 7)
 5988               	
 5989               	*         ASL     LSL     ROL     ROXL
68K GAS  tutor13.s 			page 123


 5990               	*  MASKS  E000    E008    E018    E010
 5991               	*         E0C0    E2C0    E6C0    E4C0   SHIFT MEMORY
 5992               	
 5993 acfe 6100 F534 	         BSR     FSIZE
 5994               	
 5995 ad02 101D      	         MOVE.B  (%A5)+,%D0
 5996 ad04 0C00 0023 	         CMPI.B  #'#',%D0
 5997 ad08 6628      	         BNE.S   MSL200
 5998               	
 5999               	*  #<COUNT>,D@
 6000 ad0a 6100 F4BE 	         BSR     EV
 6001 ad0e 0C80 0000 	         CMPI.L  #8,%D0
 6001      0008 
 6002 ad14 6E00 FCEE 	         BGT     ER             | GREATER THAN 8
 6003               	
 6004 ad18 0200 0007 	         ANDI.B  #0x7,%D0       | MAKE 8 INTO 0
 6005 ad1c EE58      	MSL150:  ROR.W   #7,%D0
 6006 ad1e 0242 F1FF 	         ANDI.W  #0xF1FF,%D2
 6007 ad22 8440      	         OR.W    %D0,%D2        | COUNT/REG
 6008               	
 6009 ad24 6100 FCC4 	         BSR     COMMA
 6010               	
 6011 ad28 6100 F510 	         BSR     GETREGD
 6012 ad2c 8440      	         OR.W    %D0,%D2
 6013 ad2e 6000 FCDC 	         BRA     CMMD2
 6014               	
 6015               	MSL200:  .align  2              | D@,D@
 6016 ad32 0C00 0044 	         CMPI.B  #'D',%D0
 6017 ad36 660C      	         BNE.S   MSL300
 6018               	
 6019               	*        D@,D@
 6020 ad38 0042 0020 	         ORI.W   #0x20,%D2
 6021 ad3c 538D      	         SUBQ.L  #1,%A5
 6022 ad3e 6100 F4FA 	         BSR     GETREGD
 6023 ad42 60D8      	         BRA.S   MSL150
 6024               	
 6025               	MSL300:  .align  2              | <EA>      SHIFT MEMORY
 6026 ad44 538D      	         SUBQ.L  #1,%A5
 6027 ad46 0042 00C0 	         ORI.W   #0x00C0,%D2    | SIZE = MEMORY
 6028               	
 6029 ad4a 0242 FFC0 	         ANDI.W  #0xFFC0,%D2    | REMOVE "SHIFT MEMORY" BITS
 6030               	
 6031 ad4e 0C69 0040 	         CMPI.W  #0x0040,TLENGTH(%A1)
 6031      000C 
 6032 ad54 6658      	         BNE.S   ER2            | NOT .WORD
 6033               	
 6034 ad56 6100 F52E 	         BSR     EAM
 6035 ad5a 8446      	         OR.W    %D6,%D2
 6036 ad5c 6000 FCAE 	         BRA     CMMD2
 6037               	
 6038 ad60 6100 0334 	MSCC:    BSR     SIZEBYTE       | (INDEX 29) NBCD SCC TAS
 6039               	
 6040 ad64 6100 F514 	         BSR     EADA           | DATA ALTERABLE ONLY
 6041 ad68 8446      	         OR.W    %D6,%D2
 6042 ad6a 6000 FCA0 	         BRA     CMMD2
 6043               	
 6044               	MBCHG:   .align  2              | (9)
68K GAS  tutor13.s 			page 124


 6045 ad6e 0C15 0023 	         CMPI.B  #'#',(%A5)
 6046 ad72 6648      	         BNE.S   MB200
 6047               	
 6048 ad74 343C 0840 	         MOVE.W  #0x0840,%D2    | NEW OP-CODE MASK
 6049               	
 6050 ad78 528D      	MB100:   ADDQ.L  #1,%A5
 6051 ad7a 6100 F44E 	         BSR     EV             | EVALUATE EXPRESSION
 6052 ad7e 0C80 0000 	         CMPI.L  #33,%D0
 6052      0021 
 6053 ad84 6E28      	         BGT.S   ER2            | (MODULO 32)
 6054 ad86 3340 0002 	         MOVE.W  %D0,TDATA+2(%A1)
 6055 ad8a 5483      	         ADDQ.L  #2,%D3         | STORE POINTER
 6056               	
 6057 ad8c 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 6058               	
 6059 ad90 6100 FC58 	MB105:   BSR     COMMA
 6060               	
 6061 ad94 6100 F4E4 	         BSR     EADA           | DESTINATION
 6062 ad98 8446      	         OR.W    %D6,%D2
 6063               	
 6064 ad9a 4A29 000B 	         TST.B   TLSPEC(%A1)    | ..
 6065 ad9e 6718      	         BEQ.S   MB185          | DEFAULT
 6066               	
 6067 ada0 0246 0038 	         ANDI.W  #0x0038,%D6
 6068 ada4 660C      	         BNE.S   MB145          | DESTINATION <EA> WAS NOT D@
 6069               	
 6070 ada6 0C69 0080 	         CMPI.W  #0x80,TLENGTH(%A1) | DESTINATION <EA> WAS D@
 6070      000C 
 6071 adac 670A      	         BEQ.S   MB185          | LENGTH IS .L
 6072 adae 6000 FC54 	ER2:     BRA     ER
 6073               	
 6074 adb2 4A69 000C 	MB145:   TST.W   TLENGTH(%A1)
 6075 adb6 66F6      	         BNE.S   ER2            | NOT BYTE LENGTH
 6076               	
 6077 adb8 6000 FC52 	MB185:   BRA     CMMD2
 6078               	
 6079 adbc 6100 F47C 	MB200:   BSR     GETREGD        | DYNAMIC
 6080 adc0 EE58      	         ROR.W   #7,%D0
 6081 adc2 8440      	         OR.W    %D0,%D2
 6082               	
 6083 adc4 60CA      	         BRA.S   MB105
 6084               	
 6085 adc6 0C15 0023 	MBSET:   CMPI.B  #'#',(%A5)     | (INDEX 11) BCLR BSET
 6086 adca 66F0      	         BNE.S   MB200
 6087               	
 6088 adcc 343C 08C0 	         MOVE.W  #0x08C0,%D2
 6089 add0 60A6      	         BRA.S   MB100
 6090               	
 6091 add2 0C15 0023 	MBCLR:   CMPI.B  #'#',(%A5)     | (INDEX 30)
 6092 add6 66E4      	         BNE.S   MB200
 6093               	
 6094 add8 343C 0880 	         MOVE.W  #0x0880,%D2
 6095 addc 609A      	         BRA.S   MB100
 6096               	
 6097 adde 0C15 0023 	MBTST:   CMPI.B  #'#',(%A5)     | (INDEX 31)
 6098 ade2 66D8      	         BNE.S   MB200
 6099               	
68K GAS  tutor13.s 			page 125


 6100 ade4 343C 0800 	         MOVE.W  #0x0800,%D2
 6101 ade8 608E      	         BRA.S   MB100
 6102               	
 6103               	MDBCC:   .align  2              | (INDEX 8)
 6104 adea 6100 F44E 	         BSR     GETREGD
 6105 adee 8440      	         OR.W    %D0,%D2
 6106               	
 6107 adf0 6100 FBF8 	         BSR     COMMA
 6108 adf4 613C      	         BSR.S   EVSR
 6109 adf6 601A      	         BRA.S   MBRA23
 6110               	
 6111               	*  SIZE   .S  =  .W   (DEFAULT)
 6112               	*         .L  =  .L
 6113               	MBRA:    .align  2              | (INDEX 10)
 6114 adf8 6138      	         BSR.S   EVSR
 6115               	
 6116 adfa 0C69 0080 	         CMPI.W  #0x0080,TLENGTH(%A1)
 6116      000C 
 6117 ae00 6710      	         BEQ.S   MBRA23         | FORCED LONG
 6118               	
 6119 ae02 6100 F724 	         BSR     EA8BITS        | -128 TO +127
 6120 ae06 660A      	         BNE.S   MBRA23         | NOT 8 BIT VALUE
 6121               	
 6122 ae08 8405      	         OR.B    %D5,%D2
 6123 ae0a 6000 FC00 	         BRA     CMMD2          | .SHORT
 6124               	
 6125 ae0e 6000 FBF4 	EVER:    BRA     ER             | ERROR HANDLER
 6126               	
 6127 ae12 4A29 000B 	MBRA23:  TST.B   TLSPEC(%A1)
 6128 ae16 6708      	         BEQ.S   MBRA27
 6129 ae18 0C69 0040 	         CMPI.W  #0x0040,TLENGTH(%A1)
 6129      000C 
 6130 ae1e 67EE      	         BEQ.S   EVER           | .S SPECIFIED
 6131               	MBRA27:
 6132               	
 6133 ae20 2A04      	         MOVE.L  %D4,%D5        | RESTORE D5
 6134 ae22 6100 F6F0 	         BSR     EA16BITS       | -32K TO +32K
 6135 ae26 3345 0002 	         MOVE.W  %D5,TDATA+2(%A1)
 6136 ae2a 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 6137 ae2e 6000 FBDC 	         BRA     CMMD2
 6138               	
 6139 ae32 6100 F396 	EVSR:    BSR     EV
 6140 ae36 0C15 0020 	         CMPI.B  #BLANK,(%A5)
 6141 ae3a 66D2      	         BNE.S   EVER           | DID NOT TERMINATE WITH SPACE
 6142               	
 6143 ae3c 2A00      	         MOVE.L  %D0,%D5
 6144 ae3e E280      	         ASR.L   #1,%D0
 6145 ae40 65CC      	         BCS.S   EVER           | ODD VALUE
 6146 ae42 2829 000E 	         MOVE.L  PCOUNTER(%A1),%D4
 6147 ae46 5484      	         ADDQ.L  #2,%D4         | D4 = PC + 2
 6148 ae48 9A84      	         SUB.L   %D4,%D5
 6149 ae4a 67C2      	         BEQ.S   EVER           | ZERO; SPECIAL CASE ERROR
 6150 ae4c 2805      	         MOVE.L  %D5,%D4
 6151 ae4e 4E75      	         RTS
 6152               	
 6153               	MCHK:    .align  2              | (INDEX 12) CHK DIV MUL
 6154 ae50 6100 0238 	         BSR     SIZEWORD
68K GAS  tutor13.s 			page 126


 6155               	
 6156 ae54 6100 F43C 	         BSR     EADADDR        | DATA ADDRESSING ONLY
 6157 ae58 8446      	         OR.W    %D6,%D2
 6158               	
 6159 ae5a 6100 FB8E 	         BSR     COMMA
 6160               	
 6161 ae5e 6100 F3DA 	         BSR     GETREGD
 6162 ae62 EE58      	         ROR.W   #7,%D0
 6163 ae64 8440      	         OR.W    %D0,%D2
 6164               	
 6165 ae66 6000 FBA4 	         BRA     CMMD2
 6166               	
 6167               	MCLR:    .align  2              | (INDEX 13)
 6168 ae6a 6100 F3C8 	         BSR     FSIZE
 6169               	
 6170 ae6e 6100 F40A 	         BSR     EADA           | DATA ALTERABLE ONLY
 6171 ae72 8446      	         OR.W    %D6,%D2
 6172 ae74 6000 FB96 	         BRA     CMMD2
 6173               	
 6174               	* SIZE = BYTE, WORD, LONG
 6175               	MCMPM:   .align  2              | (INDEX 14)
 6176 ae78 6100 F3BA 	         BSR     FSIZE
 6177               	
 6178 ae7c 3E3C 0008 	         MOVE.W  #0x0008,%D7
 6179 ae80 6100 F420 	         BSR     EA             | -(A@)   ONLY
 6180 ae84 0246 0007 	         ANDI.W  #7,%D6
 6181 ae88 8446      	         OR.W    %D6,%D2
 6182               	
 6183 ae8a 6100 FB5E 	         BSR     COMMA
 6184               	
 6185 ae8e 3E3C 0008 	         MOVE.W  #0x0008,%D7
 6186 ae92 6100 F40E 	         BSR     EA
 6187 ae96 0246 0007 	         ANDI.W  #7,%D6
 6188 ae9a EE5E      	         ROR.W   #7,%D6
 6189 ae9c 8446      	         OR.W    %D6,%D2
 6190 ae9e 6000 FB6C 	         BRA     CMMD2
 6191               	
 6192               	MEXG:    .align  2              | (INDEX 16)
 6193 aea2 6100 01D6 	         BSR     SIZELONG
 6194               	
 6195 aea6 6100 F3BA 	         BSR     GETREGAD
 6196 aeaa 2800      	         MOVE.L  %D0,%D4        | D4 = REG NUMBER
 6197 aeac 2A01      	         MOVE.L  %D1,%D5        | D5 = REG TYPE
 6198               	
 6199 aeae 6100 FB3A 	         BSR     COMMA          | TEST FOR COMMA
 6200               	
 6201 aeb2 6100 F3AE 	         BSR     GETREGAD
 6202               	
 6203 aeb6 BA81      	         CMP.L   %D1,%D5
 6204 aeb8 6714      	         BEQ.S   MEXG35         | BOTH REGS THE SAME
 6205               	
 6206               	*  DX,AY  OR  AY,DX
 6207 aeba 0042 0088 	         ORI.W   #0x88,%D2      | MODE
 6208 aebe 4A01      	         TST.B   %D1
 6209 aec0 6602      	         BNE.S   MEXG25
 6210               	
 6211 aec2 C144      	         EXG     %D0,%D4        | SWAP SOURCE & DESTINATION
68K GAS  tutor13.s 			page 127


 6212               	
 6213 aec4 8440      	MEXG25:  OR.W    %D0,%D2        | .......MMMMMYYY
 6214 aec6 EE5C      	         ROR.W   #7,%D4
 6215 aec8 8444      	         OR.W    %D4,%D2        | ....XXXMMMMMYYY
 6216 aeca 6000 FB40 	         BRA     CMMD2
 6217               	
 6218 aece 0042 0040 	MEXG35:  ORI.W   #0x0040,%D2    | OP-MODE
 6219 aed2 4A01      	         TST.B   %D1
 6220 aed4 67EE      	         BEQ.S   MEXG25         | DX,DY
 6221               	
 6222 aed6 0042 0048 	         ORI.W   #0x0048,%D2    | AX,AY
 6223 aeda 60E8      	         BRA.S   MEXG25
 6224               	
 6225               	MEXT:    .align  2              | (INDEX 17)
 6226 aedc 4A69 000C 	         TST.W   TLENGTH(%A1)
 6227 aee0 6700 FB22 	         BEQ     ER             | BYTE SIZE NOT ALLOWED
 6228               	
 6229 aee4 6100 F34E 	         BSR     FSIZE          | .W = ........10......
 6230 aee8 0642 0040 	         ADDI.W  #0x0040,%D2    | .L = ........11......
 6231               	
 6232 aeec 6100 F34C 	         BSR     GETREGD
 6233 aef0 8440      	         OR.W    %D0,%D2
 6234 aef2 6000 FB18 	         BRA     CMMD2
 6235               	
 6236               	MMOVEM:  .align  2              | (INDEX 27)
 6237 aef6 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0 | SIZE BITS  76 TO 6
 6238 aefa 6700 FB08 	         BEQ     ER             | BYTE       00  ERROR
 6239 aefe E248      	         LSR.W   #1,%D0         | WORD       01    0
 6240 af00 0240 0040 	         ANDI.W  #0x0040,%D0    | LONG       10    1
 6241 af04 8440      	         OR.W    %D0,%D2
 6242               	
 6243 af06 5429 000A 	         ADDQ.B  #2,TNB(%A1)    | NUMBER OF BYTES
 6244 af0a 5483      	         ADDQ.L  #2,%D3         | FORCE STORE PTR PAST MASK
 6245               	
 6246 af0c 0C15 0041 	         CMPI.B  #'A',(%A5)
 6247 af10 671E      	         BEQ.S   MMM44
 6248 af12 0C15 0044 	         CMPI.B  #'D',(%A5)
 6249 af16 6718      	         BEQ.S   MMM44
 6250               	
 6251               	*    <EA>,<REGISTER LIST>       | MEMORY TO REGISTER
 6252 af18 0042 0400 	         ORI.W   #0x0400,%D2    | DIRECTION BIT
 6253               	
 6254 af1c 3E3C 07EC 	         MOVE.W  #0x7EC,%D7     | MODES ALLOWED
 6255 af20 6100 F380 	         BSR     EA
 6256 af24 8446      	         OR.W    %D6,%D2
 6257               	
 6258 af26 6100 FAC2 	         BSR     COMMA
 6259               	
 6260 af2a 612A      	         BSR.S   MMM48
 6261 af2c 6000 FADE 	         BRA     CMMD2
 6262               	
 6263               	*   <REGISTER LIST>,<EA>        | REGISTER TO MEMORY
 6264               	MMM44:   .align  2
 6265               	
 6266               	* EVALUATE DESTINATION FIRST
 6267 af30 6100 FAC0 	MMM46:   BSR     GETCHAR
 6268 af34 0C00 002C 	         CMPI.B  #',',%D0       | FIND COMMA
68K GAS  tutor13.s 			page 128


 6269 af38 66F6      	         BNE.S   MMM46
 6270               	
 6271 af3a 3E3C 01F4 	         MOVE.W  #0x1F4,%D7     | MODES ALLOWED
 6272 af3e 6100 F362 	         BSR     EA
 6273 af42 8446      	         OR.W    %D6,%D2
 6274 af44 234D 0016 	         MOVE.L  %A5,PENDOP(%A1) | END OF OPERAND
 6275 af48 2A69 0012 	         MOVE.L  PTROP(%A1),%A5
 6276 af4c 6108      	         BSR.S   MMM48          | EVALUATE REGISTERS
 6277 af4e 2A69 0016 	         MOVE.L  PENDOP(%A1),%A5 | POINTER TO END OF OPERAND
 6278 af52 6000 FAB8 	         BRA     CMMD2
 6279               	
 6280               	*        %D6 = CORRESPONDENCE MASK
 6281               	*        %D4 = CONTROL  0xFF "-BLANK/"
 6282 af56 4286      	MMM48:   CLR.L   %D6            | MASK
 6283 af58 78FF      	         MOVEQ   #-1,%D4        | CONTROL = $FF
 6284               	
 6285 af5a 6100 FA96 	RL111:   BSR     GETCHAR
 6286 af5e 0C00 002C 	         CMPI.B  #',',%D0
 6287 af62 6706      	         BEQ.S   RL114          | DONE; FOUND COMMA
 6288 af64 0C00 0020 	         CMPI.B  #BLANK,%D0
 6289 af68 6602      	         BNE.S   RL115          | NOT SPACE
 6290 af6a 4E75      	RL114:   RTS                    | DONE
 6291               	
 6292 af6c 0C00 002F 	RL115:   CMPI.B  #'/',%D0
 6293 af70 6614      	         BNE.S   RL444
 6294               	
 6295 af72 4A04      	         TST.B   %D4            | CONTROL
 6296 af74 6B00 FA8E 	         BMI     ER
 6297 af78 2800      	         MOVE.L  %D0,%D4        | CONTROL = "/"
 6298 af7a 6100 F2E6 	RL333:   BSR     GETREGAD
 6299 af7e 8200      	         OR.B    %D0,%D1        | D1 = BIT POSITION
 6300 af80 1A01      	         MOVE.B  %D1,%D5        | D5 = LAST REGISTER ENTERED
 6301 af82 6146      	         BSR.S   SETBIT
 6302 af84 60D4      	         BRA.S   RL111
 6303               	
 6304 af86 0C00 002D 	RL444:   CMPI.B  #'-',%D0
 6305 af8a 6630      	         BNE.S   RL666
 6306               	
 6307 af8c 0C04 002F 	         CMPI.B  #'/',%D4       | CONTROL
 6308 af90 6600 FA72 	         BNE     ER
 6309 af94 2800      	         MOVE.L  %D0,%D4        | CONTROL = "-"
 6310 af96 6100 F2CA 	         BSR     GETREGAD
 6311 af9a 8200      	         OR.B    %D0,%D1
 6312 af9c 2E01      	         MOVE.L  %D1,%D7        | D7 = NOW REGISTER
 6313 af9e 1005      	         MOVE.B  %D5,%D0        | D5 = LAST REG
 6314 afa0 B300      	         EOR.B   %D1,%D0
 6315 afa2 0200 0038 	         ANDI.B  #0x38,%D0
 6316 afa6 6600 FA5C 	         BNE     ER             | NOT MATCED SET
 6317 afaa BA01      	         CMP.B   %D1,%D5
 6318 afac 6A00 FA56 	         BPL     ER
 6319               	
 6320 afb0 5285      	RL555:   ADDQ.L  #1,%D5
 6321 afb2 2205      	         MOVE.L  %D5,%D1
 6322 afb4 6114      	         BSR.S   SETBIT
 6323 afb6 BA07      	         CMP.B   %D7,%D5
 6324 afb8 6BF6      	         BMI.S   RL555
 6325 afba 609E      	         BRA.S   RL111
68K GAS  tutor13.s 			page 129


 6326               	
 6327 afbc 4A04      	RL666:   TST.B   %D4
 6328 afbe 6A00 FA44 	         BPL     ER
 6329 afc2 183C 002F 	         MOVE.B  #'/',%D4       | CONTROL = "/"
 6330 afc6 538D      	         SUBQ.L  #1,%A5
 6331 afc8 60B0      	         BRA.S   RL333
 6332               	
 6333 afca 41FA 001A 	SETBIT:  LEA     MTBL(%PC),%A0  | SET BIT IN CORRESPONDENCE MASK
 6334 afce 2002      	         MOVE.L  %D2,%D0
 6335 afd0 0240 0038 	         ANDI.W  #0x38,%D0
 6336 afd4 0C40 0020 	         CMPI.W  #0x20,%D0
 6337 afd8 6604      	         BNE.S   RL30           | NOT PREDECREMENT
 6338 afda 1230 1000 	         MOVE.B  (%A0,%D1.W),%D1 | D1 = BIT  (FOR SURE)
 6339 afde 03C6      	RL30:    BSET    %D1,%D6
 6340               	
 6341 afe0 3346 0002 	         MOVE.W  %D6,TDATA+2(%A1) | SAVE CORRESPONDENCE MASK
 6342 afe4 4E75      	         RTS
 6343               	
 6344 afe6 0F0E 0D0C 	MTBL:    DC.B    15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
 6344      0B0A 0908 
 6344      0706 0504 
 6344      0302 0100 
 6345               	
 6346               	*   D@,<DATA>(A@)
 6347               	*   <DATA>(A@),D@
 6348               	*         (A@),D@            FORCED TO 0(A@),%D0
 6349               	*         D@,(A@)            FORCED TO %D0,0(A@)
 6350               	*
 6351               	*  SIZE = WORD, LONG
 6352               	MMOVEP:  .align  2              | (INDEX 33)
 6353 aff6 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0
 6354 affa 6700 FA08 	         BEQ     ER             | .BYTE NOT ALLOWED
 6355 affe E248      	         LSR.W   #1,%D0
 6356 b000 0240 0040 	         ANDI.W  #0x0040,%D0
 6357 b004 8440      	         OR.W    %D0,%D2        | SIZE
 6358               	
 6359 b006 3E3C 0025 	         MOVE.W  #0x25,%D7
 6360 b00a 6100 F296 	         BSR     EA             | D6 = MODE
 6361               	
 6362 b00e 6100 F9DA 	         BSR     COMMA
 6363               	
 6364 b012 2006      	         MOVE.L  %D6,%D0
 6365 b014 0240 0038 	         ANDI.W  #0x38,%D0
 6366 b018 0C00 0000 	         CMPI.B  #0x0,%D0
 6367 b01c 670A      	         BEQ.S   MMP344         | D@,<DATA>(A@)
 6368               	
 6369               	*    <DATA>(A@),D@
 6370 b01e 6100 F21A 	         BSR     GETREGD
 6371 b022 EE58      	         ROR.W   #7,%D0
 6372 b024 8440      	         OR.W    %D0,%D2        | D@
 6373 b026 6010      	         BRA.S   MMP348
 6374               	
 6375 b028 0042 0080 	MMP344:  ORI.W   #0x0080,%D2    | REGISTER TO MEMORY
 6376               	
 6377 b02c EE5E      	         ROR.W   #7,%D6
 6378 b02e 8446      	         OR.W    %D6,%D2        | D@
 6379               	
68K GAS  tutor13.s 			page 130


 6380 b030 3E3C 0024 	         MOVE.W  #0x24,%D7
 6381 b034 6100 F26C 	         BSR     EA
 6382 b038 2006      	MMP348:  MOVE.L  %D6,%D0
 6383 b03a 0246 0007 	         ANDI.W  #7,%D6
 6384 b03e 8446      	         OR.W    %D6,%D2        | A@
 6385               	
 6386 b040 0240 0038 	         ANDI.W  #0x38,%D0
 6387 b044 0C00 0010 	         CMPI.B  #0x10,%D0
 6388 b048 660A      	         BNE.S   MMP368         | <DATA>(A@)
 6389               	
 6390 b04a 4269 0002 	         CLR.W   TDATA+2(%A1)   | <DATA> FORCED TO ZERO;  "(A@)"
 6391 b04e 5429 000A 	         ADDQ.B  #2,TNB(%A1)    | NUMBER OF BYTES
 6392 b052 5483      	         ADDQ.L  #2,%D3         | STORE POINTER
 6393 b054 6000 F9B6 	MMP368:  BRA     CMMD2
 6394               	
 6395               	MMOVEQ:  .align  2              | (INDEX 34)
 6396 b058 6100 01FA 	         BSR     GETIMM
 6397 b05c 2A00      	         MOVE.L  %D0,%D5
 6398               	
 6399 b05e 6100 F4C8 	         BSR     EA8BITS        | -128 TO +127
 6400 b062 6600 F9A0 	         BNE     ER
 6401 b066 8405      	         OR.B    %D5,%D2        | D5 = VALUE
 6402               	
 6403 b068 6100 F980 	         BSR     COMMA
 6404               	
 6405 b06c 6100 F1CC 	         BSR     GETREGD        | D@
 6406 b070 EE58      	         ROR.W   #7,%D0
 6407               	
 6408 b072 8440      	MMQ20:   OR.W    %D0,%D2
 6409 b074 6104      	         BSR.S   SIZELONG
 6410 b076 6000 F994 	         BRA     CMMD2
 6411               	
 6412 b07a 4A29 000B 	SIZELONG:TST.B   TLSPEC(%A1)    | MUST BE .LONG
 6413 b07e 6708      	         BEQ.S   SI201          | DEFAULT SIZE OK
 6414 b080 0C69 0080 	         CMPI.W  #0x0080,TLENGTH(%A1)
 6414      000C 
 6415 b086 660A      	         BNE.S   ER10           | NOT .LONG
 6416 b088 4E75      	SI201:   RTS
 6417               	
 6418 b08a 0C69 0040 	SIZEWORD:CMPI.W  #0x0040,TLENGTH(%A1) | MUST BE .WORD
 6418      000C 
 6419 b090 67F6      	         BEQ.S   SI201          | [RTS]
 6420 b092 6000 F970 	ER10:    BRA     ER
 6421               	
 6422 b096 4A29 000B 	SIZEBYTE:TST.B   TLSPEC(%A1)
 6423 b09a 6706      	         BEQ.S   SI222          | DEFAULT SIZE OK
 6424 b09c 4A69 000C 	         TST.W   TLENGTH(%A1)
 6425 b0a0 66F0      	         BNE.S   ER10
 6426 b0a2 4E75      	SI222:   RTS
 6427               	
 6428               	MMOVE:   .align  2              | (INDEX 21)
 6429 b0a4 0C15 0053 	         CMPI.B  #'S',(%A5)
 6430 b0a8 661C      	         BNE.S   MMM40
 6431 b0aa 343C 40C0 	         MOVE.W  #0x40C0,%D2    | SR,<EA>
 6432 b0ae 528D      	         ADDQ.L  #1,%A5
 6433 b0b0 0C1D 0052 	         CMPI.B  #'R',(%A5)+
 6434 b0b4 66DC      	         BNE.S   ER10
68K GAS  tutor13.s 			page 131


 6435               	
 6436 b0b6 6100 F932 	         BSR     COMMA
 6437               	
 6438 b0ba 6100 F1BE 	         BSR     EADA           | DATA ALTERABLE ONLY (DESTINATION)
 6439               	
 6440 b0be 8446      	MM315:   OR.W    %D6,%D2
 6441 b0c0 61C8      	         BSR.S   SIZEWORD
 6442 b0c2 6000 F948 	         BRA     CMMD2
 6443               	
 6444 b0c6 0C15 0055 	MMM40:   CMPI.B  #'U',(%A5)
 6445 b0ca 661C      	         BNE.S   MMM50
 6446 b0cc 528D      	         ADDQ.L  #1,%A5
 6447 b0ce 0C1D 0053 	         CMPI.B  #'S',(%A5)+
 6448 b0d2 66BE      	         BNE.S   ER10
 6449 b0d4 0C1D 0050 	         CMPI.B  #'P',(%A5)+
 6450 b0d8 66B8      	         BNE.S   ER10
 6451               	
 6452 b0da 6100 F90E 	         BSR     COMMA
 6453               	
 6454 b0de 343C 4E68 	         MOVE.W  #0x4E68,%D2    | USP,A@
 6455 b0e2 6100 F170 	         BSR     GETREGA
 6456 b0e6 608A      	         BRA.S   MMQ20
 6457               	
 6458               	* GET EXCEPTIONS FROM DESTINATION
 6459               	MMM50:   .align  2
 6460               	
 6461 b0e8 6100 FBF4 	         BSR     A5TODEST       | MOVE A5 TO DESTINATION
 6462               	
 6463 b0ec 101D      	         MOVE.B  (%A5)+,%D0
 6464 b0ee 0C00 0043 	         CMPI.B  #'C',%D0
 6465 b0f2 6622      	         BNE.S   MMM60
 6466 b0f4 0C1D 0043 	         CMPI.B  #'C',(%A5)+
 6467 b0f8 6698      	         BNE.S   ER10
 6468 b0fa 0C1D 0052 	         CMPI.B  #'R',(%A5)+
 6469 b0fe 6692      	         BNE.S   ER10
 6470 b100 343C 44C0 	         MOVE.W  #0x44C0,%D2    | <EA>,CCR
 6471               	
 6472 b104 234D 0016 	MM508:   MOVE.L  %A5,PENDOP(%A1) | SAVE POINTER
 6473 b108 2A69 0012 	         MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO OPERAND
 6474               	
 6475 b10c 6100 F184 	         BSR     EADADDR        | DATA ADDRESSING ONLY (SOURCE)
 6476 b110 2A69 0016 	         MOVE.L  PENDOP(%A1),%A5
 6477 b114 60A8      	         BRA.S   MM315
 6478               	
 6479 b116 0C00 0053 	MMM60:   CMPI.B  #'S',%D0
 6480 b11a 660E      	         BNE.S   MM70
 6481 b11c 343C 46C0 	         MOVE.W  #0x46C0,%D2    | <EA>,SR
 6482 b120 0C1D 0052 	         CMPI.B  #'R',(%A5)+
 6483 b124 6600 F8DE 	         BNE     ER
 6484 b128 60DA      	         BRA.S   MM508
 6485               	
 6486 b12a 0C00 0055 	MM70:    CMPI.B  #'U',%D0
 6487 b12e 6628      	         BNE.S   MM80
 6488 b130 343C 4E60 	         MOVE.W  #0x4E60,%D2    | A@,USP
 6489 b134 0C1D 0053 	         CMPI.B  #'S',(%A5)+
 6490 b138 6600 F8CA 	         BNE     ER
 6491 b13c 0C1D 0050 	         CMPI.B  #'P',(%A5)+
68K GAS  tutor13.s 			page 132


 6492 b140 6600 F8C2 	         BNE     ER
 6493               	
 6494 b144 234D 0016 	         MOVE.L  %A5,PENDOP(%A1)
 6495 b148 2A69 0012 	         MOVE.L  PTROP(%A1),%A5
 6496 b14c 6100 F106 	         BSR     GETREGA
 6497 b150 2A69 0016 	         MOVE.L  PENDOP(%A1),%A5 | RESTORE A5
 6498 b154 6000 FF1C 	         BRA     MMQ20
 6499               	
 6500 b158 2A69 0012 	MM80:    MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO SOURCE FIELD
 6501 b15c 6100 F0D6 	         BSR     FSIZE          | GET SIZE (BITS  7 - 6)
 6502 b160 ED4A      	         LSL.W   #6,%D2         | ADJUST TO(BITS 13-12)
 6503 b162 0802 000D 	         BTST    #13,%D2
 6504 b166 6608      	         BNE.S   MM804          | .L 10 TO 10
 6505 b168 0642 1000 	         ADDI.W  #0x1000,%D2    | .W 01 TO 11
 6506 b16c 0042 1000 	         ORI.W   #0x1000,%D2    | .B 00 TO 01
 6507 b170 6100 F12C 	MM804:   BSR     EAALL          | SOURCE; ALL MODES ALLOWED
 6508 b174 8446      	         OR.W    %D6,%D2
 6509               	
 6510               	* IF BYTE SIZE; "ADDRESS REGISTER DIRECT" NOT ALLOWED
 6511               	
 6512 b176 2002      	         MOVE.L  %D2,%D0
 6513 b178 0240 3000 	         ANDI.W  #0x3000,%D0
 6514 b17c 0C40 1000 	         CMPI.W  #0x1000,%D0
 6515 b180 660C      	         BNE.S   MM806          | NOT .B SIZE
 6516 b182 0206 0038 	         ANDI.B  #0x38,%D6
 6517 b186 0C06 0008 	         CMPI.B  #0x08,%D6
 6518 b18a 6700 F878 	         BEQ     ER
 6519               	MM806:   .align  2
 6520               	
 6521 b18e 6100 F85A 	         BSR     COMMA
 6522               	
 6523 b192 3E3C 01FF 	         MOVE.W  #0x1FF,%D7     | DATA ALTERABLE + A@
 6524 b196 6100 F10A 	         BSR     EA
 6525               	
 6526 b19a 2006      	         MOVE.L  %D6,%D0        | DESTINATION
 6527 b19c 0240 0038 	         ANDI.W  #0x0038,%D0
 6528 b1a0 0C40 0008 	         CMPI.W  #0x0008,%D0
 6529 b1a4 6712      	         BEQ.S   MMOVEA1        | A@ MAKE MOVEA
 6530               	
 6531               	* POSITION REGISTER AND MODE OF DESTINATION
 6532               	
 6533 b1a6 E69E      	MM825:   ROR.L   #3,%D6         | RRR............. .............MMM
 6534 b1a8 E65E      	         ROR.W   #3,%D6         |                  MMM.............
 6535 b1aa 4846      	         SWAP    %D6            | MMM............. RRR.............
 6536 b1ac E75E      	         ROL.W   #3,%D6         |                  .............RRR
 6537 b1ae E39E      	         ROL.L   #1,%D6         | MM.............. ............RRRM
 6538 b1b0 E19E      	         ROL.L   #8,%D6         | ................ ....RRRMMM......
 6539 b1b2 8446      	         OR.W    %D6,%D2
 6540 b1b4 6000 F856 	         BRA     CMMD2
 6541               	
 6542 b1b8 4283      	MMOVEA1: CLR.L   %D3
 6543 b1ba 137C 0002 	         MOVE.B  #2,TNB(%A1)
 6543      000A 
 6544               	
 6545               	MMOVEA:  .align  2              | (INDEX 32)
 6546 b1c0 2A69 0012 	         MOVE.L  PTROP(%A1),%A5 | A5 = POINTER TO OPERAND
 6547               	
68K GAS  tutor13.s 			page 133


 6548 b1c4 3429 000C 	         MOVE.W  TLENGTH(%A1),%D2 | D0 = SIZE
 6549 b1c8 6700 F83A 	         BEQ     ER             | .BYTE NOT ALLOWED
 6550               	
 6551 b1cc ED4A      	         LSL.W   #6,%D2         | .SIZE
 6552 b1ce 0802 000C 	         BTST    #12,%D2
 6553 b1d2 6704      	         BEQ.S   MMA225         | .L = ..10
 6554 b1d4 0042 3000 	         ORI.W   #0x3000,%D2    | .W = ..11
 6555               	MMA225:
 6556               	
 6557 b1d8 6100 F0C4 	         BSR     EAALL          | ALL MODES ALLOWED
 6558 b1dc 8446      	         OR.W    %D6,%D2
 6559               	
 6560 b1de 6100 F80A 	         BSR     COMMA
 6561               	
 6562 b1e2 3E3C 0002 	         MOVE.W  #0x0002,%D7    | A@ ONLY
 6563 b1e6 6100 F0BA 	         BSR     EA
 6564 b1ea 60BA      	         BRA.S   MM825
 6565               	
 6566               	MJMP:    .align  2              | (INDEX 18)
 6567 b1ec 4A29 000B 	         TST.B   TLSPEC(%A1)
 6568 b1f0 671C      	         BEQ.S   MJMP32         | DEFAULT (ALLOW EITHER .S OR .L)
 6569 b1f2 3029 000C 	         MOVE.W  TLENGTH(%A1),%D0
 6570 b1f6 6700 F80C 	         BEQ     ER             | .B NOT ALLOWED
 6571 b1fa 3E3C 06E4 	         MOVE.W  #0x6E4,%D7     | D7 = MODES ALLOWED
 6572 b1fe 0C40 0040 	         CMPI.W  #0x40,%D0
 6573 b202 6704      	         BEQ.S   MJMP22         | .S SPECIFIED (.W ACCEPTED)
 6574 b204 3E3C 8764 	         MOVE.W  #0x8764,%D7    | MODE FOR .L
 6575 b208 6100 F098 	MJMP22:  BSR     EA
 6576 b20c 6004      	         BRA.S   MJMP42
 6577               	
 6578 b20e 6100 F070 	MJMP32:  BSR     EAC            | CONTROL ADDRESSING ONLY
 6579 b212 8446      	MJMP42:  OR.W    %D6,%D2
 6580 b214 6000 F7F6 	         BRA     CMMD2
 6581               	
 6582               	* SIZE = LONG
 6583               	MLEA:    .align  2              | (INDEX 19)
 6584 b218 6100 FE60 	         BSR     SIZELONG
 6585               	
 6586 b21c 6100 F062 	         BSR     EAC            | CONTROL ADDRESSING ONLY
 6587 b220 8446      	         OR.W    %D6,%D2
 6588               	
 6589 b222 6100 F7C6 	         BSR     COMMA
 6590               	
 6591 b226 6100 F02C 	         BSR     GETREGA
 6592 b22a EE58      	         ROR.W   #7,%D0
 6593 b22c 8440      	         OR.W    %D0,%D2
 6594 b22e 6000 F7DC 	         BRA     CMMD2
 6595               	
 6596               	* SIZE = LONG
 6597               	MPEA:    .align  2              | (INDEX 36)
 6598 b232 6100 FE46 	         BSR     SIZELONG
 6599               	
 6600 b236 6100 F048 	         BSR     EAC            | CONTROL ADDRESSING ONLY
 6601 b23a 8446      	         OR.W    %D6,%D2
 6602 b23c 6000 F7CE 	         BRA     CMMD2
 6603               	
 6604               	MSWAP:   .align  2              | (INDEX 24)
68K GAS  tutor13.s 			page 134


 6605               	* SIZE WORD
 6606 b240 0C69 0040 	         CMPI.W  #0x0040,TLENGTH(%A1)
 6606      000C 
 6607 b246 6600 F7BC 	         BNE     ER             | NOT .W
 6608               	
 6609 b24a 6100 EFEE 	         BSR     GETREGD        | D@ ONLY
 6610 b24e 8440      	         OR.W    %D0,%D2
 6611 b250 6000 F7BA 	         BRA     CMMD2
 6612               	
 6613 b254 0C1D 0023 	GETIMM:  CMPI.B  #'#',(%A5)+
 6614 b258 6600 F7AA 	         BNE     ER
 6615               	
 6616 b25c 6100 EF6C 	         BSR     EV             | EVALUATE EXPRESSION
 6617 b260 4E75      	         RTS                    | D0 = VALUE
 6618               	
 6619 b262 6100 EFF0 	MLINK:   BSR     GETREGA        | (INDEX 20)
 6620 b266 8440      	         OR.W    %D0,%D2
 6621               	
 6622 b268 6100 F780 	         BSR     COMMA
 6623               	
 6624 b26c 61E6      	         BSR.S   GETIMM
 6625 b26e 2A00      	         MOVE.L  %D0,%D5
 6626 b270 6100 F2A2 	         BSR     EA16BITS       | -32K TO +32K
 6627 b274 3340 0002 	         MOVE.W  %D0,TDATA+2(%A1)
 6628               	
 6629 b278 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 6630 b27c 6000 F78E 	         BRA     CMMD2
 6631               	
 6632               	MSTOP:   .align  2              | (INDEX 23)
 6633               	* UNSIZED
 6634 b280 61D2      	         BSR.S   GETIMM
 6635 b282 0C80 0001 	         CMPI.L  #0x00010000,%D0
 6635      0000 
 6636 b288 6400 F77A 	         BCC     ER
 6637 b28c 3340 0002 	         MOVE.W  %D0,TDATA+2(%A1)
 6638 b290 5429 000A 	         ADDQ.B  #2,TNB(%A1)
 6639 b294 6000 F776 	         BRA     CMMD2
 6640               	
 6641               	MTRAP:   .align  2              | (INDEX 25)
 6642 b298 61BA      	         BSR.S   GETIMM
 6643 b29a 0C80 0000 	         CMPI.L  #16,%D0
 6643      0010 
 6644 b2a0 6400 F762 	         BCC     ER
 6645 b2a4 8440      	         OR.W    %D0,%D2
 6646 b2a6 6000 F764 	         BRA     CMMD2
 6647               	
 6648               	MUNLK:   .align  2              | (INDEX 26)
 6649               	* UNSIZED
 6650 b2aa 6100 EFA8 	         BSR     GETREGA
 6651 b2ae 8440      	         OR.W    %D0,%D2
 6652 b2b0 6000 F75A 	         BRA     CMMD2
 6653               	
 6654               	MDC:     .align  2              | (INDEX 37) .W ONLY ALLOWED
 6655 b2b4 6100 EF14 	         BSR     EV
 6656 b2b8 2A00      	         MOVE.L  %D0,%D5
 6657 b2ba 6100 F24E 	         BSR     EA16BIT        | ONLY .W ALLOWED     -32K TO +64K
 6658 b2be 3405      	         MOVE.W  %D5,%D2
68K GAS  tutor13.s 			page 135


 6659 b2c0 6000 F74A 	         BRA     CMMD2
 6660               	
 6661               	*-------------------------------------------------------------------------
 6662               	* File DCODE68K  68K ONE LINE DISASSEMBLER                        07/28/82
 6663               	
 6664               	*        CALLING SEQUENCE:
 6665               	*   %D0,%D1,%D2 = CODE TO BE DISASSEMBLED
 6666               	*   %A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
 6667               	*   %A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
 6668               	*        JSR       DCODE68K
 6669               	
 6670               	*        RETURN:
 6671               	*   %A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
 6672               	*   %A5 = POINTER TO LINE AS DISASSEMBLED
 6673               	*   %A6 = POINTER TO END OF LINE
 6674               	*
 6675               	* 01234567890123456789012345678901234567890123456789
 6676               	* AAAAAA FDATA.DDDDDDDDDDDDDD FOC.... FOP.....
 6677               	
 6678               	*FDATA   =       10             DATA FIELD
 6679               	*FOC     =       31             OP-CODE FIELD
 6680               	*FOP     =       39             OPERAND FIELD
 6681               	
 6682               	* CAUSES ORGIN MODULO 4
 6683               	*LONG:    .MACRO
 6684               	*         .align  2
 6685               	*         DS.B    (*-X)&2
 6686               	*         .ENDM
 6687               	
 6688               	X:       .align  4              | BASE ADDRESS THIS MODULE
 6689               	                                | LONG
 6690               	
 6691               	*  MOVEM REGISTERS TO EA
 6692               	*
 6693               	*        01001D001S......
 6694               	*        ..........XXXXXX       EFFECTIVE ADDRESS
 6695               	*        .........0......       WORD
 6696               	*        .........1......       LONG
 6697               	*        .....0..........       REGISTER TO MEMORY
 6698               	*        .....1..........       MEMORY TO REGISTER
 6699               	*
 6700               	
 6701               	IMOVEMFR:.align  2
 6702 b2c4 6100 071E 	         BSR     MOVEMS         | SIZE
 6703               	
 6704 b2c8 7C38      	         MOVEQ   #0x0038,%D6
 6705 b2ca CC54      	         AND.W   (%A4),%D6
 6706 b2cc 0C46 0020 	         CMPI.W  #0x0020,%D6
 6707 b2d0 6706      	         BEQ.S   IM7788         | PREDECREMENT MODE
 6708               	
 6709 b2d2 7C01      	         MOVEQ   #1,%D6         | D6 = INCREMENTER (BIT POSITION)
 6710 b2d4 7200      	         MOVEQ   #0,%D1         | D1 = BIT POSITION
 6711 b2d6 6004      	         BRA.S   IM7799
 6712               	
 6713 b2d8 7CFF      	IM7788:  MOVEQ   #-1,%D6        | D6 = DECREMENTER (BIT POSITION)
 6714 b2da 720F      	         MOVEQ   #15,%D1        | D1 = BIT POSITION
 6715 b2dc 6100 071A 	IM7799:  BSR     MOVEMR         | BUILD MASK WORD
68K GAS  tutor13.s 			page 136


 6716               	
 6717 b2e0 1CFC 002C 	         MOVE.B  #',',(%A6)+    | STORE COMMA
 6718               	
 6719 b2e4 5483      	         ADDQ.L  #2,%D3
 6720 b2e6 3814      	         MOVE.W  (%A4),%D4
 6721 b2e8 3E3C 01F4 	         MOVE.W  #0x1F4,%D7     | CONTROL + PREDECREMENT
 6722 b2ec 6100 0534 	         BSR     EEA
 6723 b2f0 601C      	         BRA.S   CS16           | COMMON
 6724               	
 6725 b2f2 0000      	         .align  4
 6726               	
 6727               	* MOVEM  EA  TO REGISTERS
 6728               	*
 6729 b2f4 6100 06EE 	IMOVEMTR:BSR     MOVEMS         | SIZE
 6730 b2f8 5483      	         ADDQ.L  #2,%D3
 6731 b2fa 3E3C 07EC 	         MOVE.W  #0x7EC,%D7     | CONTROL + POSTINCREMENT
 6732 b2fe 6100 0522 	         BSR     EEA
 6733               	
 6734 b302 1CFC 002C 	         MOVE.B  #',',(%A6)+    | STORE COMMA
 6735               	
 6736 b306 7C01      	         MOVEQ   #1,%D6         | D6 = BIT POSITION INCREMENTER
 6737 b308 7200      	         MOVEQ   #0,%D1         | D1 = BIT POSITION
 6738 b30a 6100 06EC 	         BSR     MOVEMR
 6739               	
 6740 b30e 606C      	CS16:    BRA.S   CS15           | COMMON
 6741               	
 6742               	         .align 4
 6743               	
 6744               	ISTOP:   .align  2
 6745 b310 302C 0002 	         MOVE.W  2(%A4),%D0
 6746 b314 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 6747 b318 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX
 6748 b31c 6100 E692 	         BSR     PNT4HX         | VALUE
 6749 b320 6000 07EE 	         BRA     COMMON4
 6750               	
 6751               	         .align  4
 6752               	
 6753               	IMMED:   .align  2              | ADD  AND  CMP #  EOR  OR  SUB
 6754 b324 6100 0472 	         BSR     FORMSIZE
 6755 b328 5483      	         ADDQ.L  #2,%D3         | SIZE = 4
 6756 b32a 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 6757               	
 6758 b32e 4280      	         CLR.L   %D0
 6759 b330 302C 0002 	         MOVE.W  2(%A4),%D0     | D0 = EXTENSION WORD
 6760 b334 3214      	         MOVE.W  (%A4),%D1
 6761 b336 EC49      	         LSR.W   #6,%D1
 6762 b338 0241 0003 	         ANDI.W  #3,%D1
 6763 b33c 6746      	         BEQ.S   IMMED65        | .BYTE
 6764               	
 6765 b33e 0C01 0001 	         CMPI.B  #1,%D1
 6766 b342 6750      	         BEQ.S   IMMED75        | .WORD
 6767               	
 6768 b344 5483      	         ADDQ.L  #2,%D3         | .LONG    SIZE = 6
 6769 b346 202C 0002 	         MOVE.L  2(%A4),%D0     | D0 = LONG EXTENSION WORD
 6770               	
 6771 b34a 6100 DC10 	IMMED45: BSR     HEX2DEC        | DECIMAL
 6772               	
68K GAS  tutor13.s 			page 137


 6773 b34e 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 6774               	
 6775 b350 3014      	         MOVE    (%A4),%D0
 6776 b352 0240 003F 	         ANDI.W  #0x003F,%D0
 6777 b356 0C40 003C 	         CMPI.W  #0x003C,%D0    | DESTINATION ADDRESS MODE 111100  "SR"
 6778 b35a 6622      	         BNE.S   IMMED55        | NOT FOUND
 6779               	
 6780 b35c 3014      	         MOVE.W  (%A4),%D0      | "SR"  ILLEGAL FOR
 6781 b35e 0240 4000 	         ANDI.W  #0x4000,%D0    | ADDI   SUBI  CMPI
 6782 b362 6600 07D6 	         BNE     FERROR         | 0600   0400  0C00
 6783               	
 6784 b366 3214      	         MOVE.W  (%A4),%D1
 6785 b368 0241 00C0 	         ANDI.W  #0x00C0,%D1
 6786 b36c 0C41 0080 	         CMPI.W  #0x0080,%D1
 6787 b370 6700 07C8 	         BEQ     FERROR         | .LONG NOT ALLOWED
 6788               	
 6789 b374 1CFC 0053 	         MOVE.B  #'S',(%A6)+    | #,SR FOR ANDI, EORI, ORI
 6790 b378 1CFC 0052 	         MOVE.B  #'R',(%A6)+
 6791 b37c 603E      	CS15:    BRA.S   CS14           | COMMON
 6792               	
 6793 b37e 6100 04A2 	IMMED55: BSR     EEA
 6794 b382 6038      	         BRA.S   CS14           | COMMON
 6795               	
 6796 b384 2200      	IMMED65: MOVE.L  %D0,%D1        | D1 = XXXXXXXX........
 6797 b386 E049      	         LSR.W   #8,%D1         | D1 = 00000000xXXXXXXX
 6798 b388 670A      	         BEQ.S   IMMED75
 6799 b38a 2200      	         MOVE.L  %D0,%D1
 6800 b38c EE41      	         ASR.W   #7,%D1
 6801 b38e 5241      	         ADDQ.W  #1,%D1         | CHECK FOR NEGATIVE
 6802 b390 6600 07A8 	         BNE     FERROR
 6803               	
 6804 b394 48C0      	IMMED75: EXT.L   %D0
 6805 b396 60B2      	         BRA.S   IMMED45
 6806               	
 6807               	*  BIT   5432109876543210
 6808               	*        ....RRRMMM......       | DESTINATION REGISTER MODE
 6809               	*        ..........MMMRRR       | SOURCE MODE REGISTER
 6810               	*        0001............       | .BYTE
 6811               	*        0011............       | .WORD
 6812               	*        0010............       | .LONG
 6813               	*
 6814               	* IF BYTE SIZE; DESTINATION ADDRESS DIRECT NOT ALLOWED
 6815               	
 6816               	IMOVE:   .align  4
 6817 b398 6000 03A2 	         BRA     IMOVEA1
 6818               	
 6819               	         .align  4
 6820               	
 6821               	ILINK:   .align  2
 6822 b39c 615E      	         BSR.S   FORMREGA
 6823               	
 6824 b39e 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SERARATOR
 6825               	
 6826 b3a0 1CFC 0023 	         MOVE.B  #'#',(%A6)+
 6827 b3a4 302C 0002 	         MOVE.W  2(%A4),%D0
 6828 b3a8 48C0      	         EXT.L   %D0
 6829 b3aa 6100 DBB0 	         BSR     HEX2DEC        | DECIMAL DISPLACEMENT
68K GAS  tutor13.s 			page 138


 6830 b3ae 6000 0760 	         BRA     COMMON4
 6831               	
 6832 b3b2 0000      	         .align  4
 6833               	FORM1:   .align  2              | CLR  NEG  NEGX  NOT TST
 6834 b3b4 6100 03E2 	         BSR     FORMSIZE
 6835               	
 6836               	*                               | NBCD TAS
 6837 b3b8 6100 0468 	FORM1A:  BSR     EEA            | DATA ALTERABLE ONLY
 6838 b3bc 606E      	CS14:    BRA.S   CS13           | COMMON
 6839               	
 6840 b3be 0000      	         .align  4
 6841               	
 6842               	FORM3:   .align  2              | EXT  SWAP
 6843 b3c0 614A      	         BSR.S   FORMREGD
 6844 b3c2 6068      	         BRA.S   CS13           | COMMON
 6845               	
 6846               	         .align  4
 6847               	
 6848               	FORM4:   .align  2              | TRAP
 6849 b3c4 1CFC 0023 	         MOVE.B  #'#',(%A6)+
 6850 b3c8 3014      	         MOVE.W  (%A4),%D0
 6851 b3ca 0280 0000 	         ANDI.L  #0x0F,%D0
 6851      000F 
 6852 b3d0 6100 DB8A 	         BSR     HEX2DEC        | DECIMAL
 6853 b3d4 6056      	         BRA.S   CS13           | COMMON
 6854               	
 6855 b3d6 0000      	         .align  4
 6856               	
 6857               	FORM5:   .align  2              | UNLNK
 6858 b3d8 6122      	         BSR.S   FORMREGA
 6859 b3da 6050      	         BRA.S   CS13           | COMMON
 6860               	
 6861               	*  BIT   5432109876543210
 6862               	*        ....RRR.........       | ADDRESS REGISTER
 6863               	*        ..........XXXXXX       | EFFECTIVE ADDRESS
 6864               	*
 6865               	         .align  4
 6866               	
 6867               	FORM6A:  .align  2              | LEA
 6868 b3dc 3E3C 07E4 	         MOVE.W  #0x7E4,%D7     | CONTROL ADDRESSING
 6869 b3e0 6154      	         BSR.S   EEA10
 6870               	
 6871 b3e2 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 6872               	
 6873 b3e4 3814      	         MOVE.W  (%A4),%D4
 6874 b3e6 EF5C      	         ROL.W   #7,%D4
 6875 b3e8 6112      	         BSR.S   FORMREGA
 6876 b3ea 6040      	         BRA.S   CS13           | COMMON
 6877               	
 6878               	*  BIT   5432109876543210
 6879               	*        ....DDD.........       | DATA REGISTER
 6880               	*        ..........XXXXXX       | EFFECTIVE ADDRESS
 6881               	*
 6882               	         .align  4
 6883               	
 6884               	FORM6D:  .align  2              | CHK  DIVS  DIVU  MULS  MULU
 6885 b3ec 3E3C 0FFD 	         MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
68K GAS  tutor13.s 			page 139


 6886 b3f0 6144      	         BSR.S   EEA10
 6887               	
 6888 b3f2 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 6889               	
 6890 b3f4 3814      	         MOVE.W  (%A4),%D4
 6891 b3f6 EF5C      	         ROL.W   #7,%D4
 6892 b3f8 6112      	         BSR.S   FORMREGD
 6893 b3fa 6030      	         BRA.S   CS13           | COMMON
 6894               	
 6895 b3fc 1CFC 0041 	FORMREGA:MOVE.B  #'A',(%A6)+    | FORMAT A@
 6896 b400 0204 0007 	FORMREG5:ANDI.B  #0x07,%D4
 6897 b404 0004 0030 	         ORI.B   #'0',%D4
 6898 b408 1CC4      	         MOVE.B  %D4,(%A6)+
 6899 b40a 4E75      	         RTS
 6900               	
 6901 b40c 1CFC 0044 	FORMREGD:MOVE.B  #'D',(%A6)+    | FORMAT D@
 6902 b410 60EE      	         BRA.S   FORMREG5
 6903               	
 6904               	*  BIT   5432109876543210
 6905               	*        ....DDD......DDD       | DATA REGISTERS
 6906               	*
 6907 b412 0000      	         .align  4
 6908               	
 6909               	FORM7:   .align  2              | EXG
 6910 b414 EF5C      	         ROL.W   #7,%D4
 6911 b416 61F4      	         BSR.S   FORMREGD
 6912               	
 6913 b418 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 6914               	
 6915 b41a 3814      	         MOVE.W  (%A4),%D4
 6916 b41c 61EE      	         BSR.S   FORMREGD
 6917 b41e 600C      	         BRA.S   CS13           | COMMON
 6918               	
 6919               	*  BIT   5432109876543210
 6920               	*        ....AAA......AAA       | ADDRESS REGISTERS
 6921               	*
 6922               	         .align  4
 6923               	
 6924               	FORM8:   .align  2              | EXG
 6925 b420 EF5C      	         ROL.W   #7,%D4
 6926 b422 61D8      	         BSR.S   FORMREGA
 6927               	
 6928 b424 1CFC 002C 	FORM815: MOVE.B  #',',(%A6)+    | COMMA SEPARATOR
 6929               	
 6930 b428 3814      	         MOVE.W  (%A4),%D4
 6931 b42a 61D0      	         BSR.S   FORMREGA
 6932 b42c 6000 0080 	CS13:    BRA     CS12           | COMMON
 6933               	
 6934               	*  BIT   5432109876543210
 6935               	*        ....DDD.........       | DATA REGISTER
 6936               	*        .............AAA       | ADDRESS REGISTER
 6937               	*
 6938               	         .align  4
 6939               	
 6940               	FORM9:   .align  2              | EXG
 6941 b430 EF5C      	         ROL.W   #7,%D4
 6942 b432 61D8      	         BSR.S   FORMREGD       | DATA REGISTER
68K GAS  tutor13.s 			page 140


 6943 b434 60EE      	         BRA.S   FORM815
 6944               	
 6945 b436 6000 03EA 	EEA10:   BRA     EEA
 6946               	
 6947               	*  BIT   5432109876543210
 6948               	*        ..........AAAAAA         EFFECTIVE ADDRESS
 6949               	*        .......MMM......         OP-MODE
 6950               	*        ....RRR.........         D-REGISTER
 6951               	*        .......011......         WORD  EA,A@
 6952               	*        .......111......         LONG  EA,A@
 6953               	*        .......000......         EA,D@ BYTE (ADDRESS REGISTER DIRECT NOT ALLOWED)
 6954               	*        .......0........         EA,D@
 6955               	*        .......1........         D@,EA
 6956               	*        ........00......         BYTE
 6957               	*        ........01......         WORD
 6958               	*        ........10......         LONG
 6959               	*
 6960 b43a 0000      	         .align  4
 6961               	
 6962               	*                               ADD <EA>,A@   CMP <EA>,A@   SUB <EA>,A@
 6963               	FORM10EX:.align  2              | ADD  CMP  SUB
 6964 b43c 3E3C 0FFF 	         MOVE.W  #0xFFF,%D7     | ALL MODES ALLOWED
 6965 b440 2004      	         MOVE.L  %D4,%D0
 6966 b442 0240 01C0 	         ANDI.W  #0x01C0,%D0
 6967 b446 673A      	         BEQ.S   FORM103        | .......000......
 6968 b448 0C40 01C0 	         CMPI.W  #0x01C0,%D0
 6969 b44c 6710      	         BEQ.S   FORM10E3       | .......111......
 6970 b44e 0C40 00C0 	         CMPI.W  #0x00C0,%D0
 6971 b452 661E      	         BNE.S   FORM10E6
 6972               	
 6973 b454 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | .......011......       STORE PERIOD
 6974 b458 1AFC 0057 	         MOVE.B  #'W',(%A5)+
 6975 b45c 6008      	         BRA.S   FORM10E4
 6976               	
 6977 b45e 1AFC 002E 	FORM10E3:MOVE.B  #'.',(%A5)+
 6978 b462 1AFC 004C 	         MOVE.B  #'L',(%A5)+
 6979               	
 6980 b466 61CE      	FORM10E4:BSR.S   EEA10
 6981               	
 6982 b468 1CC5      	         MOVE.B  %D5,(%A6)+     | STORE COMMA SEPARATOR
 6983               	
 6984 b46a 3814      	         MOVE.W  (%A4),%D4
 6985 b46c EF5C      	         ROL.W   #7,%D4
 6986 b46e 618C      	         BSR.S   FORMREGA       | <EA>,A@
 6987 b470 603C      	         BRA.S   CS12           | COMMON
 6988               	
 6989 b472 0814 0000 	FORM10E6:BTST.B  #0,(%A4)
 6990 b476 6620      	         BNE.S   FORM105        | .......1........    D@,<EA>
 6991 b478 600C      	         BRA.S   FORM104        | .......0........    <EA>,D@
 6992               	
 6993               	*  BIT   5432109876543210
 6994               	*        ..........AAAAAA       EFFECTIVE ADDRESS
 6995               	*        .......MMM......       OP-MODE
 6996               	*        ....RRR.........       D-REGISTER
 6997               	*        .......0........       EA,D@
 6998               	*        .......1........       D@,EA
 6999               	*        ........00......       BYTE
68K GAS  tutor13.s 			page 141


 7000               	*        ........01......       WORD
 7001               	*        ........10......       LONG
 7002               	
 7003 b47a 0000      	         .align  4
 7004               	
 7005               	FORM10:  .align  2              | AND  EOR  OR
 7006 b47c 0814 0000 	         BTST.B  #0,(%A4)
 7007 b480 6616      	         BNE.S   FORM105
 7008               	
 7009 b482 3E3C 0FFD 	FORM103: MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 7010 b486 6100 0310 	FORM104: BSR     FORMSIZE
 7011 b48a 61AA      	         BSR.S   EEA10          | <EA>,D@
 7012               	
 7013 b48c 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7014               	
 7015 b48e 1814      	         MOVE.B  (%A4),%D4
 7016 b490 E20C      	         LSR.B   #1,%D4
 7017 b492 6100 FF78 	         BSR     FORMREGD
 7018 b496 6016      	         BRA.S   CS12           | COMMON
 7019               	
 7020 b498 6100 02FE 	FORM105: BSR     FORMSIZE       | D@,<EA>
 7021 b49c 1814      	         MOVE.B  (%A4),%D4
 7022 b49e E20C      	         LSR.B   #1,%D4
 7023 b4a0 6100 FF6A 	         BSR     FORMREGD
 7024               	
 7025 b4a4 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7026               	
 7027 b4a6 3814      	         MOVE.W  (%A4),%D4
 7028 b4a8 3E3C 01FD 	         MOVE.W  #0x1FD,%D7     | ALTERABLE MEMORY ADDRESSING
 7029 b4ac 6188      	         BSR.S   EEA10
 7030 b4ae 6000 0662 	CS12:    BRA     COMMON
 7031               	
 7032 b4b2 0000      	         .align  4
 7033               	
 7034               	*                               PEA     (JMP  JSR)
 7035 b4b4 3E3C 07E4 	FORM11:  MOVE.W  #0x7E4,%D7     | CONTROL ADDERSSING
 7036 b4b8 6100 FF7C 	         BSR     EEA10
 7037 b4bc 60F0      	         BRA.S   CS12           | COMMON
 7038               	
 7039 b4be 0000      	         .align  4
 7040               	
 7041               	*                               | JMP  JSR
 7042 b4c0 2004      	FORM11SL:MOVE.L  %D4,%D0        | LOOK FOR .S  OR  .L
 7043 b4c2 0240 003F 	         ANDI.W  #0x3F,%D0
 7044 b4c6 0C40 0038 	         CMPI.W  #0x38,%D0
 7045 b4ca 6608      	         BNE.S   FORM112        | NOT .S
 7046 b4cc 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | PERIOD
 7047 b4d0 1AFC 0053 	         MOVE.B  #'S',(%A5)+    | S
 7048 b4d4 0C40 0039 	FORM112: CMPI.W  #0x39,%D0
 7049 b4d8 6608      	         BNE.S   FORM114
 7050 b4da 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | PERIOD
 7051 b4de 1AFC 004C 	         MOVE.B  #'L',(%A5)+    | L
 7052 b4e2 60D0      	FORM114: BRA.S   FORM11
 7053               	
 7054               	*  BIT   5432109876543210
 7055               	*        ....XXX.....0...       DATA DESTINATION REGISTER
 7056               	*        ....XXX.....1...       ADDRESS REGISTER
68K GAS  tutor13.s 			page 142


 7057               	*        ....XXX.00......       BYTE
 7058               	*        ........01......       WORD
 7059               	*        ........10......       LONG
 7060               	*        ............0...       DATA REGISTER TO DATA REGISTER
 7061               	*        ............1...       MEMORY TO MEMORY
 7062               	*        ............0xXX       DATA SOURCE REGISTER
 7063               	*        ............1XXX       ADDRESS SOURCE REGISTER
 7064               	*
 7065               	         .align  4
 7066               	
 7067               	FORM12:  .align  2              | ABCD  ADDX  SBCD  SUBX
 7068 b4e4 6100 02B2 	         BSR     FORMSIZE
 7069               	
 7070 b4e8 0804 0003 	         BTST    #3,%D4
 7071 b4ec 6610      	         BNE.S   FORM125
 7072               	
 7073 b4ee 6100 FF1C 	         BSR     FORMREGD       | D@,D@;   FORMAT SOURCE
 7074               	
 7075 b4f2 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7076               	
 7077 b4f4 1814      	         MOVE.B  (%A4),%D4
 7078 b4f6 E20C      	         LSR.B   #1,%D4
 7079 b4f8 6100 FF12 	         BSR     FORMREGD       | FORMAT DESTINATION
 7080 b4fc 6046      	         BRA.S   CS11           | COMMON
 7081               	
 7082 b4fe 1CFC 002D 	FORM125: MOVE.B  #'-',(%A6)+    | -
 7083 b502 1CFC 0028 	         MOVE.B  #'(',(%A6)+    | (
 7084 b506 6100 FEF4 	         BSR     FORMREGA       | A@    SOURCE
 7085               	
 7086 b50a 203C 282D 	         MOVE.L  #0x282d2c29,%D0 | ),-(
 7086      2C29 
 7087 b510 6152      	         BSR.S   SCHR           | STORE CHARS
 7088               	
 7089 b512 1814      	         MOVE.B  (%A4),%D4
 7090 b514 E20C      	         LSR.B   #1,%D4
 7091 b516 6100 FEE4 	         BSR     FORMREGA       | A@   DESTINATION
 7092 b51a 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7093 b51e 6024      	         BRA.S   CS11           | COMMON
 7094               	
 7095               	*  BIT   5432109876543210
 7096               	*        ....XXX.....1...       ADDRESS REGISTER    DESTINATION
 7097               	*        ....XXX.00......       BYTE
 7098               	*        ........01......       WORD
 7099               	*        ........10......       LONG
 7100               	*        ............1...       MEMORY TO MEMORY
 7101               	*        ............1XXX       ADDRESS SOURCE REGISTER
 7102               	*
 7103               	         .align  4
 7104               	
 7105               	FORM12A: .align  2              | CMPM
 7106 b520 6100 0276 	         BSR     FORMSIZE
 7107               	
 7108 b524 1CFC 0028 	         MOVE.B  #'(',(%A6)+    | (
 7109 b528 6100 FED2 	         BSR     FORMREGA       | A@
 7110               	
 7111 b52c 203C 282C 	         MOVE.L  #0x282c2b29,%D0  | )+,(
 7111      2B29 
68K GAS  tutor13.s 			page 143


 7112 b532 6130      	         BSR.S   SCHR           | STORE CHARS
 7113               	
 7114 b534 1814      	         MOVE.B  (%A4),%D4
 7115 b536 E20C      	         LSR.B   #1,%D4
 7116 b538 6100 FEC2 	         BSR     FORMREGA       | A@
 7117 b53c 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7118 b540 1CFC 002B 	         MOVE.B  #'+',(%A6)+
 7119 b544 6000 05CC 	CS11:    BRA     COMMON
 7120               	
 7121               	         .align  4
 7122               	
 7123 b548 6000 021E 	IQUICK:  BRA     IQUICKA        | ADDQ  SUBQ
 7124               	
 7125               	*  BIT   5432109876543210
 7126               	*        0111...0........       FIXED
 7127               	*        ....RRR.........       DATA REGISTER
 7128               	*        ........DDDDDDDD       SIGN EXTENDED DATA
 7129               	*
 7130               	         .align  4
 7131               	
 7132               	IMOVEQ:  .align  2
 7133 b54c 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 7134               	
 7135 b550 3014      	         MOVE.W  (%A4),%D0
 7136 b552 4880      	         EXT.W   %D0
 7137 b554 48C0      	         EXT.L   %D0
 7138 b556 6100 DA04 	         BSR     HEX2DEC        | DECIMAL
 7139               	
 7140 b55a 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7141               	
 7142 b55c EF5C      	         ROL.W   #7,%D4
 7143 b55e 6100 FEAC 	         BSR     FORMREGD
 7144 b562 60E0      	         BRA.S   CS11           | COMMON
 7145               	
 7146 b564 1CC0      	SCHR:    MOVE.B  %D0,(%A6)+     | OUTPUT STRING
 7147 b566 E088      	         LSR.L   #8,%D0
 7148 b568 66FA      	         BNE.S   SCHR           | MORE TO OUTPUT
 7149 b56a 4E75      	         RTS
 7150               	
 7151               	* MOVE FROM SR  (STATUS REGISTER)
 7152               	*
 7153               	         .align  4
 7154               	
 7155 b56c 203C 002C 	IMVFSR:  MOVE.L  #0x002c5253,%D0 | SR,
 7155      5253 
 7156               	
 7157 b572 61F0      	         BSR.S   SCHR
 7158 b574 6100 02AC 	         BSR     EEA            | DATA ALTERABLE
 7159 b578 60CA      	         BRA.S   CS11           | COMMON
 7160               	
 7161               	* MOVE FROM USP (USER STACK POINTER)
 7162               	*
 7163 b57a 0000      	         .align  4
 7164               	
 7165 b57c 203C 2C50 	IMVFUSP: MOVE.L  #0x2c505355,%D0 | USP,
 7165      5355 
 7166 b582 61E0      	         BSR.S   SCHR
68K GAS  tutor13.s 			page 144


 7167 b584 6100 FE76 	         BSR     FORMREGA
 7168 b588 60BA      	         BRA.S   CS11           | COMMON
 7169               	
 7170               	* MOVE TO SR (STATUS REGISTER)
 7171               	*
 7172 b58a 0000      	         .align  4
 7173               	
 7174 b58c 3E3C 0FFD 	IMVTSR:  MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 7175 b590 6100 0290 	         BSR     EEA
 7176 b594 203C 0052 	         MOVE.L  #0x0052532c,%D0 | ,SR
 7176      532C 
 7177 b59a 61C8      	IMVT44:  BSR.S   SCHR
 7178 b59c 60A6      	         BRA.S   CS11           | COMMON
 7179               	
 7180               	* MOVE TO USP (USER STACK POINTER)
 7181               	*
 7182 b59e 0000      	         .align  4
 7183               	
 7184 b5a0 6100 FE5A 	IMVTUSP: BSR     FORMREGA
 7185 b5a4 203C 5053 	         MOVE.L  #0x5053552c,%D0 | ,USP
 7185      552C 
 7186 b5aa 60EE      	         BRA.S   IMVT44
 7187               	
 7188               	*  MOVE TO CCR (CONDITION CODE REGISTER)
 7189               	*
 7190               	         .align  4
 7191               	
 7192 b5ac 3E3C 0FFD 	IMVTCCR: MOVE.W  #0xFFD,%D7     | DATA ADDRESSING
 7193 b5b0 6100 0270 	         BSR     EEA
 7194 b5b4 203C 5243 	         MOVE.L  #0x5243432c,%D0 | ,CCR
 7194      432C 
 7195 b5ba 60DE      	         BRA.S   IMVT44
 7196               	
 7197               	*  BIT   5432109876543210
 7198               	*        0000...1..001...       FIXED
 7199               	*        ....XXX.........       DATA REGISTER
 7200               	*        ........0.......       MEMORY TO REGISTER
 7201               	*        ........1.......       REGISTER TO MEMORY
 7202               	*        .........0......       WORD
 7203               	*        .........1......       LONG
 7204               	*        .............XXX       ADDRESS REGISTER
 7205               	*
 7206               	         .align  4
 7207               	
 7208               	IMOVEP:  .align  2
 7209 b5bc 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | D@,#(A@)
 7210 b5c0 303C 4C57 	         MOVE.W  #0x4c57,%D0    | "LW"
 7211 b5c4 0804 0006 	         BTST    #6,%D4
 7212 b5c8 6702      	         BEQ.S   IMOVEP11       | USE "W"
 7213 b5ca E048      	         LSR.W   #8,%D0         | USE "L"
 7214 b5cc 1AC0      	IMOVEP11:MOVE.B  %D0,(%A5)+     | LENGTH
 7215               	
 7216 b5ce 1814      	         MOVE.B  (%A4),%D4
 7217 b5d0 E20C      	         LSR.B   #1,%D4
 7218               	
 7219 b5d2 082C 0007 	         BTST.B  #7,1(%A4)
 7219      0001 
68K GAS  tutor13.s 			page 145


 7220 b5d8 670E      	         BEQ.S   IMOVEP35
 7221               	
 7222 b5da 6100 FE30 	         BSR     FORMREGD       | D@,0xHHHH(A@)
 7223               	
 7224 b5de 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7225               	
 7226 b5e0 3814      	         MOVE.W  (%A4),%D4
 7227 b5e2 6112      	         BSR.S   IMOVEP66
 7228 b5e4 6000 052A 	CS20:    BRA     COMMON4
 7229               	
 7230 b5e8 610C      	IMOVEP35:BSR.S   IMOVEP66       | $HHHH(A@),D@
 7231               	
 7232 b5ea 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7233               	
 7234 b5ec 1814      	         MOVE.B  (%A4),%D4
 7235 b5ee E20C      	         LSR.B   #1,%D4
 7236 b5f0 6100 FE1A 	         BSR     FORMREGD
 7237 b5f4 60EE      	         BRA.S   CS20           | COMMON4
 7238               	
 7239 b5f6 1CFC 0024 	IMOVEP66:MOVE.B  #'$',(%A6)+    | FORMAT DISPLACEMENT
 7240 b5fa 302C 0002 	         MOVE.W  2(%A4),%D0
 7241 b5fe 6100 E3B0 	         BSR     PNT4HX
 7242               	
 7243 b602 1CFC 0028 	         MOVE.B  #'(',(%A6)+
 7244               	
 7245 b606 3814      	         MOVE.W  (%A4),%D4
 7246 b608 6100 FDF2 	         BSR     FORMREGA
 7247 b60c 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7248 b610 4E75      	         RTS
 7249               	
 7250 b612 0000      	         .align  4
 7251               	
 7252 b614 6000 04FC 	SCOMMON: BRA     COMMON         | NOP RESET RTE RTR RTS TRAPV
 7253               	
 7254               	         .align  4
 7255               	
 7256 b618 6100 00EA 	ISCC:    BSR     ICCCC          | GET REST OF OP-CODE
 7257 b61c 6100 0204 	         BSR     EEA            | DATA ALTERABLE
 7258 b620 60F2      	         BRA.S   SCOMMON
 7259               	
 7260 b622 0000      	         .align  4
 7261               	
 7262               	IDBCC:   .align  2              | DB--
 7263 b624 3814      	         MOVE.W  (%A4),%D4
 7264 b626 6100 FDE4 	         BSR     FORMREGD
 7265               	
 7266 b62a 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7267 b62c 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX FIELD TO FOLLOW
 7268               	
 7269 b630 6100 00D2 	         BSR     ICCCC
 7270 b634 602E      	         BRA.S   ICC55
 7271               	
 7272               	*  BIT   5432109876543210
 7273               	*        0110............       FIXED
 7274               	*        ....CCCC........       CONDITION
 7275               	*        ........DDDDDDD0       DISPLACEMENT
 7276               	*        ...............1       ERROR (ODD BOUNDRY DISPLACEMENT)
68K GAS  tutor13.s 			page 146


 7277               	*
 7278 b636 0000      	         .align  4
 7279               	
 7280               	ICC:     .align  2              | B--
 7281 b638 6100 00CA 	         BSR     ICCCC
 7282               	
 7283 b63c 1CFC 0024 	IBSR:    MOVE.B  #'$',(%A6)+    | BSR.S BRA
 7284               	
 7285 b640 4A04      	         TST.B   %D4
 7286 b642 6720      	         BEQ.S   ICC55          | 16 BIT DISPLACEMENT
 7287               	
 7288 b644 1AFC 002E 	         MOVE.B  #'.',(%A5)+
 7289 b648 1AFC 0053 	         MOVE.B  #'S',(%A5)+
 7290 b64c 4884      	         EXT.W   %D4            | 8 BIT DISPLACEMENT
 7291               	
 7292 b64e 48C4      	ICC35:   EXT.L   %D4            | SIGN-EXTENDED DISPLACEMENT
 7293 b650 D8A9 FFFC 	         ADD.L   HISPC(%A1),%D4 | + PROGRAM COUNTER
 7294 b654 5484      	         ADDQ.L  #2,%D4         | + TWO
 7295 b656 2004      	         MOVE.L  %D4,%D0
 7296               	
 7297 b658 E284      	         ASR.L   #1,%D4
 7298 b65a 6500 04DE 	         BCS     FERROR         | ODD BOUNDRY DISPLACEMENT
 7299               	
 7300 b65e 6100 E34A 	         BSR     PNT6HX
 7301 b662 60B0      	         BRA.S   SCOMMON
 7302               	
 7303 b664 5483      	ICC55:   ADDQ.L  #2,%D3         | SIZE
 7304 b666 382C 0002 	         MOVE.W  2(%A4),%D4
 7305 b66a 1AFC 002E 	         MOVE.B  #'.',(%A5)+
 7306 b66e 1AFC 004C 	         MOVE.B  #'L',(%A5)+    | .L FOR 16 BIT DISPLACEMENT
 7307 b672 60DA      	         BRA.S   ICC35
 7308               	
 7309               	         .align  4
 7310               	*                               | BCHG  BCLR  BSET  BTST
 7311               	ISETD:   .align  2              | DYNAMIC BIT
 7312 b674 EF5C      	         ROL.W   #7,%D4
 7313 b676 6100 FD94 	         BSR     FORMREGD       | DATA REGISTER
 7314               	
 7315 b67a 1CC5      	ISETD12: MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7316               	
 7317 b67c 3814      	         MOVE.W  (%A4),%D4
 7318 b67e 6100 01A2 	         BSR     EEA            | DATA ALTERABLE
 7319 b682 6090      	CS18:    BRA.S   SCOMMON
 7320               	
 7321               	         .align   4
 7322               	
 7323               	*                            BCHG  BCLR  BSET  BTST
 7324               	*  1ST WORD     .... .... ..XX XXXX    EA   DATA ALTERABLE ONLY
 7325               	*  2ND WORD     0000 0000 000Y YYYY    BIT NUMBER
 7326               	*
 7327               	ISETS:   .align  2              | STATIC BIT
 7328 b684 5483      	         ADDQ.L  #2,%D3         | SIZE
 7329 b686 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 7330               	
 7331 b68a 4280      	         CLR.L   %D0
 7332 b68c 302C 0002 	         MOVE.W  2(%A4),%D0     | GET BIT POSITION FROM 2ND WORD
 7333 b690 2200      	         MOVE.L  %D0,%D1
68K GAS  tutor13.s 			page 147


 7334 b692 EA89      	         LSR.L   #5,%D1
 7335 b694 6600 04A4 	         BNE     FERROR
 7336 b698 6100 D8C2 	         BSR     HEX2DEC        | DECIMAL
 7337               	
 7338 b69c 60DC      	         BRA.S   ISETD12
 7339               	
 7340               	*   BIT  5432109876543210
 7341               	*        ....XXX.........       IMMEDIATE COUNT/REGISTER
 7342               	*        .......0........       RIGHT SHIFT
 7343               	*        .......1........       LEFT SHIFT
 7344               	*        ........00......       BYTE
 7345               	*        ........01......       WORD
 7346               	*        ........10......       LONG
 7347               	*        ....0...11......       WORD (MEMORY)
 7348               	*        ....0...11AAAAAA       EFFECTIVE ADDRESS
 7349               	*        ..........0.....       SHIFT IMMEDIATE COUNT
 7350               	*        ..........1.....       SHIFT COUNT (MODULO 64) IN DATA REGISTER
 7351               	*
 7352 b69e 0000      	         .align   4
 7353               	
 7354               	ISHIFT:  .align   2             | AS-  LS-  RO-  ROX-
 7355 b6a0 303C 4C52 	         MOVE.W  #0x4c52,%D0    | "LR"
 7356 b6a4 0804 0008 	         BTST    #8,%D4         | DIRECTION BIT
 7357 b6a8 6702      	         BEQ.S   ISHIFT13       | RIGHT
 7358 b6aa E048      	         LSR.W   #8,%D0         | LEFT
 7359 b6ac 1AC0      	ISHIFT13:MOVE.B  %D0,(%A5)+     | DIRECTION; "L" OR "R"
 7360               	
 7361 b6ae 3014      	         MOVE.W  (%A4),%D0
 7362 b6b0 0240 00C0 	         ANDI.W  #0x00C0,%D0
 7363 b6b4 0C40 00C0 	         CMPI.W  #0x00C0,%D0
 7364 b6b8 6730      	         BEQ.S   ISHIFTM1       | MEMORY SHIFT
 7365               	
 7366 b6ba 6100 00DC 	         BSR     FORMSIZE
 7367               	
 7368 b6be EF5C      	         ROL.W   #7,%D4
 7369 b6c0 0804 000C 	         BTST    #12,%D4        | I/R BIT
 7370 b6c4 6616      	         BNE.S   ISHIFT33       | COUNT IN REGISTER
 7371               	
 7372 b6c6 0204 0007 	         ANDI.B  #0x07,%D4      | IMMEDIATE COUNT
 7373 b6ca 6604      	         BNE.S   ISHIFT23
 7374 b6cc 0004 0008 	         ORI.B   #0x08,%D4      | CHANGE ZERO TO EIGHT
 7375 b6d0 0004 0030 	ISHIFT23:ORI.B   #'0',%D4
 7376 b6d4 1CFC 0023 	         MOVE.B  #'#',(%A6)+
 7377 b6d8 1CC4      	         MOVE.B  %D4,(%A6)+
 7378 b6da 6004      	         BRA.S   ISHIFT44
 7379               	
 7380 b6dc 6100 FD2E 	ISHIFT33:BSR     FORMREGD
 7381               	
 7382 b6e0 1CC5      	ISHIFT44:MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7383               	
 7384 b6e2 3814      	         MOVE.W  (%A4),%D4
 7385 b6e4 6100 FD26 	         BSR     FORMREGD
 7386 b6e8 6098      	CS17:    BRA.S   CS18           | COMMON
 7387               	
 7388 b6ea 1AFC 002E 	ISHIFTM1:MOVE.B  #'.',(%A5)+    | PERIOD
 7389 b6ee 1AFC 0057 	         MOVE.B  #'W',(%A5)+    | .WORD
 7390               	
68K GAS  tutor13.s 			page 148


 7391 b6f2 0804 000B 	         BTST    #11,%D4
 7392 b6f6 6600 0442 	         BNE     FERROR         | BIT 11 MUST BE ZERO
 7393               	
 7394 b6fa 3E3C 01FC 	         MOVE.W  #0x1FC,%D7     | MEMORY ALTERABLE ADDRESSING
 7395 b6fe 6100 0122 	         BSR     EEA
 7396 b702 60E4      	         BRA.S   CS17           | COMMON
 7397               	
 7398 b704 700F      	ICCCC:   MOVEQ   #0x0F,%D0      | APPEND CONDITION CODE
 7399 b706 C014      	         AND.B   (%A4),%D0      | D0 = CCC
 7400 b708 E388      	         LSL.L   #1,%D0         | D0 = CCC*2
 7401               	
 7402 b70a 323B 0010 	         MOVE.W  BRTBL(%PC,%D0.W),%D1 | GET BRANCH MNEMONIC
 7403 b70e 1AC1      	         MOVE.B  %D1,(%A5)+     | (REVERSED) FROM THE TABLE
 7404 b710 E049      	         LSR.W   #8,%D1         | AND ADD THE NONBLANK PORTION
 7405 b712 0C01 0020 	         CMPI.B  #BLANK,%D1     | TO THE BUFFER.
 7406 b716 6702      	         BEQ.S   ICCCC9
 7407 b718 1AC1      	         MOVE.B  %D1,(%A5)+
 7408 b71a 4E75      	ICCCC9:  RTS
 7409               	
 7410 b71c 2054      	BRTBL:   .ascii  " T"           | "T " BRA ACCEPTED
 7411 b71e 2046      	         .ascii  " F"           | "F "
 7412 b720 4948      	         .ascii  "IH"           | "HI"
 7413 b722 534C      	         .ascii  "SL"           | "LS"
 7414 b724 4343      	         .ascii  "CC"           | "CC"
 7415 b726 5343      	         .ASCII  "SC"           | "CS"
 7416 b728 454E      	         .ASCII  "EN"           | "NE"
 7417 b72a 5145      	         .ASCII  "QE"           | "EQ"
 7418 b72c 4356      	         .ASCII  "CV"           | "VC"
 7419 b72e 5356      	         .ASCII  "SV"           | "VS"
 7420 b730 4C50      	         .ASCII  "LP"           | "PL"
 7421 b732 494D      	         .ASCII  "IM"           | "MI"
 7422 b734 4547      	         .ASCII  "EG"           | "GE"
 7423 b736 544C      	         .ASCII  "TL"           | "LT"
 7424 b738 5447      	         .ASCII  "TG"           | "GT"
 7425 b73a 454C      	         .ASCII  "EL"           | "LE"
 7426               	
 7427               	*   BIT  5432109876543210
 7428               	*        ....RRRMMM......    DESTINATION REGISTER MODE
 7429               	*        ..........MMMRRR    SOURCE MODE REGISTER
 7430               	*
 7431               	* IF BYTE SIZE; ADDRESS DIRECT NOT ALLOWED AS SOURCE
 7432               	*
 7433               	IMOVEA1: .align  2
 7434 b73c 3E3C 0FFF 	         MOVE.W  #0xFFF,%D7     | ALL MODES
 7435 b740 6100 00E0 	         BSR     EEA
 7436               	
 7437 b744 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7438               	
 7439 b746 3814      	         MOVE.W  (%A4),%D4      | ....RRRMMM......
 7440 b748 E24C      	         LSR.W   #1,%D4         | .....RRRMMM.....
 7441 b74a EA0C      	         LSR.B   #5,%D4         | .....RRR.....MMM
 7442 b74c E05C      	         ROR.W   #8,%D4         | .....MMM.....RRR
 7443 b74e EB0C      	         LSL.B   #5,%D4         | .....MMMRRR.....
 7444 b750 EA4C      	         LSR.W   #5,%D4         | ..........MMMRRR
 7445               	
 7446               	* IF .BYTE DESTINATION A@ NOT ALLOWED
 7447 b752 3E3C 01FF 	         MOVE.W  #0x1FF,%D7     | DATA ALTERABLE + A@
68K GAS  tutor13.s 			page 149


 7448 b756 1014      	         MOVE.B  (%A4),%D0
 7449 b758 0C00 0001 	         CMPI.B  #0x01,%D0
 7450 b75c 6604      	         BNE.S   IMOVE19        | NOT BYTE SIZE
 7451               	
 7452 b75e 3E3C 01FD 	         MOVE.W  #0x1FD,%D7     | DATA ALTERABLE
 7453               	IMOVE19:
 7454               	
 7455 b762 6100 00BE 	         BSR     EEA
 7456 b766 602C      	         BRA.S   CS19           | COMMON
 7457               	
 7458               	*  IF BYTE; ADDRESS REGISTER DIRECT NOT ALLOWED
 7459               	IQUICKA: .align  2              | ADDQ  SUBQ
 7460 b768 612E      	         BSR.S   FORMSIZE
 7461               	
 7462 b76a 1CFC 0023 	         MOVE.B  #'#',(%A6)+
 7463 b76e EF5C      	         ROL.W   #7,%D4
 7464 b770 0204 0007 	         ANDI.B  #7,%D4
 7465 b774 6604      	         BNE.S   IQUICK21
 7466 b776 0004 0008 	         ORI.B   #8,%D4         | MAKE ZERO INTO EIGHT
 7467 b77a 0004 0030 	IQUICK21:ORI.B   #'0',%D4       | MAKE ASCII
 7468 b77e 1CC4      	         MOVE.B  %D4,(%A6)+
 7469               	
 7470 b780 1CC5      	         MOVE.B  %D5,(%A6)+     | COMMA SEPARATOR
 7471               	
 7472 b782 3814      	         MOVE.W  (%A4),%D4
 7473               	
 7474 b784 3014      	         MOVE.W  (%A4),%D0
 7475 b786 0240 00C0 	         ANDI.W  #0x00C0,%D0
 7476 b78a 6704      	         BEQ.S   IQUICK31       | DATA ALTERABLE
 7477 b78c 3E3C 01FF 	         MOVE.W  #0x1FF,%D7     | ALTERABLE ADDRESSING
 7478 b790 6100 0090 	IQUICK31:BSR     EEA
 7479 b794 6000 037C 	CS19:    BRA     COMMON
 7480               	
 7481               	*  BIT   5432109876543210
 7482               	*        ........00......       BYTE
 7483               	*        ........01......       WORD
 7484               	*        ........10......       LONG
 7485               	*        ........11......       ERROR
 7486               	*
 7487               	FORMSIZE:.align  2
 7488 b798 3414      	         MOVE.W  (%A4),%D2
 7489 b79a 1AFC 002E 	         MOVE.B  #'.',(%A5)+    | STORE PERIOD
 7490 b79e EC4A      	         LSR.W   #6,%D2
 7491 b7a0 0242 0003 	         ANDI.W  #0x03,%D2
 7492 b7a4 6606      	         BNE.S   FORM91
 7493 b7a6 1AFC 0042 	         MOVE.B  #'B',(%A5)+    | STORE "B"
 7494 b7aa 6016      	         BRA.S   FORM95
 7495               	
 7496 b7ac 103C 0057 	FORM91:  MOVE.B  #'W',%D0
 7497 b7b0 0C02 0001 	         CMPI.B  #1,%D2
 7498 b7b4 670A      	         BEQ.S   FORM93
 7499 b7b6 103C 004C 	         MOVE.B  #'L',%D0
 7500 b7ba 0C02 0002 	         CMPI.B  #2,%D2
 7501 b7be 665E      	         BNE.S   FE10           | FERROR
 7502 b7c0 1AC0      	FORM93:  MOVE.B  %D0,(%A5)+     | STORE "W" OR "L"
 7503 b7c2 4E75      	FORM95:  RTS
 7504               	
68K GAS  tutor13.s 			page 150


 7505 b7c4 6100 FC46 	EA000:   BSR     FORMREGD
 7506 b7c8 0807 0000 	         BTST    #0,%D7
 7507 b7cc 6750      	         BEQ.S   FE10           | FERROR
 7508 b7ce 4E75      	         RTS
 7509               	
 7510 b7d0 6100 FC2A 	EA001:   BSR     FORMREGA
 7511 b7d4 0807 0001 	         BTST    #1,%D7
 7512 b7d8 6744      	         BEQ.S   FE10           | FERROR  THIS MODE NOT ALLOWED
 7513 b7da 4E75      	         RTS
 7514               	
 7515 b7dc 1CFC 0028 	EA010:   MOVE.B  #'(',(%A6)+
 7516 b7e0 6100 FC1A 	         BSR     FORMREGA
 7517 b7e4 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7518 b7e8 0807 0002 	         BTST    #2,%D7
 7519 b7ec 6730      	         BEQ.S   FE10           | FERROR  THIS MODE NOT ALLOWED
 7520 b7ee 4E75      	         RTS
 7521               	
 7522 b7f0 1CFC 0028 	EA011:   MOVE.B  #'(',(%A6)+
 7523 b7f4 6100 FC06 	         BSR     FORMREGA
 7524 b7f8 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7525 b7fc 1CFC 002B 	         MOVE.B  #'+',(%A6)+
 7526 b800 0807 0003 	         BTST    #3,%D7
 7527 b804 6718      	         BEQ.S   FE10           | FERROR  THIS MODE NOT ALLOWED
 7528 b806 4E75      	EA011RTS:RTS
 7529               	
 7530 b808 1CFC 002D 	EA100:   MOVE.B  #'-',(%A6)+
 7531 b80c 1CFC 0028 	         MOVE.B  #'(',(%A6)+
 7532 b810 6100 FBEA 	         BSR     FORMREGA
 7533 b814 1CFC 0029 	         MOVE.B  #')',(%A6)+
 7534 b818 0807 0004 	         BTST    #4,%D7
 7535 b81c 66E8      	         BNE.S   EA011RTS
 7536 b81e 6000 031A 	FE10:    BRA     FERROR         | THIS MODE NOT ALLOWED
 7537               	
 7538               	*  ENTER       %A4 = POINTER TO FIRST WORD
 7539               	*              %D3 = OFFSET TO EXTENSION
 7540               	*              %D4 = VALUE TO PROCESS
 7541               	*              %D7 = MODES ALLOWED MASK
 7542               	*
 7543               	EEA:     .align  2
 7544 b822 2004      	         MOVE.L  %D4,%D0
 7545 b824 E648      	         LSR.W   #3,%D0
 7546 b826 0240 0007 	         ANDI.W  #0x7,%D0
 7547 b82a 6798      	         BEQ.S   EA000
 7548               	
 7549 b82c 0C00 0001 	         CMPI.B  #1,%D0
 7550 b830 679E      	         BEQ.S   EA001
 7551               	
 7552 b832 0C00 0002 	         CMPI.B  #2,%D0
 7553 b836 67A4      	         BEQ.S   EA010
 7554               	
 7555 b838 0C00 0003 	         CMPI.B  #3,%D0
 7556 b83c 67B2      	         BEQ.S   EA011
 7557               	
 7558 b83e 0C00 0004 	         CMPI.B  #4,%D0
 7559 b842 67C4      	         BEQ.S   EA100
 7560               	
 7561 b844 0C00 0005 	         CMPI.B  #5,%D0
68K GAS  tutor13.s 			page 151


 7562 b848 6760      	         BEQ.S   EA101
 7563               	
 7564 b84a 0C00 0007 	         CMPI.B  #7,%D0
 7565 b84e 6770      	         BEQ.S   EA111
 7566               	
 7567               	*    EXTENSION WORD
 7568               	*   BIT  5432109876543210
 7569               	*        0...............    DATA REGISTER
 7570               	*        1...............    ADDRESS REGISTER
 7571               	*        .RRR............    REGISTER
 7572               	*        ....0...........    SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REG
 7573               	*        ....1...........    LONG VALUE IN INDEX REGISTER
 7574               	*        .....000........
 7575               	*        ........DDDDDDDD    DISPLACEMENT INTEGER
 7576               	*
 7577               	* EA110            ADDRESS REGISTER INDIRECT WITH INDEX
 7578               	
 7579 b850 0807 0006 	         BTST    #6,%D7
 7580 b854 67C8      	         BEQ.S   FE10           | FERROR  THIS MODE NOT ALLOWED
 7581               	
 7582 b856 3234 3000 	         MOVE.W  (%A4,%D3.W),%D1
 7583 b85a 0241 0700 	         ANDI.W  #0x0700,%D1
 7584 b85e 66BE      	         BNE.S   FE10           | FERROR  BITS 10-8 MUST BE ZERO
 7585               	
 7586 b860 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0  | D0 = DISPLACEMENT
 7587 b864 4880      	         EXT.W   %D0
 7588 b866 48C0      	         EXT.L   %D0
 7589 b868 6100 D6F2 	         BSR     HEX2DEC        | DECIMAL
 7590 b86c 1CFC 0028 	         MOVE.B  #'(',(%A6)+    | (
 7591               	
 7592 b870 6100 FB8A 	         BSR     FORMREGA       | XX(A@
 7593               	
 7594 b874 1CFC 002C 	         MOVE.B  #',',(%A6)+    | XX(A@,
 7595               	
 7596 b878 1834 3000 	         MOVE.B  (%A4,%D3.W),%D4
 7597 b87c E804      	         ASR.B   #4,%D4
 7598 b87e 6A06      	         BPL.S   EA1105
 7599 b880 6100 FB7A 	         BSR     FORMREGA
 7600 b884 6004      	         BRA.S   EA1107
 7601               	
 7602 b886 6100 FB84 	EA1105:  BSR     FORMREGD
 7603 b88a 1CFC 002E 	EA1107:  MOVE.B  #'.',(%A6)+    | XX(A@,X@.
 7604               	
 7605 b88e 3834 3000 	         MOVE.W  (%A4,%D3.W),%D4 | D4 = R@
 7606 b892 103C 0057 	         MOVE.B  #'W',%D0       | ..........W
 7607 b896 0804 000B 	         BTST    #11,%D4
 7608 b89a 6704      	         BEQ.S   EA1109
 7609 b89c 103C 004C 	         MOVE.B  #'L',%D0       | ..........L
 7610 b8a0 1CC0      	EA1109:  MOVE.B  %D0,(%A6)+
 7611 b8a2 1CFC 0029 	         MOVE.B  #')',(%A6)+    | ...........)
 7612 b8a6 5483      	         ADDQ.L  #2,%D3
 7613 b8a8 4E75      	         RTS
 7614               	
 7615               	* ADDRESS REGISTER INDIRECT WITH DISPLACEMENT
 7616               	*
 7617 b8aa 0807 0005 	EA101:   BTST    #5,%D7         | 101000;   DIS(A@)
 7618 b8ae 6756      	         BEQ.S   FE11           | FERROR;  THIS MODE NOT ALLOWED
68K GAS  tutor13.s 			page 152


 7619               	
 7620 b8b0 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0
 7621 b8b4 48C0      	         EXT.L   %D0
 7622 b8b6 6100 D6A4 	         BSR     HEX2DEC        | DECIMAL
 7623 b8ba 5483      	         ADDQ.L  #2,%D3         | SIZE
 7624 b8bc 6000 FF1E 	         BRA     EA010
 7625               	
 7626               	*  111000        ABSOLUTE SHORT
 7627               	*  111001        ABSOLUTE LONG
 7628               	*  111010        PROGRAM COUNTER WITH DISPLACEMENT
 7629               	*  111011        PROGRAM COUNTER WITH INDEX
 7630               	*  111100        IMMEDIATE OR STATUS REG
 7631               	*
 7632               	EA111:
 7633 b8c0 0244 0007 	         ANDI.W  #7,%D4
 7634 b8c4 6618      	         BNE.S   EA1112
 7635               	
 7636 b8c6 0807 0007 	         BTST    #7,%D7
 7637 b8ca 673A      	         BEQ.S   FE11           | FERROR;  THIS MODE NOT ALLOWED
 7638               	
 7639 b8cc 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0 | 111000;   ABSOLUTE SHORT
 7640 b8d0 48C0      	         EXT.L   %D0
 7641 b8d2 1CFC 0024 	         MOVE.B  #'$',(%A6)+
 7642 b8d6 6100 E0CA 	         BSR     PNT8HX         | SIGN EXTENDED VALUE
 7643 b8da 5483      	         ADDQ.L  #2,%D3         | SIZE + 2
 7644 b8dc 4E75      	         RTS
 7645               	
 7646 b8de 0C04 0001 	EA1112:  CMPI.B  #1,%D4
 7647 b8e2 6616      	         BNE.S   EA1113
 7648               	
 7649 b8e4 0807 0008 	         BTST    #8,%D7
 7650 b8e8 671C      	         BEQ.S   FE11           | FERROR;  THIS MODE NOT ALLOWED
 7651               	
 7652 b8ea 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX
 7653 b8ee 2034 3000 	         MOVE.L  (%A4,%D3.W),%D0  | 111001;     ABSOLUTE LONG
 7654 b8f2 6100 E0AE 	         BSR     PNT8HX
 7655               	*-       MOVE.B  #'.',(%A6)+    | FORCE LONG FORMAT
 7656               	*-       MOVE.B  #'L',(%A6)+    | IE   .L
 7657 b8f6 5883      	         ADDQ.L  #4,%D3
 7658 b8f8 4E75      	         RTS
 7659               	
 7660 b8fa 0C04 0002 	EA1113:  CMPI.B  #2,%D4
 7661 b8fe 662C      	         BNE.S   EA1114
 7662               	
 7663 b900 0807 0009 	         BTST    #9,%D7
 7664 b904 6604      	         BNE.S   EA1113A
 7665 b906 6000 0232 	FE11:    BRA     FERROR         | THIS MODE NOT ALLOWED
 7666               	EA1113A:
 7667               	
 7668 b90a 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0  | 111010;  PC + DISPLACEMENT  DESTINATION(PC)
 7669 b90e 48C0      	         EXT.L   %D0
 7670 b910 D0A9 FFFC 	         ADD.L   HISPC(%A1),%D0
 7671 b914 5480      	         ADDQ.L  #2,%D0
 7672 b916 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX "$"
 7673 b91a 6100 E086 	         BSR     PNT8HX         | DESTINATION
 7674 b91e 203C 2943 	         MOVE.L  #0x29435028,%D0  | (PC)
 7674      5028 
68K GAS  tutor13.s 			page 153


 7675 b924 6100 FC3E 	         BSR     SCHR           | STORE WORD
 7676 b928 5483      	         ADDQ.L  #2,%D3         | SIZE
 7677 b92a 4E75      	         RTS
 7678               	
 7679 b92c 0C04 0003 	EA1114:  CMPI.B  #3,%D4
 7680 b930 6664      	         BNE.S   EA1115
 7681               	
 7682               	* PROGRAM COUNTER WITH INDEX    DESTINATION(PC,R@.X)
 7683               	*
 7684               	*        5432109876543210       SECOND WORD
 7685               	*        0...............       DATA REGISTER
 7686               	*        1...............       ADDRESS REGISTER
 7687               	*        .XXX............       REGISTER
 7688               	*        ....0...........       SIGN-EXTENDED, LOW ORDER WORD INTEGER
 7689               	*                               ..IN INDEX REGISTER
 7690               	*        ....1...........       LONG VALUE IN INDEX REGISTER
 7691               	*        .....000........
 7692               	*        ........XXXXXXXX       DISPLACEMENT INTEGER
 7693               	*
 7694 b932 0807 000A 	         BTST    #10,%D7
 7695 b936 67CE      	         BEQ.S   FE11           | FERROR  THIS MODE NOT ASLLOWED
 7696               	
 7697 b938 3234 3000 	         MOVE.W  (%A4,%D3.W),%D1
 7698 b93c 0241 0700 	         ANDI.W  #0x0700,%D1
 7699 b940 66C4      	         BNE.S   FE11           | FERROR;  BITS 10-8 MUST BE ZERO
 7700               	
 7701 b942 1034 3001 	         MOVE.B  1(%A4,%D3.W),%D0 | 111100;   DESTINATION(PC,R@.X)
 7702 b946 4880      	         EXT.W   %D0
 7703 b948 48C0      	         EXT.L   %D0
 7704 b94a D0A9 FFFC 	         ADD.L   HISPC(%A1),%D0
 7705 b94e 5480      	         ADDQ.L  #2,%D0
 7706 b950 1CFC 0024 	         MOVE.B  #'$',(%A6)+    | HEX "$"
 7707 b954 6100 E04C 	         BSR     PNT8HX         | DESTINATION
 7708               	
 7709 b958 203C 2C43 	         MOVE.L  #0x2c435028,%D0
 7709      5028 
 7710 b95e 6100 FC04 	         BSR     SCHR           | DES(PC,
 7711               	
 7712 b962 3834 3000 	         MOVE.W  (%A4,%D3.W),%D4
 7713 b966 E95C      	         ROL.W   #4,%D4
 7714 b968 0804 0003 	         BTST    #3,%D4
 7715 b96c 6706      	         BEQ.S   EAF25
 7716 b96e 6100 FA8C 	         BSR     FORMREGA
 7717 b972 6004      	         BRA.S   EAF27
 7718 b974 6100 FA96 	EAF25:   BSR     FORMREGD       | DES(PC,R@
 7719               	EAF27:
 7720               	
 7721 b978 1CFC 002E 	         MOVE.B  #'.',(%A6)+    | DES(PC,R@.
 7722               	
 7723 b97c 3834 3000 	         MOVE.W  (%A4,%D3.W),%D4
 7724 b980 303C 4C57 	         MOVE.W  #0x4c57,%D0    | "LW"
 7725 b984 0804 000B 	         BTST    #11,%D4
 7726 b988 6702      	         BEQ.S   EAF35
 7727 b98a E048      	         LSR.W   #8,%D0
 7728 b98c 1CC0      	EAF35:   MOVE.B  %D0,(%A6)+     | DES(PC,R@.X
 7729               	
 7730 b98e 1CFC 0029 	         MOVE.B  #')',(%A6)+    | DES(PC,R@.X)
68K GAS  tutor13.s 			page 154


 7731 b992 5483      	         ADDQ.L  #2,%D3
 7732 b994 4E75      	         RTS
 7733               	
 7734               	*   BIT  5432109876543210
 7735               	*        ..........111100       | FIRST WORD;  #<IMMEDIATE>
 7736               	*
 7737 b996 0C04 0004 	EA1115:  CMPI.B  #4,%D4
 7738 b99a 6600 FF6A 	         BNE     FE11           | FERROR
 7739               	
 7740 b99e 0807 000B 	         BTST    #11,%D7
 7741 b9a2 6700 FF62 	         BEQ     FE11           | FERROR;  THIS MODE NOT ALLOWED
 7742               	
 7743 b9a6 1CFC 0023 	         MOVE.B  #'#',(%A6)+    | IMMEDIATE
 7744               	
 7745 b9aa 122D FFFF 	         MOVE.B  -1(%A5),%D1
 7746 b9ae 0C01 004C 	         CMPI.B  #'L',%D1
 7747 b9b2 6724      	         BEQ.S   EA11155        | LONG
 7748               	
 7749 b9b4 3034 3000 	         MOVE.W  (%A4,%D3.W),%D0
 7750               	
 7751 b9b8 0C01 0042 	         CMPI.B  #'B',%D1
 7752 b9bc 6610      	         BNE.S   EA11153        | .WORD
 7753               	
 7754               	* BYTE SIZE; DATA ALLOWED
 7755               	*  0000 0000 XXXX XXXX
 7756               	*  1111 1111 1XXX XXXX
 7757 b9be 2200      	         MOVE.L  %D0,%D1
 7758 b9c0 E049      	         LSR.W   #8,%D1
 7759 b9c2 670A      	         BEQ.S   EA11153
 7760 b9c4 2200      	         MOVE.L  %D0,%D1
 7761 b9c6 EE41      	         ASR.W   #7,%D1
 7762 b9c8 5241      	         ADDQ.W  #1,%D1
 7763 b9ca 6600 FF3A 	         BNE     FE11           | FERROR
 7764               	
 7765 b9ce 48C0      	EA11153: EXT.L   %D0
 7766 b9d0 6100 D58A 	         BSR     HEX2DEC
 7767 b9d4 5483      	         ADDQ.L  #2,%D3
 7768 b9d6 4E75      	         RTS
 7769               	
 7770 b9d8 2034 3000 	EA11155: MOVE.L  (%A4,%D3.W),%D0
 7771 b9dc 6100 D57E 	         BSR     HEX2DEC
 7772 b9e0 5883      	         ADDQ.L  #4,%D3         | SIZE
 7773 b9e2 4E75      	         RTS
 7774               	
 7775 b9e4 1AFC 002E 	MOVEMS:  MOVE.B  #'.',(%A5)+    | PERIOD
 7776 b9e8 303C 4C57 	         MOVE.W  #0x4c57,%D0    | "LW"
 7777 b9ec 0804 0006 	         BTST    #6,%D4
 7778 b9f0 6702      	         BEQ.S   MOVEMS2
 7779 b9f2 E048      	         LSR.W   #8,%D0
 7780 b9f4 1AC0      	MOVEMS2: MOVE.B  %D0,(%A5)+     | SIZE
 7781 b9f6 4E75      	         RTS
 7782               	
 7783               	* MOVEM - REGISTER EXPANSION
 7784               	*
 7785               	MOVEMR:  .align  2
 7786 b9f8 342C 0002 	         MOVE.W  2(%A4),%D2     | D2 = SECOND WORD
 7787 b9fc 7020      	         MOVEQ   #0x20,%D0      | D0 = SPACE
68K GAS  tutor13.s 			page 155


 7788 b9fe 7E2F      	         MOVEQ   #0x2F,%D7      | D7 = /
 7789 ba00 538E      	         SUBQ.L  #1,%A6         | ADJUST STORE POINTER
 7790 ba02 7A30      	         MOVEQ   #0x30,%D5      | D5 = REGISTER #
 7791 ba04 383C 4144 	         MOVE.W  #0x4144,%D4    | "AD" D4 = REG CLASS
 7792               	
 7793 ba08 0302      	MOVEMR11:BTST    %D1,%D2
 7794 ba0a 6730      	         BEQ.S   MOVEMR77       | BIT RESET
 7795               	
 7796 ba0c B016      	         CMP.B   (%A6),%D0      | BIT SET
 7797 ba0e 6612      	         BNE.S   MOVEMR44       | NOT SPACE
 7798               	
 7799 ba10 1D44 0001 	MOVEMR33:MOVE.B  %D4,1(%A6)     | REG TYPE
 7800 ba14 1D45 0002 	         MOVE.B  %D5,2(%A6)     | REG #
 7801 ba18 1D7C 002D 	         MOVE.B  #'-',3(%A6)    | -
 7801      0003 
 7802 ba1e 568E      	         ADDQ.L  #3,%A6
 7803 ba20 602E      	         BRA.S   MOVEMR88
 7804               	
 7805 ba22 0C16 002C 	MOVEMR44:CMPI.B  #',',(%A6)
 7806 ba26 67E8      	         BEQ.S   MOVEMR33       | COMMA SEPARATOR
 7807               	
 7808 ba28 BE16      	         CMP.B   (%A6),%D7      | / SEPARATOR
 7809 ba2a 67E4      	         BEQ.S   MOVEMR33
 7810               	
 7811 ba2c 1D44 0001 	         MOVE.B  %D4,1(%A6)     | REG TYPE
 7812 ba30 1D45 0002 	         MOVE.B  %D5,2(%A6)     | REG #
 7813 ba34 1D7C 002D 	         MOVE.B  #'-',3(%A6)    | - SEPARATOR
 7813      0003 
 7814 ba3a 6014      	         BRA.S   MOVEMR88
 7815               	
 7816 ba3c 0C16 002C 	MOVEMR77:CMPI.B  #',',(%A6)
 7817 ba40 670E      	         BEQ.S   MOVEMR88       | COMMA
 7818               	
 7819 ba42 B016      	         CMP.B   (%A6),%D0
 7820 ba44 670A      	         BEQ.S   MOVEMR88       | SPACE
 7821 ba46 B02E 0001 	         CMP.B   1(%A6),%D0
 7822 ba4a 6702      	         BEQ.S   MOVEMR79       | SPACE
 7823 ba4c 568E      	         ADDQ.L  #3,%A6
 7824 ba4e 1C87      	MOVEMR79:MOVE.B  %D7,(%A6)      | / SEPARATOR
 7825               	
 7826 ba50 5285      	MOVEMR88:ADDQ.L  #1,%D5
 7827 ba52 D286      	         ADD.L   %D6,%D1        | D1 = BIT POSITION
 7828 ba54 0C05 0038 	         CMPI.B  #'8',%D5
 7829 ba58 66AE      	         BNE.S   MOVEMR11
 7830               	
 7831 ba5a B016      	         CMP.B   (%A6),%D0      | SPACE
 7832 ba5c 670A      	         BEQ.S   MOVEMR94
 7833               	
 7834 ba5e B02E 0001 	         CMP.B   1(%A6),%D0     | SPACE
 7835 ba62 6704      	         BEQ.S   MOVEMR94
 7836 ba64 568E      	         ADDQ.L  #3,%A6
 7837 ba66 1C87      	         MOVE.B  %D7,(%A6)      | /   SEPARATOR
 7838               	
 7839 ba68 1A3C 0030 	MOVEMR94:MOVE.B  #'0',%D5       | RESET REG TO ZERO
 7840 ba6c E04C      	         LSR.W   #8,%D4         | CHANGE REG TYPE
 7841 ba6e 6698      	         BNE.S   MOVEMR11       | MORE
 7842               	
68K GAS  tutor13.s 			page 156


 7843 ba70 1C80      	         MOVE.B  %D0,(%A6)      | SPACE
 7844 ba72 4E75      	         RTS
 7845               	
 7846               	DCODE68K:.align  2
 7847 ba74 4E51 FFF0 	         LINK    %A1,#-LOCVARSZ | CREATE A FRAME FOR THE
 7848 ba78 48E9 1007 	         MOVEM.L %D0-%D2/%A4,DDATA(%A1)  | CODE AND ITS PC.  A4
 7848      FFF0 
 7849 ba7e 49E9 FFF0 	         LEA     DDATA(%A1),%A4 | POINTS TO THE CODE.
 7850               	
 7851 ba82 264D      	         MOVE.L  %A5,%A3        | A3 = START OF OUTPUT BUFFER
 7852 ba84 7050      	         MOVEQ   #BUFSIZE,%D0
 7853 ba86 2C4B      	         MOVE.L  %A3,%A6
 7854 ba88 1CFC 0020 	DEC311:  MOVE.B  #BLANK,(%A6)+  | SPACE FILL BUFFER
 7855 ba8c 5380      	         SUBQ.L  #1,%D0
 7856 ba8e 66F8      	         BNE.S   DEC311
 7857               	
 7858 ba90 2C4B      	         MOVE.L  %A3,%A6        | FORMAT ADDRESS
 7859 ba92 2029 FFFC 	         MOVE.L  HISPC(%A1),%D0
 7860 ba96 6100 DF3C 	         BSR     FRELADDR
 7861               	
 7862               	* CHECK FOR KNOWN ILLEGAL CODES
 7863 ba9a 3014      	         MOVE.W  (%A4),%D0
 7864               	
 7865 ba9c 4BFA 00C6 	         LEA     KI(%PC),%A5
 7866 baa0 2C4D      	         MOVE.L  %A5,%A6
 7867 baa2 DDFC 0000 	         ADD.L   #KIEND-KI,%A6
 7867      0002 
 7868 baa8 B05D      	DEC404:  CMP.W   (%A5)+,%D0
 7869 baaa 671A      	         BEQ.S   FE12           | FERROR;  ILLEGAL CODE
 7870 baac BBCE      	         CMP.L   %A6,%A5
 7871 baae 66F8      	         BNE.S   DEC404
 7872               	
 7873               	* LOOK FOR MATCH OF OP-CODE
 7874               	*
 7875 bab0 4BFA 00B4 	         LEA     TBL(%PC),%A5   | A5 = POINTER TO DECODE TABLE
 7876 bab4 4DFA 02BA 	         LEA     TBLE(%PC),%A6  | A6 = POINTER TO END OF TABLE
 7877 bab8 3014      	DEC411:  MOVE.W  (%A4),%D0      |  FIRST WORD
 7878 baba C05D      	         AND.W   (%A5)+,%D0     |  MASK
 7879 babc B05D      	         CMP.W   (%A5)+,%D0
 7880 babe 6708      	         BEQ.S   DEC425         | FOUND MATCH
 7881 bac0 548D      	         ADDQ.L  #2,%A5         | UPDATE POINTER
 7882 bac2 BBCE      	         CMP.L   %A6,%A5
 7883 bac4 66F2      	         BNE.S   DEC411         | MORE TABLE
 7884 bac6 6072      	FE12:    BRA.S   FERROR         | ILLEGAL INSTRUCTION
 7885               	
 7886 bac8 4286      	DEC425:  CLR.L   %D6
 7887 baca 1C1D      	         MOVE.B  (%A5)+,%D6     | D6 = (GOTO OFFSET)/4
 7888 bacc E58E      	         LSL.L   #2,%D6
 7889               	
 7890 bace 4287      	         CLR.L   %D7
 7891 bad0 1E1D      	         MOVE.B  (%A5)+,%D7     | D7 = INDEX TO OP-CODE
 7892               	
 7893               	* MOVE OP-CODE TO BUFFER
 7894               	*
 7895 bad2 41FA 029C 	         LEA     OPCTBL(%PC),%A0
 7896 bad6 4A47      	DEC510:  TST     %D7
 7897 bad8 6708      	         BEQ.S   DEC530         | AT INDEX
68K GAS  tutor13.s 			page 157


 7898 bada 4A18      	DEC515:  TST.B   (%A0)+
 7899 badc 6AFC      	         BPL.S   DEC515         | MOVE THROUGH FIELD
 7900 bade 5387      	         SUBQ.L  #1,%D7
 7901 bae0 60F4      	         BRA.S   DEC510
 7902               	
 7903 bae2 701F      	DEC530:  MOVEQ   #FOC,%D0
 7904 bae4 4BF3 0000 	         LEA.L   (%A3,%D0.W),%A5 | A5 = STORE POINTER  OP-CODE
 7905 bae8 1018      	DEC535:  MOVE.B  (%A0)+,%D0
 7906 baea 0880 0007 	         BCLR    #7,%D0
 7907 baee 6604      	         BNE.S   DEC537         | END OF MOVE
 7908 baf0 1AC0      	         MOVE.B  %D0,(%A5)+
 7909 baf2 60F4      	         BRA.S   DEC535
 7910 baf4 1AC0      	DEC537:  MOVE.B  %D0,(%A5)+
 7911               	
 7912               	* CALCULATE GOTO AND GO
 7913               	*
 7914 baf6 7602      	         MOVEQ   #2,%D3         | D3= SIZE
 7915 baf8 41FA F7CA 	         LEA     X(%PC),%A0
 7916 bafc D1C6      	         ADD.L   %D6,%A0
 7917               	
 7918 bafe 7027      	         MOVEQ   #FOP,%D0
 7919 bb00 4DF3 0000 	         LEA.L   (%A3,%D0.W),%A6 | A6 = POINTER FOR OPERAND
 7920               	
 7921 bb04 3814      	         MOVE.W  (%A4),%D4      | D4 = FIRST WORD
 7922               	
 7923 bb06 1A3C 002C 	         MOVE.B  #',',%D5       | D5 = CONTAINS ASCII COMMA
 7924               	
 7925 bb0a 3E3C 01FD 	         MOVE.W  #0x1FD,%D7     | D7 = DATA ALTERABLE MODES ALLOWED
 7926               	
 7927 bb0e 4ED0      	         JMP     (%A0)
 7928               	*
 7929               	*  A4 = POINTER TO DATA IN FRAME CREATED BY "LINK A1,..."
 7930               	*  A5 = POINTER STORE OP-CODE
 7931               	*  A6 = POINTER STORE OPERAND
 7932               	*  D3 = SIZE = 2 BYTES
 7933               	*  D4 = FIRST WORD
 7934               	*  D7 = ADDRESS MODES ALLOWED ($1FD) DATA ALTERABLE
 7935               	
 7936 bb10 5483      	COMMON4: ADDQ.L  #2,%D3         | SIZE = 4
 7937               	
 7938 bb12 2C03      	COMMON:  MOVE.L  %D3,%D6        | D6 = SIZE
 7939 bb14 1CFC 0020 	         MOVE.B  #BLANK,(%A6)+  | SPACE AS LAST CHAR
 7940               	
 7941 bb18 2A4E      	         MOVE.L  %A6,%A5        | SAVE END OF BUFFER POINTER
 7942 bb1a 700A      	         MOVEQ   #FDATA,%D0
 7943 bb1c 4DF3 0000 	         LEA.L   (%A3,%D0.W),%A6
 7944               	
 7945 bb20 301C      	COMMON35:MOVE.W  (%A4)+,%D0     | GET NEXT WORD OF DATA.
 7946 bb22 54A9 FFFC 	         ADDQ.L  #2,HISPC(%A1)  | ADJUST PROG COUNTER.
 7947 bb26 6100 DE88 	         BSR     PNT4HX         | FORMAT DATA. (A6)+
 7948 bb2a 5503      	         SUBQ.B  #2,%D3
 7949 bb2c 66F2      	         BNE.S   COMMON35
 7950               	
 7951 bb2e 2C4D      	         MOVE.L  %A5,%A6        | A6 = RESTORE END POINTER
 7952               	
 7953 bb30 2A4B      	         MOVE.L  %A3,%A5        | A5 =  BEGINNING OF BUFFER
 7954               	
68K GAS  tutor13.s 			page 158


 7955 bb32 2869 FFFC 	         MOVE.L  HISPC(%A1),%A4 | MOVE THE UPDATED PC
 7956 bb36 4E59      	         UNLK    %A1            | TO A4 AND UNDO FRAME.
 7957               	
 7958 bb38 4E75      	         RTS
 7959               	
 7960               	FERROR:  .align  2
 7961               	* ILLEGAL INSTRUCTION
 7962               	*
 7963 bb3a 701F      	         MOVEQ   #FOC,%D0
 7964 bb3c 4DF3 0000 	         LEA.L   (%A3,%D0.W),%A6
 7965 bb40 4BFA 0018 	         LEA     MSG111(%PC),%A5
 7966 bb44 101D      	FERROR35:MOVE.B  (%A5)+,%D0
 7967 bb46 0C00 0004 	         CMPI.B  #EOT,%D0
 7968 bb4a 6704      	         BEQ.S   FERROR39
 7969 bb4c 1CC0      	         MOVE.B  %D0,(%A6)+
 7970 bb4e 60F4      	         BRA.S   FERROR35
 7971               	FERROR39:.align  2
 7972               	
 7973 bb50 3014      	         MOVE.W  (%A4),%D0
 7974 bb52 6100 DE5C 	         BSR     PNT4HX
 7975               	
 7976 bb56 7602      	         MOVEQ   #2,%D3         | SIZE
 7977               	
 7978 bb58 60B8      	         BRA.S   COMMON
 7979               	
 7980 bb5a 4443 2E57 	MSG111:  .ascii "DC.W    $"
 7980      2020 2020 
 7980      24
 7981 bb63 04        	         DC.B    EOT
 7982               	
 7983 bb64 4AFB      	KI:      DC.W    0x4AFB         | KNOWN ILLEGAL CODES
 7984               	KIEND:   .align  2
 7985               	
 7986               	*  \1   MASK
 7987               	*  \2   OP-CODE PATTERN
 7988               	*  \3   GOTO OFFSET
 7989               	*  \4   INDEX TO OP-CODE
 7990               	C68:     .MACRO a1,a2,a3,a4
 7991               	         DC.W    0x\a1
 7992               	         DC.W    0x\a2
 7993               	         DC.B    (\a3-X)>>2
 7994               	         DC.B    \a4
 7995               	         .ENDM
 7996               	
 7997               	TBL:     .align  2
 7998               	         C68     FEC0,E6C0,ISHIFT,56           | RO
 7998 bb66 FEC0      	>  DC.W 0xFEC0
 7998 bb68 E6C0      	>  DC.W 0xE6C0
 7998 bb6a F7        	>  DC.B (ISHIFT-X)>>2
 7998 bb6b 38        	>  DC.B 56
 7999               	         C68     FEC0,E4C0,ISHIFT,57           | ROX
 7999 bb6c FEC0      	>  DC.W 0xFEC0
 7999 bb6e E4C0      	>  DC.W 0xE4C0
 7999 bb70 F7        	>  DC.B (ISHIFT-X)>>2
 7999 bb71 39        	>  DC.B 57
 8000               	         C68     FEC0,E2C0,ISHIFT,55           | LS
 8000 bb72 FEC0      	>  DC.W 0xFEC0
68K GAS  tutor13.s 			page 159


 8000 bb74 E2C0      	>  DC.W 0xE2C0
 8000 bb76 F7        	>  DC.B (ISHIFT-X)>>2
 8000 bb77 37        	>  DC.B 55
 8001               	         C68     FEC0,E0C0,ISHIFT,54           | AS
 8001 bb78 FEC0      	>  DC.W 0xFEC0
 8001 bb7a E0C0      	>  DC.W 0xE0C0
 8001 bb7c F7        	>  DC.B (ISHIFT-X)>>2
 8001 bb7d 36        	>  DC.B 54
 8002               	         C68     F018,E018,ISHIFT,56           | RO
 8002 bb7e F018      	>  DC.W 0xF018
 8002 bb80 E018      	>  DC.W 0xE018
 8002 bb82 F7        	>  DC.B (ISHIFT-X)>>2
 8002 bb83 38        	>  DC.B 56
 8003               	         C68     F018,E010,ISHIFT,57           | ROX
 8003 bb84 F018      	>  DC.W 0xF018
 8003 bb86 E010      	>  DC.W 0xE010
 8003 bb88 F7        	>  DC.B (ISHIFT-X)>>2
 8003 bb89 39        	>  DC.B 57
 8004               	         C68     F018,E008,ISHIFT,55           | LS
 8004 bb8a F018      	>  DC.W 0xF018
 8004 bb8c E008      	>  DC.W 0xE008
 8004 bb8e F7        	>  DC.B (ISHIFT-X)>>2
 8004 bb8f 37        	>  DC.B 55
 8005               	         C68     F018,E000,ISHIFT,54           | AS
 8005 bb90 F018      	>  DC.W 0xF018
 8005 bb92 E000      	>  DC.W 0xE000
 8005 bb94 F7        	>  DC.B (ISHIFT-X)>>2
 8005 bb95 36        	>  DC.B 54
 8006               	         C68     F0C0,D0C0,FORM10EX,4          | ADD       <EA>,A@
 8006 bb96 F0C0      	>  DC.W 0xF0C0
 8006 bb98 D0C0      	>  DC.W 0xD0C0
 8006 bb9a 5E        	>  DC.B (FORM10EX-X)>>2
 8006 bb9b 04        	>  DC.B 4
 8007               	         C68     F130,D100,FORM12,53           | ADDX
 8007 bb9c F130      	>  DC.W 0xF130
 8007 bb9e D100      	>  DC.W 0xD100
 8007 bba0 88        	>  DC.B (FORM12-X)>>2
 8007 bba1 35        	>  DC.B 53
 8008               	         C68     F000,D000,FORM10EX,4          | ADD
 8008 bba2 F000      	>  DC.W 0xF000
 8008 bba4 D000      	>  DC.W 0xD000
 8008 bba6 5E        	>  DC.B (FORM10EX-X)>>2
 8008 bba7 04        	>  DC.B 4
 8009               	         C68     F1F8,C188,FORM9,50            | EXG
 8009 bba8 F1F8      	>  DC.W 0xF1F8
 8009 bbaa C188      	>  DC.W 0xC188
 8009 bbac 5B        	>  DC.B (FORM9-X)>>2
 8009 bbad 32        	>  DC.B 50
 8010               	         C68     F1F8,C148,FORM8,50            | EXG
 8010 bbae F1F8      	>  DC.W 0xF1F8
 8010 bbb0 C148      	>  DC.W 0xC148
 8010 bbb2 57        	>  DC.B (FORM8-X)>>2
 8010 bbb3 32        	>  DC.B 50
 8011               	         C68     F1F8,C140,FORM7,50            | EXG
 8011 bbb4 F1F8      	>  DC.W 0xF1F8
 8011 bbb6 C140      	>  DC.W 0xC140
 8011 bbb8 54        	>  DC.B (FORM7-X)>>2
68K GAS  tutor13.s 			page 160


 8011 bbb9 32        	>  DC.B 50
 8012               	         C68     F1F0,C100,FORM12,49           | ABCD
 8012 bbba F1F0      	>  DC.W 0xF1F0
 8012 bbbc C100      	>  DC.W 0xC100
 8012 bbbe 88        	>  DC.B (FORM12-X)>>2
 8012 bbbf 31        	>  DC.B 49
 8013               	         C68     F1C0,C1C0,FORM6D,48           | MULS
 8013 bbc0 F1C0      	>  DC.W 0xF1C0
 8013 bbc2 C1C0      	>  DC.W 0xC1C0
 8013 bbc4 4A        	>  DC.B (FORM6D-X)>>2
 8013 bbc5 30        	>  DC.B 48
 8014               	         C68     F1C0,C0C0,FORM6D,47           | MULU
 8014 bbc6 F1C0      	>  DC.W 0xF1C0
 8014 bbc8 C0C0      	>  DC.W 0xC0C0
 8014 bbca 4A        	>  DC.B (FORM6D-X)>>2
 8014 bbcb 2F        	>  DC.B 47
 8015               	         C68     F000,C000,FORM10,2            | AND
 8015 bbcc F000      	>  DC.W 0xF000
 8015 bbce C000      	>  DC.W 0xC000
 8015 bbd0 6E        	>  DC.B (FORM10-X)>>2
 8015 bbd1 02        	>  DC.B 2
 8016               	         C68     F0C0,B0C0,FORM10EX,6          | CMP     <EA>,A@
 8016 bbd2 F0C0      	>  DC.W 0xF0C0
 8016 bbd4 B0C0      	>  DC.W 0xB0C0
 8016 bbd6 5E        	>  DC.B (FORM10EX-X)>>2
 8016 bbd7 06        	>  DC.B 6
 8017               	         C68     F138,B108,FORM12A,46          | CMPM
 8017 bbd8 F138      	>  DC.W 0xF138
 8017 bbda B108      	>  DC.W 0xB108
 8017 bbdc 97        	>  DC.B (FORM12A-X)>>2
 8017 bbdd 2E        	>  DC.B 46
 8018               	         C68     F100,B100,FORM10,5            | EOR
 8018 bbde F100      	>  DC.W 0xF100
 8018 bbe0 B100      	>  DC.W 0xB100
 8018 bbe2 6E        	>  DC.B (FORM10-X)>>2
 8018 bbe3 05        	>  DC.B 5
 8019               	         C68     F000,B000,FORM10EX,6          | CMP
 8019 bbe4 F000      	>  DC.W 0xF000
 8019 bbe6 B000      	>  DC.W 0xB000
 8019 bbe8 5E        	>  DC.B (FORM10EX-X)>>2
 8019 bbe9 06        	>  DC.B 6
 8020               	         C68     F0C0,90C0,FORM10EX,44         | SUB       <EA>,A@
 8020 bbea F0C0      	>  DC.W 0xF0C0
 8020 bbec 90C0      	>  DC.W 0x90C0
 8020 bbee 5E        	>  DC.B (FORM10EX-X)>>2
 8020 bbef 2C        	>  DC.B 44
 8021               	         C68     F130,9100,FORM12,45           | SUBX
 8021 bbf0 F130      	>  DC.W 0xF130
 8021 bbf2 9100      	>  DC.W 0x9100
 8021 bbf4 88        	>  DC.B (FORM12-X)>>2
 8021 bbf5 2D        	>  DC.B 45
 8022               	         C68     F000,9000,FORM10EX,44         | SUB
 8022 bbf6 F000      	>  DC.W 0xF000
 8022 bbf8 9000      	>  DC.W 0x9000
 8022 bbfa 5E        	>  DC.B (FORM10EX-X)>>2
 8022 bbfb 2C        	>  DC.B 44
 8023               	         C68     F1F0,8100,FORM12,43           | SBCD
68K GAS  tutor13.s 			page 161


 8023 bbfc F1F0      	>  DC.W 0xF1F0
 8023 bbfe 8100      	>  DC.W 0x8100
 8023 bc00 88        	>  DC.B (FORM12-X)>>2
 8023 bc01 2B        	>  DC.B 43
 8024               	         C68     F1C0,81C0,FORM6D,42           | DIVS
 8024 bc02 F1C0      	>  DC.W 0xF1C0
 8024 bc04 81C0      	>  DC.W 0x81C0
 8024 bc06 4A        	>  DC.B (FORM6D-X)>>2
 8024 bc07 2A        	>  DC.B 42
 8025               	         C68     F1C0,80C0,FORM6D,41           | DIVU
 8025 bc08 F1C0      	>  DC.W 0xF1C0
 8025 bc0a 80C0      	>  DC.W 0x80C0
 8025 bc0c 4A        	>  DC.B (FORM6D-X)>>2
 8025 bc0d 29        	>  DC.B 41
 8026               	         C68     F000,8000,FORM10,40           | OR
 8026 bc0e F000      	>  DC.W 0xF000
 8026 bc10 8000      	>  DC.W 0x8000
 8026 bc12 6E        	>  DC.B (FORM10-X)>>2
 8026 bc13 28        	>  DC.B 40
 8027               	         C68     F100,7000,IMOVEQ,39           | MOVEQ
 8027 bc14 F100      	>  DC.W 0xF100
 8027 bc16 7000      	>  DC.W 0x7000
 8027 bc18 A2        	>  DC.B (IMOVEQ-X)>>2
 8027 bc19 27        	>  DC.B 39
 8028               	         C68     FF00,6100,IBSR,51             | BSR
 8028 bc1a FF00      	>  DC.W 0xFF00
 8028 bc1c 6100      	>  DC.W 0x6100
 8028 bc1e DE        	>  DC.B (IBSR-X)>>2
 8028 bc1f 33        	>  DC.B 51
 8029               	         C68     FF00,6000,IBSR,65             | BRA
 8029 bc20 FF00      	>  DC.W 0xFF00
 8029 bc22 6000      	>  DC.W 0x6000
 8029 bc24 DE        	>  DC.B (IBSR-X)>>2
 8029 bc25 41        	>  DC.B 65
 8030               	         C68     F000,6000,ICC,38              | B
 8030 bc26 F000      	>  DC.W 0xF000
 8030 bc28 6000      	>  DC.W 0x6000
 8030 bc2a DD        	>  DC.B (ICC-X)>>2
 8030 bc2b 26        	>  DC.B 38
 8031               	         C68     F0F8,50C8,IDBCC,37            | DB
 8031 bc2c F0F8      	>  DC.W 0xF0F8
 8031 bc2e 50C8      	>  DC.W 0x50C8
 8031 bc30 D8        	>  DC.B (IDBCC-X)>>2
 8031 bc31 25        	>  DC.B 37
 8032               	         C68     F0C0,50C0,ISCC,36             | S
 8032 bc32 F0C0      	>  DC.W 0xF0C0
 8032 bc34 50C0      	>  DC.W 0x50C0
 8032 bc36 D5        	>  DC.B (ISCC-X)>>2
 8032 bc37 24        	>  DC.B 36
 8033               	         C68     F100,5100,IQUICK,35           | SUBQ
 8033 bc38 F100      	>  DC.W 0xF100
 8033 bc3a 5100      	>  DC.W 0x5100
 8033 bc3c A1        	>  DC.B (IQUICK-X)>>2
 8033 bc3d 23        	>  DC.B 35
 8034               	         C68     F100,5000,IQUICK,34           | ADDQ
 8034 bc3e F100      	>  DC.W 0xF100
 8034 bc40 5000      	>  DC.W 0x5000
68K GAS  tutor13.s 			page 162


 8034 bc42 A1        	>  DC.B (IQUICK-X)>>2
 8034 bc43 22        	>  DC.B 34
 8035               	         C68     F1C0,41C0,FORM6A,33           | LEA
 8035 bc44 F1C0      	>  DC.W 0xF1C0
 8035 bc46 41C0      	>  DC.W 0x41C0
 8035 bc48 46        	>  DC.B (FORM6A-X)>>2
 8035 bc49 21        	>  DC.B 33
 8036               	         C68     F1C0,4180,FORM6D,32           | CHK
 8036 bc4a F1C0      	>  DC.W 0xF1C0
 8036 bc4c 4180      	>  DC.W 0x4180
 8036 bc4e 4A        	>  DC.B (FORM6D-X)>>2
 8036 bc4f 20        	>  DC.B 32
 8037               	         C68     FFC0,4EC0,FORM11SL,31         | JMP
 8037 bc50 FFC0      	>  DC.W 0xFFC0
 8037 bc52 4EC0      	>  DC.W 0x4EC0
 8037 bc54 7F        	>  DC.B (FORM11SL-X)>>2
 8037 bc55 1F        	>  DC.B 31
 8038               	         C68     FFC0,4E80,FORM11SL,30         | JSR
 8038 bc56 FFC0      	>  DC.W 0xFFC0
 8038 bc58 4E80      	>  DC.W 0x4E80
 8038 bc5a 7F        	>  DC.B (FORM11SL-X)>>2
 8038 bc5b 1E        	>  DC.B 30
 8039               	         C68     FFFF,4E77,SCOMMON,29          | RTR
 8039 bc5c FFFF      	>  DC.W 0xFFFF
 8039 bc5e 4E77      	>  DC.W 0x4E77
 8039 bc60 D4        	>  DC.B (SCOMMON-X)>>2
 8039 bc61 1D        	>  DC.B 29
 8040               	         C68     FFFF,4E76,SCOMMON,28          | TRAPV
 8040 bc62 FFFF      	>  DC.W 0xFFFF
 8040 bc64 4E76      	>  DC.W 0x4E76
 8040 bc66 D4        	>  DC.B (SCOMMON-X)>>2
 8040 bc67 1C        	>  DC.B 28
 8041               	         C68     FFFF,4E75,SCOMMON,27          | RTS
 8041 bc68 FFFF      	>  DC.W 0xFFFF
 8041 bc6a 4E75      	>  DC.W 0x4E75
 8041 bc6c D4        	>  DC.B (SCOMMON-X)>>2
 8041 bc6d 1B        	>  DC.B 27
 8042               	         C68     FFFF,4E73,SCOMMON,26          | RTE
 8042 bc6e FFFF      	>  DC.W 0xFFFF
 8042 bc70 4E73      	>  DC.W 0x4E73
 8042 bc72 D4        	>  DC.B (SCOMMON-X)>>2
 8042 bc73 1A        	>  DC.B 26
 8043               	         C68     FFFF,4E72,ISTOP,25            | STOP
 8043 bc74 FFFF      	>  DC.W 0xFFFF
 8043 bc76 4E72      	>  DC.W 0x4E72
 8043 bc78 13        	>  DC.B (ISTOP-X)>>2
 8043 bc79 19        	>  DC.B 25
 8044               	         C68     FFFF,4E71,SCOMMON,24          | NOP
 8044 bc7a FFFF      	>  DC.W 0xFFFF
 8044 bc7c 4E71      	>  DC.W 0x4E71
 8044 bc7e D4        	>  DC.B (SCOMMON-X)>>2
 8044 bc7f 18        	>  DC.B 24
 8045               	         C68     FFFF,4E70,SCOMMON,23          | RESET
 8045 bc80 FFFF      	>  DC.W 0xFFFF
 8045 bc82 4E70      	>  DC.W 0x4E70
 8045 bc84 D4        	>  DC.B (SCOMMON-X)>>2
 8045 bc85 17        	>  DC.B 23
68K GAS  tutor13.s 			page 163


 8046               	         C68     FFF8,4E68,IMVFUSP,60          | MOVE FROM USP
 8046 bc86 FFF8      	>  DC.W 0xFFF8
 8046 bc88 4E68      	>  DC.W 0x4E68
 8046 bc8a AE        	>  DC.B (IMVFUSP-X)>>2
 8046 bc8b 3C        	>  DC.B 60
 8047               	         C68     FFF8,4E60,IMVTUSP,60          | MOVE TO USP
 8047 bc8c FFF8      	>  DC.W 0xFFF8
 8047 bc8e 4E60      	>  DC.W 0x4E60
 8047 bc90 B7        	>  DC.B (IMVTUSP-X)>>2
 8047 bc91 3C        	>  DC.B 60
 8048               	         C68     FFF8,4E58,FORM5,22            | UNLINK
 8048 bc92 FFF8      	>  DC.W 0xFFF8
 8048 bc94 4E58      	>  DC.W 0x4E58
 8048 bc96 45        	>  DC.B (FORM5-X)>>2
 8048 bc97 16        	>  DC.B 22
 8049               	         C68     FFF8,4E50,ILINK,21            | LINK
 8049 bc98 FFF8      	>  DC.W 0xFFF8
 8049 bc9a 4E50      	>  DC.W 0x4E50
 8049 bc9c 36        	>  DC.B (ILINK-X)>>2
 8049 bc9d 15        	>  DC.B 21
 8050               	         C68     FFF0,4E40,FORM4,20            | TRAP
 8050 bc9e FFF0      	>  DC.W 0xFFF0
 8050 bca0 4E40      	>  DC.W 0x4E40
 8050 bca2 40        	>  DC.B (FORM4-X)>>2
 8050 bca3 14        	>  DC.B 20
 8051               	         C68     FF80,4C80,IMOVEMTR,15         | MOVEM FROM REGISTERS
 8051 bca4 FF80      	>  DC.W 0xFF80
 8051 bca6 4C80      	>  DC.W 0x4C80
 8051 bca8 0C        	>  DC.B (IMOVEMTR-X)>>2
 8051 bca9 0F        	>  DC.B 15
 8052               	         C68     FFC0,4AC0,FORM1A,19           | TAS
 8052 bcaa FFC0      	>  DC.W 0xFFC0
 8052 bcac 4AC0      	>  DC.W 0x4AC0
 8052 bcae 3D        	>  DC.B (FORM1A-X)>>2
 8052 bcaf 13        	>  DC.B 19
 8053               	         C68     FF00,4A00,FORM1,18            | TST
 8053 bcb0 FF00      	>  DC.W 0xFF00
 8053 bcb2 4A00      	>  DC.W 0x4A00
 8053 bcb4 3C        	>  DC.B (FORM1-X)>>2
 8053 bcb5 12        	>  DC.B 18
 8054               	         C68     FFF8,48C0,FORM3,17            | EXT.L
 8054 bcb6 FFF8      	>  DC.W 0xFFF8
 8054 bcb8 48C0      	>  DC.W 0x48C0
 8054 bcba 3F        	>  DC.B (FORM3-X)>>2
 8054 bcbb 11        	>  DC.B 17
 8055               	         C68     FFF8,4880,FORM3,16            | EXT.W
 8055 bcbc FFF8      	>  DC.W 0xFFF8
 8055 bcbe 4880      	>  DC.W 0x4880
 8055 bcc0 3F        	>  DC.B (FORM3-X)>>2
 8055 bcc1 10        	>  DC.B 16
 8056               	         C68     FF80,4880,IMOVEMFR,15         | MOVEA TO REGISTERS
 8056 bcc2 FF80      	>  DC.W 0xFF80
 8056 bcc4 4880      	>  DC.W 0x4880
 8056 bcc6 00        	>  DC.B (IMOVEMFR-X)>>2
 8056 bcc7 0F        	>  DC.B 15
 8057               	         C68     FFF8,4840,FORM3,14            | SWAP
 8057 bcc8 FFF8      	>  DC.W 0xFFF8
68K GAS  tutor13.s 			page 164


 8057 bcca 4840      	>  DC.W 0x4840
 8057 bccc 3F        	>  DC.B (FORM3-X)>>2
 8057 bccd 0E        	>  DC.B 14
 8058               	         C68     FFC0,4840,FORM11,13           | PEA
 8058 bcce FFC0      	>  DC.W 0xFFC0
 8058 bcd0 4840      	>  DC.W 0x4840
 8058 bcd2 7C        	>  DC.B (FORM11-X)>>2
 8058 bcd3 0D        	>  DC.B 13
 8059               	         C68     FFC0,4800,FORM1A,12           | NBCD
 8059 bcd4 FFC0      	>  DC.W 0xFFC0
 8059 bcd6 4800      	>  DC.W 0x4800
 8059 bcd8 3D        	>  DC.B (FORM1A-X)>>2
 8059 bcd9 0C        	>  DC.B 12
 8060               	         C68     FFC0,46C0,IMVTSR,59           | MOVE TO SR
 8060 bcda FFC0      	>  DC.W 0xFFC0
 8060 bcdc 46C0      	>  DC.W 0x46C0
 8060 bcde B2        	>  DC.B (IMVTSR-X)>>2
 8060 bcdf 3B        	>  DC.B 59
 8061               	         C68     FF00,4600,FORM1,11            | NOT
 8061 bce0 FF00      	>  DC.W 0xFF00
 8061 bce2 4600      	>  DC.W 0x4600
 8061 bce4 3C        	>  DC.B (FORM1-X)>>2
 8061 bce5 0B        	>  DC.B 11
 8062               	         C68     FFC0,44C0,IMVTCCR,59          | MOVE TO CCR
 8062 bce6 FFC0      	>  DC.W 0xFFC0
 8062 bce8 44C0      	>  DC.W 0x44C0
 8062 bcea BA        	>  DC.B (IMVTCCR-X)>>2
 8062 bceb 3B        	>  DC.B 59
 8063               	         C68     FF00,4400,FORM1,10            | NEG
 8063 bcec FF00      	>  DC.W 0xFF00
 8063 bcee 4400      	>  DC.W 0x4400
 8063 bcf0 3C        	>  DC.B (FORM1-X)>>2
 8063 bcf1 0A        	>  DC.B 10
 8064               	         C68     FF00,4200,FORM1,9             | CLR
 8064 bcf2 FF00      	>  DC.W 0xFF00
 8064 bcf4 4200      	>  DC.W 0x4200
 8064 bcf6 3C        	>  DC.B (FORM1-X)>>2
 8064 bcf7 09        	>  DC.B 9
 8065               	         C68     FFC0,40C0,IMVFSR,59           | MOVE.W  FROM  SR
 8065 bcf8 FFC0      	>  DC.W 0xFFC0
 8065 bcfa 40C0      	>  DC.W 0x40C0
 8065 bcfc AA        	>  DC.B (IMVFSR-X)>>2
 8065 bcfd 3B        	>  DC.B 59
 8066               	         C68     FF00,4000,FORM1,8             | NEGX
 8066 bcfe FF00      	>  DC.W 0xFF00
 8066 bd00 4000      	>  DC.W 0x4000
 8066 bd02 3C        	>  DC.B (FORM1-X)>>2
 8066 bd03 08        	>  DC.B 8
 8067               	         C68     F000,3000,IMOVE,59            | MOVE.W
 8067 bd04 F000      	>  DC.W 0xF000
 8067 bd06 3000      	>  DC.W 0x3000
 8067 bd08 35        	>  DC.B (IMOVE-X)>>2
 8067 bd09 3B        	>  DC.B 59
 8068               	         C68     F000,2000,IMOVE,60            | MOVE.L
 8068 bd0a F000      	>  DC.W 0xF000
 8068 bd0c 2000      	>  DC.W 0x2000
 8068 bd0e 35        	>  DC.B (IMOVE-X)>>2
68K GAS  tutor13.s 			page 165


 8068 bd0f 3C        	>  DC.B 60
 8069               	         C68     F000,1000,IMOVE,58            | MOVE.B
 8069 bd10 F000      	>  DC.W 0xF000
 8069 bd12 1000      	>  DC.W 0x1000
 8069 bd14 35        	>  DC.B (IMOVE-X)>>2
 8069 bd15 3A        	>  DC.B 58
 8070               	         C68     FF00,0C00,IMMED,6             | CMP       #
 8070 bd16 FF00      	>  DC.W 0xFF00
 8070 bd18 0C00      	>  DC.W 0x0C00
 8070 bd1a 18        	>  DC.B (IMMED-X)>>2
 8070 bd1b 06        	>  DC.B 6
 8071               	         C68     FF00,0A00,IMMED,5             | EOR       #
 8071 bd1c FF00      	>  DC.W 0xFF00
 8071 bd1e 0A00      	>  DC.W 0x0A00
 8071 bd20 18        	>  DC.B (IMMED-X)>>2
 8071 bd21 05        	>  DC.B 5
 8072               	         C68     FF00,0600,IMMED,4             | ADD       #
 8072 bd22 FF00      	>  DC.W 0xFF00
 8072 bd24 0600      	>  DC.W 0x0600
 8072 bd26 18        	>  DC.B (IMMED-X)>>2
 8072 bd27 04        	>  DC.B 4
 8073               	         C68     FF00,0400,IMMED,3             | SUB       #
 8073 bd28 FF00      	>  DC.W 0xFF00
 8073 bd2a 0400      	>  DC.W 0x0400
 8073 bd2c 18        	>  DC.B (IMMED-X)>>2
 8073 bd2d 03        	>  DC.B 3
 8074               	         C68     FF00,0200,IMMED,2             | AND       #
 8074 bd2e FF00      	>  DC.W 0xFF00
 8074 bd30 0200      	>  DC.W 0x0200
 8074 bd32 18        	>  DC.B (IMMED-X)>>2
 8074 bd33 02        	>  DC.B 2
 8075               	         C68     FF00,0000,IMMED,1             | OR        #
 8075 bd34 FF00      	>  DC.W 0xFF00
 8075 bd36 0000      	>  DC.W 0x0000
 8075 bd38 18        	>  DC.B (IMMED-X)>>2
 8075 bd39 01        	>  DC.B 1
 8076               	         C68     F138,0108,IMOVEP,0            | MOVEP
 8076 bd3a F138      	>  DC.W 0xF138
 8076 bd3c 0108      	>  DC.W 0x0108
 8076 bd3e BE        	>  DC.B (IMOVEP-X)>>2
 8076 bd3f 00        	>  DC.B 0
 8077               	         C68     FFC0,08C0,ISETS,64            | BSET
 8077 bd40 FFC0      	>  DC.W 0xFFC0
 8077 bd42 08C0      	>  DC.W 0x08C0
 8077 bd44 F0        	>  DC.B (ISETS-X)>>2
 8077 bd45 40        	>  DC.B 64
 8078               	         C68     FFC0,0880,ISETS,63            | BCLR
 8078 bd46 FFC0      	>  DC.W 0xFFC0
 8078 bd48 0880      	>  DC.W 0x0880
 8078 bd4a F0        	>  DC.B (ISETS-X)>>2
 8078 bd4b 3F        	>  DC.B 63
 8079               	         C68     FFC0,0840,ISETS,62            | BCHG
 8079 bd4c FFC0      	>  DC.W 0xFFC0
 8079 bd4e 0840      	>  DC.W 0x0840
 8079 bd50 F0        	>  DC.B (ISETS-X)>>2
 8079 bd51 3E        	>  DC.B 62
 8080               	         C68     FFC0,0800,ISETS,61            | BTST
68K GAS  tutor13.s 			page 166


 8080 bd52 FFC0      	>  DC.W 0xFFC0
 8080 bd54 0800      	>  DC.W 0x0800
 8080 bd56 F0        	>  DC.B (ISETS-X)>>2
 8080 bd57 3D        	>  DC.B 61
 8081               	         C68     F1C0,01C0,ISETD,64            | BSET
 8081 bd58 F1C0      	>  DC.W 0xF1C0
 8081 bd5a 01C0      	>  DC.W 0x01C0
 8081 bd5c EC        	>  DC.B (ISETD-X)>>2
 8081 bd5d 40        	>  DC.B 64
 8082               	         C68     F1C0,0180,ISETD,63            | BCLR
 8082 bd5e F1C0      	>  DC.W 0xF1C0
 8082 bd60 0180      	>  DC.W 0x0180
 8082 bd62 EC        	>  DC.B (ISETD-X)>>2
 8082 bd63 3F        	>  DC.B 63
 8083               	         C68     F1C0,0140,ISETD,62            | BCHG
 8083 bd64 F1C0      	>  DC.W 0xF1C0
 8083 bd66 0140      	>  DC.W 0x0140
 8083 bd68 EC        	>  DC.B (ISETD-X)>>2
 8083 bd69 3E        	>  DC.B 62
 8084               	         C68     F1C0,0100,ISETD,61            | BTST
 8084 bd6a F1C0      	>  DC.W 0xF1C0
 8084 bd6c 0100      	>  DC.W 0x0100
 8084 bd6e EC        	>  DC.B (ISETD-X)>>2
 8084 bd6f 3D        	>  DC.B 61
 8085               	TBLE:    .align  2
 8086               	
 8087               	N68:     .MACRO a1,a2
 8088               	         .ascii  "\a1"
 8089               	         dc.b    \a2
 8090               	         .ENDM
 8091               	
 8092               	OPCTBL:  .align  2
 8093               	         N68     MOVE,0xd0    | 0
 8093 bd70 4D4F 5645 	>  .ascii "MOVE"
 8093 bd74 D0        	>  dc.b 0xd0
 8094               	         N68     O,0xd2       | 1
 8094 bd75 4F        	>  .ascii "O"
 8094 bd76 D2        	>  dc.b 0xd2
 8095               	         N68     AN,0xc4      | 2
 8095 bd77 414E      	>  .ascii "AN"
 8095 bd79 C4        	>  dc.b 0xc4
 8096               	         N68     SU,0xc2      | 3
 8096 bd7a 5355      	>  .ascii "SU"
 8096 bd7c C2        	>  dc.b 0xc2
 8097               	         N68     AD,0xc4      | 4
 8097 bd7d 4144      	>  .ascii "AD"
 8097 bd7f C4        	>  dc.b 0xc4
 8098               	         N68     EO,0xd2      | 5
 8098 bd80 454F      	>  .ascii "EO"
 8098 bd82 D2        	>  dc.b 0xd2
 8099               	         N68     CM,0xd0      | 6
 8099 bd83 434D      	>  .ascii "CM"
 8099 bd85 D0        	>  dc.b 0xd0
 8100               	         N68     MOV,0xc5     | 7
 8100 bd86 4D4F 56   	>  .ascii "MOV"
 8100 bd89 C5        	>  dc.b 0xc5
 8101               	         N68     NEG,0xd8     | 8
68K GAS  tutor13.s 			page 167


 8101 bd8a 4E45 47   	>  .ascii "NEG"
 8101 bd8d D8        	>  dc.b 0xd8
 8102               	         N68     CL,0xd2      | 9
 8102 bd8e 434C      	>  .ascii "CL"
 8102 bd90 D2        	>  dc.b 0xd2
 8103               	         N68     NE,0Xc7      | 10
 8103 bd91 4E45      	>  .ascii "NE"
 8103 bd93 C7        	>  dc.b 0Xc7
 8104               	         N68     NO,0xd4      | 11
 8104 bd94 4E4F      	>  .ascii "NO"
 8104 bd96 D4        	>  dc.b 0xd4
 8105               	         N68     NBC,0xc4     | 12
 8105 bd97 4E42 43   	>  .ascii "NBC"
 8105 bd9a C4        	>  dc.b 0xc4
 8106               	         N68     PEA.,0xcc    | 13
 8106 bd9b 5045 412E 	>  .ascii "PEA."
 8106 bd9f CC        	>  dc.b 0xcc
 8107               	         N68     SWAP.,0xd7   | 14
 8107 bda0 5357 4150 	>  .ascii "SWAP."
 8107      2E
 8107 bda5 D7        	>  dc.b 0xd7
 8108               	         N68     MOVE,0xcd    | 15
 8108 bda6 4D4F 5645 	>  .ascii "MOVE"
 8108 bdaa CD        	>  dc.b 0xcd
 8109               	         N68     EXT.,0xd7    | 16
 8109 bdab 4558 542E 	>  .ascii "EXT."
 8109 bdaf D7        	>  dc.b 0xd7
 8110               	         N68     EXT.,0xcc    | 17
 8110 bdb0 4558 542E 	>  .ascii "EXT."
 8110 bdb4 CC        	>  dc.b 0xcc
 8111               	         N68     TS,0xd4      | 18
 8111 bdb5 5453      	>  .ascii "TS"
 8111 bdb7 D4        	>  dc.b 0xd4
 8112               	         N68     TAS.,0xc2    | 19
 8112 bdb8 5441 532E 	>  .ascii "TAS."
 8112 bdbc C2        	>  dc.b 0xc2
 8113               	         N68     TRA,0xd0     | 20
 8113 bdbd 5452 41   	>  .ascii "TRA"
 8113 bdc0 D0        	>  dc.b 0xd0
 8114               	         N68     LIN,0xcb     | 21
 8114 bdc1 4C49 4E   	>  .ascii "LIN"
 8114 bdc4 CB        	>  dc.b 0xcb
 8115               	         N68     UNL,0xcb     | 22
 8115 bdc5 554E 4C   	>  .ascii "UNL"
 8115 bdc8 CB        	>  dc.b 0xcb
 8116               	         N68     RESE,0xd4    | 23
 8116 bdc9 5245 5345 	>  .ascii "RESE"
 8116 bdcd D4        	>  dc.b 0xd4
 8117               	         N68     NO,0xd0      | 24
 8117 bdce 4E4F      	>  .ascii "NO"
 8117 bdd0 D0        	>  dc.b 0xd0
 8118               	         N68     STO,0xd0     | 25
 8118 bdd1 5354 4F   	>  .ascii "STO"
 8118 bdd4 D0        	>  dc.b 0xd0
 8119               	         N68     RT,0xc5      | 26
 8119 bdd5 5254      	>  .ascii "RT"
 8119 bdd7 C5        	>  dc.b 0xc5
68K GAS  tutor13.s 			page 168


 8120               	         N68     RT,0xd3      | 27
 8120 bdd8 5254      	>  .ascii "RT"
 8120 bdda D3        	>  dc.b 0xd3
 8121               	         N68     TRAP,0xd6    | 28
 8121 bddb 5452 4150 	>  .ascii "TRAP"
 8121 bddf D6        	>  dc.b 0xd6
 8122               	         N68     RT,0xd2      | 29
 8122 bde0 5254      	>  .ascii "RT"
 8122 bde2 D2        	>  dc.b 0xd2
 8123               	         N68     JS,0xd2      | 30
 8123 bde3 4A53      	>  .ascii "JS"
 8123 bde5 D2        	>  dc.b 0xd2
 8124               	         N68     JM,0xd0      | 31
 8124 bde6 4A4D      	>  .ascii "JM"
 8124 bde8 D0        	>  dc.b 0xd0
 8125               	         N68     CHK.,0xd7    | 32
 8125 bde9 4348 4B2E 	>  .ascii "CHK."
 8125 bded D7        	>  dc.b 0xd7
 8126               	         N68     LEA.,0xcc    | 33
 8126 bdee 4C45 412E 	>  .ascii "LEA."
 8126 bdf2 CC        	>  dc.b 0xcc
 8127               	         N68     ADD,0xd1     | 34
 8127 bdf3 4144 44   	>  .ascii "ADD"
 8127 bdf6 D1        	>  dc.b 0xd1
 8128               	         N68     SUB,0xd1     | 35
 8128 bdf7 5355 42   	>  .ascii "SUB"
 8128 bdfa D1        	>  dc.b 0xd1
 8129 bdfb D3        	         DC.B    0xd3         | 36
 8130               	         N68     D,0xc2       | 37
 8130 bdfc 44        	>  .ascii "D"
 8130 bdfd C2        	>  dc.b 0xc2
 8131 bdfe C2        	         DC.B    0xc2         | 38
 8132               	         N68     MOVEQ.,0xcc  | .....39
 8132 bdff 4D4F 5645 	>  .ascii "MOVEQ."
 8132      512E 
 8132 be05 CC        	>  dc.b 0xcc
 8133               	         N68     O,0xd2       | 40
 8133 be06 4F        	>  .ascii "O"
 8133 be07 D2        	>  dc.b 0xd2
 8134               	         N68     DIVU.,0xd7   | 41
 8134 be08 4449 5655 	>  .ascii "DIVU."
 8134      2E
 8134 be0d D7        	>  dc.b 0xd7
 8135               	         N68     DIVS.,0xd7   | 42
 8135 be0e 4449 5653 	>  .ascii "DIVS."
 8135      2E
 8135 be13 D7        	>  dc.b 0xd7
 8136               	         N68     SBC,0xc4     | 43
 8136 be14 5342 43   	>  .ascii "SBC"
 8136 be17 C4        	>  dc.b 0xc4
 8137               	         N68     SU,0xc2      | 44
 8137 be18 5355      	>  .ascii "SU"
 8137 be1a C2        	>  dc.b 0xc2
 8138               	         N68     SUB,0xd8     | 45
 8138 be1b 5355 42   	>  .ascii "SUB"
 8138 be1e D8        	>  dc.b 0xd8
 8139               	         N68     CMP,0xcd     | 46
68K GAS  tutor13.s 			page 169


 8139 be1f 434D 50   	>  .ascii "CMP"
 8139 be22 CD        	>  dc.b 0xcd
 8140               	         N68     MULU.,0xd7   | 47
 8140 be23 4D55 4C55 	>  .ascii "MULU."
 8140      2E
 8140 be28 D7        	>  dc.b 0xd7
 8141               	         N68     MULS.,0xd7   | 48
 8141 be29 4D55 4C53 	>  .ascii "MULS."
 8141      2E
 8141 be2e D7        	>  dc.b 0xd7
 8142               	         N68     ABC,0xc4     | 49
 8142 be2f 4142 43   	>  .ascii "ABC"
 8142 be32 C4        	>  dc.b 0xc4
 8143               	         N68     EX,0Xc7      | 50
 8143 be33 4558      	>  .ascii "EX"
 8143 be35 C7        	>  dc.b 0Xc7
 8144               	         N68     BS,0xd2      | .....51
 8144 be36 4253      	>  .ascii "BS"
 8144 be38 D2        	>  dc.b 0xd2
 8145               	         N68     NUL,0xcc     | .....52
 8145 be39 4E55 4C   	>  .ascii "NUL"
 8145 be3c CC        	>  dc.b 0xcc
 8146               	         N68     ADD,0xd8     | 53
 8146 be3d 4144 44   	>  .ascii "ADD"
 8146 be40 D8        	>  dc.b 0xd8
 8147               	         N68     A,0xd3       | 54
 8147 be41 41        	>  .ascii "A"
 8147 be42 D3        	>  dc.b 0xd3
 8148               	         N68     L,0xd3       | 55
 8148 be43 4C        	>  .ascii "L"
 8148 be44 D3        	>  dc.b 0xd3
 8149               	         N68     R,0xcf       | 56
 8149 be45 52        	>  .ascii "R"
 8149 be46 CF        	>  dc.b 0xcf
 8150               	         N68     RO,0xd8      | 57
 8150 be47 524F      	>  .ascii "RO"
 8150 be49 D8        	>  dc.b 0xd8
 8151               	         N68     MOVE.,0xc2   | 58
 8151 be4a 4D4F 5645 	>  .ascii "MOVE."
 8151      2E
 8151 be4f C2        	>  dc.b 0xc2
 8152               	         N68     MOVE.,0xd7   | 59
 8152 be50 4D4F 5645 	>  .ascii "MOVE."
 8152      2E
 8152 be55 D7        	>  dc.b 0xd7
 8153               	         N68     MOVE.,0xcc   | 60
 8153 be56 4D4F 5645 	>  .ascii "MOVE."
 8153      2E
 8153 be5b CC        	>  dc.b 0xcc
 8154               	         N68     BTS,0xd4     | 61
 8154 be5c 4254 53   	>  .ascii "BTS"
 8154 be5f D4        	>  dc.b 0xd4
 8155               	         N68     BCH,0Xc7     | 62
 8155 be60 4243 48   	>  .ascii "BCH"
 8155 be63 C7        	>  dc.b 0Xc7
 8156               	         N68     BCL,0xd2     | 63
 8156 be64 4243 4C   	>  .ascii "BCL"
68K GAS  tutor13.s 			page 170


 8156 be67 D2        	>  dc.b 0xd2
 8157               	         N68     BSE,0xd4     | 64
 8157 be68 4253 45   	>  .ascii "BSE"
 8157 be6b D4        	>  dc.b 0xd4
 8158               	         N68     BR,0xc1      | 65
 8158 be6c 4252      	>  .ascii "BR"
 8158 be6e C1        	>  dc.b 0xc1
 8159               	
 8160 be6f 00        	         DC.B    0         | PAD BYTE
 8161               	
 8162               	*-------------------------------------------------------------------------
 8163               	* File TRAP14    Trap 14 handler of "TUTOR"                       06/25/82
 8164               	
 8165               	*        CALLING SEQUENCE
 8166               	*                  %D7 = XXXXXXFF   WHERE "FF" IF FUNCTION NUMBER
 8167               	*                  TRAP      #14
 8168               	
 8169               	TRAP14:
 8170 be70 48E7 4160 	         MOVEM.L %D1/%D7/%A1-%A2,-(%A7)
 8171               	
 8172 be74 2278 0656 	         MOVE.L  CTLINK,%A1
 8173 be78 1211      	T100:    MOVE.B  (%A1),%D1      | D1 = FUNCTION FROM TABLE
 8174 be7a 0C01 00FF 	         CMPI.B  #0xFF,%D1
 8175 be7e 6740      	         BEQ.S   T500           | END OF TABLE
 8176               	
 8177 be80 0C01 00FE 	         CMPI.B  #0xFE,%D1
 8178 be84 6774      	         BEQ.S   T600           | LINK IN LIST
 8179               	
 8180 be86 B207      	         CMP.B   %D7,%D1
 8181 be88 6704      	         BEQ.S   T400           | FOUND MATCH
 8182               	
 8183 be8a 5889      	         ADDQ.L  #4,%A1
 8184 be8c 60EA      	         BRA.S   T100
 8185               	
 8186 be8e 2211      	T400:    MOVE.L  (%A1),%D1      | FFAAAAAA
 8187 be90 E181      	         ASL.L   #8,%D1         | AAAAAA..
 8188 be92 E089      	         LSR.L   #8,%D1         | 00AAAAAA  GO TO ADDRESS
 8189               	
 8190 be94 082F 0005 	         BTST.B  #5,16(%A7)
 8190      0010 
 8191 be9a 6710      	         BEQ.S   T450           | CALL FROM USER MODE
 8192               	
 8193               	*  CALL FROM SUPERVISOR MODE
 8194               	* STACK (WORDS)
 8195               	*   +0   %D1 HIGH
 8196               	*   +2   %D1 LOW
 8197               	*   +4   %D7 HIGH
 8198               	*   +6   %D7 LOW
 8199               	*   +8   %A1 HIGH
 8200               	*   +10  %A1 LOW
 8201               	*   +12  %A2 HIGH              STATUS REG
 8202               	*   +14  %A2 LOW               GOTO HIGH
 8203               	*   +16  STATUS REG           GOTO LOW
 8204               	*   +18  RETURN HIGH        RETURN HIGH
 8205               	*   +20  RETURN LOW         RETURN LOW
 8206               	*
 8207 be9c 2F6F 0010 	         MOVE.L  16(%A7),12(%A7) | SR
68K GAS  tutor13.s 			page 171


 8207      000C 
 8208 bea2 2F41 000E 	         MOVE.L  %D1,14(%A7)    | GOTO ADDRESS
 8209 bea6 4CDF 0282 	         MOVEM.L (%A7)+,%D1/%D7/%A1 | RESTORE REGISTERS
 8210 beaa 4E73      	         RTE                    | GOTO (AND TRIM STACK)
 8211               	
 8212               	* STACK (WORDS)
 8213               	*   +0   %D1 HIGH
 8214               	*   +2   %D1 LOW
 8215               	*   +4   %D7 HIGH
 8216               	*   +6   %D7 LOW
 8217               	*   +8   %A1 HIGH
 8218               	*   +10  %A1 LOW
 8219               	*   +12  %A2 HIGH                                 (USER STACK)
 8220               	*   +14  %A2 LOW
 8221               	*   +16  STATUS REG         STATUS REG
 8222               	*   +18  RETURN HIGH        GOTO HIGH            RETURN HIGH
 8223               	*   +20  RETURN LOW         GOTO LOW             RETURN LOW
 8224               	*
 8225               	* CALL FROM USER MODE
 8226 beac 2E2F 0012 	T450:    MOVE.L  18(%A7),%D7    | RETURN PC
 8227 beb0 2F41 0012 	         MOVE.L  %D1,18(%A7)    | GOTO ADDRESS
 8228 beb4 4E69      	         MOVE.L  %USP,%A1       | POINTER TO USER STACK
 8229 beb6 2307      	         MOVE.L  %D7,-(%A1)     | RETURN PC TO USER STACK
 8230 beb8 4E61      	         MOVE.L  %A1,%USP       | UPDATED USER STACK POINTER
 8231 beba 4CDF 0682 	         MOVEM.L (%A7)+,%D1/%D7/%A1/%A2
 8232 bebe 4E73      	         RTE
 8233               	
 8234 bec0 4CDF 0682 	T500:    MOVEM.L (%A7)+,%D1/%D7/%A1/%A2
 8235               	         SAVEREGS
 8235               	>  TEMP =0x04d6
 8235 bec4 21CF 0444 	>  MOVE.L %A7,REGA7
 8235 bec8 4FFA 000A 	>  LEA SV327(%PC),%A7
 8235 becc 21CF 04D6 	>  MOVE.L %A7,TEMP
 8235 bed0 6000 CDBA 	>  JRA SAVE
 8235               	> SV327:
 8236 bed4 4BFA 0012 	         LEA     MSGT14(%PC),%A5
 8237 bed8 6100 C218 	         BSR     FIXDATA
 8238 bedc 6100 DD12 	         BSR     OUT1CR
 8239 bee0 6100 CA22 	         BSR     TDISPLY
 8240 bee4 6000 C34C 	         BRA     MACSBUG
 8241               	
 8242 bee8 554E 4445 	MSGT14:  .ascii  "UNDEFINED TRAP 14"
 8242      4649 4E45 
 8242      4420 5452 
 8242      4150 2031 
 8242      34
 8243 bef9 04        	         DC.B    EOT
 8244               	
 8245 befa 2251      	T600:    MOVE.L  (%A1),%A1
 8246 befc 6000 FF7A 	         BRA     T100
 8247               	
 8248               	T700:    .align  2              | 253 APPEND NEW TABLE
 8249 bf00 2208      	         MOVE.L  %A0,%D1        |  ..AAAAAA
 8250 bf02 2078 0656 	         MOVE.L  CTLINK,%A0     | A0 = LINK TO BE RETURNED
 8251 bf06 E199      	         ROL.L   #8,%D1         | AAAAAA..
 8252 bf08 123C 00FE 	         MOVE.B  #0xFE,%D1      | AAAAAAFE
 8253 bf0c E099      	         ROR.L   #8,%D1         | FEAAAAAA
68K GAS  tutor13.s 			page 172


 8254 bf0e 21C1 0656 	         MOVE.L  %D1,CTLINK
 8255 bf12 4E75      	         RTS
 8256               	
 8257               	*  CREATE ENTRY TO FUNCTION/ADDRESS TABLE
 8258               	*    FFAAAAAA
 8259               	*    FF......      FUNCTION NUMBER
 8260               	*    ..AAAAAA      ADDRESS OF FUNCTION
 8261               	
 8262               	FADDR:   .MACRO   a1,a2
 8263               	         DC.B     \a1
 8264               	         DC.B     0
 8265               	         DC.W     \a2
 8266               	         .ENDM
 8267               	
 8268               	CT:
 8269               	*        FADDR   253,T700       | APPEND NEW TABLE
 8270 bf14 FD00 BF00 	         DC.L    0xFD00BF00
 8271               	*        FADDR   252,FIXDADD    | APPEND DATA (A5) TO BUFFER (A6)+
 8272 bf18 FC00 80F6 	         DC.L    0xFC0080F6
 8273               	*        FADDR   251,FIXBUF     | SET A5 & A6 AS POINTERS TO BUFFER
 8274 bf1c FB00 9C96 	         DC.L    0xFB009C96
 8275               	*        FADDR   250,FIXDATA    | MOVE DATA (A5) TO BUFFER; A5=BUFFER A6
 8276 bf20 FA00 80F2 	         DC.L    0xFA0080F2
 8277               	*        FADDR   249,FIXDCRLF
 8278 bf24 F900 8106 	         DC.L    0xF9008106
 8279               	*        FADDR   248,F100       | OUTPUT CHAR PORT1  D0=CHAR
 8280 bf28 F800 BF88 	         DC.L    0xF800BF88
 8281               	*        FADDR   247,F110       | INPUT CHAR PORT1  D0=CHAR
 8282 bf2c F700 BF90 	         DC.L    0xF700BF90
 8283               	*        FADDR   244,CHRPRINT   | OUTPUT CHAR PORT3 D0=CHAR
 8284 bf30 F400 9D7A 	         DC.L    0xF4009D7A
 8285               	*        FADDR   243,OUTPUT     | OUTPUT STRING PORT1 (A5) (A6)
 8286 bf34 F300 9C0A 	         DC.L    0xF3009C0A
 8287               	*        FADDR   242,OUTPUT21   | OUTPUT STRING PORT2 (A5) (A6)
 8288 bf38 F200 9C2A 	         DC.L    0xF2009C2A
 8289               	*        FADDR   241,PORTIN1    | INPUT STRING PORT1  (A5) (A6)
 8290 bf3c F100 9C9E 	         DC.L    0xF1009C9E
 8291               	*        FADDR   240,PORTIN20   | INPUT STRING PORT2  (A5) (A6)
 8292 bf40 F000 9FD4 	         DC.L    0xF0009FD4
 8293               	*        FADDR   239,TAPEOUT    | OUTPUT STRING TO PORT4 (A5) (A6)
 8294 bf44 EF00 9E9C 	         DC.L    0xEF009E9C
 8295               	*        FADDR   238,TAPEIN     | INPUT STRING FROM PORT4 (A5) (A6)
 8296 bf48 EE00 A09C 	         DC.L    0xEE00A09C
 8297               	*        FADDR   237,PRCRLF     | OUTPUT STRING TO PORT3 (A5) (A6)
 8298 bf4c ED00 9D66 	         DC.L    0xED009D66
 8299               	*        FADDR   236,HEX2DEC    | CONVERT HEX D0 TO DECIMAL (A6)+
 8300 bf50 EC00 8F5C 	         DC.L    0xEC008F5C
 8301               	*        FADDR   235,GETHEX     | GET HEX CHAR INTO D0 FROM (A5)+
 8302 bf54 EB00 9BA6 	         DC.L    0xEB009BA6
 8303               	*        FADDR   234,PUTHEX     | FORMAT HEX CHAR FROM D0 TO (A6)+
 8304 bf58 EA00 99C0 	         DC.L    0xEA0099C0
 8305               	*        FADDR   233,PNT2HX     | FORMAT 2 HEX CHAR FROM D0 TO (A6)+
 8306 bf5c E900 99B8 	         DC.L    0xE90099B8
 8307               	*        FADDR   232,PNT4HX     | FORMAT 4 HEX CHAR FROM D0 TO (A6)+
 8308 bf60 E800 99B0 	         DC.L    0xE80099B0
 8309               	*        FADDR   231,PNT6HX     | FORMAT 6 HEX CHAR FROM D0 TO (A6)+
 8310 bf64 E700 99AA 	         DC.L    0xE70099AA
68K GAS  tutor13.s 			page 173


 8311               	*        FADDR   230,PNT8HX     | FORMAT 8 HEX CHAR FROM D0 TO (A6)+
 8312 bf68 E600 99A2 	         DC.L    0xE60099A2
 8313               	*        FADDR   229,START      | RESTART TUTOR INITIALIZE EVERYTHING
 8314 bf6c E500 8146 	         DC.L    0xE5008146
 8315               	*        FADDR   228,MACSBUG    | GOTO TUTOR;   PRINT PROMPT
 8316 bf70 E400 8232 	         DC.L    0xE4008232
 8317               	*        FADDR   227,F120       | OUTPUT STRING,CR,LF PORT1 (A5) (A6)
 8318 bf74 E300 BF98 	         DC.L    0xE300BF98
 8319               	*        FADDR   226,GETNUMA    | GET HEX NUMBER (A5)+ INTO D0
 8320 bf78 E200 9AF6 	         DC.L    0xE2009AF6
 8321               	*        FADDR   225,GETNUMD    | GET DECIMAL NUMBER (A5)+ INTO D0
 8322 bf7c E100 9AEE 	         DC.L    0xE1009AEE
 8323               	*        FADDR   224,PORTIN1N   | INPUT STRING PORT1 (NO AUTO LF)
 8324 bf80 E000 9CB0 	         DC.L    0xE0009CB0
 8325               	*        FADDR   255,0xFFFFFF   | END KEY
 8326 bf84 FFFF FFFF 	         DC.L    0xFFFFFFFF
 8327               	
 8328 bf88 6100 DCE8 	F100:    BSR     GETSER1        | A0 = PORT1 ADDRESS
 8329 bf8c 6000 DE8C 	         BRA     OUTCH
 8330               	
 8331 bf90 6100 DCE0 	F110:    BSR     GETSER1        | A0 = PORT1 ADDRESS
 8332 bf94 6000 E010 	         BRA     INCHNE
 8333               	
 8334 bf98 6100 DC70 	F120:    BSR     OUTPUT         | OUTPUT STRING,CR,LF PORT1 (A5) (A6)
 8335 bf9c 700D      	         MOVEQ   #CR,%D0
 8336 bf9e 61E8      	         BSR.S   F100           | OUTPUT CHAR
 8337 bfa0 700A      	         MOVEQ   #LF,%D0
 8338 bfa2 61E4      	         BSR.S   F100           | OUTPUT CHAR
 8339 bfa4 4E75      	         RTS
 8340               	
 8341 bfa6 0000 0000 	         .fill   0x54,1,0       | PAD BYTES
 8341      0000 0000 
 8341      0000 0000 
 8341      0000 0000 
 8341      0000 0000 
 8342               	
 8343               	*-------------------------------------------------------------------------
 8344               	* File YROM      Version/checksum/identification                  07/29/82
 8345               	
 8346               	VERSION =        4         | BINARY FOR VERSION 1.3
 8347               	*                3         .                  1.2; CKSUM= $44,$DB
 8348               	*                2         .                  1.1; CKSUM= $66,$C1
 8349               	*                1         .                  1.0
 8350               	
 8351 bffa 0404      	         DC.B    VERSION,VERSION
 8352 bffc 2EBA      	         DC.B    0x2E,0xBA       | CHECKSUM
 8353 bffe 1110      	         DC.B    0x11,0x10       | SOCKET I. D.
 8354               	LAST:    .align  2               | LAST ADDRESS+1
 8355               	
 8356               	         .END    START
68K GAS  tutor13.s 			page 174


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ADDR2MEM
                            *ABS*:0000000000000000 SAVEREGS
           tutor13.s:39     *ABS*:0000000000000007 BELL
           tutor13.s:40     *ABS*:0000000000000020 BLANK
           tutor13.s:41     *ABS*:0000000000004afb BKPOINT
           tutor13.s:42     *ABS*:0000000000000080 BUFFSIZE
           tutor13.s:43     *ABS*:0000000000000050 BUFSIZE
           tutor13.s:44     *ABS*:000000000000000d CR
           tutor13.s:45     *ABS*:0000000000000004 CTLD
           tutor13.s:46     *ABS*:0000000000000008 CTLH
           tutor13.s:47     *ABS*:0000000000000017 CTLW
           tutor13.s:48     *ABS*:0000000000000018 CTLX
           tutor13.s:49     *ABS*:000000000000007f DEL
           tutor13.s:50     *ABS*:0000000000001000 DELAYC1
           tutor13.s:51     *ABS*:0000000000000004 EOT
           tutor13.s:52     *ABS*:000000000000000a LF
           tutor13.s:53     *ABS*:0000000000000010 LOCVARSZ
           tutor13.s:54     *ABS*:0000000000000043 RESET
           tutor13.s:69     .text:0000000000000008 _AV2
           tutor13.s:70     .text:000000000000000c _AV3
           tutor13.s:71     .text:0000000000000010 _AV4
           tutor13.s:75     .text:0000000000000020 AV8
           tutor13.s:76     .text:0000000000000024 _AV9
           tutor13.s:78     .text:000000000000002c _AV11
           tutor13.s:79     .text:0000000000000030 _AV12
           tutor13.s:91     .text:0000000000000060 _AV24
           tutor13.s:98     .text:000000000000007c _AV31
           tutor13.s:113    .text:00000000000000b8 _AV46
           tutor13.s:114    .text:00000000000000bc AV47
           tutor13.s:115    .text:00000000000000c0 _AV48
           tutor13.s:326    .text:0000000000000400 _REGPC
           tutor13.s:327    .text:0000000000000404 _REGSR
           tutor13.s:329    .text:0000000000000408 _REGS
           tutor13.s:331    .text:0000000000000444 _REGA7
           tutor13.s:332    .text:0000000000000448 _REGUS
           tutor13.s:340    .text:000000000000044c _BEGHRAM
           tutor13.s:342    .text:000000000000044c _OFFSET
           tutor13.s:343    .text:000000000000046c MEMSIZE
           tutor13.s:344    .text:0000000000000470 _BPADD
           tutor13.s:345    .text:0000000000000490 _BPTILL
           tutor13.s:346    .text:0000000000000494 _BPCNT
           tutor13.s:347    .text:00000000000004b8 _BPDATA
           tutor13.s:348    .text:00000000000004ca _BERRD
           tutor13.s:349    .text:00000000000004d2 _SAVEAV4
           tutor13.s:350    .text:00000000000004d6 _TEMP
           tutor13.s:351    .text:00000000000004da _TRACECNT
           tutor13.s:352    .text:00000000000004de _TRACEON
           tutor13.s:353    .text:00000000000004e0 _BPSTATUS
           tutor13.s:354    .text:00000000000004e2 _ECHOPT1
           tutor13.s:359    .text:00000000000004e6 _OPTIONS
           tutor13.s:366    *ABS*:00000000000004e6 _XONOFF
                            *ABS*:00000000000004e6 OPTIONS
           tutor13.s:367    *ABS*:00000000000004ea _TMCHARS
           tutor13.s:376    .text:000000000000053c SSA7
           tutor13.s:382    .text:0000000000000540 _BUFFER
           tutor13.s:384    .text:00000000000005c0 _DUMPTEMP
68K GAS  tutor13.s 			page 175


           tutor13.s:386    .text:0000000000000610 _SCREEN1
           tutor13.s:387    .text:0000000000000614 _SCREEN2
           tutor13.s:389    .text:0000000000000618 _NULLPADS
           tutor13.s:390    .text:000000000000061a _CRPADS
           tutor13.s:392    .text:000000000000061c _OUTTO
           tutor13.s:393    .text:0000000000000620 _INFROM
           tutor13.s:394    .text:0000000000000624 _ALTSER1
           tutor13.s:395    .text:0000000000000628 _ALTSER2
           tutor13.s:396    .text:000000000000062c _INPORT1
           tutor13.s:397    .text:0000000000000630 _OUTPORT1
           tutor13.s:398    .text:0000000000000634 _INPORT2
           tutor13.s:399    .text:0000000000000638 _OUTPORT2
           tutor13.s:400    .text:000000000000063c _INPORT3
           tutor13.s:401    .text:0000000000000640 _OUTPORT3
           tutor13.s:402    .text:0000000000000644 _INPORT4
           tutor13.s:403    .text:0000000000000648 _OUTPORT4
           tutor13.s:404    .text:000000000000064c _MD1CON
           tutor13.s:405    .text:000000000000064e _PDIPORT
           tutor13.s:406    .text:0000000000000652 _CRTPNT
           tutor13.s:407    .text:0000000000000654 _TAPENULS
           tutor13.s:411    .text:0000000000000656 _CTLINK
           tutor13.s:413    .text:000000000000065a _ENDHRAM
           tutor13.s:421    .text:0000000000000786 _SYSTACK
           tutor13.s:432    *ABS*:0000000000000000 ESKB
           tutor13.s:433    *ABS*:0000000000000000 TDATA
           tutor13.s:434    *ABS*:000000000000000a TNB
           tutor13.s:435    *ABS*:000000000000000b TLSPEC
           tutor13.s:436    *ABS*:000000000000000c TLENGTH
           tutor13.s:437    *ABS*:000000000000000e PCOUNTER
           tutor13.s:438    *ABS*:0000000000000012 PTROP
           tutor13.s:439    *ABS*:0000000000000016 PENDOP
           tutor13.s:440    *ABS*:000000000000001a PTRBUFE
           tutor13.s:441    *ABS*:000000000000001e LINK
           tutor13.s:442    *ABS*:0000000000000022 ESKE
           tutor13.s:446    *ABS*:00000000fffffff0 DDATA
           tutor13.s:447    *ABS*:00000000fffffffc HISPC
           tutor13.s:451    *ABS*:00000000ffffffbc CC
           tutor13.s:452    *ABS*:00000000ffffffc0 ADDRESS
           tutor13.s:453    *ABS*:00000000ffffffc4 LDATA
           tutor13.s:460    *ABS*:0000000000000444 REGA7
           tutor13.s:461    .text:0000000000008000 FIRST
           tutor13.s:629    .text:0000000000008146 START
           tutor13.s:464    .text:0000000000008008 V2
           tutor13.s:2088   .text:0000000000008cba TRACE
           tutor13.s:470    *ABS*:000000000000044c BEGHRAM
           tutor13.s:471    *ABS*:000000000000065a ENDHRAM
           tutor13.s:472    .text:000000000000800c INITHRAM
           tutor13.s:475    .text:0000000000008018 INIT
           tutor13.s:479    *ABS*:0000000000000008 AV2
           tutor13.s:491    .text:0000000000008030 BERRMSG
           tutor13.s:482    *ABS*:000000000000000c AV3
           tutor13.s:495    .text:000000000000803a ADDRMSG
           tutor13.s:498    .text:0000000000008042 VECTBE
           tutor13.s:497    *ABS*:00000000000004ca BERRD
           tutor13.s:501    *ABS*:00000000000004d6 TEMP
           tutor13.s:501    .text:000000000000805a SV2
           tutor13.s:2055   .text:0000000000008c8c SAVE
68K GAS  tutor13.s 			page 176


           tutor13.s:4090   .text:0000000000009c96 FIXBUF
           tutor13.s:3685   .text:00000000000099b0 PNT4HX
           tutor13.s:3676   .text:00000000000099a2 PNT8HX
           tutor13.s:4006   .text:0000000000009c0a OUTPUT
           tutor13.s:3656   .text:000000000000997e EVECT2
           tutor13.s:518    .text:000000000000808a MSG008
           tutor13.s:520    .text:0000000000008091 MSG008E
           tutor13.s:522    .text:0000000000008097 MSGEOT
           tutor13.s:524    .text:0000000000008098 MSG021
           tutor13.s:531    .text:000000000000809e WHAT
           tutor13.s:532    .text:00000000000080a2 WHAT93
           tutor13.s:574    .text:00000000000080f2 FIXDATA
           tutor13.s:533    *ABS*:00000000000004de TRACEON
           tutor13.s:535    .text:00000000000080a8 MSG
           tutor13.s:3992   .text:0000000000009bf0 OUT1CR
           tutor13.s:728    .text:0000000000008232 MACSBUG
           tutor13.s:540    .text:00000000000080b0 ERROR
           tutor13.s:543    .text:00000000000080b6 SYNTAX
           tutor13.s:547    .text:00000000000080bc PPHY
           tutor13.s:562    .text:00000000000080e0 MSG019
           tutor13.s:558    .text:00000000000080d6 P2PHY2
           tutor13.s:552    .text:00000000000080c4 P2PHY
           tutor13.s:573    *ABS*:0000000000000540 BUFFER
           tutor13.s:575    .text:00000000000080f6 FIXDADD
           tutor13.s:579    .text:0000000000008100 FIXD2
           tutor13.s:589    .text:0000000000008106 FIXDCRLF
           tutor13.s:600    .text:0000000000008110 INITVECT
           tutor13.s:3649   .text:0000000000009962 ABORTE
           tutor13.s:603    .text:0000000000008118 INIT0
           tutor13.s:610    *ABS*:0000000000000404 REGSR
           tutor13.s:611    .text:0000000000008124 START1S
           tutor13.s:614    *ABS*:0000000000000400 REGPC
           tutor13.s:618    *ABS*:0000000000000786 SYSTACK
           tutor13.s:641    .text:0000000000008164 START11
           tutor13.s:644    *ABS*:0000000000000448 REGUS
           tutor13.s:938    .text:000000000000837a INITVMSG
           tutor13.s:653    *ABS*:0000000000000010 AV4
           tutor13.s:2226   .text:0000000000008de4 CHKBP
           tutor13.s:657    *ABS*:00000000000004ea TMCHARS
           tutor13.s:661    *ABS*:000000000000007c AV31
           tutor13.s:3631   .text:000000000000991e ABORTB
           tutor13.s:665    *ABS*:0000000000000630 OUTPORT1
           tutor13.s:4002   .text:0000000000009c0a OUT1CR0
           tutor13.s:667    *ABS*:0000000000000638 OUTPORT2
           tutor13.s:4022   .text:0000000000009c2a OUTPUT20
           tutor13.s:669    *ABS*:0000000000000640 OUTPORT3
           tutor13.s:4203   .text:0000000000009d66 PRCRLF
           tutor13.s:671    *ABS*:0000000000000648 OUTPORT4
           tutor13.s:4346   .text:0000000000009e9c TAPEOUT
           tutor13.s:673    *ABS*:000000000000062c INPORT1
           tutor13.s:4110   .text:0000000000009cbe PORTIN10
           tutor13.s:675    *ABS*:0000000000000634 INPORT2
           tutor13.s:4484   .text:0000000000009fd4 PORTIN20
           tutor13.s:677    *ABS*:000000000000063c INPORT3
           tutor13.s:679    *ABS*:0000000000000644 INPORT4
           tutor13.s:4586   .text:000000000000a09c TAPEIN
           tutor13.s:682    *ABS*:0000000000000654 TAPENULS
68K GAS  tutor13.s 			page 177


           tutor13.s:684    *ABS*:000000000000064e PDIPORT
                            *ABS*:0000000000010000 PDI1
           tutor13.s:707    *ABS*:000000000000064c MD1CON
           tutor13.s:4438   .text:0000000000009f7a INITSER
           tutor13.s:714    *ABS*:00000000000004e6 XONOFF
           tutor13.s:718    *ABS*:00000000000000b8 AV46
           tutor13.s:8169   .text:000000000000be70 TRAP14
           tutor13.s:720    *ABS*:0000000000000656 CTLINK
           tutor13.s:2188   .text:0000000000008d9c SWAPOUT
           tutor13.s:732    *ABS*:0000000000000490 BPTILL
           tutor13.s:734    *ABS*:000000000000061c OUTTO
           tutor13.s:736    *ABS*:0000000000000620 INFROM
           tutor13.s:738    *ABS*:00000000000004e2 ECHOPT1
           tutor13.s:832    .text:00000000000082fa MSG001
           tutor13.s:747    .text:0000000000008260 MACSBUG1
           tutor13.s:4096   .text:0000000000009c9e PORTIN1
           tutor13.s:754    .text:0000000000008274 DECODE6
           tutor13.s:768    .text:0000000000008284 DECODE1
           tutor13.s:1154   .text:000000000000859c TCMDHOT
           tutor13.s:777    .text:000000000000829a DECODE10
           tutor13.s:4013   .text:0000000000009c14 OUTPUT2
           tutor13.s:782    .text:00000000000082a4 DECODE2
           tutor13.s:787    .text:00000000000082ae DECODE21
           tutor13.s:870    .text:0000000000008308 SOLIST
           tutor13.s:788    .text:00000000000082b2 DECODE4
           tutor13.s:797    .text:00000000000082c0 DECODE41
           tutor13.s:805    .text:00000000000082d4 DECODE3
           tutor13.s:823    .text:00000000000082ee NOCMD
                            *ABS*:0000000000000000 CMD
           tutor13.s:960    .text:00000000000083a2 VECT
           tutor13.s:941    .text:0000000000008384 VECTI
           tutor13.s:943    *ABS*:000000000000002c AV11
           tutor13.s:947    *ABS*:0000000000000060 AV24
           tutor13.s:949    .text:0000000000008394 VECTI2
           tutor13.s:951    *ABS*:00000000000000c0 AV48
           tutor13.s:986    .text:00000000000083fa EVECT5
           tutor13.s:1007   .text:0000000000008440 EVECT6
           tutor13.s:1031   .text:0000000000008490 EVECT7
           tutor13.s:1058   .text:00000000000084e0 EVECT
           tutor13.s:3654   .text:000000000000996a EVECTL
           tutor13.s:1065   .text:00000000000084e4 BFCMD
           tutor13.s:3795   .text:0000000000009a74 FNEXTF
           tutor13.s:1858   .text:0000000000008b3a GETA
           tutor13.s:3815   .text:0000000000009a92 CKWADR
           tutor13.s:3870   .text:0000000000009af6 GETNUMA
           tutor13.s:1088   .text:0000000000008524 BFCMD11
           tutor13.s:3048   .text:0000000000009486 MM90
           tutor13.s:1103   .text:0000000000008536 BMCMD
           tutor13.s:1134   .text:000000000000857a BM122
           tutor13.s:1129   .text:0000000000008572 BM112
           tutor13.s:1139   .text:0000000000008584 BM142
           tutor13.s:1136   .text:000000000000857e BM132
           tutor13.s:1146   .text:0000000000008588 TCMD
           tutor13.s:1147   .text:0000000000008588 TRCMD
           tutor13.s:3819   .text:0000000000009a98 CKADDR
           tutor13.s:1157   .text:000000000000859e TCMD15
           tutor13.s:1156   *ABS*:00000000000004da TRACECNT
68K GAS  tutor13.s 			page 178


           tutor13.s:1175   .text:00000000000085c6 TRACE2
           tutor13.s:1164   .text:00000000000085a4 TTCMD
           tutor13.s:2151   .text:0000000000008d4e UNTRACE
           tutor13.s:1185   .text:00000000000085d8 GTCMD
           tutor13.s:1194   *ABS*:0000000000000470 BPADD
           tutor13.s:1197   .text:00000000000085f4 GT21
           tutor13.s:1281   .text:0000000000008698 BCMD55
           tutor13.s:1212   .text:000000000000861a GOCMD1A
           tutor13.s:1218   .text:0000000000008626 GOCMD1
           tutor13.s:1206   .text:0000000000008606 GOSET1
           tutor13.s:1216   .text:0000000000008624 GCMD
           tutor13.s:1217   .text:0000000000008624 GOCMD
           tutor13.s:1222   .text:0000000000008632 GDCMD
           tutor13.s:2155   .text:0000000000008d5c UNSTACK
           tutor13.s:1229   .text:0000000000008638 NOBRCMD
           tutor13.s:1235   .text:0000000000008642 FIXBP
           tutor13.s:1230   .text:000000000000863a BCMD01
           tutor13.s:1285   .text:00000000000086a2 BCMD7
           tutor13.s:1237   *ABS*:0000000000000494 BPCNT
           tutor13.s:1314   .text:00000000000086ea NOBR0
           tutor13.s:1248   .text:0000000000008652 BRCMD
           tutor13.s:1249   .text:0000000000008656 BCMD0
           tutor13.s:1254   .text:0000000000008664 BCMD00
           tutor13.s:1265   .text:0000000000008678 BCMD33
           tutor13.s:1262   .text:0000000000008672 BCMD3
           tutor13.s:1276   .text:0000000000008690 BCMD5
           tutor13.s:1273   .text:000000000000868a BCMD6
           tutor13.s:1287   .text:00000000000086aa BCMD77
           tutor13.s:1309   .text:00000000000086de MSGBR
           tutor13.s:1290   .text:00000000000086b0 BCMD8
           tutor13.s:1304   .text:00000000000086d4 BCMD9
           tutor13.s:3708   .text:00000000000099d4 FRELADDR
           tutor13.s:3681   .text:00000000000099aa PNT6HX
           tutor13.s:1303   .text:00000000000086d0 BCMD81
           tutor13.s:3757   .text:0000000000009a2e PNTZHX
           tutor13.s:1315   .text:00000000000086ee NOBR1
           tutor13.s:1323   .text:0000000000008704 NOBR3
           tutor13.s:1329   .text:0000000000008710 NOBR4
           tutor13.s:1340   .text:0000000000008718 BSCMD
           tutor13.s:1448   .text:00000000000087ec BS311
           tutor13.s:1358   .text:0000000000008748 BS91
           tutor13.s:1379   .text:0000000000008772 BS97
           tutor13.s:1386   .text:0000000000008782 BS101
           tutor13.s:1394   .text:000000000000878e BS200
           tutor13.s:1434   .text:00000000000087da BS225
           tutor13.s:1424   .text:00000000000087c8 BS219
           tutor13.s:1421   .text:00000000000087c4 BS215
           tutor13.s:1419   .text:00000000000087c0 BS213
           tutor13.s:3690   .text:00000000000099b8 PNT2HX
           tutor13.s:1447   *ABS*:00000000000005c0 DUMPTEMP
           tutor13.s:1449   .text:00000000000087f0 BS313
           tutor13.s:1466   .text:0000000000008810 BS323
           tutor13.s:1468   .text:0000000000008816 BS325
           tutor13.s:1492   .text:0000000000008848 BS365
           tutor13.s:1486   .text:000000000000883e BS355
           tutor13.s:1502   .text:0000000000008852 BTCMD
           tutor13.s:3143   .text:0000000000009554 MTSETUP
68K GAS  tutor13.s 			page 179


           tutor13.s:3502   .text:000000000000981c RAMTEST
           tutor13.s:1534   .text:00000000000088a4 DCCMD
           tutor13.s:1535   .text:00000000000088a4 NUMCON0
           tutor13.s:1547   .text:00000000000088c8 NUMCON1
           tutor13.s:1552   .text:00000000000088d4 NUMCON2
           tutor13.s:1560   .text:00000000000088ec NUMCON3
           tutor13.s:2345   .text:0000000000008f5c HEX2DEC
           tutor13.s:1567   .text:00000000000088f8 REGNAMES
           tutor13.s:1571   .text:0000000000008902 DFCMD
           tutor13.s:1578   .text:000000000000890e TD07
           tutor13.s:1574   .text:0000000000008904 TDISPLY
           tutor13.s:1611   .text:0000000000008960 TD25
           tutor13.s:1580   *ABS*:0000000000000610 SCREEN1
           tutor13.s:1584   .text:0000000000008920 TD09
           tutor13.s:1590   .text:000000000000892c TD1
           tutor13.s:1626   .text:0000000000008986 TD4
           tutor13.s:1597   *ABS*:0000000000000408 REGS
           tutor13.s:3360   .text:00000000000096de PNTCLS
           tutor13.s:1607   .text:0000000000008958 TD27
           tutor13.s:7846   .text:000000000000ba74 DCODE68K
           tutor13.s:1620   *ABS*:0000000000000614 SCREEN2
           tutor13.s:1624   .text:0000000000008984 TD39
           tutor13.s:1637   .text:00000000000089a0 T44
           tutor13.s:1645   .text:00000000000089b4 T449
           tutor13.s:1642   .text:00000000000089ac T448
           tutor13.s:1651   .text:00000000000089c0 TDCC
           tutor13.s:1646   .text:00000000000089b8 TD9
           tutor13.s:1674   .text:0000000000008a10 TDCC9
           tutor13.s:3696   .text:00000000000099c0 PUTHEX
           tutor13.s:1679   .text:0000000000008a1c TDCC91
           tutor13.s:1688   .text:0000000000008a20 DUCMD
           tutor13.s:4663   .text:000000000000a156 SCANPORT
           tutor13.s:1705   .text:0000000000008a4c PUNCH5
           tutor13.s:1710   .text:0000000000008a52 PUM11
           tutor13.s:1714   .text:0000000000008a5a PUM13
           tutor13.s:1734   .text:0000000000008a82 MORES0
           tutor13.s:1743   .text:0000000000008a92 ENDS0
           tutor13.s:1804   .text:0000000000008b18 PNTSREC
           tutor13.s:1749   .text:0000000000008a98 MORESP
           tutor13.s:1767   .text:0000000000008ac6 S2REC
           tutor13.s:1776   .text:0000000000008ade PNCA3
           tutor13.s:1789   .text:0000000000008afe A3OUT
           tutor13.s:1801   .text:0000000000008b12 PNTSRECX
           tutor13.s:1817   .text:0000000000008b38 PNTSRTS
           tutor13.s:2018   .text:0000000000008c56 GAP191
           tutor13.s:1877   .text:0000000000008b5e GAP113
           tutor13.s:1874   .text:0000000000008b56 GAP111
           tutor13.s:1931   .text:0000000000008bc2 GAP121
           tutor13.s:1939   .text:0000000000008bce GAP131
           tutor13.s:1955   .text:0000000000008be2 GAP141
           tutor13.s:1978   .text:0000000000008c0e GAP161
           tutor13.s:2012   .text:0000000000008c50 GAP181
           tutor13.s:1973   .text:0000000000008c0a GAE
           tutor13.s:1996   .text:0000000000008c34 GAP171
           tutor13.s:1923   .text:0000000000008bb8 GAP118
           tutor13.s:1925   .text:0000000000008bba GAP119
           tutor13.s:1927   .text:0000000000008bc0 GAP111S
68K GAS  tutor13.s 			page 180


           tutor13.s:1947   .text:0000000000008bda GAP135
           tutor13.s:1945   *ABS*:000000000000044c OFFSET
           tutor13.s:2031   .text:0000000000008c6a GAP199
           tutor13.s:2038   .text:0000000000008c70 GASRGN
           tutor13.s:1987   .text:0000000000008c24 GAP163
           tutor13.s:1990   .text:0000000000008c2e GAP165
           tutor13.s:2029   .text:0000000000008c68 GAP197
           tutor13.s:2089   .text:0000000000008ccc SV14
           tutor13.s:2103   .text:0000000000008ce6 TRACE16
           tutor13.s:2147   .text:0000000000008d46 TRACE39
           tutor13.s:3639   .text:0000000000009946 ABORT335
           tutor13.s:2119   .text:0000000000008d12 TISOK
           tutor13.s:8354   .text:000000000000c000 LAST
           tutor13.s:2274   .text:0000000000008e6a MSG020
           tutor13.s:2263   .text:0000000000008e38 CHKBP4
           tutor13.s:2125   .text:0000000000008d1c TRACE01
           tutor13.s:2134   .text:0000000000008d30 TRACE08
           tutor13.s:2261   .text:0000000000008e34 CHKBP3
           tutor13.s:2139   .text:0000000000008d38 TRACE03
           tutor13.s:2178   .text:0000000000008d86 SWAPIN
           tutor13.s:2152   *ABS*:0000000000000024 AV9
           tutor13.s:2180   *ABS*:00000000000004d2 SAVEAV4
           tutor13.s:2204   .text:0000000000008dc2 SWAPIN1
           tutor13.s:2193   .text:0000000000008dac SWAP
           tutor13.s:2187   *ABS*:00000000000004e0 BPSTATUS
           tutor13.s:2221   .text:0000000000008de2 SWAPEND
           tutor13.s:2213   .text:0000000000008dd2 SWAPOUT1
           tutor13.s:2196   *ABS*:00000000000004b8 BPDATA
           tutor13.s:2199   .text:0000000000008dba SWAP1
           tutor13.s:2217   .text:0000000000008dda SWAP99
           tutor13.s:2227   .text:0000000000008df8 SV16
           tutor13.s:2250   .text:0000000000008e1e CHKBP11
           tutor13.s:2241   .text:0000000000008e12 CHKBP1
           tutor13.s:2255   .text:0000000000008e28 CHKBP2
           tutor13.s:2268   .text:0000000000008e48 MSG009
           tutor13.s:2271   .text:0000000000008e5c MSG014
           tutor13.s:2285   .text:0000000000008e82 HECMD
           tutor13.s:2326   .text:0000000000008eea MSG002
           tutor13.s:2293   .text:0000000000008e9a HELP4
           tutor13.s:2322   .text:0000000000008ee2 HELP6
           tutor13.s:2315   .text:0000000000008ed0 HELP81
           tutor13.s:2311   .text:0000000000008ece EOHLOOP
           tutor13.s:2320   .text:0000000000008ee0 HELP85
           tutor13.s:2351   .text:0000000000008f6c HX2DC
           tutor13.s:2385   .text:0000000000008fb6 HX2DC57
           tutor13.s:2353   .text:0000000000008f70 HX2DC0
           tutor13.s:2368   .text:0000000000008f92 HX2DC2
           tutor13.s:2357   .text:0000000000008f78 HX2DC1
           tutor13.s:2369   .text:0000000000008f94 HX2DC22
           tutor13.s:2374   .text:0000000000008f9e HX2DC3
           tutor13.s:2378   .text:0000000000008fa6 HX2DC4
           tutor13.s:2381   .text:0000000000008fae HX2DC5
           tutor13.s:2386   .text:0000000000008fba HX2DC6
           tutor13.s:2417   .text:0000000000008fc0 VECMD
           tutor13.s:2422   .text:0000000000008fc8 CHKCHKS
           tutor13.s:2421   .text:0000000000008fc6 LOCMD
           tutor13.s:2427   .text:0000000000008fce READ01
68K GAS  tutor13.s 			page 181


           tutor13.s:2457   .text:000000000000900e READ09
           tutor13.s:2430   .text:0000000000008fd4 READ03
           tutor13.s:2455   .text:000000000000900a READ08
           tutor13.s:2438   .text:0000000000008fe6 READ021
           tutor13.s:2448   .text:0000000000008ffe READS1
           tutor13.s:2600   .text:0000000000009142 READHEX4
           tutor13.s:2497   .text:0000000000009070 READS202
           tutor13.s:2460   .text:0000000000009018 READ0
           tutor13.s:4477   .text:0000000000009fc2 PORTIN2
           tutor13.s:2470   .text:000000000000902c READ00
           tutor13.s:2474   .text:0000000000009032 READ005
           tutor13.s:2571   .text:00000000000090fe GETCHR
           tutor13.s:2563   .text:00000000000090f0 READHEX
           tutor13.s:2606   .text:000000000000914e READS8
           tutor13.s:2613   .text:000000000000915e READS9
           tutor13.s:2494   .text:0000000000009068 READS2
           tutor13.s:2597   .text:000000000000913c READHEX6
           tutor13.s:2502   .text:000000000000907c READ100
           tutor13.s:2514   .text:0000000000009092 READ120
           tutor13.s:2556   .text:00000000000090de READCKSM
           tutor13.s:2533   .text:00000000000090b2 READ400
           tutor13.s:2525   .text:00000000000090a2 READ130
           tutor13.s:3113   .text:0000000000009504 SETME
           tutor13.s:2529   .text:00000000000090ae READ135
           tutor13.s:2538   .text:00000000000090ba READ410
           tutor13.s:2551   .text:00000000000090d6 READ440
           tutor13.s:2542   .text:00000000000090c6 READ420
           tutor13.s:2548   .text:00000000000090d0 READ430
           tutor13.s:2594   .text:0000000000009133 MSGLOAD2
           tutor13.s:2576   .text:0000000000009106 GETHEXC
           tutor13.s:2586   .text:000000000000911e RHEX3
           tutor13.s:2584   .text:000000000000911c RHEX2
           tutor13.s:2591   .text:000000000000912a MSGLOAD1
           tutor13.s:2607   .text:0000000000009150 READS800
           tutor13.s:2626   .text:0000000000009164 MDCMD
           tutor13.s:2637   .text:000000000000917a PRINT8
           tutor13.s:2650   .text:0000000000009198 PRINTDI
           tutor13.s:2646   .text:000000000000918c PRINTMB
           tutor13.s:2662   .text:00000000000091a8 PRINT5
           tutor13.s:2673   .text:00000000000091c4 PRINT7
           tutor13.s:3839   .text:0000000000009ac8 GETEXP
           tutor13.s:2697   .text:00000000000091f2 PUTADR
           tutor13.s:2676   .text:00000000000091c8 PRINTDI5
           tutor13.s:2739   .text:0000000000009250 PRINT9
           tutor13.s:2690   .text:00000000000091ea PRINT3
           tutor13.s:2704   .text:0000000000009204 NXTBP
           tutor13.s:2711   .text:0000000000009218 NXTBP3
           tutor13.s:2720   .text:0000000000009224 NXTCHR
           tutor13.s:2726   .text:0000000000009236 NOTCHR
           tutor13.s:2728   .text:000000000000923a PUTCHR
           tutor13.s:2777   .text:000000000000927a MMDI
           tutor13.s:2780   .text:0000000000009284 MMDI22
           tutor13.s:2781   .text:0000000000009286 MMDI23
           tutor13.s:2797   .text:000000000000929a MMDI31
           tutor13.s:4103   .text:0000000000009cb0 PORTIN1N
           tutor13.s:2804   .text:00000000000092ac MMDI34
           tutor13.s:3052   .text:0000000000009492 MM905
68K GAS  tutor13.s 			page 182


           tutor13.s:5441   .text:000000000000a88e CODE68K
           tutor13.s:2827   .text:00000000000092c6 MMDI26
           tutor13.s:2831   .text:00000000000092d0 MMDI27
           tutor13.s:2849   .text:00000000000092f8 MMDI30
           tutor13.s:2841   .text:00000000000092e6 MMDI29
           tutor13.s:2850   .text:00000000000092fc MMDI44
           tutor13.s:2858   .text:0000000000009314 MCMD
           tutor13.s:2859   .text:0000000000009314 MMCMD
           tutor13.s:2867   .text:0000000000009326 MM05
           tutor13.s:2916   .text:0000000000009390 MM10
           tutor13.s:2883   .text:0000000000009344 MM045
           tutor13.s:2912   .text:000000000000938c MM065
           tutor13.s:2892   .text:0000000000009358 MM054
           tutor13.s:2897   .text:0000000000009364 MM056
           tutor13.s:2903   .text:0000000000009372 MM058
           tutor13.s:2907   .text:0000000000009380 MM060
           tutor13.s:2909   .text:0000000000009386 MM064
           tutor13.s:2922   .text:00000000000093a0 MM11
           tutor13.s:2959   .text:00000000000093e0 MM18
           tutor13.s:2940   .text:00000000000093c4 MM12
           tutor13.s:2947   .text:00000000000093ce MM14
           tutor13.s:2954   .text:00000000000093d8 MM16
           tutor13.s:3041   .text:000000000000947a MM50
           tutor13.s:3028   .text:0000000000009456 MM40
           tutor13.s:3045   .text:0000000000009480 MM60
           tutor13.s:2999   .text:000000000000942e MM22
           tutor13.s:3009   .text:000000000000943c MM24
           tutor13.s:3019   .text:000000000000944a MM26
           tutor13.s:3131   .text:000000000000953e MSG017
           tutor13.s:3049   .text:000000000000948a MM95
           tutor13.s:3064   .text:0000000000009498 MSCMD
           tutor13.s:3070   .text:00000000000094aa SETM1
           tutor13.s:3101   .text:00000000000094ec SETM5
           tutor13.s:3117   .text:0000000000009510 SETM7
           tutor13.s:3085   .text:00000000000094d2 SETM3
           tutor13.s:3102   .text:00000000000094ee SETM6
           tutor13.s:3169   .text:000000000000958c PERCMD
           tutor13.s:3203   .text:00000000000095c4 REGTBL
           tutor13.s:3174   .text:0000000000009596 PER4
           tutor13.s:3190   .text:00000000000095b8 PER3
           tutor13.s:3252   .text:0000000000009606 SETA7
           tutor13.s:3246   .text:00000000000095fa SETPC
           tutor13.s:3249   .text:0000000000009600 SETSR
           tutor13.s:3258   .text:0000000000009616 SETUS
           tutor13.s:3255   .text:0000000000009610 SETSS
           tutor13.s:3240   .text:00000000000095ee SETD
           tutor13.s:3243   .text:00000000000095f4 SETA
           tutor13.s:3355   .text:00000000000096d0 PNTCLSA
           tutor13.s:3351   .text:00000000000096c6 PNTCLSD
           tutor13.s:3261   .text:000000000000961c SETRN
           tutor13.s:3269   .text:0000000000009628 SETR
           tutor13.s:3272   .text:0000000000009630 SETR0
           tutor13.s:3960   .text:0000000000009ba6 GETHEX
           tutor13.s:3318   .text:000000000000968c SCAN
           tutor13.s:3292   .text:0000000000009658 SETR5
           tutor13.s:3289   .text:0000000000009652 SETR4
           tutor13.s:3285   .text:000000000000964e SEMACS
68K GAS  tutor13.s 			page 183


           tutor13.s:3329   .text:000000000000969c PRINTR
           tutor13.s:3295   .text:000000000000965c SETSR1
           tutor13.s:3313   .text:000000000000968a SETSR15
           tutor13.s:3319   .text:000000000000968e SCAN2
           tutor13.s:3325   .text:000000000000969a RETURN5
           tutor13.s:3339   .text:00000000000096b6 PRINTR2
           tutor13.s:3346   .text:00000000000096bc OFCMD
           tutor13.s:3347   .text:00000000000096bc SETO
           tutor13.s:3357   .text:00000000000096d8 PNTCLSB
           tutor13.s:3362   .text:00000000000096e4 PNTCLS1
           tutor13.s:3376   .text:0000000000009702 PNTREG
           tutor13.s:3369   .text:00000000000096f6 PNTCLS2
           tutor13.s:3390   .text:000000000000972c PNTREG1
           tutor13.s:3403   .text:000000000000973a PFCMD
           tutor13.s:3440   .text:000000000000979c PFCMD1
           tutor13.s:3472   .text:00000000000097f0 MSG003
           tutor13.s:3432   .text:0000000000009784 PFPT
           tutor13.s:3414   *ABS*:0000000000000618 NULLPADS
           tutor13.s:3475   .text:00000000000097fb MSG004
           tutor13.s:3420   *ABS*:000000000000061a CRPADS
           tutor13.s:3478   .text:0000000000009806 MSG005
           tutor13.s:3481   .text:0000000000009811 MSG031
           tutor13.s:3455   .text:00000000000097c6 PFCH
           tutor13.s:3459   .text:00000000000097d2 PFCH2
           tutor13.s:3470   .text:00000000000097ee PFCH4
           tutor13.s:3505   .text:0000000000009820 WALK3
           tutor13.s:3506   .text:0000000000009822 WALK0
           tutor13.s:3554   .text:000000000000986c RAMERR
           tutor13.s:3515   .text:0000000000009830 WALK1
           tutor13.s:3530   .text:0000000000009848 MTCLR
           tutor13.s:3536   .text:0000000000009850 MTSTOR1
           tutor13.s:3546   .text:0000000000009860 MTSTOR0
           tutor13.s:3572   .text:0000000000009870 TMCMD
           tutor13.s:3577   .text:0000000000009884 P2CMD0
           tutor13.s:4070   .text:0000000000009c72 GETSER1
           tutor13.s:3619   .text:0000000000009908 MSG006
           tutor13.s:3589   .text:00000000000098b0 P2CMD01
           tutor13.s:3598   .text:00000000000098ce P2CMD2
           tutor13.s:3617   .text:0000000000009904 P2CMD6
           tutor13.s:3613   .text:00000000000098f8 P2CMD4
           tutor13.s:4081   .text:0000000000009c84 GETSER2
           tutor13.s:3632   .text:0000000000009932 SV17
           tutor13.s:4411   .text:0000000000009f3e FAULTSER
           tutor13.s:3642   .text:000000000000994e MSG012
           tutor13.s:3638   .text:0000000000009942 EVECT4
           tutor13.s:3654   .text:000000000000997a SV18
           tutor13.s:3658   *ABS*:0000000000000030 AV12
           tutor13.s:3664   .text:0000000000009994 MSG010
           tutor13.s:3701   .text:00000000000099d0 SAVHEX
           tutor13.s:3713   .text:00000000000099e0 FREL10
           tutor13.s:3725   .text:00000000000099f2 FREL15
           tutor13.s:3744   .text:0000000000009a1c FREL25
           tutor13.s:3737   .text:0000000000009a0a FREL20
           tutor13.s:3748   .text:0000000000009a26 FREL30
           tutor13.s:3783   .text:0000000000009a6c PNTZ81
           tutor13.s:3764   .text:0000000000009a3e PNTZ0
           tutor13.s:3765   .text:0000000000009a40 PNTZ1
68K GAS  tutor13.s 			page 184


           tutor13.s:3773   .text:0000000000009a54 PNTZ4
           tutor13.s:3769   .text:0000000000009a48 PNTZ2
           tutor13.s:3777   .text:0000000000009a5e PNTZ3
           tutor13.s:3779   .text:0000000000009a64 PNTZ8
           tutor13.s:3784   .text:0000000000009a70 PNTZ9
           tutor13.s:3793   .text:0000000000009a72 FNEXTF1
           tutor13.s:3807   .text:0000000000009a8e FNEXTF7
           tutor13.s:3822   .text:0000000000009aa0 CKADR39
           tutor13.s:3828   .text:0000000000009ab4 CKADR99
           tutor13.s:3830   .text:0000000000009ab6 MSG018
           tutor13.s:3841   .text:0000000000009acc GETEXP21
           tutor13.s:3843   .text:0000000000009ad0 GETEXP15
           tutor13.s:3853   .text:0000000000009ae6 GETEXP39
           tutor13.s:3866   .text:0000000000009aee GETNUMD
           tutor13.s:3873   .text:0000000000009afa GETDECNU
           tutor13.s:3867   .text:0000000000009af0 GETNUMD9
           tutor13.s:3877   .text:0000000000009b02 GETHEXNU
           tutor13.s:3880   .text:0000000000009b08 GETN20
           tutor13.s:3944   .text:0000000000009b8a GETN80
           tutor13.s:3885   .text:0000000000009b12 GETN30
           tutor13.s:3948   .text:0000000000009b90 GETN90
           tutor13.s:3953   .text:0000000000009b9a GETNDATA
           tutor13.s:3891   .text:0000000000009b1e GETN40
           tutor13.s:3897   .text:0000000000009b28 GETN50
           tutor13.s:3947   .text:0000000000009b8e GETN85
           tutor13.s:3906   .text:0000000000009b38 GETN60
           tutor13.s:3900   .text:0000000000009b30 GETN55
           tutor13.s:3903   .text:0000000000009b34 GETN57
           tutor13.s:3911   .text:0000000000009b42 GETN65
           tutor13.s:3916   .text:0000000000009b4c GETN70
           tutor13.s:3921   .text:0000000000009b56 GETN75
           tutor13.s:3931   .text:0000000000009b70 GETN77
           tutor13.s:3950   .text:0000000000009b94 GETN95
           tutor13.s:3973   .text:0000000000009bc8 PNMSG011
           tutor13.s:3970   .text:0000000000009bc0 GTHX2
           tutor13.s:3979   .text:0000000000009bda MSG011
           tutor13.s:3999   .text:0000000000009c04 OUT1CRX
           tutor13.s:4032   .text:0000000000009c32 OUTP2
           tutor13.s:4019   .text:0000000000009c24 OUTPUT2X
           tutor13.s:4026   .text:0000000000009c2a OUTPUT21
           tutor13.s:4037   .text:0000000000009c3c OUTP3
           tutor13.s:4046   .text:0000000000009c42 OUTCH1
           tutor13.s:4282   .text:0000000000009e1a OUTCH
           tutor13.s:4064   .text:0000000000009c70 OUTCHRTS
           tutor13.s:4058   .text:0000000000009c62 OUTCH2
           tutor13.s:4061   .text:0000000000009c68 OUTCH3
                            *ABS*:0000000000010040 SER1
           tutor13.s:4071   *ABS*:0000000000000624 ALTSER1
           tutor13.s:4075   .text:0000000000009c82 RETURN
                            *ABS*:0000000000010041 SER2
           tutor13.s:4082   *ABS*:0000000000000628 ALTSER2
           tutor13.s:4100   .text:0000000000009caa PORTIN1X
           tutor13.s:4111   .text:0000000000009cc2 PORTIN1V
           tutor13.s:4112   .text:0000000000009cc4 PORTIN1W
           tutor13.s:4115   .text:0000000000009cc8 READBUF
           tutor13.s:4459   .text:0000000000009fa6 INCHNE
           tutor13.s:4133   .text:0000000000009cf4 CHKCTLH
68K GAS  tutor13.s 			page 185


           tutor13.s:4143   .text:0000000000009d0e BS4CTLH
           tutor13.s:4153   .text:0000000000009d24 CHKCTLD
           tutor13.s:4137   .text:0000000000009d00 BKSPACE
           tutor13.s:4146   .text:0000000000009d12 BLANKIT
           tutor13.s:4171   .text:0000000000009d50 CHKCR
           tutor13.s:4164   .text:0000000000009d40 CHARSAVE
           tutor13.s:4178   .text:0000000000009d60 NOAUTOLF
           tutor13.s:4186   *ABS*:00000000000320c8 LTIME
           tutor13.s:4187   *ABS*:000000000000a028 STIME
           tutor13.s:4190   *ABS*:0000000000010009 PITCDDR
           tutor13.s:4191   *ABS*:0000000000010019 PITPCDR
           tutor13.s:4192   *ABS*:0000000000010021 PITTCR
           tutor13.s:4193   *ABS*:000000000000000b PSTATUS
           tutor13.s:4194   *ABS*:0000000000000003 PBDATA
           tutor13.s:4195   *ABS*:0000000000000001 PDATA
           tutor13.s:4209   .text:0000000000009d6a LIST
           tutor13.s:4214   .text:0000000000009d74 LIST1
           tutor13.s:4219   .text:0000000000009d7a CHRPRINT
           tutor13.s:4220   .text:0000000000009d7e LIST2
           tutor13.s:4310   .text:0000000000009e52 CHKBRK
           tutor13.s:4236   .text:0000000000009daa LIST25
           tutor13.s:4235   .text:0000000000009da6 LIST24
           tutor13.s:4245   .text:0000000000009dbe LIST3
           tutor13.s:4267   .text:0000000000009df6 LIST5
           tutor13.s:4250   *ABS*:0000000000000652 CRTPNT
           tutor13.s:4273   .text:0000000000009e04 MSG007
           tutor13.s:4259   .text:0000000000009de2 LERR1
           tutor13.s:4293   .text:0000000000009e34 OUTCH21
           tutor13.s:4306   .text:0000000000009e50 CTLW9
           tutor13.s:4302   .text:0000000000009e46 CTLWH
           tutor13.s:4332   .text:0000000000009e7e BREAK
           tutor13.s:4321   .text:0000000000009e64 BREAK2
           tutor13.s:4322   .text:0000000000009e68 BREAK1
           tutor13.s:4339   .text:0000000000009e90 MSG013
           tutor13.s:4335   .text:0000000000009e84 BREAK79
           tutor13.s:4358   .text:0000000000009ec4 TAPEOUT2
           tutor13.s:4354   .text:0000000000009ebc TAPEOUT1
           tutor13.s:4377   .text:0000000000009ee0 TAPEO
           tutor13.s:4367   .text:0000000000009eda TAPEOUT4
           tutor13.s:4361   .text:0000000000009ecc TAPEOUT5
           tutor13.s:4379   .text:0000000000009ee6 TAPEO1
           tutor13.s:4402   .text:0000000000009f28 TIMERTST
           tutor13.s:4386   .text:0000000000009efe TAPEO2
           tutor13.s:4407   .text:0000000000009f3c TIMERTS1
           tutor13.s:4416   .text:0000000000009f48 FAULTAC4
           tutor13.s:4426   .text:0000000000009f60 FAULTAC2
           tutor13.s:4432   .text:0000000000009f74 FAULTAC3
           tutor13.s:4443   .text:0000000000009f84 INITAC3
           tutor13.s:4481   .text:0000000000009fce PORTIN2X
           tutor13.s:4492   .text:0000000000009fe8 PORT2100
           tutor13.s:4533   .text:000000000000a034 P2READY
           tutor13.s:4498   .text:0000000000009ff0 PORT2120
           tutor13.s:4542   .text:000000000000a04a RES
           tutor13.s:4499   .text:0000000000009ff2 PORT2130
           tutor13.s:4519   .text:000000000000a018 PORT2250
           tutor13.s:4527   .text:000000000000a024 PORT2300
           tutor13.s:4508   .text:0000000000009ffe PORT2140
68K GAS  tutor13.s 			page 186


           tutor13.s:4514   .text:000000000000a010 PORT2150
           tutor13.s:4523   .text:000000000000a01e PORT2260
           tutor13.s:4530   .text:000000000000a02c MSG030
           tutor13.s:4548   .text:000000000000a05c RES140
           tutor13.s:4566   .text:000000000000a07e RES190
           tutor13.s:4564   .text:000000000000a07c RES150
           tutor13.s:4577   .text:000000000000a096 RES195
           tutor13.s:4573   .text:000000000000a08a RES194
           tutor13.s:4593   .text:000000000000a0b4 TAPEIN10
           tutor13.s:4623   .text:000000000000a0f2 TAPEIN40
           tutor13.s:4595   .text:000000000000a0b8 TAPEIN11
           tutor13.s:4635   .text:000000000000a112 STARTIMR
           tutor13.s:4598   .text:000000000000a0be TAPEIN12
           tutor13.s:4610   .text:000000000000a0d2 TAPEIN30
           tutor13.s:4651   .text:000000000000a13c TAPEIN51
           tutor13.s:4605   .text:000000000000a0ca TAPEIN20
           tutor13.s:4606   .text:000000000000a0cc TAPEIN21
           tutor13.s:4612   .text:000000000000a0d6 TAPEIN31
           tutor13.s:4620   .text:000000000000a0f0 TAPEIN32
           tutor13.s:4630   .text:000000000000a108 TAPEIN41
           tutor13.s:4641   .text:000000000000a126 TAPEIN53
           tutor13.s:4650   .text:000000000000a13a TAPEIN50
           tutor13.s:4655   .text:000000000000a14a TAPEIN52
           tutor13.s:4693   .text:000000000000a1b6 SCANP6
           tutor13.s:4675   .text:000000000000a17a SCANP4
           tutor13.s:4692   .text:000000000000a1b4 SCANP7
           tutor13.s:4681   .text:000000000000a18e SCANP5
           tutor13.s:4687   .text:000000000000a1a2 SCANP8
           tutor13.s:4710   .text:000000000000a1c0 NOPACMD
           tutor13.s:4708   .text:000000000000a1bc PACMD
           tutor13.s:4711   .text:000000000000a1c2 SETCRTPR
           tutor13.s:4720   .text:000000000000a1ca EV
           tutor13.s:4723   .text:000000000000a1ce EV21
           tutor13.s:4740   .text:000000000000a1f0 GETFIELD
           tutor13.s:4725   .text:000000000000a1d2 EV15
           tutor13.s:4735   .text:000000000000a1e8 EV39
           tutor13.s:4748   .text:000000000000a1fc GETF305
           tutor13.s:4777   .text:000000000000a232 GETF333
           tutor13.s:4774   .text:000000000000a22c GETF325
           tutor13.s:4758   .text:000000000000a210 GETF308
           tutor13.s:4760   .text:000000000000a210 GETF311
           tutor13.s:4767   .text:000000000000a220 GETF312
           tutor13.s:4816   .text:000000000000a276 ER1
           tutor13.s:4771   .text:000000000000a226 GETF314
           tutor13.s:4770   .text:000000000000a224 GETF313
           tutor13.s:4779   .text:000000000000a234 XBASE
           tutor13.s:4787   .text:000000000000a234 FSIZE
           tutor13.s:4792   .text:000000000000a23a GETREGD
           tutor13.s:4795   .text:000000000000a242 GET41
           tutor13.s:4803   .text:000000000000a254 GETREGA
           tutor13.s:4809   .text:000000000000a262 GETREGAD
           tutor13.s:5615   .text:000000000000aa04 ER
           tutor13.s:4818   .text:000000000000a27a EADA
           tutor13.s:4861   .text:000000000000a2a2 EA
           tutor13.s:4821   .text:000000000000a280 EAC
           tutor13.s:4824   .text:000000000000a286 EAM
           tutor13.s:4827   .text:000000000000a28c EAZ
68K GAS  tutor13.s 			page 187


           tutor13.s:4830   .text:000000000000a292 EADADDR
           tutor13.s:4833   .text:000000000000a298 EAA
           tutor13.s:4836   .text:000000000000a29e EAALL
           tutor13.s:4903   .text:000000000000a2f4 EA10
           tutor13.s:4888   .text:000000000000a2d0 EA0633
           tutor13.s:4894   .text:000000000000a2e0 EA0635
           tutor13.s:4898   .text:000000000000a2e8 EA0637
           tutor13.s:5199   .text:000000000000a50a EA16BIT
           tutor13.s:4889   .text:000000000000a2d4 EA0634
           tutor13.s:5213   .text:000000000000a520 EA8BIT
           tutor13.s:4923   .text:000000000000a320 EA11
           tutor13.s:4995   .text:000000000000a392 EA41
           tutor13.s:4981   .text:000000000000a38e ER3
           tutor13.s:4934   .text:000000000000a338 EA21
           tutor13.s:4944   .text:000000000000a34c EA31
           tutor13.s:5075   .text:000000000000a432 EA5116
           tutor13.s:4977   .text:000000000000a384 EA35
           tutor13.s:4975   .text:000000000000a382 EA34
           tutor13.s:5007   .text:000000000000a3a6 EA4102
           tutor13.s:5039   .text:000000000000a3e8 EA4120
           tutor13.s:5010   .text:000000000000a3ac EA4105
           tutor13.s:5031   .text:000000000000a3d2 EA4135
           tutor13.s:5021   .text:000000000000a3c2 EA4127
           tutor13.s:5118   .text:000000000000a484 EA61
           tutor13.s:5207   .text:000000000000a514 EA16BITS
           tutor13.s:5072   .text:000000000000a42e EA5115
           tutor13.s:5139   .text:000000000000a4b2 ER4
           tutor13.s:5599   .text:000000000000a9ea COMMA
           tutor13.s:5219   .text:000000000000a528 EA8BITS
           tutor13.s:5112   .text:000000000000a478 EA5119
           tutor13.s:5109   .text:000000000000a472 EA5118
           tutor13.s:5115   .text:000000000000a482 EA5119E
           tutor13.s:5142   .text:000000000000a4b6 EA71
           tutor13.s:5178   .text:000000000000a4fe EA7115
           tutor13.s:5175   .text:000000000000a4f8 EA7113
           tutor13.s:5210   .text:000000000000a518 EA16BITC
           tutor13.s:5235   .text:000000000000a53c EASEX
           tutor13.s:5226   .text:000000000000a52e EAS
           tutor13.s:5223   .text:000000000000a52c EA8BITC
                            *ABS*:0000000000000000 ADR
           tutor13.s:5241   .text:000000000000a53e TBLKEYS
           tutor13.s:5655   .text:000000000000aa44 MABCD
           tutor13.s:5743   .text:000000000000aafc MADD
           tutor13.s:5829   .text:000000000000aba4 MADDA
           tutor13.s:5793   .text:000000000000ab56 MADDI
           tutor13.s:5847   .text:000000000000abcc MADDQ
           tutor13.s:5880   .text:000000000000ac0e MADDX
           tutor13.s:5913   .text:000000000000ac50 MAND
           tutor13.s:5987   .text:000000000000acfe MASL
           tutor13.s:6103   .text:000000000000adea MDBCC
           tutor13.s:6044   .text:000000000000ad6e MBCHG
           tutor13.s:6113   .text:000000000000adf8 MBRA
           tutor13.s:6085   .text:000000000000adc6 MBSET
           tutor13.s:6153   .text:000000000000ae50 MCHK
           tutor13.s:6167   .text:000000000000ae6a MCLR
           tutor13.s:6175   .text:000000000000ae78 MCMPM
           tutor13.s:6395   .text:000000000000b058 MMOVEQ
68K GAS  tutor13.s 			page 188


           tutor13.s:6192   .text:000000000000aea2 MEXG
           tutor13.s:6225   .text:000000000000aedc MEXT
           tutor13.s:6566   .text:000000000000b1ec MJMP
           tutor13.s:6583   .text:000000000000b218 MLEA
           tutor13.s:6619   .text:000000000000b262 MLINK
           tutor13.s:6428   .text:000000000000b0a4 MMOVE
           tutor13.s:5623   .text:000000000000aa12 MCMMD2
           tutor13.s:6632   .text:000000000000b280 MSTOP
           tutor13.s:6604   .text:000000000000b240 MSWAP
           tutor13.s:6641   .text:000000000000b298 MTRAP
           tutor13.s:6648   .text:000000000000b2aa MUNLK
           tutor13.s:6236   .text:000000000000aef6 MMOVEM
           tutor13.s:5807   .text:000000000000ab6c MANDI
           tutor13.s:6038   .text:000000000000ad60 MSCC
           tutor13.s:6091   .text:000000000000add2 MBCLR
           tutor13.s:6097   .text:000000000000adde MBTST
           tutor13.s:6545   .text:000000000000b1c0 MMOVEA
           tutor13.s:6352   .text:000000000000aff6 MMOVEP
           tutor13.s:5689   .text:000000000000aa8a MCMP
           tutor13.s:5955   .text:000000000000acb2 MEOR
           tutor13.s:6597   .text:000000000000b232 MPEA
           tutor13.s:6654   .text:000000000000b2b4 MDC
                            *ABS*:0000000000000000 OPC
           tutor13.s:5294   *ABS*:0000000000000080 NOC
           tutor13.s:5295   *ABS*:0000000000000040 NW
           tutor13.s:5297   .text:000000000000a58a TBLOPC
           tutor13.s:5419   .text:000000000000a88e TBLOPCE
           tutor13.s:5435   *ABS*:0000000000000050 OUTBSIZE
           tutor13.s:5436   *ABS*:000000000000000a FDATA
           tutor13.s:5437   *ABS*:000000000000001f FOL
           tutor13.s:5438   *ABS*:000000000000001f FOC
           tutor13.s:5439   *ABS*:0000000000000027 FOP
           tutor13.s:5449   .text:000000000000a8a0 M300
           tutor13.s:5617   .text:000000000000aa08 ERDONE
           tutor13.s:5479   .text:000000000000a8ec M340
           tutor13.s:5608   .text:000000000000a9fa GETCHARF
           tutor13.s:5484   .text:000000000000a8f8 M350
           tutor13.s:5501   .text:000000000000a92c M352
           tutor13.s:5613   .text:000000000000aa02 ERF
           tutor13.s:5506   .text:000000000000a936 M410
           tutor13.s:5509   .text:000000000000a93e M415
           tutor13.s:5518   .text:000000000000a950 M420
           tutor13.s:5532   .text:000000000000a968 M430
           tutor13.s:5522   .text:000000000000a958 M426
           tutor13.s:5520   .text:000000000000a954 M424
           tutor13.s:5527   .text:000000000000a962 M428
           tutor13.s:5537   .text:000000000000a976 M432
           tutor13.s:5563   .text:000000000000a9aa M4326
           tutor13.s:5561   .text:000000000000a9a4 M4324
           tutor13.s:5590   .text:000000000000a9de M440
           tutor13.s:5580   .text:000000000000a9c8 M435
           tutor13.s:5584   .text:000000000000a9d0 M437
           tutor13.s:5603   .text:000000000000a9f2 GETCHAR
           tutor13.s:5638   .text:000000000000aa30 CMMD35
           tutor13.s:5620   .text:000000000000aa0c CMMD2
           tutor13.s:5631   .text:000000000000aa24 FPR315
           tutor13.s:5660   .text:000000000000aa52 MABCD9
68K GAS  tutor13.s 			page 189


           tutor13.s:5684   .text:000000000000aa80 MABCD55
           tutor13.s:5687   .text:000000000000aa88 CMMD2S10
           tutor13.s:5741   .text:000000000000aaf8 COMMAS20
           tutor13.s:5835   .text:000000000000abae MADDA21
           tutor13.s:5733   .text:000000000000aae8 MCMP56
           tutor13.s:5727   .text:000000000000aae0 MCMP39
           tutor13.s:5739   .text:000000000000aaf6 CMMD2S11
           tutor13.s:5779   .text:000000000000ab3a MADD56
           tutor13.s:5770   .text:000000000000ab2e MADD46
           tutor13.s:5785   .text:000000000000ab4a MADD58
           tutor13.s:5821   .text:000000000000ab86 MANDI23
           tutor13.s:6613   .text:000000000000b254 GETIMM
           tutor13.s:5874   .text:000000000000ac0a MADDQ25
           tutor13.s:5905   .text:000000000000ac44 MADDX5
           tutor13.s:5947   .text:000000000000ac9a MAND90
           tutor13.s:5974   .text:000000000000acde A5TODEST
           tutor13.s:5937   .text:000000000000ac84 MAND77
           tutor13.s:5952   .text:000000000000acac MAND97
           tutor13.s:5951   .text:000000000000aca8 MAND91
           tutor13.s:5970   .text:000000000000acd2 MEOR90
           tutor13.s:5975   .text:000000000000ace0 A5300
           tutor13.s:5979   .text:000000000000acec A5305
           tutor13.s:6015   .text:000000000000ad32 MSL200
           tutor13.s:6005   .text:000000000000ad1c MSL150
           tutor13.s:6025   .text:000000000000ad44 MSL300
           tutor13.s:6072   .text:000000000000adae ER2
           tutor13.s:6422   .text:000000000000b096 SIZEBYTE
           tutor13.s:6079   .text:000000000000adbc MB200
           tutor13.s:6050   .text:000000000000ad78 MB100
           tutor13.s:6059   .text:000000000000ad90 MB105
           tutor13.s:6077   .text:000000000000adb8 MB185
           tutor13.s:6074   .text:000000000000adb2 MB145
           tutor13.s:6139   .text:000000000000ae32 EVSR
           tutor13.s:6127   .text:000000000000ae12 MBRA23
           tutor13.s:6125   .text:000000000000ae0e EVER
           tutor13.s:6131   .text:000000000000ae20 MBRA27
           tutor13.s:6418   .text:000000000000b08a SIZEWORD
           tutor13.s:6412   .text:000000000000b07a SIZELONG
           tutor13.s:6218   .text:000000000000aece MEXG35
           tutor13.s:6213   .text:000000000000aec4 MEXG25
           tutor13.s:6264   .text:000000000000af30 MMM44
           tutor13.s:6282   .text:000000000000af56 MMM48
           tutor13.s:6267   .text:000000000000af30 MMM46
           tutor13.s:6285   .text:000000000000af5a RL111
           tutor13.s:6290   .text:000000000000af6a RL114
           tutor13.s:6292   .text:000000000000af6c RL115
           tutor13.s:6304   .text:000000000000af86 RL444
           tutor13.s:6298   .text:000000000000af7a RL333
           tutor13.s:6333   .text:000000000000afca SETBIT
           tutor13.s:6327   .text:000000000000afbc RL666
           tutor13.s:6320   .text:000000000000afb0 RL555
           tutor13.s:6344   .text:000000000000afe6 MTBL
           tutor13.s:6339   .text:000000000000afde RL30
           tutor13.s:6375   .text:000000000000b028 MMP344
           tutor13.s:6382   .text:000000000000b038 MMP348
           tutor13.s:6393   .text:000000000000b054 MMP368
           tutor13.s:6408   .text:000000000000b072 MMQ20
68K GAS  tutor13.s 			page 190


           tutor13.s:6416   .text:000000000000b088 SI201
           tutor13.s:6420   .text:000000000000b092 ER10
           tutor13.s:6426   .text:000000000000b0a2 SI222
           tutor13.s:6444   .text:000000000000b0c6 MMM40
           tutor13.s:6440   .text:000000000000b0be MM315
           tutor13.s:6459   .text:000000000000b0e8 MMM50
           tutor13.s:6479   .text:000000000000b116 MMM60
           tutor13.s:6472   .text:000000000000b104 MM508
           tutor13.s:6486   .text:000000000000b12a MM70
           tutor13.s:6500   .text:000000000000b158 MM80
           tutor13.s:6507   .text:000000000000b170 MM804
           tutor13.s:6519   .text:000000000000b18e MM806
           tutor13.s:6542   .text:000000000000b1b8 MMOVEA1
           tutor13.s:6533   .text:000000000000b1a6 MM825
           tutor13.s:6555   .text:000000000000b1d8 MMA225
           tutor13.s:6578   .text:000000000000b20e MJMP32
           tutor13.s:6575   .text:000000000000b208 MJMP22
           tutor13.s:6579   .text:000000000000b212 MJMP42
           tutor13.s:6688   .text:000000000000b2c4 X
           tutor13.s:6701   .text:000000000000b2c4 IMOVEMFR
           tutor13.s:7775   .text:000000000000b9e4 MOVEMS
           tutor13.s:6713   .text:000000000000b2d8 IM7788
           tutor13.s:6715   .text:000000000000b2dc IM7799
           tutor13.s:7785   .text:000000000000b9f8 MOVEMR
           tutor13.s:7543   .text:000000000000b822 EEA
           tutor13.s:6740   .text:000000000000b30e CS16
           tutor13.s:6729   .text:000000000000b2f4 IMOVEMTR
           tutor13.s:6791   .text:000000000000b37c CS15
           tutor13.s:6744   .text:000000000000b310 ISTOP
           tutor13.s:7936   .text:000000000000bb10 COMMON4
           tutor13.s:6753   .text:000000000000b324 IMMED
           tutor13.s:7487   .text:000000000000b798 FORMSIZE
           tutor13.s:6796   .text:000000000000b384 IMMED65
           tutor13.s:6804   .text:000000000000b394 IMMED75
           tutor13.s:6771   .text:000000000000b34a IMMED45
           tutor13.s:6793   .text:000000000000b37e IMMED55
           tutor13.s:7960   .text:000000000000bb3a FERROR
           tutor13.s:6838   .text:000000000000b3bc CS14
           tutor13.s:6816   .text:000000000000b398 IMOVE
           tutor13.s:7433   .text:000000000000b73c IMOVEA1
           tutor13.s:6821   .text:000000000000b39c ILINK
           tutor13.s:6895   .text:000000000000b3fc FORMREGA
           tutor13.s:6833   .text:000000000000b3b4 FORM1
           tutor13.s:6837   .text:000000000000b3b8 FORM1A
           tutor13.s:6932   .text:000000000000b42c CS13
           tutor13.s:6842   .text:000000000000b3c0 FORM3
           tutor13.s:6901   .text:000000000000b40c FORMREGD
           tutor13.s:6848   .text:000000000000b3c4 FORM4
           tutor13.s:6857   .text:000000000000b3d8 FORM5
           tutor13.s:6867   .text:000000000000b3dc FORM6A
           tutor13.s:6945   .text:000000000000b436 EEA10
           tutor13.s:6884   .text:000000000000b3ec FORM6D
           tutor13.s:6896   .text:000000000000b400 FORMREG5
           tutor13.s:6909   .text:000000000000b414 FORM7
           tutor13.s:6924   .text:000000000000b420 FORM8
           tutor13.s:6928   .text:000000000000b424 FORM815
           tutor13.s:7030   .text:000000000000b4ae CS12
68K GAS  tutor13.s 			page 191


           tutor13.s:6940   .text:000000000000b430 FORM9
           tutor13.s:6963   .text:000000000000b43c FORM10EX
           tutor13.s:7009   .text:000000000000b482 FORM103
           tutor13.s:6977   .text:000000000000b45e FORM10E3
           tutor13.s:6989   .text:000000000000b472 FORM10E6
           tutor13.s:6980   .text:000000000000b466 FORM10E4
           tutor13.s:7020   .text:000000000000b498 FORM105
           tutor13.s:7010   .text:000000000000b486 FORM104
           tutor13.s:7005   .text:000000000000b47c FORM10
           tutor13.s:7938   .text:000000000000bb12 COMMON
           tutor13.s:7035   .text:000000000000b4b4 FORM11
           tutor13.s:7042   .text:000000000000b4c0 FORM11SL
           tutor13.s:7048   .text:000000000000b4d4 FORM112
           tutor13.s:7052   .text:000000000000b4e2 FORM114
           tutor13.s:7067   .text:000000000000b4e4 FORM12
           tutor13.s:7082   .text:000000000000b4fe FORM125
           tutor13.s:7119   .text:000000000000b544 CS11
           tutor13.s:7146   .text:000000000000b564 SCHR
           tutor13.s:7105   .text:000000000000b520 FORM12A
           tutor13.s:7123   .text:000000000000b548 IQUICK
           tutor13.s:7459   .text:000000000000b768 IQUICKA
           tutor13.s:7132   .text:000000000000b54c IMOVEQ
           tutor13.s:7155   .text:000000000000b56c IMVFSR
           tutor13.s:7165   .text:000000000000b57c IMVFUSP
           tutor13.s:7174   .text:000000000000b58c IMVTSR
           tutor13.s:7177   .text:000000000000b59a IMVT44
           tutor13.s:7184   .text:000000000000b5a0 IMVTUSP
           tutor13.s:7192   .text:000000000000b5ac IMVTCCR
           tutor13.s:7208   .text:000000000000b5bc IMOVEP
           tutor13.s:7214   .text:000000000000b5cc IMOVEP11
           tutor13.s:7230   .text:000000000000b5e8 IMOVEP35
           tutor13.s:7239   .text:000000000000b5f6 IMOVEP66
           tutor13.s:7228   .text:000000000000b5e4 CS20
           tutor13.s:7252   .text:000000000000b614 SCOMMON
           tutor13.s:7256   .text:000000000000b618 ISCC
           tutor13.s:7398   .text:000000000000b704 ICCCC
           tutor13.s:7262   .text:000000000000b624 IDBCC
           tutor13.s:7303   .text:000000000000b664 ICC55
           tutor13.s:7280   .text:000000000000b638 ICC
           tutor13.s:7283   .text:000000000000b63c IBSR
           tutor13.s:7292   .text:000000000000b64e ICC35
           tutor13.s:7311   .text:000000000000b674 ISETD
           tutor13.s:7315   .text:000000000000b67a ISETD12
           tutor13.s:7319   .text:000000000000b682 CS18
           tutor13.s:7327   .text:000000000000b684 ISETS
           tutor13.s:7354   .text:000000000000b6a0 ISHIFT
           tutor13.s:7359   .text:000000000000b6ac ISHIFT13
           tutor13.s:7388   .text:000000000000b6ea ISHIFTM1
           tutor13.s:7380   .text:000000000000b6dc ISHIFT33
           tutor13.s:7375   .text:000000000000b6d0 ISHIFT23
           tutor13.s:7382   .text:000000000000b6e0 ISHIFT44
           tutor13.s:7386   .text:000000000000b6e8 CS17
           tutor13.s:7410   .text:000000000000b71c BRTBL
           tutor13.s:7408   .text:000000000000b71a ICCCC9
           tutor13.s:7453   .text:000000000000b762 IMOVE19
           tutor13.s:7479   .text:000000000000b794 CS19
           tutor13.s:7467   .text:000000000000b77a IQUICK21
68K GAS  tutor13.s 			page 192


           tutor13.s:7478   .text:000000000000b790 IQUICK31
           tutor13.s:7496   .text:000000000000b7ac FORM91
           tutor13.s:7503   .text:000000000000b7c2 FORM95
           tutor13.s:7502   .text:000000000000b7c0 FORM93
           tutor13.s:7536   .text:000000000000b81e FE10
           tutor13.s:7505   .text:000000000000b7c4 EA000
           tutor13.s:7510   .text:000000000000b7d0 EA001
           tutor13.s:7515   .text:000000000000b7dc EA010
           tutor13.s:7522   .text:000000000000b7f0 EA011
           tutor13.s:7528   .text:000000000000b806 EA011RTS
           tutor13.s:7530   .text:000000000000b808 EA100
           tutor13.s:7617   .text:000000000000b8aa EA101
           tutor13.s:7632   .text:000000000000b8c0 EA111
           tutor13.s:7602   .text:000000000000b886 EA1105
           tutor13.s:7603   .text:000000000000b88a EA1107
           tutor13.s:7610   .text:000000000000b8a0 EA1109
           tutor13.s:7665   .text:000000000000b906 FE11
           tutor13.s:7646   .text:000000000000b8de EA1112
           tutor13.s:7660   .text:000000000000b8fa EA1113
           tutor13.s:7679   .text:000000000000b92c EA1114
           tutor13.s:7666   .text:000000000000b90a EA1113A
           tutor13.s:7737   .text:000000000000b996 EA1115
           tutor13.s:7718   .text:000000000000b974 EAF25
           tutor13.s:7719   .text:000000000000b978 EAF27
           tutor13.s:7728   .text:000000000000b98c EAF35
           tutor13.s:7770   .text:000000000000b9d8 EA11155
           tutor13.s:7765   .text:000000000000b9ce EA11153
           tutor13.s:7780   .text:000000000000b9f4 MOVEMS2
           tutor13.s:7793   .text:000000000000ba08 MOVEMR11
           tutor13.s:7816   .text:000000000000ba3c MOVEMR77
           tutor13.s:7805   .text:000000000000ba22 MOVEMR44
           tutor13.s:7799   .text:000000000000ba10 MOVEMR33
           tutor13.s:7826   .text:000000000000ba50 MOVEMR88
           tutor13.s:7824   .text:000000000000ba4e MOVEMR79
           tutor13.s:7839   .text:000000000000ba68 MOVEMR94
           tutor13.s:7854   .text:000000000000ba88 DEC311
           tutor13.s:7983   .text:000000000000bb64 KI
           tutor13.s:7984   .text:000000000000bb66 KIEND
           tutor13.s:7868   .text:000000000000baa8 DEC404
           tutor13.s:7884   .text:000000000000bac6 FE12
           tutor13.s:7997   .text:000000000000bb66 TBL
           tutor13.s:8085   .text:000000000000bd70 TBLE
           tutor13.s:7877   .text:000000000000bab8 DEC411
           tutor13.s:7886   .text:000000000000bac8 DEC425
           tutor13.s:8092   .text:000000000000bd70 OPCTBL
           tutor13.s:7896   .text:000000000000bad6 DEC510
           tutor13.s:7903   .text:000000000000bae2 DEC530
           tutor13.s:7898   .text:000000000000bada DEC515
           tutor13.s:7905   .text:000000000000bae8 DEC535
           tutor13.s:7910   .text:000000000000baf4 DEC537
           tutor13.s:7945   .text:000000000000bb20 COMMON35
           tutor13.s:7980   .text:000000000000bb5a MSG111
           tutor13.s:7966   .text:000000000000bb44 FERROR35
           tutor13.s:7971   .text:000000000000bb50 FERROR39
                            *ABS*:0000000000000000 C68
                            *ABS*:0000000000000000 N68
           tutor13.s:8173   .text:000000000000be78 T100
68K GAS  tutor13.s 			page 193


           tutor13.s:8234   .text:000000000000bec0 T500
           tutor13.s:8245   .text:000000000000befa T600
           tutor13.s:8186   .text:000000000000be8e T400
           tutor13.s:8226   .text:000000000000beac T450
           tutor13.s:8235   .text:000000000000bed4 SV327
           tutor13.s:8242   .text:000000000000bee8 MSGT14
           tutor13.s:8248   .text:000000000000bf00 T700
                            *ABS*:0000000000000000 FADDR
           tutor13.s:8268   .text:000000000000bf14 CT
           tutor13.s:8328   .text:000000000000bf88 F100
           tutor13.s:8331   .text:000000000000bf90 F110
           tutor13.s:8334   .text:000000000000bf98 F120
           tutor13.s:8346   *ABS*:0000000000000004 VERSION

NO UNDEFINED SYMBOLS
