* =======================================================================
* Test the External SRAM on the RETRO-EP4CE15 card
* The RETRO-EP4CE15 card has 1MB of External SRAM
* External SRAM only supports 8-bit accesses
* External SRAM goes from 0x300000 to 0x3FFFFF (1 MB)
* Test is about checking the connections to the SRAM
* TUTOR14 uses SRAM from 0x000000 to 0x000800
* =======================================================================

RAMSTART	= 0x300000
RAMEND		= 0x3FFFFF
ACIASTAT	= 0x010041
ACIADATA	= 0x010043

* Code follows

	.ORG    0x001000
* CHECK FIRST LOCATION BY WRITING/READING 0x55/0xAA
STARTTEST:
	MOVE.L  #RAMSTART,%A0
	MOVE.B  #0x55,%D0
	MOVE.B	%D0,(%A0)
    NOP
    MOVE.B	(%A0),%D1
    CMP.B   %D0,%D1
    BNE     FAIL
	MOVE.B  #0xAA,%D0
	MOVE.B	%D0,(%A0)
    NOP
    MOVE.B	(%A0),%D1
    CMP.B   %D0,%D1
    BNE     FAIL
* CHECK UPPER 8 SRAM ADDRESS LINES (A12..A19 ON SRAM)
* WRITE INCREMENTING VALUE EVERY 4096 BYTES
    MOVE.B  #0X00,%D0
	MOVE.L  #RAMSTART,%A0
	MOVE.L  #RAMEND+1,%A1
FILL4K:
    MOVE.B  %D0,(%A0)
    ADDI.L  #4096,A0
    CMP.L   %A0,%A1
    BGE.S   DONE4KFL
    ADDI.B  #0x01,%D0
    BRA     FILL4K
DONE4KFL:
    MOVE.B  #0X00,%D0
	MOVE.L  #RAMSTART,%A0
	MOVE.L  #RAMEND+1,%A1
CHK4K:
    MOVE.B  (%A0),%D1
    CMP.B   %D0,%D1
    BNE     FAIL
    ADDI.B  #0x01,%D0
    ADDI.L  #4096,A0
    CMP.L   %A0,%A1
    BGE.S   DONE4K
    BRA     CHK4K
DONE4K:
* WRITE INCREMENTING PATTERN TO ALL THE SRAM
* CHECKS BOTTOM 256 ADDRESSES AND ALL DATA LINES
    MOVE.B  #0X00,%D0
	MOVE.L  #RAMSTART,%A0
	MOVE.L  #RAMEND+1,%A1
CHKBLKS:
    MOVE.B  %D0,(%A0)+
    CMP.L   %A0,%A1
    BEQ.S   DONEFILL
    ADDI.B  #0x01,%D0
    BRA.S   CHKBLKS
DONEFILL:
* READ BACK INCREMENTING PATTERN 
    MOVE.B  #0X00,%D0
	MOVE.L  #RAMSTART,%A0
	MOVE.L  #RAMEND+1,%A1
LOOPCHK:
    MOVE.B  (%A0)+,%D1
    CMP.B   %D0,%D1
    BNE     FAIL
    CMP.L   %A0,%A1
    BEQ.S   DONECHK
    ADDI.B  #0x01,%D0
    BRA.S   LOOPCHK
DONECHK:
* PRINT 'Pass'
	MOVE.B	#0x0A,%D0
	JSR     OUTCHAR
	MOVE.B	#0x0D,%D0
	JSR     OUTCHAR
	MOVE.B	#'P',%D0
	JSR     OUTCHAR
	MOVE.B	#'a',%D0
	JSR     OUTCHAR
	MOVE.B	#'s',%D0
	JSR     OUTCHAR
	MOVE.B	#'s',%D0
	JSR     OUTCHAR
    RTS
FAIL:
* PRINT 'Fail'
	MOVE.B	#0x0A,%D0
	JSR     OUTCHAR
	MOVE.B	#0x0D,%D0
	JSR     OUTCHAR
	MOVE.B	#'F',%D0
	JSR     OUTCHAR
	MOVE.B	#'a',%D0
	JSR     OUTCHAR
	MOVE.B	#'i',%D0
	JSR     OUTCHAR
	MOVE.B	#'l',%D0
	JSR     OUTCHAR
	RTS

* OUTPUT A CHARACTER IN D0 TO THE ACIA
OUTCHAR:
    BSR.S   WAITRDY
    LEA     ACIADATA,%A1
	MOVE.B	%D0,(%A1)
    RTS

* WAIT FOR THE SERIAL PORT TO BE READY
WAITRDY:
	LEA     ACIASTAT,%A1
LOOPRDY:
	MOVE.B	(%A1),%D1
	ANDI.B	#0x2,%D1
	BEQ.S   LOOPRDY
    RTS

