68K GAS  S68K_002.s 			page 1


   1               	| S68K_002.s - 68K Monitor with extensions
   2               	|	Adds S Record loader
   3               	| Borrowed init code from 
   4               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   5               	
   6               	RAM_START	= 0x00000	| Beginning of the SRAM
   7               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   8               	RAM_END		= 0x7FFFF	| 512KB SRAM
   9               	ROM_START	= 0x80000	| ROM start
  10               	ROM_CODE	= ROM_START+1024| Skip vector table
  11               	*ROM_END	= 0x87FFF	| End of 32KB EPROM
  12               	ROM_END		= 0x8FFFF	| End of 64KB EPROM
  13               	
  14               	|||||||||||||||||||||||||||||||||
  15               	| 68681 Duart Register Addresses
  16               	|
  17               	DUART = 0x0F0000	  | Base Addr of DUART
  18               	MRA   = DUART+0		  | Mode Register A           (R/W)
  19               	SRA   = DUART+2       | Status Register A         (r)
  20               	CSRA  = DUART+2       | Clock Select Register A   (w)
  21               	CRA   = DUART+4       | Commands Register A       (w)
  22               	RBA   = DUART+6       | Receiver Buffer A         (r)
  23               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  24               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  25               	ISR   = DUART+10      | Interrupt Status Register (R)
  26               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  27               	MRB   = DUART+16      | Mode Register B           (R/W)
  28               	SRB   = DUART+18      | Status Register B         (R)
  29               	CSRB  = DUART+18      | Clock Select Register B   (W)
  30               	CRB   = DUART+20      | Commands Register B       (W)
  31               	RBB   = DUART+22      | Reciever Buffer B         (R)
  32               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  33               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  34               	OPC   = DUART+26      | Output port config        (W)
  35               	INU   = DUART+26      | Input port (unlatched)    (R)
  36               	OPS   = DUART+28      | Output port Set           (W)
  37               	OPR   = DUART+30      | Output port Clear         (W)
  38               	
  39               	||||||||||||||||||||||||||||||||||
  40               	| ASCII Control Characters
  41               	|
  42               	BEL   = 0x07
  43               	BKSP  = 0x08       | CTRL-H
  44               	TAB   = 0x09
  45               	LF    = 0x0A
  46               	CR    = 0x0D
  47               	ESC   = 0x1B
  48               	EOT	  = 0x00
  49               	
  50               	CTRLC	=	0x03
  51               	CTRLX	=	0x18     | Line Clear
  52               	
  53 0000 0000 0000 		.ORG    0x000400
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
68K GAS  S68K_002.s 			page 2


  54 0400 00        	_srecType:	ds.b	1		| S1-S9 stored as binary 1-9
  55 0401 00        	_srecByCt:	ds.b	1		| Byte Count
  56 0402 00        	_srecData:	ds.b	1 		| Data
  57 0403 00        	_srecCSum:	ds.b	1 		| S-Record Checksum
  58 0404 0000 0000 	_srecAddr:	ds.l	1		| S Record current byte address
  59               	
  60               	srecType	=		0x000400	| S1-S9 stored as binary 1-9
  61               	srecByCt	=		0x000401	| Byte Count
  62               	srecData	=		0x000402	| Data
  63               	srecCSum	=		0x000403	| S-Record Checksum
  64               	srecAddr	=		0x000404	| S Record current byte address
  65               	
  66 0408 0000 0000 		.ORG	ROM_START
  66      0000 0000 
  66      0000 0000 
  66      0000 0000 
  66      0000 0000 
  67               	
  68               	| FIRST 8 bytes loaded after reset |
  69 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  70 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  71               	
  72 80008 0000 0000 	        .ORG ROM_CODE
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73 80400 4E71      		nop
  74 80402 4FF9 0007 		lea			STACK_END,%sp
  74      FFFC 
  75 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  75      0008 0000 
  76 80410 4E71      		nop
  77               	| LEDs
  78 80412 13FC 0000 		move.b	#0x00, OPC		| Output port configuration (all bit are outs)
  78      000F 001A 
  79 8041a 13FC 00FC 		move.b	#0xFC, OPR		| Clear all outputs
  79      000F 001E 
  80 80422 13FC 0004 		move.b	#0x04, OPS		| Turn off LED on DUART O2
  80      000F 001C 
  81               	|
  82               	| Test the first two SRAM location
  83               	|
  84 8042a 203C DEAD 		move.l	#0xDEADBEEF, %d0		| Test Pattern #1
  84      BEEF 
  85 80430 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  86 80434 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  87 80436 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  88 80438 B042      		cmp			%d2, %d0
  89 8043a 6600 00C6 		bne			FERVR2						
  90 8043e 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  90      AAAA 
  91 80444 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  92 80448 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  93 8044a 2611      		move.l	(%a1), %d3				| Read back
  94 8044c B243      		cmp			%d3, %d1
  95 8044e 6600 00B2 		bne			FERVR2
68K GAS  S68K_002.s 			page 3


  96 80452 4E71      		nop
  97               	| Test bits of first location (as bytes)
  98 80454 7001      		move.l	#1, %d0
  99 80456 207C 0000 		move.l	#0, %a0
  99      0000 
 100               	loop1stLoc:
 101 8045c 1080      		move.b	%d0, (%a0)
 102 8045e 1210      		move.b	(%a0), %d1
 103 80460 B200      		cmp.b		%d0, %d1
 104 80462 6600 009E 		bne			failBitTest
 105 80466 E348      		lsl			#1, %d0
 106 80468 0C80 0000 		cmp.l		#0x00000100, %d0
 106      0100 
 107 8046e 6600 FFEC 		bne			loop1stLoc
 108               	|
 109               	| Test all address lines, 512KB SRAM
 110               	| Write incrementing pattern to data bits
 111               	|
 112 80472 7001      		move.l	#1, %d0		| Fill pattern
 113 80474 7401      		move.l	#1, %d2
 114 80476 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
 114      0001 
 115               	loopAdrFill:
 116 8047c 1080      		move.b	%d0,(%a0)	| Do the write
 117 8047e 5240      		addq		#1, %d0		| Increment the pattern
 118 80480 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
 119 80482 E38A      		lsl.l		#1, %d2		| Shift temp addr
 120 80484 2042      		move.l	%d2, %a0	| Put back into addr reg
 121 80486 0C82 0008 		cmp.l		#0x00080000,%d2
 121      0000 
 122 8048c 6600 FFEE 		bne			loopAdrFill
 123               	| Check
 124 80490 7001      		move.l	#1, %d0
 125 80492 7401      		move.l	#1, %d2
 126 80494 207C 0000 		move.l	#1, %a0
 126      0001 
 127               	loopAdrCk:
 128 8049a 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 129 8049c B200      		cmp.b		%d0, %d1
 130 8049e 6600 0062 		bne			failAdrTest
 131 804a2 5240      		addq		#1, %d0
 132 804a4 2408      		move.l	%a0, %d2 
 133 804a6 E38A      		lsl.l		#1, %d2
 134 804a8 2042      		move.l	%d2, %a0
 135 804aa 0C82 0008 		cmp.l		#0x00080000,%d2
 135      0000 
 136 804b0 6600 FFE8 		bne			loopAdrCk
 137               		
 138               	|
 139               	| Fill SRAM with 0x00 values
 140               	| 512KB fill takes about 2.5 seconds at 10 MHz CPU speed
 141               	|
 142               	fillSRAM:
 143 804b4 41F8 0000 		lea		RAM_START, %a0		| Start at base RAM address
 144 804b8 43F9 0007 		lea		RAM_END, %a1		| End when reach end RAM space
 144      FFFF 
 145 804be 7000      		move.l	#0x00, %d0			| Fill with zeros
68K GAS  S68K_002.s 			page 4


 146               	fillSRAMLoop:
 147 804c0 20C0      		move.l	%d0, (%a0)+			| Long fills are faster
 148 804c2 B3C8      		cmpa.l	%a0, %a1
 149 804c4 6E00 FFFA 		bgt		fillSRAMLoop
 150               	
 151               	|
 152               	| Done with address test of SRAM
 153               	|
 154 804c8 4EBA 05DC 		jsr     initDuart       	| Setup the serial port
 155               	monitorStart:					| Warm start
 156 804cc 41FA 06C7 		lea		BANNER_MSG, %a0
 157 804d0 4EBA 005E 		jsr		printString1
 158 804d4 41FA 06AA 		lea		RAM_PASS_MSG, %a0
 159 804d8 4EBA 0056 		jsr		printString1
 160               	|
 161               	| Interpreter Loop
 162               	|
 163               	interpLoop:
 164 804dc 41FA 0760 	    lea     msgPrompt, %a0	| Prompt
 165 804e0 6100 004E 	    bsr.w   printString
 166 804e4 13FC 0004 		move.b	#0x04, OPR		| Turn on LED
 166      000F 001E 
 167 804ec 4EBA 0074 		jsr		readLine		| Blocking read of line
 168 804f0 13FC 0004 		move.b	#0x04, OPS		| Turn off LED
 168      000F 001C 
 169 804f8 4EBA 00FA 		jsr		lineToUpper
 170 804fc 4EBA 0114 		jsr		parseLine
 171 80500 60DA      		bra.s	interpLoop
 172               		
 173               	failBitTest:
 174               	failAdrTest:
 175               	FERVR2:
 176 80502 4E71      		nop
 177 80504 4EFA FFFC 		jmp	FERVR2
 178               	
 179               	|||||
 180               	| Writes a character to Port A, blocking if not ready (Full buffer)
 181               	|  - Takes a character in D0
 182               	outChar1:
 183               	outChar:
 184 80508 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 184      000F 0002 
 185 80510 6700 FFF6 	    beq     outChar1     
 186 80514 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 186      0006 
 187 8051a 4E75      	    rts
 188               	
 189               	| Writes a character to Port A, blocking if not ready (Full buffer)
 190               	|  - Takes a character in D0
 191               	outChar2:
 192 8051c 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 192      000F 0012 
 193 80524 6700 FFF6 	    beq     outChar2     
 194 80528 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 194      0016 
 195 8052e 4E75      	    rts
 196               	
68K GAS  S68K_002.s 			page 5


 197               	******
 198               	* Print a null terminated string
 199               	*
 200               	printString1:
 201               	printString:
 202               	PSloop:
 203 80530 1018      	    move.b  (%a0)+, %d0  | Read in character
 204 80532 6704      	    beq.s   PSend         | Check for the null
 205               	    
 206 80534 61D2      	    bsr.s   outChar      | Otherwise write the character
 207 80536 60F8      	    bra.s   PSloop        | And continue
 208               	PSend:
 209 80538 4E75      	    rts
 210               	
 211               	
 212               	|||||
 213               	| Reads in a character from Port A, blocking if none available
 214               	|  - Returns character in D0
 215               	|    
 216               	inChar1:
 217               	inChar:
 218 8053a 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 218      000F 0002 
 219 80542 6700 FFF6 	    beq     inChar1
 220 80546 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 220      0006 
 221 8054c 4E75      	    rts
 222               	
 223               	inChar2:
 224 8054e 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 224      000F 0012 
 225 80556 6700 FFF6 	    beq     inChar2
 226 8055a 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 226      0016 
 227 80560 4E75      	    rts
 228               	
 229               	| Read in a line into the line buffer
 230               	readLine:
 231 80562 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 232 80566 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 232      FBAE 
 233 8056c B542      	    eor.w   %d2, %d2           	| Clear the character counter
 234               	 RLloop:
 235 8056e 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 236 80572 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 237 80576 6722      	    beq.s   RLBS
 238 80578 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 239 8057c 673A      	    beq.s   RLlineClr
 240 8057e 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 241 80582 6758      	    beq.s   RLEndLn
 242 80584 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
 243 80588 67E4      	    beq.s   RLloop            	| Ignore LFs and get the next character
 244               	 .char:                      	| Normal character to be inserted into the buffer
 245 8058a 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 246 8058e 6CDE      	    bge.s   RLloop            	| If the buffer is full ignore the character
 247 80590 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 248 80592 5242      	    addq.w  #1, %d2           	| Increment character count
68K GAS  S68K_002.s 			page 6


 249 80594 6100 FF72 	    bsr.w   outChar          	| Echo the character
 250 80598 60D4      	    bra.s   RLloop            	| And get the next one
 251               	 RLBS:
 252 8059a 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 253 8059c 67D0      	    beq.s   RLloop            	| Then ignore it
 254 8059e 6100 FF68 	    bsr.w   outChar          	| Backspace
 255 805a2 103C 0020 	    move.b  #' ', %d0
 256 805a6 6100 FF60 	    bsr.w   outChar          	| Space
 257 805aa 103C 0008 	    move.b  #BKSP, %d0
 258 805ae 6100 FF58 	    bsr.w   outChar          	| Backspace
 259 805b2 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 260 805b4 5382      	    subq.l  #1, %d2           	| And current character count
 261 805b6 60B6      	    bra.s   RLloop            	| And goto the next character
 262               	 RLlineClr:
 263 805b8 4A42      	    tst     %d2               	| Anything to clear?
 264 805ba 67B2      	    beq.s   RLloop            	| If not, fetch the next character
 265 805bc 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 266               	 RLlineClrloop:
 267 805be 103C 0008 	    move.b  #BKSP, %d0
 268 805c2 6100 FF44 	    bsr.w   outChar          	| Backspace
 269 805c6 103C 0020 	    move.b  #' ', %d0
 270 805ca 6100 FF3C 	    bsr.w   outChar          	| Space
 271 805ce 103C 0008 	    move.b  #BKSP, %d0
 272 805d2 6100 FF34 	    bsr.w   outChar          	| Backspace
 273 805d6 5342      	    subq.w  #1, %d2          
 274 805d8 66E4      	    bne.s   RLlineClrloop   	| Go till the start of the line
 275 805da 6092      	    bra.s   RLloop   
 276               	 RLEndLn:
 277 805dc 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 278 805e0 103C 000A 	    move.b  #LF, %d0
 279 805e4 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 280 805e8 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 281 805ec 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 282 805ee 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 283 805f2 4E75      	    rts                      	| And return
 284               	
 285               	
 286               	| Convert line buffer to upper case
 287               	lineToUpper:
 288 805f4 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 288      FBAE 
 289               	 LUloop:
 290 805fa 1010      	    move.b  (%a0), %d0        | Read in a character
 291 805fc 0C00 0061 	    cmp.b   #'a', %d0         
 292 80600 6D0A      	    blt.s   LUnext            | Is it less than lower-case 'a', then move on
 293 80602 0C00 007A 	    cmp.b   #'z', %d0
 294 80606 6E04      	    bgt.s   LUnext            | Is it greater than lower-case 'z', then move on
 295 80608 0400 0020 	    sub.b   #0x20, %d0         | Then convert a to A, b to B, etc.
 296               	 LUnext:
 297 8060c 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 298 8060e 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
 299 80610 4E75      	    rts
 300               	
 301               	|
 302               	| Parse Line
 303               	|
 304               	parseLine:
68K GAS  S68K_002.s 			page 7


 305 80612 48E7 0030 	    movem.l %a2-%a3, -(%SP)     | Save registers
 306 80616 41F9 0007 	    lea     varLineBuf, %a0
 306      FBAE 
 307               	 PLfindCommand:
 308 8061c 1018      	    move.b  (%a0)+, %d0
 309 8061e 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 310 80622 6700 FFF8 	    beq.w   PLfindCommand    
 311 80626 0C00 0045 	    cmp.b   #'E', %d0           | Examine command
 312 8062a 6700 005A 	    beq.w   .examine
 313 8062e 0C00 0044 	    cmp.b   #'D', %d0           | Deposit command
 314 80632 6700 0394 	    beq.w   .deposit
 315 80636 0C00 0052 	    cmp.b   #'R', %d0           | Run command
 316 8063a 6700 03F0 	    beq.w   .run
 317 8063e 0C00 0048 	    cmp.b   #'H', %d0           | Help command
 318 80642 6700 001E 	    beq.w   .help
 319 80646 0C00 004C 	    cmp.b   #'L', %d0           | Help command
 320 8064a 6700 00C4 	    beq.w   loadSRec
 321 8064e 0C00 0000 	    cmp.b   #0, %d0             | Ignore blank lines
 322 80652 6708      	    beq.s   .exit               
 323               	 .invalid:   
 324 80654 41FA 0552 	    lea     msgInvalidCommand, %a0
 325 80658 6100 FED6 	    bsr.w   printString
 326               	 .exit:
 327 8065c 4CDF 0C00 	    movem.l (%SP)+, %a2-%a3     | Restore registers
 328 80660 4E75      	    rts
 329               	
 330               	|||||||||||||||||||||||||||||||
 331               	|| HELP command
 332               	 .help:
 333 80662 41FA 0559 	    lea     msgHelp, %a0
 334 80666 6100 FEC8 	    bsr.w   printString
 335 8066a 6000 FFF0 	    bra.w   .exit
 336               	 .invalidAddr:
 337 8066e 41FA 05AC 	    lea     msgInvalidAddress, %a0
 338 80672 6100 FEBC 	    bsr.w   printString
 339 80676 6000 FFE4 	    bra.w   .exit
 340               	 .invalidVal:
 341 8067a 41FA 05B2 	    lea     msgInvalidValue, %a0
 342 8067e 6100 FEB0 	    bsr.w   printString
 343 80682 6000 FFD8 	    bra.w   .exit
 344               		
 345               	|||||||||||||||||||||||||||||||
 346               	| Examines memory addresses
 347               	| Valid modes:
 348               	|   e ADDR                  Displays a single byte
 349               	|   e ADDR-ADDR             Dispalys all bytes between the two addresses
 350               	|   e ADDR+LEN              Dispays LEN bytes after ADDR
 351               	|   e ADDR;                 Interactive mode, space shows 16 lines, enter shows 1.
 352               	|   e ADDR.                 Quick line, displays one line 
 353               	.examine:
 354 80686 6100 0244 	    bsr.w   parseNumber         | Read in the start address
 355 8068a 4A01      	    tst.b   %d1                 | Make sure it's valid (parseNumber returns non-zero in d1 for fail
 356 8068c 6600 FFE0 	    bne.w   .invalidAddr        
 357 80690 2640      	    move.l  %d0, %a3            | Save the start address
 358               	 .exloop:
 359 80692 1018      	    move.b  (%a0)+, %d0
 360 80694 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
68K GAS  S68K_002.s 			page 8


 361 80698 67F8      	    beq.s   .exloop
 362 8069a 0C00 002D 	    cmp.b   #'-', %d0           | Check if it's a range specifier
 363 8069e 6716      	    beq.s   .exrange
 364 806a0 0C00 002B 	    cmp.b   #'+', %d0           | Check if it's a length specifier
 365 806a4 6722      	    beq.s   .exlength
 366 806a6 0C00 003B 	    cmp.b   #';', %d0           | Check if we're going interactive
 367 806aa 672E      	    beq.s   .exinter
 368 806ac 0C00 002E 	    cmp.b   #'.', %d0           | Check if quick 16 
 369 806b0 6712      	    beq.s   .exquick
 370 806b2 7001      	    move.l  #1, %d0             | Otherwise read in a single byte
 371 806b4 601C      	    bra.s   .exend              
 372               	 .exrange:
 373 806b6 6100 0214 	    bsr.w   parseNumber         | Find the end address
 374 806ba 4A01      	    tst.b   %d1                 | Check if we found a valid address
 375 806bc 6600 FFB0 	    bne.w   .invalidAddr
 376 806c0 908B      	    sub.l   %a3, %d0            | Get the length
 377 806c2 600E      	    bra.s   .exend
 378               	 .exquick:                      | Quick mode means show one line of 16 bytes
 379 806c4 7010      	    move.l  #0x10, %d0
 380 806c6 600A      	    bra.s   .exend
 381               	 .exlength:                     | Length mode means a length is specified
 382 806c8 6100 0202 	    bsr.w   parseNumber         | Find the length
 383 806cc 4A01      	    tst.b   %d1
 384 806ce 6600 FF9E 	    bne.w   .invalidAddr
 385               	 .exend:                        | Done parsing, give the parameters to dumpRAM and exit
 386 806d2 204B      	    move.l  %a3, %a0
 387 806d4 6100 0258 	    bsr.w   dumpRAM
 388 806d8 6082      	    bra.s   .exit
 389               	 .exinter:                      | Interactive mode, Space shows 16 lines, enter shows 1.
 390 806da 204B      	    move.l  %a3, %a0            | Current Address
 391 806dc 7010      	    move.l  #0x10, %d0          | 16 bytes
 392 806de 6100 024E 	    bsr.w   dumpRAM             | Dump this line
 393 806e2 D7FC 0000 	    add.l   #0x10, %a3          | Move up the current address 16 bytes
 393      0010 
 394               	 .exinterend:
 395 806e8 6100 FE50 	    bsr.w   inChar
 396 806ec 0C00 000D 	    cmp.b   #CR, %d0            | Display another line
 397 806f0 67E8      	    beq.s   .exinter
 398 806f2 0C00 0020 	    cmp.b   #' ', %d0           | Display a page (256 bytes at a time)
 399 806f6 6704      	    beq.s   .exinterpage
 400 806f8 6000 FF62 	    bra	   .exit               | Otherwise exit
 401               	 .exinterpage:
 402 806fc 204B      	    move.l  %a3, %a0
 403 806fe 203C 0000 	    move.l  #0x100, %d0         | 256 bytes
 403      0100 
 404 80704 6100 0228 	    bsr.w   dumpRAM             | Dump 16 lines of RAM
 405 80708 D7FC 0000 	    add.l   #0x100, %a3         | Move up the current address by 256
 405      0100 
 406 8070e 60D8      	    bra.s   .exinterend
 407               	
 408               	|||||||||||||||||||||||||||||
 409               	|| Load S Record
 410               	|	srecType:	ds.b	1		| S1-S9 stored as binary 1-9
 411               	|	srecByCt:	ds.b	1		| Byte Count
 412               	|	srecData:	ds.b	1 		| Data
 413               	|	srecCSum:	ds.b	1 		| S-Record Checksum
 414               	|	srecAddr:	ds.l	1		| S Record current byte address
68K GAS  S68K_002.s 			page 9


 415               	|
 416               	| Supports 3 S record types (matches gcc m68k output)
 417               	|	S00F00005336384B5F3030322E746D7074
 418               	|	S2240800000007FFFC00080400000000000000000000000000000000000000000000000000C5
 419               	|	S503005BA1
 420               	
 421               	loadSRec:
 422 80710 41FA 04FA 	    lea     ldSRecMsg, %a0
 423 80714 6100 FE1A 	    bsr.w   printString
 424 80718 6100 0076 		bsr		getRecType
 425 8071c 6100 00A8 		bsr		getBytCt
 426 80720 11FC 0000 		move.b 	#0, srecCSum
 426      0403 
 427 80726 6100 00FC 		bsr		getAddr
 428 8072a 41FA 057F 		lea		debug_Srec_LDData_Msg, %a0
 429 8072e 6100 FE00 		bsr		printString
 430               	loopSData:
 431 80732 0C38 0001 		cmp.b 	#1, srecByCt
 431      0401 
 432 80738 6700 000A 		beq		sRecDataDone
 433 8073c 4EBA 000E 		jsr		getLdData
 434 80740 6000 FFF0 		bra		loopSData
 435               	sRecDataDone:
 436 80744 4EBA 0028 		jsr		getChksum
 437 80748 6000 FF12 		bra.w   .exit
 438               	
 439               	getLdData:
 440 8074c 4EBA 00A2 		jsr		getHexPair
 441 80750 0C38 0002 		cmp.b	#2, srecType
 441      0400 
 442 80756 6600 000C 		bne		skipLdData
 443 8075a 41F8 0404 		lea 	srecAddr, %a0
 444 8075e 1080      		move.b	%d0, (%a0)
 445 80760 52B8 0404 		add.l	#1, srecAddr
 446               	skipLdData:
 447 80764 D138 0403 		add.b	%d0, srecCSum
 448 80768 5338 0401 		sub.b	#1, srecByCt
 449 8076c 4E75      		rts
 450               	
 451               	getChksum:
 452 8076e 41FA 04FB 		lea		debug_Srec_CSum_Msg, %a0
 453 80772 6100 FDBC 	    bsr.w   printString
 454 80776 4EBA 0078 		jsr		getHexPair
 455 8077a D138 0403 		add.b	%d0, srecCSum
 456 8077e 1038 0403 		move.b	srecCSum, %d0
 457 80782 4EBA 02EC 		jsr		printHexByte
 458 80786 41FA 0432 		lea		CRLF_MSG, %a0
 459 8078a 6100 FDA4 	    bsr.w   printString
 460               	failCSUM:
 461 8078e 4E75      		rts
 462               	
 463               	getRecType:
 464 80790 4EBA FDA8 		jsr		inChar
 465 80794 0C00 0053 		cmp.b	#'S', %d0
 466 80798 6600 FFF6 		bne		getRecType					| Toss extra chars
 467 8079c 4EBA FD9C 		jsr		inChar
 468 807a0 0200 000F 		andi.b	#0x0f, %d0
68K GAS  S68K_002.s 			page 10


 469 807a4 11C0 0400 		move.b	%d0, srecType
 470               	| Debug messages follow
 471 807a8 41FA 049D 		lea		debug_Srec_Typ_Msg, %a0		| Debug message
 472 807ac 6100 FD82 	    bsr.w   printString
 473 807b0 1038 0400 		move.b	srecType, %d0
 474 807b4 0600 0030 		add.b	#'0', %d0
 475 807b8 4EBA FD4E 		jsr		outChar
 476 807bc 41FA 03FC 		lea		CRLF_MSG, %a0
 477 807c0 6100 FD6E 	    bsr.w   printString
 478               	| Debug messages end
 479 807c4 4E75      		rts
 480               		
 481               	getBytCt:
 482 807c6 4EBA 0028 		jsr		getHexPair
 483 807ca 11C0 0403 		move.b 	%d0, srecCSum	| Initialize checksum
 484 807ce 11C0 0401 		move.b	%d0, srecByCt	| Byte count
 485               	| Debug messages follow
 486 807d2 41FA 0482 		lea		debug_Srec_BytCt_Msg, %a0
 487 807d6 6100 FD58 	    bsr.w   printString
 488 807da 1038 0401 		move.b	srecByCt, %d0
 489 807de 4EBA 0290 		jsr		printHexByte
 490 807e2 41FA 03D6 		lea		CRLF_MSG, %a0
 491 807e6 6100 FD48 	    bsr.w   printString
 492               	| Debug messages end
 493 807ea 5338 0401 		sub.b	#1, srecByCt
 494 807ee 4E75      		rts
 495               	
 496               	getHexPair:
 497 807f0 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 498 807f4 4EBA FD44 		jsr		inChar
 499 807f8 4EBA 0016 		jsr		toNibble
 500 807fc E900      		asl.b	#4, %d0
 501 807fe 1400      		move.b	%d0, %d2
 502 80800 4EBA FD38 		jsr		inChar
 503 80804 4EBA 000A 		jsr		toNibble
 504 80808 8002      		or.b	%d2, %d0
 505 8080a 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 506 8080e 4E75      		rts
 507               	
 508               	toNibble:
 509 80810 0C00 0041 		cmp.b	#'A', %d0
 510 80814 6C00 0008 		bge		doHexLetter
 511 80818 0400 0030 		sub.b	#'0', %d0
 512 8081c 4E75      		rts
 513               	doHexLetter:
 514 8081e 0400 004B 		sub.b	#'A'+10, %d0
 515 80822 4E75      		rts
 516               	
 517               	getAddr:
 518 80824 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 519 80828 0C38 0002 		cmp.b	#2, srecType
 519      0400 
 520 8082e 6600 0062 		bne		adrLen16
 521 80832 41FA 044A 		lea		debug_S2rec_Addr_Msg, %a0
 522 80836 6100 FCF8 		bsr		printString
 523 8083a 7400      		move.l	#0, %d2			| d2 stores address for accumulation of bytes
 524               		| Get the upper 8-bits of 24-bits
68K GAS  S68K_002.s 			page 11


 525 8083c 4EBA FFB2 		jsr		getHexPair
 526 80840 43F8 0403 		lea		srecCSum, %a1
 527 80844 D111      		add.b 	%d0, (%a1)
 528 80846 8480      		or.l	%d0, %d2
 529 80848 E182      		asl.l	#8, %d2
 530 8084a 2002      		move.l	%d2, %d0
 531 8084c 6100 0202 		bsr		printHexLong
 532 80850 41FA 0368 		lea		CRLF_MSG, %a0
 533 80854 6100 FCDA 	    bsr.w   printString
 534               		| Get the middle 8-bits of 24-bits
 535 80858 4EBA FF96 		jsr		getHexPair
 536 8085c D111      		add.b 	%d0, (%a1)
 537 8085e 8480      		or.l	%d0, %d2
 538 80860 E182      		asl.l	#8, %d2
 539 80862 2002      		move.l	%d2, %d0
 540 80864 6100 01EA 		bsr		printHexLong
 541 80868 41FA 0350 		lea		CRLF_MSG, %a0
 542 8086c 6100 FCC2 	    bsr.w   printString
 543               		| Get the lower 8-bits of 24-bits
 544 80870 4EBA FF7E 		jsr		getHexPair
 545 80874 D111      		add.b 	%d0, (%a1)
 546 80876 8480      		or.l	%d0, %d2
 547 80878 21C2 0404 		move.l	%d2, srecAddr		| Save the S record address
 548 8087c 5738 0401 		sub.b	#3, srecByCt
 549 80880 2002      		move.l	%d2, %d0
 550 80882 6100 01CC 		bsr		printHexLong
 551 80886 41FA 0332 		lea		CRLF_MSG, %a0
 552 8088a 6100 FCA4 	    bsr.w   printString
 553 8088e 6000 0036 		bra		past16
 554               	adrLen16:
 555 80892 41FA 03FD 		lea		debug_SXrec_Addr_Msg, %a0
 556 80896 6100 FC98 		bsr		printString
 557               	|	move.l	#0, %d2
 558 8089a 4EBA FF54 		jsr		getHexPair
 559 8089e 5738 0401 		sub.b	#3, srecByCt
 560 808a2 6100 01AC 		bsr		printHexLong
 561 808a6 41FA 0312 		lea		CRLF_MSG, %a0
 562 808aa 6100 FC84 	    bsr.w   printString
 563               	|	or.l	%d0, %d2
 564               	|	asl.l	#8, %d2
 565 808ae 4EBA FF40 		jsr		getHexPair
 566 808b2 5738 0401 		sub.b	#3, srecByCt
 567 808b6 6100 0198 		bsr		printHexLong
 568 808ba 41FA 02FE 		lea		CRLF_MSG, %a0
 569 808be 6100 FC70 	    bsr.w   printString
 570               	|	or.l	%d0, %d2
 571               	|	move.l	%d2, srecAddr
 572 808c2 5538 0401 		sub.b	#2, srecByCt
 573               	past16:
 574 808c6 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 575 808ca 4E75      		rts
 576               			
 577               	|||||||||||||||||||||||||||||
 578               	| Find and parse a hex number
 579               	|  Starting address in A0
 580               	|  Number returned in D0
 581               	|  Status in D1   (0 success, 1 fail)
68K GAS  S68K_002.s 			page 12


 582               	|  TODO: Try and merge first digit code with remaining digit code
 583               	parseNumber:
 584 808cc B180      	    eor.l   %d0, %d0		| Zero out d0
 585 808ce 1018      	    move.b  (%a0)+, %d0
 586 808d0 0C00 0020 	    cmp.b   #' ', %d0		|  Ignore all leading spaces
 587 808d4 67F6      	    beq.s   parseNumber
 588 808d6 0C00 0030 	    cmp.b   #'0', %d0       | Look for hex digits 0-9
 589 808da 6D14      	    blt.s	PNinvalid
 590 808dc 0C00 0039 	    cmp.b   #'9', %d0
 591 808e0 6F18      	    ble.s   PNfirstdigit1
 592               	
 593 808e2 0C00 0041 	    cmp.b   #'A', %d0      	| Look for hex digits A-F
 594 808e6 6D00 FD6C 	    blt   .invalid    
 595 808ea 0C00 0046 	    cmp.b   #'F', %d0
 596 808ee 6F04      	    ble.s   PNfirstdigit2
 597               	PNinvalid:
 598 808f0 7201      	    move.l  #1, %d1			| Invalid character, mark failure and return
 599 808f2 4E75      	    rts
 600               	PNfirstdigit2:
 601 808f4 0400 0037 	    sub.b   #'7', %d0       | Turn 'A' to 10
 602 808f8 6004      	    bra.s   PNloop
 603               	PNfirstdigit1:
 604 808fa 0400 0030 	    sub.b   #'0', %d0       | Turn '0' to 0
 605               	 PNloop:
 606 808fe 1218      	    move.b  (%a0)+, %d1      | Read in a digit
 607 80900 0C01 0030 	    cmp.b   #'0', %d1       | Look for hex digits 0-9
 608 80904 6D12      	    blt.s   PNend         	| Any other characters mean we're done reading
 609 80906 0C01 0039 	    cmp.b   #'9', %d1
 610 8090a 6F18      	    ble.s   PNdigit1
 611 8090c 0C01 0041 	    cmp.b   #'A', %d1      	| Look for hex digits A-F
 612 80910 6D06      	    blt.s   PNend
 613 80912 0C01 0046 	    cmp.b   #'F', %d1
 614 80916 6F06      	    ble.s   PNdigit2
 615               	
 616               	PNend:                       | We hit a non-hex digit character, we're done parsing
 617 80918 5388      	    subq.l  #1, %a0         | Move the pointer back before the end character we read
 618 8091a 7200      	    move.l  #0, %d1
 619 8091c 4E75      	    rts
 620               	PNdigit2:
 621 8091e 0401 0037 	    sub.b   #'7', %d1		| Turn 'A' to 10
 622 80922 6004      	    bra.s   PNdigit3
 623               	PNdigit1:
 624 80924 0401 0030 	    sub.b   #'0', %d1       | Turn '0' to 0
 625               	PNdigit3:
 626 80928 E988      	    lsl.l   #4, %d0        	| Shift over to the next nybble
 627 8092a D001      	    add.b   %d1, %d0       	| Place in our current nybble (could be or.b instead)
 628 8092c 60D0      	    bra.s   PNloop
 629               	    
 630               	
 631               	|||||||||||||||||||||||||||||
 632               	| Dumps a section of RAM to the screen
 633               	| Displays both hex values and ASCII characters
 634               	| d0 - Number of bytes to dump
 635               	| a0 - Start Address
 636               	dumpRAM:
 637 8092e 48E7 3820 	    movem.l %d2-%d4/%a2, -(%SP) | Save registers
 638 80932 2448      	    move.l  %a0, %a2           	| Save the start address
68K GAS  S68K_002.s 			page 13


 639 80934 2400      	    move.l  %d0, %d2           	| And the number of bytes
 640               	 .line:
 641 80936 200A      	    move.l  %a2, %d0          
 642 80938 6100 010E 	    bsr.w   printHexAddr     	| Starting address of this line
 643 8093c 41FA 0303 	    lea     msgColonSpace, %a0
 644 80940 6100 FBEE 	    bsr.w   printString
 645 80944 7610      	    move.l  #16, %d3         	| 16 Bytes can be printed on a line
 646 80946 2803      	    move.l  %d3, %d4       		| Save number of bytes on this line
 647               	 .hexbyte:
 648 80948 4A82      	    tst.l   %d2               	| Check if we're out of bytes
 649 8094a 6718      	    beq.s   .endbytesShort
 650 8094c 4A03      	    tst.b   %d3               	| Check if we're done this line
 651 8094e 673A      	    beq.s   .endbytes    
 652 80950 101A      	    move.b  (%a2)+, %d0        	| Read a byte in from RAM
 653 80952 6100 011C 	    bsr.w   printHexByte     	| Display it
 654 80956 103C 0020 	    move.b  #' ', %d0
 655 8095a 6100 FBAC 	    bsr.w   outChar          	| Space out bytes
 656 8095e 5383      	    subq.l  #1, %d3    
 657 80960 5382      	    subq.l  #1, %d2        
 658 80962 60E4      	    bra.s   .hexbyte
 659               	 .endbytesShort:
 660 80964 9803      	    sub.b   %d3, %d4           	| Make d4 the actual number of bytes on this line
 661 80966 103C 0020 	    move.b  #' ', %d0
 662               	 .endbytesShortLoop:
 663 8096a 4A03      	    tst.b   %d3               	| Check if we ended the line
 664 8096c 671C      	    beq.s   .endbytes
 665 8096e 103C 0020 	    move.b  #' ', %d0
 666 80972 6100 FB94 	    bsr.w   outChar          	| Three spaces to pad out
 667 80976 103C 0020 	    move.b  #' ', %d0
 668 8097a 6100 FB8C 	    bsr.w   outChar
 669 8097e 103C 0020 	    move.b  #' ', %d0
 670 80982 6100 FB84 	    bsr.w   outChar
 671               	    
 672 80986 5303      	    subq.b  #1, %d3
 673 80988 60E0      	    bra.s   .endbytesShortLoop
 674               	 .endbytes:
 675 8098a 95C4      	    suba.l  %d4, %a2        	| Return to the start address of this line
 676               	 .endbytesLoop:
 677 8098c 4A04      	    tst.b   %d4               	| Check if we are done printing ascii
 678 8098e 6700 0022 	    beq     .endline    
 679 80992 5304      	    subq.b  #1, %d4
 680 80994 101A      	    move.b  (%a2)+, %d0        	| Read the byte again
 681 80996 0C00 0020 	    cmp.b   #' ', %d0         	| Lowest printable character
 682 8099a 6D0C      	    blt.s   .unprintable
 683 8099c 0C00 007E 	    cmp.b   #'~', %d0         	| Highest printable character
 684 809a0 6E06      	    bgt.s   .unprintable
 685 809a2 6100 FB64 	    bsr.w   outChar
 686 809a6 60E4      	    bra.s   .endbytesLoop
 687               	 .unprintable:
 688 809a8 103C 002E 	    move.b  #'.', %d0
 689 809ac 6100 FB5A 	    bsr.w   outChar
 690 809b0 60DA      	    bra.s   .endbytesLoop
 691               	 .endline:
 692 809b2 41FA 0290 	    lea     msgNewline, %a0
 693 809b6 6100 FB78 	    bsr.w   printString
 694 809ba 4A82      	    tst.l   %d2
 695 809bc 6F04      	    ble.s   .end
68K GAS  S68K_002.s 			page 14


 696 809be 6000 FF76 	    bra.w   .line
 697               	 .end:
 698 809c2 4CDF 041C 	    movem.l (%SP)+, %d2-%d4/%a2		| Restore registers
 699 809c6 4E75      	    rts
 700               	
 701               	|||||||||||||||||||||||
 702               	| Deposit values into RAM
 703               	| d ADDR VAL VAL            Deposit value(s) into RAM
 704               	| d ADDR VAL VAL;           Deposit values, continue with values on next line
 705               	|  VAL VAL VAL;              - Continuing with further continue
 706               	| d: VAL VAL                Continue depositing values after the last address written to
 707               	|||||||||||||||||||||||
 708               	.deposit:
 709 809c8 1010      	    move.b  (%a0), %d0
 710 809ca 0C00 003A 	    cmp.b   #':', %d0       	| Check if we want to continue from last
 711 809ce 6730      	    beq.s   DepCont
 712               	    
 713 809d0 6100 FEFA 	    bsr.w   parseNumber         | Otherwise read the address
 714 809d4 4A01      	    tst.b   %d1
 715 809d6 6600 FC96 	    bne		.invalidAddr
 716 809da 2640      	    move.l  %d0, %a3           	| Save the start address
 717               	 DepLoop:
 718 809dc 1010      	    move.b  (%a0), %d0            
 719 809de 0C00 003B 	    cmp.b   #';', %d0          	| Check for continue
 720 809e2 6726      	    beq.s   DepMLine
 721 809e4 4A40      	    tst     %d0              	| Check for the end of line
 722 809e6 6700 003A 	    beq     DepEnd
 723               	    
 724 809ea 6100 FEE0 	    bsr		parseNumber         | Otherwise read a value
 725 809ee 4A01      	    tst.b   %d1
 726 809f0 6600 FC88 	    bne		.invalidVal
 727 809f4 0C40 00FF 	    cmp.w   #255, %d0          	| Make sure it's a byte
 728 809f8 6E00 FC80 	    bgt		.invalidVal
 729               	    
 730 809fc 16C0      	    move.b  %d0, (%a3)+        	| Store the value into memory
 731 809fe 60DC      	    bra.s   DepLoop
 732               	    
 733               	 DepCont:
 734 80a00 2679 0007 	    move.l  varCurAddr, %a3   	| Read in the last address 
 734      FBAA 
 735 80a06 5288      	    addq.l  #1, %a0           	| Skip over the ':'
 736 80a08 60D2      	    bra.s   DepLoop
 737               	    
 738               	 DepMLine:
 739 80a0a 41FA 0186 	    lea     msgDepositPrompt, %a0
 740 80a0e 6100 FB20 	    bsr.w   printString
 741 80a12 6100 FB4E 	    bsr.w   readLine          	| Read in the next line to be parsed
 742 80a16 6100 FBDC 	    bsr.w   lineToUpper         | Convert to uppercase
 743 80a1a 41F9 0007 	    lea     varLineBuf, %a0    	| Reset our buffer pointer
 743      FBAE 
 744 80a20 60BA      	    bra.s   DepLoop            	| And jump back to decoding
 745               	 DepEnd:
 746 80a22 23CB 0007 	    move.l  %a3, varCurAddr
 746      FBAA 
 747 80a28 6000 FC32 	    bra.w   .exit
 748               	
 749               	|||||||||||||||||||||||
68K GAS  S68K_002.s 			page 15


 750               	| run code
 751               	 .run:
 752 80a2c 6100 FE9E 	    bsr.w   parseNumber        	| Otherwise read the address
 753 80a30 4A01      	    tst.b   %d1
 754 80a32 6600 FC3A 	    bne		.invalidAddr
 755 80a36 2040      	    move.l  %d0, %a0
 756 80a38 4E90      	    jsr     (%a0)             	| Jump to the code! 
 757               	                                | Go as subroutine to allow code to return to us
 758 80a3a 4EBA FA90 	    jsr     monitorStart        | Warm start after returning so everything is in
 759               	                                | a known state.
 760               	
 761               	
 762               	|||||||||||||||||||||||
 763               	|| KEEP All printHex functions together ||
 764               	|||||||||||||||||||||||
 765               	| Print a hex word
 766               	printHexWord:
 767 80a3e 2F02      	    move.l  %d2, -(%SP)		| Save D2
 768 80a40 2400      	    move.l  %d0, %d2		| Save the address in d2
 769               	    
 770 80a42 E19A      	    rol.l   #0x8, %d2       | 4321 -> 3214
 771 80a44 E19A      	    rol.l   #0x8, %d2       | 3214 -> 2143 
 772 80a46 6018      	    bra.s   printHex_wordentry  | Print out the last 16 bits
 773               	|||||||||||||||||||||||
 774               	| Print a hex 24-bit address
 775               	printHexAddr:
 776 80a48 2F02      	    move.l %d2, -(%SP)   	| Save D2
 777 80a4a 2400      	    move.l %d0, %d2      	| Save the address in d2
 778               	    
 779 80a4c E19A      	    rol.l   #0x8, %d2     	| 4321 -> 3214
 780 80a4e 600A      	    bra.s   printHex_addrentry  | Print out the last 24 bits
 781               	|||||||||||||||||||||||
 782               	* Print a hex long
 783               	printHexLong:
 784 80a50 2F02      	    move.l  %d2, -(%SP)     | Save D2
 785 80a52 2400      	    move.l  %d0, %d2        | Save the address in d2
 786               	    
 787 80a54 E19A      	    rol.l   #0x8, %d2        | 4321 -> 3214 high byte in low
 788 80a56 2002      	    move.l  %d2, %d0
 789 80a58 6116      	    bsr.s   printHexByte  	| Print the high byte (24-31)
 790               	printHex_addrentry:     
 791 80a5a E19A      	    rol.l   #0x8, %d2        	| 3214 -> 2143 middle-high byte in low
 792 80a5c 2002      	    move.l  %d2, %d0              
 793 80a5e 6110      	    bsr.s   printHexByte  	| Print the high-middle byte (16-23)
 794               	printHex_wordentry:    
 795 80a60 E19A      	    rol.l   #0x8, %d2        	| 2143 -> 1432 Middle byte in low
 796 80a62 2002      	    move.l  %d2, %d0
 797 80a64 610A      	    bsr.s   printHexByte  	| Print the middle byte (8-15)
 798 80a66 E19A      	    rol.l   #0x8, %d2
 799 80a68 2002      	    move.l  %d2, %d0
 800 80a6a 6104      	    bsr.s   printHexByte  	| Print the low byte (0-7)
 801               	    
 802 80a6c 241F      	    move.l (%SP)+, %d2      | Restore D2
 803 80a6e 4E75      	    RTS
 804               	    
 805               	|||||||||||||||||||||||
 806               	| Print a hex byte
68K GAS  S68K_002.s 			page 16


 807               	|  - Takes byte in D0
 808               	printHexByte:
 809 80a70 2F02      	    move.l  %D2, -(%SP)
 810 80a72 7400      		move.l	#0, %d2
 811 80a74 1400      	    move.b  %d0, %d2
 812 80a76 E808      	    lsr.b   #0x4, %d0		| Shift down upper nibble
 813 80a78 0200 000F 		andi.b	#0xf, %d0
 814 80a7c 0600 0030 	    add.b   #'0', %d0
 815 80a80 0C00 0039 	    cmp.b   #'9', %d0		| Check if the hex number was from 0-9
 816 80a84 6F02      	    ble.s   PHBsecond
 817 80a86 5E00      	    add.b   #0x7, %d0			| Shift 0xA-0xF from ':' to 'A'
 818               	PHBsecond:
 819 80a88 6100 FA7E 	    bsr   outChar			| Print the digit
 820 80a8c 0202 000F 	    andi.b  #0x0F, %d2		| Now we want the lower digit Mask only the lower digit
 821 80a90 0602 0030 	    add.b   #'0', %d2
 822 80a94 0C02 0039 	    cmp.b   #'9', %d2     	| Same as before    
 823 80a98 6F02      	    ble.s   PHBend
 824 80a9a 5E02      	    add.b   #0x7, %D2
 825               	PHBend:
 826 80a9c 1002      	    move.b  %D2, %D0
 827 80a9e 6100 FA68 	    bsr	   outChar      	| Print the lower digit
 828 80aa2 241F      	    move.l  (%SP)+, %D2
 829 80aa4 4E75      	    rts
 830               		
 831               	
 832               	|||||
 833               	| Initializes the 68681 DUART port A as 9600 8N1 
 834               	initDuart:
 835 80aa6 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 835      000F 0004 
 836 80aae 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 836      000F 0004 
 837 80ab6 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 837      000F 0004 
 838               	    
 839 80abe 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 839      000F 0008 
 840 80ac6 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 840      000F 0002 
 841 80ace 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 841      000F 0000 
 842 80ad6 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 842      000F 0000 
 843               	    
 844 80ade 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 844      000F 0004 
 845               	
 846 80ae6 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 846      000F 0014 
 847 80aee 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 847      000F 0014 
 848 80af6 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 848      000F 0014 
 849               	    
 850 80afe 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 850      000F 0012 
 851 80b06 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
68K GAS  S68K_002.s 			page 17


 851      000F 0010 
 852 80b0e 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 852      000F 0010 
 853               	    
 854 80b16 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 854      000F 0014 
 855               		
 856 80b1e 13FC 0000 		move.b	#0x00, OPC		 | Output port configuration (all bit are outs)
 856      000F 001A 
 857 80b26 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 857      000F 001E 
 858 80b2e 4E75      	    rts    
 859               	
 860               	delay1Sec:
 861 80b30 203C 0003 		move.l	#200000, %d0	| rough count
 861      0D40 
 862               	delay1Loop:
 863 80b36 5380      		sub.l	#1, %d0			
 864 80b38 6600 FFFC 		bne		delay1Loop
 865 80b3c 4E75      		rts
 866               	
 867               	READINLINE:	  
 868 80b3e 5265 6164 		.ascii  "Reading in line"
 868      696E 6720 
 868      696E 206C 
 868      696E 65
 869 80b4d 0D0A 00   		dc.b CR,LF,EOT
 870               	L_TO_UPPER_MSG:  
 871 80b50 436F 6E76 		.ascii  "Convert line to upper case"
 871      6572 7420 
 871      6C69 6E65 
 871      2074 6F20 
 871      7570 7065 
 872 80b6a 0D0A 00   		dc.b CR,LF,EOT
 873               	WRITEOUTLINE:	  
 874 80b6d 5772 6974 		.ascii  "Writing out line"
 874      696E 6720 
 874      6F75 7420 
 874      6C69 6E65 
 875 80b7d 0D0A 00   		dc.b CR,LF,EOT
 876               	RAM_PASS_MSG:  
 877 80b80 5241 4D20 		.ascii  "RAM Test Passed"
 877      5465 7374 
 877      2050 6173 
 877      7365 64
 878 80b8f 0D0A 00   		dc.b CR,LF,EOT
 879               	msgDepositPrompt:
 880 80b92 3A20      	    .ascii	": "
 881 80b94 00        		dc.b 	EOT
 882               	BANNER_MSG:	
 883 80b95 5349 4D50 		.ascii  "SIMPLE-68008 CPU"
 883      4C45 2D36 
 883      3830 3038 
 883      2043 5055 
 884 80ba5 0D0A 00   		dc.b CR,LF,EOT
 885               	msgInvalidCommand:
 886 80ba8 496E 7661 	    .ascii "Invalid Command"
68K GAS  S68K_002.s 			page 18


 886      6C69 6420 
 886      436F 6D6D 
 886      616E 64
 887 80bb7 0D0A 00   		dc.b CR,LF,EOT
 888               	CRLF_MSG:	
 889 80bba 0D0A 00   		dc.b CR,LF,EOT
 890               	msgHelp:
 891 80bbd 4176 6169 	    .ascii	"Available Commands: "
 891      6C61 626C 
 891      6520 436F 
 891      6D6D 616E 
 891      6473 3A20 
 892 80bd1 0D0A      		dc.b	CR,LF
 893 80bd3 2028 4529 	    .ascii	" (E)xamine    (D)eposit    (R)un     (L)oad     (H)elp"
 893      7861 6D69 
 893      6E65 2020 
 893      2020 2844 
 893      2965 706F 
 894 80c09 0D0A 00   		dc.b	CR,LF,EOT
 895               	ldSRecMsg:
 896 80c0c 4C6F 6164 	    .ascii	"Load S-Record"
 896      2053 2D52 
 896      6563 6F72 
 896      64
 897 80c19 0D0A 00   		dc.b	CR,LF,EOT
 898               	msgInvalidAddress:
 899 80c1c 496E 7661 	    .ascii	"Invalid Address"
 899      6C69 6420 
 899      4164 6472 
 899      6573 73
 900 80c2b 0D0A 00   		dc.b 	CR,LF,EOT
 901               	msgInvalidValue:
 902 80c2e 496E 7661 	    .ascii	"Invalid Value"
 902      6C69 6420 
 902      5661 6C75 
 902      65
 903 80c3b 0D0A 00   		dc.b	CR,LF,EOT
 904               	msgPrompt:
 905 80c3e 3E20      		.ascii "> "
 906 80c40 00        	    dc.b EOT
 907               	msgColonSpace:
 908 80c41 3A20      	    .ascii ": "
 909 80c43 00        	    dc.b EOT
 910               	msgNewline:
 911 80c44 0D0A 00   	    dc.b CR,LF,EOT
 912               	debug_Srec_Typ_Msg:
 913 80c47 5320 5265 		.ascii	"S Record Type="
 913      636F 7264 
 913      2054 7970 
 913      653D 
 914 80c55 00        	    dc.b EOT
 915               	debug_Srec_BytCt_Msg:
 916 80c56 5320 5265 		.ascii	"S Record Byte Count="
 916      636F 7264 
 916      2042 7974 
 916      6520 436F 
 916      756E 743D 
68K GAS  S68K_002.s 			page 19


 917 80c6a 00        	    dc.b EOT
 918               	debug_Srec_CSum_Msg:
 919 80c6b 5320 5265 		.ascii	"S Record Checksum="
 919      636F 7264 
 919      2043 6865 
 919      636B 7375 
 919      6D3D 
 920 80c7d 00        	    dc.b EOT
 921               	debug_S2rec_Addr_Msg:
 922 80c7e 5332 2052 		.ascii	"S2 Record Address="
 922      6563 6F72 
 922      6420 4164 
 922      6472 6573 
 922      733D 
 923 80c90 00        	    dc.b EOT
 924               	debug_SXrec_Addr_Msg:
 925 80c91 5320 286E 		.ascii	"S (not 2) Record Address="
 925      6F74 2032 
 925      2920 5265 
 925      636F 7264 
 925      2041 6464 
 926 80caa 00        	    dc.b EOT
 927               	debug_Srec_LDData_Msg:
 928 80cab 4C6F 6164 	    .ascii	"Load Data Loop start"
 928      2044 6174 
 928      6120 4C6F 
 928      6F70 2073 
 928      7461 7274 
 929 80cbf 0D0A 00   		dc.b 	CR,LF,EOT
 930               	
 931               	
 932               	MAX_LINE_LENGTH = 80
 933               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
 934               	varCurAddr = varLineBuf-4
68K GAS  S68K_002.s 			page 20


DEFINED SYMBOLS
          S68K_002.s:6      *ABS*:0000000000000000 RAM_START
          S68K_002.s:7      *ABS*:000000000007fffc STACK_END
          S68K_002.s:8      *ABS*:000000000007ffff RAM_END
          S68K_002.s:9      *ABS*:0000000000080000 ROM_START
          S68K_002.s:10     *ABS*:0000000000080400 ROM_CODE
          S68K_002.s:12     *ABS*:000000000008ffff ROM_END
          S68K_002.s:17     *ABS*:00000000000f0000 DUART
          S68K_002.s:18     *ABS*:00000000000f0000 MRA
          S68K_002.s:19     *ABS*:00000000000f0002 SRA
          S68K_002.s:20     *ABS*:00000000000f0002 CSRA
          S68K_002.s:21     *ABS*:00000000000f0004 CRA
          S68K_002.s:22     *ABS*:00000000000f0006 RBA
          S68K_002.s:23     *ABS*:00000000000f0006 TBA
          S68K_002.s:24     *ABS*:00000000000f0008 ACR
          S68K_002.s:25     *ABS*:00000000000f000a ISR
          S68K_002.s:26     *ABS*:00000000000f000a IMR
          S68K_002.s:27     *ABS*:00000000000f0010 MRB
          S68K_002.s:28     *ABS*:00000000000f0012 SRB
          S68K_002.s:29     *ABS*:00000000000f0012 CSRB
          S68K_002.s:30     *ABS*:00000000000f0014 CRB
          S68K_002.s:31     *ABS*:00000000000f0016 RBB
          S68K_002.s:32     *ABS*:00000000000f0016 TBB
          S68K_002.s:33     *ABS*:00000000000f0018 IVR
          S68K_002.s:34     *ABS*:00000000000f001a OPC
          S68K_002.s:35     *ABS*:00000000000f001a INU
          S68K_002.s:36     *ABS*:00000000000f001c OPS
          S68K_002.s:37     *ABS*:00000000000f001e OPR
          S68K_002.s:42     *ABS*:0000000000000007 BEL
          S68K_002.s:43     *ABS*:0000000000000008 BKSP
          S68K_002.s:44     *ABS*:0000000000000009 TAB
          S68K_002.s:45     *ABS*:000000000000000a LF
          S68K_002.s:46     *ABS*:000000000000000d CR
          S68K_002.s:47     *ABS*:000000000000001b ESC
          S68K_002.s:48     *ABS*:0000000000000000 EOT
          S68K_002.s:50     *ABS*:0000000000000003 CTRLC
          S68K_002.s:51     *ABS*:0000000000000018 CTRLX
          S68K_002.s:54     .text:0000000000000400 _srecType
          S68K_002.s:55     .text:0000000000000401 _srecByCt
          S68K_002.s:56     .text:0000000000000402 _srecData
          S68K_002.s:57     .text:0000000000000403 _srecCSum
          S68K_002.s:58     .text:0000000000000404 _srecAddr
          S68K_002.s:60     *ABS*:0000000000000400 srecType
          S68K_002.s:61     *ABS*:0000000000000401 srecByCt
          S68K_002.s:62     *ABS*:0000000000000402 srecData
          S68K_002.s:63     *ABS*:0000000000000403 srecCSum
          S68K_002.s:64     *ABS*:0000000000000404 srecAddr
          S68K_002.s:175    .text:0000000000080502 FERVR2
          S68K_002.s:100    .text:000000000008045c loop1stLoc
          S68K_002.s:173    .text:0000000000080502 failBitTest
          S68K_002.s:115    .text:000000000008047c loopAdrFill
          S68K_002.s:127    .text:000000000008049a loopAdrCk
          S68K_002.s:174    .text:0000000000080502 failAdrTest
          S68K_002.s:142    .text:00000000000804b4 fillSRAM
          S68K_002.s:146    .text:00000000000804c0 fillSRAMLoop
          S68K_002.s:834    .text:0000000000080aa6 initDuart
          S68K_002.s:155    .text:00000000000804cc monitorStart
68K GAS  S68K_002.s 			page 21


          S68K_002.s:882    .text:0000000000080b95 BANNER_MSG
          S68K_002.s:200    .text:0000000000080530 printString1
          S68K_002.s:876    .text:0000000000080b80 RAM_PASS_MSG
          S68K_002.s:163    .text:00000000000804dc interpLoop
          S68K_002.s:904    .text:0000000000080c3e msgPrompt
          S68K_002.s:201    .text:0000000000080530 printString
          S68K_002.s:230    .text:0000000000080562 readLine
          S68K_002.s:287    .text:00000000000805f4 lineToUpper
          S68K_002.s:304    .text:0000000000080612 parseLine
          S68K_002.s:182    .text:0000000000080508 outChar1
          S68K_002.s:183    .text:0000000000080508 outChar
          S68K_002.s:191    .text:000000000008051c outChar2
          S68K_002.s:202    .text:0000000000080530 PSloop
          S68K_002.s:208    .text:0000000000080538 PSend
          S68K_002.s:216    .text:000000000008053a inChar1
          S68K_002.s:217    .text:000000000008053a inChar
          S68K_002.s:223    .text:000000000008054e inChar2
                            *ABS*:000000000007fbae varLineBuf
          S68K_002.s:234    .text:000000000008056e RLloop
          S68K_002.s:251    .text:000000000008059a RLBS
          S68K_002.s:262    .text:00000000000805b8 RLlineClr
          S68K_002.s:276    .text:00000000000805dc RLEndLn
          S68K_002.s:244    .text:000000000008058a .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_002.s:266    .text:00000000000805be RLlineClrloop
          S68K_002.s:289    .text:00000000000805fa LUloop
          S68K_002.s:296    .text:000000000008060c LUnext
          S68K_002.s:307    .text:000000000008061c PLfindCommand
          S68K_002.s:353    .text:0000000000080686 .examine
          S68K_002.s:708    .text:00000000000809c8 .deposit
          S68K_002.s:751    .text:0000000000080a2c .run
          S68K_002.s:332    .text:0000000000080662 .help
          S68K_002.s:421    .text:0000000000080710 loadSRec
          S68K_002.s:326    .text:000000000008065c .exit
          S68K_002.s:323    .text:0000000000080654 .invalid
          S68K_002.s:885    .text:0000000000080ba8 msgInvalidCommand
          S68K_002.s:890    .text:0000000000080bbd msgHelp
          S68K_002.s:336    .text:000000000008066e .invalidAddr
          S68K_002.s:898    .text:0000000000080c1c msgInvalidAddress
          S68K_002.s:340    .text:000000000008067a .invalidVal
          S68K_002.s:901    .text:0000000000080c2e msgInvalidValue
          S68K_002.s:583    .text:00000000000808cc parseNumber
          S68K_002.s:358    .text:0000000000080692 .exloop
          S68K_002.s:372    .text:00000000000806b6 .exrange
          S68K_002.s:381    .text:00000000000806c8 .exlength
          S68K_002.s:389    .text:00000000000806da .exinter
          S68K_002.s:378    .text:00000000000806c4 .exquick
          S68K_002.s:385    .text:00000000000806d2 .exend
          S68K_002.s:636    .text:000000000008092e dumpRAM
          S68K_002.s:394    .text:00000000000806e8 .exinterend
          S68K_002.s:401    .text:00000000000806fc .exinterpage
          S68K_002.s:895    .text:0000000000080c0c ldSRecMsg
          S68K_002.s:463    .text:0000000000080790 getRecType
          S68K_002.s:481    .text:00000000000807c6 getBytCt
          S68K_002.s:517    .text:0000000000080824 getAddr
          S68K_002.s:927    .text:0000000000080cab debug_Srec_LDData_Msg
          S68K_002.s:430    .text:0000000000080732 loopSData
68K GAS  S68K_002.s 			page 22


          S68K_002.s:435    .text:0000000000080744 sRecDataDone
          S68K_002.s:439    .text:000000000008074c getLdData
          S68K_002.s:451    .text:000000000008076e getChksum
          S68K_002.s:496    .text:00000000000807f0 getHexPair
          S68K_002.s:446    .text:0000000000080764 skipLdData
          S68K_002.s:918    .text:0000000000080c6b debug_Srec_CSum_Msg
          S68K_002.s:808    .text:0000000000080a70 printHexByte
          S68K_002.s:888    .text:0000000000080bba CRLF_MSG
          S68K_002.s:460    .text:000000000008078e failCSUM
          S68K_002.s:912    .text:0000000000080c47 debug_Srec_Typ_Msg
          S68K_002.s:915    .text:0000000000080c56 debug_Srec_BytCt_Msg
          S68K_002.s:508    .text:0000000000080810 toNibble
          S68K_002.s:513    .text:000000000008081e doHexLetter
          S68K_002.s:554    .text:0000000000080892 adrLen16
          S68K_002.s:921    .text:0000000000080c7e debug_S2rec_Addr_Msg
          S68K_002.s:783    .text:0000000000080a50 printHexLong
          S68K_002.s:573    .text:00000000000808c6 past16
          S68K_002.s:924    .text:0000000000080c91 debug_SXrec_Addr_Msg
          S68K_002.s:597    .text:00000000000808f0 PNinvalid
          S68K_002.s:603    .text:00000000000808fa PNfirstdigit1
          S68K_002.s:600    .text:00000000000808f4 PNfirstdigit2
          S68K_002.s:605    .text:00000000000808fe PNloop
          S68K_002.s:616    .text:0000000000080918 PNend
          S68K_002.s:623    .text:0000000000080924 PNdigit1
          S68K_002.s:620    .text:000000000008091e PNdigit2
          S68K_002.s:625    .text:0000000000080928 PNdigit3
          S68K_002.s:640    .text:0000000000080936 .line
          S68K_002.s:775    .text:0000000000080a48 printHexAddr
          S68K_002.s:907    .text:0000000000080c41 msgColonSpace
          S68K_002.s:647    .text:0000000000080948 .hexbyte
          S68K_002.s:659    .text:0000000000080964 .endbytesShort
          S68K_002.s:674    .text:000000000008098a .endbytes
          S68K_002.s:662    .text:000000000008096a .endbytesShortLoop
          S68K_002.s:676    .text:000000000008098c .endbytesLoop
          S68K_002.s:691    .text:00000000000809b2 .endline
          S68K_002.s:687    .text:00000000000809a8 .unprintable
          S68K_002.s:910    .text:0000000000080c44 msgNewline
          S68K_002.s:697    .text:00000000000809c2 .end
          S68K_002.s:733    .text:0000000000080a00 DepCont
          S68K_002.s:717    .text:00000000000809dc DepLoop
          S68K_002.s:738    .text:0000000000080a0a DepMLine
          S68K_002.s:745    .text:0000000000080a22 DepEnd
                            *ABS*:000000000007fbaa varCurAddr
          S68K_002.s:879    .text:0000000000080b92 msgDepositPrompt
          S68K_002.s:766    .text:0000000000080a3e printHexWord
          S68K_002.s:794    .text:0000000000080a60 printHex_wordentry
          S68K_002.s:790    .text:0000000000080a5a printHex_addrentry
          S68K_002.s:818    .text:0000000000080a88 PHBsecond
          S68K_002.s:825    .text:0000000000080a9c PHBend
          S68K_002.s:860    .text:0000000000080b30 delay1Sec
          S68K_002.s:862    .text:0000000000080b36 delay1Loop
          S68K_002.s:867    .text:0000000000080b3e READINLINE
          S68K_002.s:870    .text:0000000000080b50 L_TO_UPPER_MSG
          S68K_002.s:873    .text:0000000000080b6d WRITEOUTLINE

NO UNDEFINED SYMBOLS
