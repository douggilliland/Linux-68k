68K GAS  S68K_002.s 			page 1


   1               	| S68K_002.s - 68K Monitor with extensions
   2               	|	Adds S Record loader
   3               	| Land Boards, LLC
   4               	|	(c) 2024
   5               	| Use it however you want
   6               	| Borrowed init code from 
   7               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   8               	|
   9               	| Added S-Record load code
  10               	|	Uses SRAM from 0x400-0x407
  11               	
  12               	RAM_START	= 0x00000	| Beginning of the SRAM
  13               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
  14               	RAM_END		= 0x7FFFF	| 512KB SRAM
  15               	ROM_START	= 0x80000	| ROM start
  16               	ROM_CODE	= ROM_START+1024| Skip vector table
  17               	*ROM_END	= 0x87FFF	| End of 32KB EPROM
  18               	ROM_END		= 0x8FFFF	| End of 64KB EPROM
  19               	
  20               	|||||||||||||||||||||||||||||||||
  21               	| 68681 Duart Register Addresses
  22               	|
  23               	DUART = 0x0F0000	  | Base Addr of DUART
  24               	MRA   = DUART+0		  | Mode Register A           (R/W)
  25               	SRA   = DUART+2       | Status Register A         (r)
  26               	CSRA  = DUART+2       | Clock Select Register A   (w)
  27               	CRA   = DUART+4       | Commands Register A       (w)
  28               	RBA   = DUART+6       | Receiver Buffer A         (r)
  29               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  30               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  31               	ISR   = DUART+10      | Interrupt Status Register (R)
  32               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  33               	MRB   = DUART+16      | Mode Register B           (R/W)
  34               	SRB   = DUART+18      | Status Register B         (R)
  35               	CSRB  = DUART+18      | Clock Select Register B   (W)
  36               	CRB   = DUART+20      | Commands Register B       (W)
  37               	RBB   = DUART+22      | Reciever Buffer B         (R)
  38               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  39               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  40               	OPC   = DUART+26      | Output port config        (W)
  41               	INU   = DUART+26      | Input port (unlatched)    (R)
  42               	OPS   = DUART+28      | Output port Set           (W)
  43               	OPR   = DUART+30      | Output port Clear         (W)
  44               	
  45               	||||||||||||||||||||||||||||||||||
  46               	| ASCII Control Characters
  47               	|
  48               	BEL   = 0x07
  49               	BKSP  = 0x08       | CTRL-H
  50               	TAB   = 0x09
  51               	LF    = 0x0A
  52               	CR    = 0x0D
  53               	ESC   = 0x1B
  54               	EOT	  = 0x00
  55               	
  56               	CTRLC	=	0x03
  57               	CTRLX	=	0x18     | Line Clear
68K GAS  S68K_002.s 			page 2


  58               	
  59 0000 0000 0000 		.ORG    0x000400
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  60 0400 00        	_srecType:	ds.b	1		| S1-S9 stored as binary 1-9
  61 0401 00        	_srecByCt:	ds.b	1		| Byte Count
  62 0402 00        	_srecData:	ds.b	1 		| Data
  63 0403 00        	_srecCSum:	ds.b	1 		| S-Record Checksum
  64 0404 0000 0000 	_srecAddr:	ds.l	1		| S Record current byte address
  65               	
  66               	srecType	=		0x000400	| S1-S9 stored as binary 1-9
  67               	srecByCt	=		0x000401	| Byte Count
  68               	srecData	=		0x000402	| Data
  69               	srecCSum	=		0x000403	| S-Record Checksum
  70               	srecAddr	=		0x000404	| S Record current byte address
  71               	
  72 0408 0000 0000 		.ORG	ROM_START
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73               	
  74               	| FIRST 8 bytes loaded after reset |
  75 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  76 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  77               	
  78 80008 0000 0000 	        .ORG ROM_CODE
  78      0000 0000 
  78      0000 0000 
  78      0000 0000 
  78      0000 0000 
  79 80400 4E71      		nop
  80 80402 4FF9 0007 		lea			STACK_END,%sp
  80      FFFC 
  81 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  81      0008 0000 
  82 80410 4E71      		nop
  83               	| LEDs
  84 80412 13FC 0000 		move.b	#0x00, OPC		| Output port configuration (all bit are outs)
  84      000F 001A 
  85 8041a 13FC 00FC 		move.b	#0xFC, OPR		| Clear all outputs
  85      000F 001E 
  86 80422 13FC 0004 		move.b	#0x04, OPS		| Turn off LED on DUART O2
  86      000F 001C 
  87               	|
  88               	| Test the first two SRAM location
  89               	|
  90 8042a 203C DEAD 		move.l	#0xDEADBEEF, %d0		| Test Pattern #1
  90      BEEF 
  91 80430 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  92 80434 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  93 80436 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  94 80438 B042      		cmp			%d2, %d0
  95 8043a 6600 00C6 		bne			FERVR2						
  96 8043e 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
68K GAS  S68K_002.s 			page 3


  96      AAAA 
  97 80444 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  98 80448 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  99 8044a 2611      		move.l	(%a1), %d3				| Read back
 100 8044c B243      		cmp			%d3, %d1
 101 8044e 6600 00B2 		bne			FERVR2
 102 80452 4E71      		nop
 103               	| Test bits of first location (as bytes)
 104 80454 7001      		move.l	#1, %d0
 105 80456 207C 0000 		move.l	#0, %a0
 105      0000 
 106               	loop1stLoc:
 107 8045c 1080      		move.b	%d0, (%a0)
 108 8045e 1210      		move.b	(%a0), %d1
 109 80460 B200      		cmp.b		%d0, %d1
 110 80462 6600 009E 		bne			failBitTest
 111 80466 E348      		lsl			#1, %d0
 112 80468 0C80 0000 		cmp.l		#0x00000100, %d0
 112      0100 
 113 8046e 6600 FFEC 		bne			loop1stLoc
 114               	|
 115               	| Test all address lines, 512KB SRAM
 116               	| Write incrementing pattern to data bits
 117               	|
 118 80472 7001      		move.l	#1, %d0		| Fill pattern
 119 80474 7401      		move.l	#1, %d2
 120 80476 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
 120      0001 
 121               	loopAdrFill:
 122 8047c 1080      		move.b	%d0,(%a0)	| Do the write
 123 8047e 5240      		addq		#1, %d0		| Increment the pattern
 124 80480 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
 125 80482 E38A      		lsl.l		#1, %d2		| Shift temp addr
 126 80484 2042      		move.l	%d2, %a0	| Put back into addr reg
 127 80486 0C82 0008 		cmp.l		#0x00080000,%d2
 127      0000 
 128 8048c 6600 FFEE 		bne			loopAdrFill
 129               	| Check
 130 80490 7001      		move.l	#1, %d0
 131 80492 7401      		move.l	#1, %d2
 132 80494 207C 0000 		move.l	#1, %a0
 132      0001 
 133               	loopAdrCk:
 134 8049a 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 135 8049c B200      		cmp.b		%d0, %d1
 136 8049e 6600 0062 		bne			failAdrTest
 137 804a2 5240      		addq		#1, %d0
 138 804a4 2408      		move.l	%a0, %d2 
 139 804a6 E38A      		lsl.l		#1, %d2
 140 804a8 2042      		move.l	%d2, %a0
 141 804aa 0C82 0008 		cmp.l		#0x00080000,%d2
 141      0000 
 142 804b0 6600 FFE8 		bne			loopAdrCk
 143               		
 144               	|
 145               	| Fill SRAM with 0x00 values
 146               	| 512KB fill takes about 2.5 seconds at 10 MHz CPU speed
68K GAS  S68K_002.s 			page 4


 147               	|
 148               	fillSRAM:
 149 804b4 41F8 0000 		lea		RAM_START, %a0		| Start at base RAM address
 150 804b8 43F9 0007 		lea		RAM_END, %a1		| End when reach end RAM space
 150      FFFF 
 151 804be 7000      		move.l	#0x00, %d0			| Fill with zeros
 152               	fillSRAMLoop:
 153 804c0 20C0      		move.l	%d0, (%a0)+			| Long fills are faster
 154 804c2 B3C8      		cmpa.l	%a0, %a1
 155 804c4 6E00 FFFA 		bgt		fillSRAMLoop
 156               	
 157               	|
 158               	| Done with address test of SRAM
 159               	|
 160 804c8 4EBA 05AA 		jsr     initDuart       	| Setup the serial port
 161               	monitorStart:					| Warm start
 162 804cc 41FA 0695 		lea		BANNER_MSG, %a0
 163 804d0 4EBA 005E 		jsr		printString1
 164 804d4 41FA 0678 		lea		RAM_PASS_MSG, %a0
 165 804d8 4EBA 0056 		jsr		printString1
 166               	|
 167               	| Interpreter Loop
 168               	|
 169               	interpLoop:
 170 804dc 41FA 072E 	    lea     msgPrompt, %a0	| Prompt
 171 804e0 6100 004E 	    bsr.w   printString
 172 804e4 13FC 0004 		move.b	#0x04, OPR		| Turn on LED
 172      000F 001E 
 173 804ec 4EBA 0074 		jsr		readLine		| Blocking read of line
 174 804f0 13FC 0004 		move.b	#0x04, OPS		| Turn off LED
 174      000F 001C 
 175 804f8 4EBA 00FA 		jsr		lineToUpper
 176 804fc 4EBA 0114 		jsr		parseLine
 177 80500 60DA      		bra.s	interpLoop
 178               		
 179               	failBitTest:
 180               	failAdrTest:
 181               	FERVR2:
 182 80502 4E71      		nop
 183 80504 4EFA FFFC 		jmp	FERVR2
 184               	
 185               	|||||
 186               	| Writes a character to Port A, blocking if not ready (Full buffer)
 187               	|  - Takes a character in D0
 188               	outChar1:
 189               	outChar:
 190 80508 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 190      000F 0002 
 191 80510 6700 FFF6 	    beq     outChar1     
 192 80514 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 192      0006 
 193 8051a 4E75      	    rts
 194               	
 195               	| Writes a character to Port A, blocking if not ready (Full buffer)
 196               	|  - Takes a character in D0
 197               	outChar2:
 198 8051c 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
68K GAS  S68K_002.s 			page 5


 198      000F 0012 
 199 80524 6700 FFF6 	    beq     outChar2     
 200 80528 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 200      0016 
 201 8052e 4E75      	    rts
 202               	
 203               	******
 204               	* Print a null terminated string
 205               	*
 206               	printString1:
 207               	printString:
 208               	PSloop:
 209 80530 1018      	    move.b  (%a0)+, %d0  | Read in character
 210 80532 6704      	    beq.s   PSend         | Check for the null
 211               	    
 212 80534 61D2      	    bsr.s   outChar      | Otherwise write the character
 213 80536 60F8      	    bra.s   PSloop        | And continue
 214               	PSend:
 215 80538 4E75      	    rts
 216               	
 217               	
 218               	|||||
 219               	| Reads in a character from Port A, blocking if none available
 220               	|  - Returns character in D0
 221               	|    
 222               	inChar1:
 223               	inChar:
 224 8053a 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 224      000F 0002 
 225 80542 6700 FFF6 	    beq     inChar1
 226 80546 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 226      0006 
 227 8054c 4E75      	    rts
 228               	
 229               	inChar2:
 230 8054e 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 230      000F 0012 
 231 80556 6700 FFF6 	    beq     inChar2
 232 8055a 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 232      0016 
 233 80560 4E75      	    rts
 234               	
 235               	| Read in a line into the line buffer
 236               	readLine:
 237 80562 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 238 80566 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 238      FBAE 
 239 8056c B542      	    eor.w   %d2, %d2           	| Clear the character counter
 240               	 RLloop:
 241 8056e 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 242 80572 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 243 80576 6722      	    beq.s   RLBS
 244 80578 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 245 8057c 673A      	    beq.s   RLlineClr
 246 8057e 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 247 80582 6758      	    beq.s   RLEndLn
 248 80584 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
68K GAS  S68K_002.s 			page 6


 249 80588 67E4      	    beq.s   RLloop            	| Ignore LFs and get the next character
 250               	 .char:                      	| Normal character to be inserted into the buffer
 251 8058a 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 252 8058e 6CDE      	    bge.s   RLloop            	| If the buffer is full ignore the character
 253 80590 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 254 80592 5242      	    addq.w  #1, %d2           	| Increment character count
 255 80594 6100 FF72 	    bsr.w   outChar          	| Echo the character
 256 80598 60D4      	    bra.s   RLloop            	| And get the next one
 257               	 RLBS:
 258 8059a 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 259 8059c 67D0      	    beq.s   RLloop            	| Then ignore it
 260 8059e 6100 FF68 	    bsr.w   outChar          	| Backspace
 261 805a2 103C 0020 	    move.b  #' ', %d0
 262 805a6 6100 FF60 	    bsr.w   outChar          	| Space
 263 805aa 103C 0008 	    move.b  #BKSP, %d0
 264 805ae 6100 FF58 	    bsr.w   outChar          	| Backspace
 265 805b2 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 266 805b4 5382      	    subq.l  #1, %d2           	| And current character count
 267 805b6 60B6      	    bra.s   RLloop            	| And goto the next character
 268               	 RLlineClr:
 269 805b8 4A42      	    tst     %d2               	| Anything to clear?
 270 805ba 67B2      	    beq.s   RLloop            	| If not, fetch the next character
 271 805bc 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 272               	 RLlineClrloop:
 273 805be 103C 0008 	    move.b  #BKSP, %d0
 274 805c2 6100 FF44 	    bsr.w   outChar          	| Backspace
 275 805c6 103C 0020 	    move.b  #' ', %d0
 276 805ca 6100 FF3C 	    bsr.w   outChar          	| Space
 277 805ce 103C 0008 	    move.b  #BKSP, %d0
 278 805d2 6100 FF34 	    bsr.w   outChar          	| Backspace
 279 805d6 5342      	    subq.w  #1, %d2          
 280 805d8 66E4      	    bne.s   RLlineClrloop   	| Go till the start of the line
 281 805da 6092      	    bra.s   RLloop   
 282               	 RLEndLn:
 283 805dc 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 284 805e0 103C 000A 	    move.b  #LF, %d0
 285 805e4 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 286 805e8 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 287 805ec 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 288 805ee 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 289 805f2 4E75      	    rts                      	| And return
 290               	
 291               	
 292               	| Convert line buffer to upper case
 293               	lineToUpper:
 294 805f4 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 294      FBAE 
 295               	 LUloop:
 296 805fa 1010      	    move.b  (%a0), %d0        | Read in a character
 297 805fc 0C00 0061 	    cmp.b   #'a', %d0         
 298 80600 6D0A      	    blt.s   LUnext            | Is it less than lower-case 'a', then move on
 299 80602 0C00 007A 	    cmp.b   #'z', %d0
 300 80606 6E04      	    bgt.s   LUnext            | Is it greater than lower-case 'z', then move on
 301 80608 0400 0020 	    sub.b   #0x20, %d0         | Then convert a to A, b to B, etc.
 302               	 LUnext:
 303 8060c 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 304 8060e 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
68K GAS  S68K_002.s 			page 7


 305 80610 4E75      	    rts
 306               	
 307               	|
 308               	| Parse Line
 309               	|
 310               	parseLine:
 311 80612 48E7 0030 	    movem.l %a2-%a3, -(%SP)     | Save registers
 312 80616 41F9 0007 	    lea     varLineBuf, %a0
 312      FBAE 
 313               	 PLfindCommand:
 314 8061c 1018      	    move.b  (%a0)+, %d0
 315 8061e 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 316 80622 6700 FFF8 	    beq.w   PLfindCommand    
 317 80626 0C00 0045 	    cmp.b   #'E', %d0           | Examine command
 318 8062a 6700 005A 	    beq.w   .examine
 319 8062e 0C00 0044 	    cmp.b   #'D', %d0           | Deposit command
 320 80632 6700 0362 	    beq.w   .deposit
 321 80636 0C00 0052 	    cmp.b   #'R', %d0           | Run command
 322 8063a 6700 03BE 	    beq.w   .run
 323 8063e 0C00 0048 	    cmp.b   #'H', %d0           | Help command
 324 80642 6700 001E 	    beq.w   .help
 325 80646 0C00 004C 	    cmp.b   #'L', %d0           | Help command
 326 8064a 6700 00C4 	    beq.w   loadSRec
 327 8064e 0C00 0000 	    cmp.b   #0, %d0             | Ignore blank lines
 328 80652 6708      	    beq.s   .exit               
 329               	 .invalid:   
 330 80654 41FA 0520 	    lea     msgInvalidCommand, %a0
 331 80658 6100 FED6 	    bsr.w   printString
 332               	 .exit:
 333 8065c 4CDF 0C00 	    movem.l (%SP)+, %a2-%a3     | Restore registers
 334 80660 4E75      	    rts
 335               	
 336               	|||||||||||||||||||||||||||||||
 337               	|| HELP command
 338               	 .help:
 339 80662 41FA 0527 	    lea     msgHelp, %a0
 340 80666 6100 FEC8 	    bsr.w   printString
 341 8066a 6000 FFF0 	    bra.w   .exit
 342               	 .invalidAddr:
 343 8066e 41FA 057A 	    lea     msgInvalidAddress, %a0
 344 80672 6100 FEBC 	    bsr.w   printString
 345 80676 6000 FFE4 	    bra.w   .exit
 346               	 .invalidVal:
 347 8067a 41FA 0580 	    lea     msgInvalidValue, %a0
 348 8067e 6100 FEB0 	    bsr.w   printString
 349 80682 6000 FFD8 	    bra.w   .exit
 350               		
 351               	|||||||||||||||||||||||||||||||
 352               	| Examines memory addresses
 353               	| Valid modes:
 354               	|   e ADDR                  Displays a single byte
 355               	|   e ADDR-ADDR             Dispalys all bytes between the two addresses
 356               	|   e ADDR+LEN              Dispays LEN bytes after ADDR
 357               	|   e ADDR;                 Interactive mode, space shows 16 lines, enter shows 1.
 358               	|   e ADDR.                 Quick line, displays one line 
 359               	.examine:
 360 80686 6100 0212 	    bsr.w   parseNumber         | Read in the start address
68K GAS  S68K_002.s 			page 8


 361 8068a 4A01      	    tst.b   %d1                 | Make sure it's valid (parseNumber returns non-zero in d1 for fail
 362 8068c 6600 FFE0 	    bne.w   .invalidAddr        
 363 80690 2640      	    move.l  %d0, %a3            | Save the start address
 364               	 .exloop:
 365 80692 1018      	    move.b  (%a0)+, %d0
 366 80694 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 367 80698 67F8      	    beq.s   .exloop
 368 8069a 0C00 002D 	    cmp.b   #'-', %d0           | Check if it's a range specifier
 369 8069e 6716      	    beq.s   .exrange
 370 806a0 0C00 002B 	    cmp.b   #'+', %d0           | Check if it's a length specifier
 371 806a4 6722      	    beq.s   .exlength
 372 806a6 0C00 003B 	    cmp.b   #';', %d0           | Check if we're going interactive
 373 806aa 672E      	    beq.s   .exinter
 374 806ac 0C00 002E 	    cmp.b   #'.', %d0           | Check if quick 16 
 375 806b0 6712      	    beq.s   .exquick
 376 806b2 7001      	    move.l  #1, %d0             | Otherwise read in a single byte
 377 806b4 601C      	    bra.s   .exend              
 378               	 .exrange:
 379 806b6 6100 01E2 	    bsr.w   parseNumber         | Find the end address
 380 806ba 4A01      	    tst.b   %d1                 | Check if we found a valid address
 381 806bc 6600 FFB0 	    bne.w   .invalidAddr
 382 806c0 908B      	    sub.l   %a3, %d0            | Get the length
 383 806c2 600E      	    bra.s   .exend
 384               	 .exquick:                      | Quick mode means show one line of 16 bytes
 385 806c4 7010      	    move.l  #0x10, %d0
 386 806c6 600A      	    bra.s   .exend
 387               	 .exlength:                     | Length mode means a length is specified
 388 806c8 6100 01D0 	    bsr.w   parseNumber         | Find the length
 389 806cc 4A01      	    tst.b   %d1
 390 806ce 6600 FF9E 	    bne.w   .invalidAddr
 391               	 .exend:                        | Done parsing, give the parameters to dumpRAM and exit
 392 806d2 204B      	    move.l  %a3, %a0
 393 806d4 6100 0226 	    bsr.w   dumpRAM
 394 806d8 6082      	    bra.s   .exit
 395               	 .exinter:                      | Interactive mode, Space shows 16 lines, enter shows 1.
 396 806da 204B      	    move.l  %a3, %a0            | Current Address
 397 806dc 7010      	    move.l  #0x10, %d0          | 16 bytes
 398 806de 6100 021C 	    bsr.w   dumpRAM             | Dump this line
 399 806e2 D7FC 0000 	    add.l   #0x10, %a3          | Move up the current address 16 bytes
 399      0010 
 400               	 .exinterend:
 401 806e8 6100 FE50 	    bsr.w   inChar
 402 806ec 0C00 000D 	    cmp.b   #CR, %d0            | Display another line
 403 806f0 67E8      	    beq.s   .exinter
 404 806f2 0C00 0020 	    cmp.b   #' ', %d0           | Display a page (256 bytes at a time)
 405 806f6 6704      	    beq.s   .exinterpage
 406 806f8 6000 FF62 	    bra	   .exit               | Otherwise exit
 407               	 .exinterpage:
 408 806fc 204B      	    move.l  %a3, %a0
 409 806fe 203C 0000 	    move.l  #0x100, %d0         | 256 bytes
 409      0100 
 410 80704 6100 01F6 	    bsr.w   dumpRAM             | Dump 16 lines of RAM
 411 80708 D7FC 0000 	    add.l   #0x100, %a3         | Move up the current address by 256
 411      0100 
 412 8070e 60D8      	    bra.s   .exinterend
 413               	
 414               	|||||||||||||||||||||||||||||
68K GAS  S68K_002.s 			page 9


 415               	|| Load S Record
 416               	|	srecType:	ds.b	1		| S1-S9 stored as binary 1-9
 417               	|	srecByCt:	ds.b	1		| Byte Count
 418               	|	srecData:	ds.b	1 		| Data
 419               	|	srecCSum:	ds.b	1 		| S-Record Checksum
 420               	|	srecAddr:	ds.l	1		| S Record current byte address
 421               	|
 422               	| Supports 3 S record types (matches gcc m68k output)
 423               	|	S00F00005336384B5F3030322E746D7074
 424               	|	S2240800000007FFFC00080400000000000000000000000000000000000000000000000000C5
 425               	|	S503005BA1
 426               	
 427               	loadSRec:
 428 80710 41FA 04C8 	    lea     ldSRecMsg, %a0					| "Load S-Record"
 429 80714 6100 FE1A 	    bsr.w   printString
 430               	loadSRecLoop:
 431 80718 6100 00A0 		bsr		setRecType
 432 8071c 6100 00B6 		bsr		setBytCt
 433 80720 11FC 0000 		move.b 	#0, srecCSum
 433      0403 
 434 80726 6100 00F6 		bsr		setAddr
 435               	|	lea		debug_Srec_LDData_Msg, %a0		| "Load Data Loop start"
 436               	|	bsr		printString
 437 8072a 0C38 0001 		cmp.b	#1, srecType
 437      0400 
 438 80730 6700 001A 		beq		loopSData
 439 80734 0C38 0002 		cmp.b	#2, srecType
 439      0400 
 440 8073a 6700 0010 		beq		loopSData
 441 8073e 0C38 0003 		cmp.b	#3, srecType
 441      0400 
 442 80744 6700 0006 		beq		loopSData
 443 80748 6000 0014 		bra		sRecDataDone
 444               	loopSData:
 445 8074c 0C38 0000 		cmp.b 	#0, srecByCt
 445      0401 
 446 80752 6700 000A 		beq		sRecDataDone
 447 80756 6100 003E 		bsr		getSetLdData
 448 8075a 6000 FFF0 		bra		loopSData
 449               	sRecDataDone:
 450 8075e 6100 0050 		bsr		getChksum
 451 80762 103C 002B 		move.b	#'+', %d0
 452 80766 6100 FDA0 		bsr		outChar
 453 8076a 0C38 0000 		cmp.b	#0, srecType
 453      0400 
 454 80770 6700 FFA6 		beq		loadSRecLoop
 455 80774 0C38 0001 		cmp.b	#1, srecType
 455      0400 
 456 8077a 6700 FF9C 		beq		loadSRecLoop
 457 8077e 0C38 0002 		cmp.b	#2, srecType
 457      0400 
 458 80784 6700 FF92 		beq		loadSRecLoop
 459 80788 0C38 0003 		cmp.b	#3, srecType
 459      0400 
 460 8078e 6700 FF88 		beq		loadSRecLoop
 461 80792 6000 FEC8 		bra.w   .exit
 462               	
68K GAS  S68K_002.s 			page 10


 463               	|||||||||||||||||||||||||||||
 464               	getSetLdData:
 465 80796 4EBA 004E 		jsr		getHexPair
 466 8079a 41F8 0404 		lea 	srecAddr, %a0
 467 8079e 2250      		move.l	(%a0), %a1
 468 807a0 12C0      		move.b	%d0, (%a1)+
 469 807a2 21C9 0404 		move.l	%a1, srecAddr
 470 807a6 D138 0403 		add.b	%d0, srecCSum
 471 807aa 5338 0401 		sub.b	#1, srecByCt
 472               	skipLdData:
 473 807ae 4E75      		rts
 474               	
 475               	|||||||||||||||||||||||||||||
 476               	getChksum:
 477               	|	lea		debug_Srec_CSum_Msg, %a0	| "S Record Checksum="
 478               	|	bsr.w   printString
 479 807b0 4EBA 0034 		jsr		getHexPair
 480 807b4 D138 0403 		add.b	%d0, srecCSum
 481               	|	move.b	srecCSum, %d0
 482               	|	jsr		printHexByte
 483               	|	lea		CRLF_MSG, %a0
 484               	|	bsr.w   printString
 485               	failCSUM:
 486 807b8 4E75      		rts
 487               	
 488               	|||||||||||||||||||||||||||||
 489               	setRecType:
 490 807ba 4EBA FD7E 		jsr		inChar
 491 807be 0C00 0053 		cmp.b	#'S', %d0
 492 807c2 6600 FFF6 		bne		setRecType					| Toss extra chars
 493 807c6 4EBA FD72 		jsr		inChar
 494 807ca 0200 000F 		andi.b	#0x0f, %d0
 495 807ce 11C0 0400 		move.b	%d0, srecType
 496               	| Debug messages follow
 497               	|	lea		debug_Srec_Typ_Msg, %a0		| "S Record Type="
 498               	|	bsr.w   printString
 499               	|	move.b	srecType, %d0
 500               	|	add.b	#'0', %d0
 501               	|	jsr		outChar
 502               	|	lea		CRLF_MSG, %a0
 503               	|	bsr.w   printString
 504               	| Debug messages end
 505 807d2 4E75      		rts
 506               		
 507               	|||||||||||||||||||||||||||||
 508               	setBytCt:
 509 807d4 4EBA 0010 		jsr		getHexPair
 510 807d8 11C0 0403 		move.b 	%d0, srecCSum				| Initialize checksum
 511 807dc 11C0 0401 		move.b	%d0, srecByCt				| Byte count
 512               	| Debug messages follow
 513               	|	lea		debug_Srec_BytCt_Msg, %a0	| "S Record Byte Count=0x"
 514               	|	bsr.w   printString
 515               	|	move.b	srecByCt, %d0
 516               	|	jsr		printHexByte
 517               	|	lea		CRLF_MSG, %a0
 518               	|	bsr		printString
 519               	| Debug messages end
68K GAS  S68K_002.s 			page 11


 520 807e0 5338 0401 		sub.b	#1, srecByCt
 521 807e4 4E75      		rts
 522               	
 523               	|||||||||||||||||||||||||||||
 524               	getHexPair:
 525 807e6 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 526 807ea 4EBA FD4E 		jsr		inChar
 527 807ee 4EBA 0016 		jsr		toNibble
 528 807f2 E900      		asl.b	#4, %d0
 529 807f4 1400      		move.b	%d0, %d2
 530 807f6 4EBA FD42 		jsr		inChar
 531 807fa 4EBA 000A 		jsr		toNibble
 532 807fe 8002      		or.b	%d2, %d0
 533 80800 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 534 80804 4E75      		rts
 535               	
 536               	|||||||||||||||||||||||||||||
 537               	toNibble:
 538 80806 0C00 0041 		cmp.b	#'A', %d0
 539 8080a 6C00 0008 		bge		doHexLetter
 540 8080e 0400 0030 		sub.b	#'0', %d0
 541 80812 4E75      		rts
 542               	doHexLetter:
 543 80814 0400 0041 		sub.b	#'A', %d0
 544 80818 0600 000A 		add.b	#10, %d0
 545 8081c 4E75      		rts
 546               	
 547               	|||||||||||||||||||||||||||||
 548               	setAddr:
 549 8081e 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 550 80822 0C38 0002 		cmp.b	#2, srecType
 550      0400 
 551 80828 6600 0052 		bne		adrLen16
 552 8082c 21FC 0000 		move.l	#0, srecAddr
 552      0000 0404 
 553               	|	lea		debug_S2rec_Addr_Msg, %a0
 554               	|	bsr		printString
 555 80834 7400      		move.l	#0, %d2			| d2 stores address for accumulation of bytes
 556               		| Get the upper 8-bits of 24-bits
 557 80836 4EBA FFAE 		jsr		getHexPair
 558 8083a 0280 0000 		and.l	#0xff, %d0
 558      00FF 
 559 80840 D138 0403 		add.b 	%d0, srecCSum
 560 80844 8480      		or.l	%d0, %d2
 561 80846 E182      		asl.l	#8, %d2
 562               	|	move.l	%d2, %d0
 563               	|	bsr		printHexLong
 564               	|	lea		CRLF_MSG, %a0
 565               	|   bsr.w   printString
 566               		| Get the middle 8-bits of 24-bits
 567 80848 4EBA FF9C 		jsr		getHexPair
 568 8084c 0280 0000 		and.l	#0xff, %d0
 568      00FF 
 569 80852 D138 0403 		add.b 	%d0, srecCSum
 570 80856 8480      		or.l	%d0, %d2
 571 80858 E182      		asl.l	#8, %d2
 572               	|	move.l	%d2, %d0
68K GAS  S68K_002.s 			page 12


 573               	|	bsr		printHexLong
 574               	|	lea		CRLF_MSG, %a0
 575               	|   bsr.w   printString
 576               		| Get the lower 8-bits of 24-bits
 577 8085a 4EBA FF8A 		jsr		getHexPair
 578 8085e 0280 0000 		and.l	#0xff, %d0
 578      00FF 
 579 80864 D138 0403 		add.b 	%d0, srecCSum
 580 80868 8480      		or.l	%d0, %d2
 581 8086a 0282 00FF 		andi.l	#0x00ffffff, %d2
 581      FFFF 
 582 80870 21C2 0404 		move.l	%d2, srecAddr		| Save the S record address
 583               	|	move.l	%d2, %d0
 584               	|	bsr		printHexLong
 585               	|	lea		CRLF_MSG, %a0
 586               	|	bsr.w   printString
 587 80874 5738 0401 		sub.b	#3, srecByCt
 588 80878 6000 001A 		bra		past16
 589               	adrLen16:
 590               	|	lea		debug_SXrec_Addr_Msg, %a0	| "S (not 2) Record Address=0x"
 591               	|	bsr		printString
 592 8087c 7400      		move.l	#0, %d2
 593 8087e 4EBA FF66 		jsr		getHexPair
 594               	|	bsr		printHexLong
 595               	|	lea		CRLF_MSG, %a0
 596               	|   bsr.w   printString
 597 80882 8480      		or.l	%d0, %d2
 598 80884 E182      		asl.l	#8, %d2
 599 80886 4EBA FF5E 		jsr		getHexPair
 600               	|	bsr		printHexLong
 601               	|	lea		CRLF_MSG, %a0
 602               	|	bsr.w   printString
 603 8088a 8480      		or.l	%d0, %d2
 604 8088c 21C2 0404 		move.l	%d2, srecAddr
 605 80890 5538 0401 		sub.b	#2, srecByCt
 606               	past16:
 607 80894 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 608 80898 4E75      		rts
 609               			
 610               	|||||||||||||||||||||||||||||
 611               	| Find and parse a hex number
 612               	|  Starting address in A0
 613               	|  Number returned in D0
 614               	|  Status in D1   (0 success, 1 fail)
 615               	|  TODO: Try and merge first digit code with remaining digit code
 616               	parseNumber:
 617 8089a B180      	    eor.l   %d0, %d0		| Zero out d0
 618 8089c 1018      	    move.b  (%a0)+, %d0
 619 8089e 0C00 0020 	    cmp.b   #' ', %d0		|  Ignore all leading spaces
 620 808a2 67F6      	    beq.s   parseNumber
 621 808a4 0C00 0030 	    cmp.b   #'0', %d0       | Look for hex digits 0-9
 622 808a8 6D14      	    blt.s	PNinvalid
 623 808aa 0C00 0039 	    cmp.b   #'9', %d0
 624 808ae 6F18      	    ble.s   PNfirstdigit1
 625               	
 626 808b0 0C00 0041 	    cmp.b   #'A', %d0      	| Look for hex digits A-F
 627 808b4 6D00 FD9E 	    blt   .invalid    
68K GAS  S68K_002.s 			page 13


 628 808b8 0C00 0046 	    cmp.b   #'F', %d0
 629 808bc 6F04      	    ble.s   PNfirstdigit2
 630               	PNinvalid:
 631 808be 7201      	    move.l  #1, %d1			| Invalid character, mark failure and return
 632 808c0 4E75      	    rts
 633               	PNfirstdigit2:
 634 808c2 0400 0037 	    sub.b   #'7', %d0       | Turn 'A' to 10
 635 808c6 6004      	    bra.s   PNloop
 636               	PNfirstdigit1:
 637 808c8 0400 0030 	    sub.b   #'0', %d0       | Turn '0' to 0
 638               	 PNloop:
 639 808cc 1218      	    move.b  (%a0)+, %d1      | Read in a digit
 640 808ce 0C01 0030 	    cmp.b   #'0', %d1       | Look for hex digits 0-9
 641 808d2 6D12      	    blt.s   PNend         	| Any other characters mean we're done reading
 642 808d4 0C01 0039 	    cmp.b   #'9', %d1
 643 808d8 6F18      	    ble.s   PNdigit1
 644 808da 0C01 0041 	    cmp.b   #'A', %d1      	| Look for hex digits A-F
 645 808de 6D06      	    blt.s   PNend
 646 808e0 0C01 0046 	    cmp.b   #'F', %d1
 647 808e4 6F06      	    ble.s   PNdigit2
 648               	
 649               	PNend:                       | We hit a non-hex digit character, we're done parsing
 650 808e6 5388      	    subq.l  #1, %a0         | Move the pointer back before the end character we read
 651 808e8 7200      	    move.l  #0, %d1
 652 808ea 4E75      	    rts
 653               	PNdigit2:
 654 808ec 0401 0037 	    sub.b   #'7', %d1		| Turn 'A' to 10
 655 808f0 6004      	    bra.s   PNdigit3
 656               	PNdigit1:
 657 808f2 0401 0030 	    sub.b   #'0', %d1       | Turn '0' to 0
 658               	PNdigit3:
 659 808f6 E988      	    lsl.l   #4, %d0        	| Shift over to the next nybble
 660 808f8 D001      	    add.b   %d1, %d0       	| Place in our current nybble (could be or.b instead)
 661 808fa 60D0      	    bra.s   PNloop
 662               	    
 663               	
 664               	|||||||||||||||||||||||||||||
 665               	| Dumps a section of RAM to the screen
 666               	| Displays both hex values and ASCII characters
 667               	| d0 - Number of bytes to dump
 668               	| a0 - Start Address
 669               	dumpRAM:
 670 808fc 48E7 3820 	    movem.l %d2-%d4/%a2, -(%SP) | Save registers
 671 80900 2448      	    move.l  %a0, %a2           	| Save the start address
 672 80902 2400      	    move.l  %d0, %d2           	| And the number of bytes
 673               	 .line:
 674 80904 200A      	    move.l  %a2, %d0          
 675 80906 6100 010E 	    bsr.w   printHexAddr     	| Starting address of this line
 676 8090a 41FA 0303 	    lea     msgColonSpace, %a0
 677 8090e 6100 FC20 	    bsr.w   printString
 678 80912 7610      	    move.l  #16, %d3         	| 16 Bytes can be printed on a line
 679 80914 2803      	    move.l  %d3, %d4       		| Save number of bytes on this line
 680               	 .hexbyte:
 681 80916 4A82      	    tst.l   %d2               	| Check if we're out of bytes
 682 80918 6718      	    beq.s   .endbytesShort
 683 8091a 4A03      	    tst.b   %d3               	| Check if we're done this line
 684 8091c 673A      	    beq.s   .endbytes    
68K GAS  S68K_002.s 			page 14


 685 8091e 101A      	    move.b  (%a2)+, %d0        	| Read a byte in from RAM
 686 80920 6100 011C 	    bsr.w   printHexByte     	| Display it
 687 80924 103C 0020 	    move.b  #' ', %d0
 688 80928 6100 FBDE 	    bsr.w   outChar          	| Space out bytes
 689 8092c 5383      	    subq.l  #1, %d3    
 690 8092e 5382      	    subq.l  #1, %d2        
 691 80930 60E4      	    bra.s   .hexbyte
 692               	 .endbytesShort:
 693 80932 9803      	    sub.b   %d3, %d4           	| Make d4 the actual number of bytes on this line
 694 80934 103C 0020 	    move.b  #' ', %d0
 695               	 .endbytesShortLoop:
 696 80938 4A03      	    tst.b   %d3               	| Check if we ended the line
 697 8093a 671C      	    beq.s   .endbytes
 698 8093c 103C 0020 	    move.b  #' ', %d0
 699 80940 6100 FBC6 	    bsr.w   outChar          	| Three spaces to pad out
 700 80944 103C 0020 	    move.b  #' ', %d0
 701 80948 6100 FBBE 	    bsr.w   outChar
 702 8094c 103C 0020 	    move.b  #' ', %d0
 703 80950 6100 FBB6 	    bsr.w   outChar
 704               	    
 705 80954 5303      	    subq.b  #1, %d3
 706 80956 60E0      	    bra.s   .endbytesShortLoop
 707               	 .endbytes:
 708 80958 95C4      	    suba.l  %d4, %a2        	| Return to the start address of this line
 709               	 .endbytesLoop:
 710 8095a 4A04      	    tst.b   %d4               	| Check if we are done printing ascii
 711 8095c 6700 0022 	    beq     .endline    
 712 80960 5304      	    subq.b  #1, %d4
 713 80962 101A      	    move.b  (%a2)+, %d0        	| Read the byte again
 714 80964 0C00 0020 	    cmp.b   #' ', %d0         	| Lowest printable character
 715 80968 6D0C      	    blt.s   .unprintable
 716 8096a 0C00 007E 	    cmp.b   #'~', %d0         	| Highest printable character
 717 8096e 6E06      	    bgt.s   .unprintable
 718 80970 6100 FB96 	    bsr.w   outChar
 719 80974 60E4      	    bra.s   .endbytesLoop
 720               	 .unprintable:
 721 80976 103C 002E 	    move.b  #'.', %d0
 722 8097a 6100 FB8C 	    bsr.w   outChar
 723 8097e 60DA      	    bra.s   .endbytesLoop
 724               	 .endline:
 725 80980 41FA 0290 	    lea     msgNewline, %a0
 726 80984 6100 FBAA 	    bsr.w   printString
 727 80988 4A82      	    tst.l   %d2
 728 8098a 6F04      	    ble.s   .end
 729 8098c 6000 FF76 	    bra.w   .line
 730               	 .end:
 731 80990 4CDF 041C 	    movem.l (%SP)+, %d2-%d4/%a2		| Restore registers
 732 80994 4E75      	    rts
 733               	
 734               	|||||||||||||||||||||||
 735               	| Deposit values into RAM
 736               	| d ADDR VAL VAL            Deposit value(s) into RAM
 737               	| d ADDR VAL VAL;           Deposit values, continue with values on next line
 738               	|  VAL VAL VAL;              - Continuing with further continue
 739               	| d: VAL VAL                Continue depositing values after the last address written to
 740               	|||||||||||||||||||||||
 741               	.deposit:
68K GAS  S68K_002.s 			page 15


 742 80996 1010      	    move.b  (%a0), %d0
 743 80998 0C00 003A 	    cmp.b   #':', %d0       	| Check if we want to continue from last
 744 8099c 6730      	    beq.s   DepCont
 745               	    
 746 8099e 6100 FEFA 	    bsr.w   parseNumber         | Otherwise read the address
 747 809a2 4A01      	    tst.b   %d1
 748 809a4 6600 FCC8 	    bne		.invalidAddr
 749 809a8 2640      	    move.l  %d0, %a3           	| Save the start address
 750               	 DepLoop:
 751 809aa 1010      	    move.b  (%a0), %d0            
 752 809ac 0C00 003B 	    cmp.b   #';', %d0          	| Check for continue
 753 809b0 6726      	    beq.s   DepMLine
 754 809b2 4A40      	    tst     %d0              	| Check for the end of line
 755 809b4 6700 003A 	    beq     DepEnd
 756               	    
 757 809b8 6100 FEE0 	    bsr		parseNumber         | Otherwise read a value
 758 809bc 4A01      	    tst.b   %d1
 759 809be 6600 FCBA 	    bne		.invalidVal
 760 809c2 0C40 00FF 	    cmp.w   #255, %d0          	| Make sure it's a byte
 761 809c6 6E00 FCB2 	    bgt		.invalidVal
 762               	    
 763 809ca 16C0      	    move.b  %d0, (%a3)+        	| Store the value into memory
 764 809cc 60DC      	    bra.s   DepLoop
 765               	    
 766               	 DepCont:
 767 809ce 2679 0007 	    move.l  varCurAddr, %a3   	| Read in the last address 
 767      FBAA 
 768 809d4 5288      	    addq.l  #1, %a0           	| Skip over the ':'
 769 809d6 60D2      	    bra.s   DepLoop
 770               	    
 771               	 DepMLine:
 772 809d8 41FA 0186 	    lea     msgDepositPrompt, %a0
 773 809dc 6100 FB52 	    bsr.w   printString
 774 809e0 6100 FB80 	    bsr.w   readLine          	| Read in the next line to be parsed
 775 809e4 6100 FC0E 	    bsr.w   lineToUpper         | Convert to uppercase
 776 809e8 41F9 0007 	    lea     varLineBuf, %a0    	| Reset our buffer pointer
 776      FBAE 
 777 809ee 60BA      	    bra.s   DepLoop            	| And jump back to decoding
 778               	 DepEnd:
 779 809f0 23CB 0007 	    move.l  %a3, varCurAddr
 779      FBAA 
 780 809f6 6000 FC64 	    bra.w   .exit
 781               	
 782               	|||||||||||||||||||||||
 783               	| run code
 784               	 .run:
 785 809fa 6100 FE9E 	    bsr.w   parseNumber        	| Otherwise read the address
 786 809fe 4A01      	    tst.b   %d1
 787 80a00 6600 FC6C 	    bne		.invalidAddr
 788 80a04 2040      	    move.l  %d0, %a0
 789 80a06 4E90      	    jsr     (%a0)             	| Jump to the code! 
 790               	                                | Go as subroutine to allow code to return to us
 791 80a08 4EBA FAC2 	    jsr     monitorStart        | Warm start after returning so everything is in
 792               	                                | a known state.
 793               	
 794               	
 795               	|||||||||||||||||||||||
68K GAS  S68K_002.s 			page 16


 796               	|| KEEP All printHex functions together ||
 797               	|||||||||||||||||||||||
 798               	| Print a hex word
 799               	printHexWord:
 800 80a0c 2F02      	    move.l  %d2, -(%SP)		| Save D2
 801 80a0e 2400      	    move.l  %d0, %d2		| Save the address in d2
 802               	    
 803 80a10 E19A      	    rol.l   #0x8, %d2       | 4321 -> 3214
 804 80a12 E19A      	    rol.l   #0x8, %d2       | 3214 -> 2143 
 805 80a14 6018      	    bra.s   printHex_wordentry  | Print out the last 16 bits
 806               	|||||||||||||||||||||||
 807               	| Print a hex 24-bit address
 808               	printHexAddr:
 809 80a16 2F02      	    move.l %d2, -(%SP)   	| Save D2
 810 80a18 2400      	    move.l %d0, %d2      	| Save the address in d2
 811               	    
 812 80a1a E19A      	    rol.l   #0x8, %d2     	| 4321 -> 3214
 813 80a1c 600A      	    bra.s   printHex_addrentry  | Print out the last 24 bits
 814               	|||||||||||||||||||||||
 815               	* Print a hex long
 816               	printHexLong:
 817 80a1e 2F02      	    move.l  %d2, -(%SP)     | Save D2
 818 80a20 2400      	    move.l  %d0, %d2        | Save the address in d2
 819               	    
 820 80a22 E19A      	    rol.l   #0x8, %d2        | 4321 -> 3214 high byte in low
 821 80a24 2002      	    move.l  %d2, %d0
 822 80a26 6116      	    bsr.s   printHexByte  	| Print the high byte (24-31)
 823               	printHex_addrentry:     
 824 80a28 E19A      	    rol.l   #0x8, %d2        	| 3214 -> 2143 middle-high byte in low
 825 80a2a 2002      	    move.l  %d2, %d0              
 826 80a2c 6110      	    bsr.s   printHexByte  	| Print the high-middle byte (16-23)
 827               	printHex_wordentry:    
 828 80a2e E19A      	    rol.l   #0x8, %d2        	| 2143 -> 1432 Middle byte in low
 829 80a30 2002      	    move.l  %d2, %d0
 830 80a32 610A      	    bsr.s   printHexByte  	| Print the middle byte (8-15)
 831 80a34 E19A      	    rol.l   #0x8, %d2
 832 80a36 2002      	    move.l  %d2, %d0
 833 80a38 6104      	    bsr.s   printHexByte  	| Print the low byte (0-7)
 834               	    
 835 80a3a 241F      	    move.l (%SP)+, %d2      | Restore D2
 836 80a3c 4E75      	    RTS
 837               	    
 838               	|||||||||||||||||||||||
 839               	| Print a hex byte
 840               	|  - Takes byte in D0
 841               	printHexByte:
 842 80a3e 2F02      	    move.l  %D2, -(%SP)
 843 80a40 7400      		move.l	#0, %d2
 844 80a42 1400      	    move.b  %d0, %d2
 845 80a44 E808      	    lsr.b   #0x4, %d0		| Shift down upper nibble
 846 80a46 0200 000F 		andi.b	#0xf, %d0
 847 80a4a 0600 0030 	    add.b   #'0', %d0
 848 80a4e 0C00 0039 	    cmp.b   #'9', %d0		| Check if the hex number was from 0-9
 849 80a52 6F02      	    ble.s   PHBsecond
 850 80a54 5E00      	    add.b   #0x7, %d0			| Shift 0xA-0xF from ':' to 'A'
 851               	PHBsecond:
 852 80a56 6100 FAB0 	    bsr   outChar			| Print the digit
68K GAS  S68K_002.s 			page 17


 853 80a5a 0202 000F 	    andi.b  #0x0F, %d2		| Now we want the lower digit Mask only the lower digit
 854 80a5e 0602 0030 	    add.b   #'0', %d2
 855 80a62 0C02 0039 	    cmp.b   #'9', %d2     	| Same as before    
 856 80a66 6F02      	    ble.s   PHBend
 857 80a68 5E02      	    add.b   #0x7, %D2
 858               	PHBend:
 859 80a6a 1002      	    move.b  %D2, %D0
 860 80a6c 6100 FA9A 	    bsr	   outChar      	| Print the lower digit
 861 80a70 241F      	    move.l  (%SP)+, %D2
 862 80a72 4E75      	    rts
 863               		
 864               	
 865               	|||||
 866               	| Initializes the 68681 DUART port A as 9600 8N1 
 867               	initDuart:
 868 80a74 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 868      000F 0004 
 869 80a7c 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 869      000F 0004 
 870 80a84 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 870      000F 0004 
 871               	    
 872 80a8c 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 872      000F 0008 
 873 80a94 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 873      000F 0002 
 874 80a9c 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 874      000F 0000 
 875 80aa4 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 875      000F 0000 
 876               	    
 877 80aac 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 877      000F 0004 
 878               	
 879 80ab4 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 879      000F 0014 
 880 80abc 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 880      000F 0014 
 881 80ac4 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 881      000F 0014 
 882               	    
 883 80acc 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 883      000F 0012 
 884 80ad4 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 884      000F 0010 
 885 80adc 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 885      000F 0010 
 886               	    
 887 80ae4 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 887      000F 0014 
 888               		
 889 80aec 13FC 0000 		move.b	#0x00, OPC		 | Output port configuration (all bit are outs)
 889      000F 001A 
 890 80af4 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 890      000F 001E 
 891 80afc 4E75      	    rts    
 892               	
68K GAS  S68K_002.s 			page 18


 893               	delay1Sec:
 894 80afe 203C 0003 		move.l	#200000, %d0	| rough count
 894      0D40 
 895               	delay1Loop:
 896 80b04 5380      		sub.l	#1, %d0			
 897 80b06 6600 FFFC 		bne		delay1Loop
 898 80b0a 4E75      		rts
 899               	
 900               	READINLINE:	  
 901 80b0c 5265 6164 		.ascii  "Reading in line"
 901      696E 6720 
 901      696E 206C 
 901      696E 65
 902 80b1b 0D0A 00   		dc.b CR,LF,EOT
 903               	L_TO_UPPER_MSG:  
 904 80b1e 436F 6E76 		.ascii  "Convert line to upper case"
 904      6572 7420 
 904      6C69 6E65 
 904      2074 6F20 
 904      7570 7065 
 905 80b38 0D0A 00   		dc.b CR,LF,EOT
 906               	WRITEOUTLINE:	  
 907 80b3b 5772 6974 		.ascii  "Writing out line"
 907      696E 6720 
 907      6F75 7420 
 907      6C69 6E65 
 908 80b4b 0D0A 00   		dc.b CR,LF,EOT
 909               	RAM_PASS_MSG:  
 910 80b4e 5241 4D20 		.ascii  "RAM Test Passed"
 910      5465 7374 
 910      2050 6173 
 910      7365 64
 911 80b5d 0D0A 00   		dc.b CR,LF,EOT
 912               	msgDepositPrompt:
 913 80b60 3A20      	    .ascii	": "
 914 80b62 00        		dc.b 	EOT
 915               	BANNER_MSG:	
 916 80b63 5349 4D50 		.ascii  "SIMPLE-68008 CPU"
 916      4C45 2D36 
 916      3830 3038 
 916      2043 5055 
 917 80b73 0D0A 00   		dc.b CR,LF,EOT
 918               	msgInvalidCommand:
 919 80b76 496E 7661 	    .ascii "Invalid Command"
 919      6C69 6420 
 919      436F 6D6D 
 919      616E 64
 920 80b85 0D0A 00   		dc.b CR,LF,EOT
 921               	CRLF_MSG:	
 922 80b88 0D0A 00   		dc.b CR,LF,EOT
 923               	msgHelp:
 924 80b8b 4176 6169 	    .ascii	"Available Commands: "
 924      6C61 626C 
 924      6520 436F 
 924      6D6D 616E 
 924      6473 3A20 
 925 80b9f 0D0A      		dc.b	CR,LF
68K GAS  S68K_002.s 			page 19


 926 80ba1 2028 4529 	    .ascii	" (E)xamine    (D)eposit    (R)un     (L)oad     (H)elp"
 926      7861 6D69 
 926      6E65 2020 
 926      2020 2844 
 926      2965 706F 
 927 80bd7 0D0A 00   		dc.b	CR,LF,EOT
 928               	ldSRecMsg:
 929 80bda 4C6F 6164 	    .ascii	"Load S-Record"
 929      2053 2D52 
 929      6563 6F72 
 929      64
 930 80be7 0D0A 00   		dc.b	CR,LF,EOT
 931               	msgInvalidAddress:
 932 80bea 496E 7661 	    .ascii	"Invalid Address"
 932      6C69 6420 
 932      4164 6472 
 932      6573 73
 933 80bf9 0D0A 00   		dc.b 	CR,LF,EOT
 934               	msgInvalidValue:
 935 80bfc 496E 7661 	    .ascii	"Invalid Value"
 935      6C69 6420 
 935      5661 6C75 
 935      65
 936 80c09 0D0A 00   		dc.b	CR,LF,EOT
 937               	msgPrompt:
 938 80c0c 3E20      		.ascii "> "
 939 80c0e 00        	    dc.b EOT
 940               	msgColonSpace:
 941 80c0f 3A20      	    .ascii ": "
 942 80c11 00        	    dc.b EOT
 943               	msgNewline:
 944 80c12 0D0A 00   	    dc.b CR,LF,EOT
 945               	debug_Srec_Typ_Msg:
 946 80c15 5320 5265 		.ascii	"S Record Type="
 946      636F 7264 
 946      2054 7970 
 946      653D 
 947 80c23 00        	    dc.b EOT
 948               	debug_Srec_BytCt_Msg:
 949 80c24 5320 5265 		.ascii	"S Record Byte Count=0x"
 949      636F 7264 
 949      2042 7974 
 949      6520 436F 
 949      756E 743D 
 950 80c3a 00        	    dc.b EOT
 951               	debug_Srec_CSum_Msg:
 952 80c3b 5320 5265 		.ascii	"S Record Checksum="
 952      636F 7264 
 952      2043 6865 
 952      636B 7375 
 952      6D3D 
 953 80c4d 00        	    dc.b EOT
 954               	debug_S2rec_Addr_Msg:
 955 80c4e 5332 2052 		.ascii	"S2 Record Address=0x"
 955      6563 6F72 
 955      6420 4164 
 955      6472 6573 
68K GAS  S68K_002.s 			page 20


 955      733D 3078 
 956 80c62 00        	    dc.b EOT
 957               	debug_SXrec_Addr_Msg:
 958 80c63 5320 286E 		.ascii	"S (not 2) Record Address=0x"
 958      6F74 2032 
 958      2920 5265 
 958      636F 7264 
 958      2041 6464 
 959 80c7e 00        	    dc.b EOT
 960               	debug_Srec_LDData_Msg:
 961 80c7f 4C6F 6164 	    .ascii	"Load Data Loop start"
 961      2044 6174 
 961      6120 4C6F 
 961      6F70 2073 
 961      7461 7274 
 962 80c93 0D0A 00   		dc.b 	CR,LF,EOT
 963               	
 964               	
 965               	MAX_LINE_LENGTH = 80
 966               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
 967               	varCurAddr = varLineBuf-4
68K GAS  S68K_002.s 			page 21


DEFINED SYMBOLS
          S68K_002.s:12     *ABS*:0000000000000000 RAM_START
          S68K_002.s:13     *ABS*:000000000007fffc STACK_END
          S68K_002.s:14     *ABS*:000000000007ffff RAM_END
          S68K_002.s:15     *ABS*:0000000000080000 ROM_START
          S68K_002.s:16     *ABS*:0000000000080400 ROM_CODE
          S68K_002.s:18     *ABS*:000000000008ffff ROM_END
          S68K_002.s:23     *ABS*:00000000000f0000 DUART
          S68K_002.s:24     *ABS*:00000000000f0000 MRA
          S68K_002.s:25     *ABS*:00000000000f0002 SRA
          S68K_002.s:26     *ABS*:00000000000f0002 CSRA
          S68K_002.s:27     *ABS*:00000000000f0004 CRA
          S68K_002.s:28     *ABS*:00000000000f0006 RBA
          S68K_002.s:29     *ABS*:00000000000f0006 TBA
          S68K_002.s:30     *ABS*:00000000000f0008 ACR
          S68K_002.s:31     *ABS*:00000000000f000a ISR
          S68K_002.s:32     *ABS*:00000000000f000a IMR
          S68K_002.s:33     *ABS*:00000000000f0010 MRB
          S68K_002.s:34     *ABS*:00000000000f0012 SRB
          S68K_002.s:35     *ABS*:00000000000f0012 CSRB
          S68K_002.s:36     *ABS*:00000000000f0014 CRB
          S68K_002.s:37     *ABS*:00000000000f0016 RBB
          S68K_002.s:38     *ABS*:00000000000f0016 TBB
          S68K_002.s:39     *ABS*:00000000000f0018 IVR
          S68K_002.s:40     *ABS*:00000000000f001a OPC
          S68K_002.s:41     *ABS*:00000000000f001a INU
          S68K_002.s:42     *ABS*:00000000000f001c OPS
          S68K_002.s:43     *ABS*:00000000000f001e OPR
          S68K_002.s:48     *ABS*:0000000000000007 BEL
          S68K_002.s:49     *ABS*:0000000000000008 BKSP
          S68K_002.s:50     *ABS*:0000000000000009 TAB
          S68K_002.s:51     *ABS*:000000000000000a LF
          S68K_002.s:52     *ABS*:000000000000000d CR
          S68K_002.s:53     *ABS*:000000000000001b ESC
          S68K_002.s:54     *ABS*:0000000000000000 EOT
          S68K_002.s:56     *ABS*:0000000000000003 CTRLC
          S68K_002.s:57     *ABS*:0000000000000018 CTRLX
          S68K_002.s:60     .text:0000000000000400 _srecType
          S68K_002.s:61     .text:0000000000000401 _srecByCt
          S68K_002.s:62     .text:0000000000000402 _srecData
          S68K_002.s:63     .text:0000000000000403 _srecCSum
          S68K_002.s:64     .text:0000000000000404 _srecAddr
          S68K_002.s:66     *ABS*:0000000000000400 srecType
          S68K_002.s:67     *ABS*:0000000000000401 srecByCt
          S68K_002.s:68     *ABS*:0000000000000402 srecData
          S68K_002.s:69     *ABS*:0000000000000403 srecCSum
          S68K_002.s:70     *ABS*:0000000000000404 srecAddr
          S68K_002.s:181    .text:0000000000080502 FERVR2
          S68K_002.s:106    .text:000000000008045c loop1stLoc
          S68K_002.s:179    .text:0000000000080502 failBitTest
          S68K_002.s:121    .text:000000000008047c loopAdrFill
          S68K_002.s:133    .text:000000000008049a loopAdrCk
          S68K_002.s:180    .text:0000000000080502 failAdrTest
          S68K_002.s:148    .text:00000000000804b4 fillSRAM
          S68K_002.s:152    .text:00000000000804c0 fillSRAMLoop
          S68K_002.s:867    .text:0000000000080a74 initDuart
          S68K_002.s:161    .text:00000000000804cc monitorStart
68K GAS  S68K_002.s 			page 22


          S68K_002.s:915    .text:0000000000080b63 BANNER_MSG
          S68K_002.s:206    .text:0000000000080530 printString1
          S68K_002.s:909    .text:0000000000080b4e RAM_PASS_MSG
          S68K_002.s:169    .text:00000000000804dc interpLoop
          S68K_002.s:937    .text:0000000000080c0c msgPrompt
          S68K_002.s:207    .text:0000000000080530 printString
          S68K_002.s:236    .text:0000000000080562 readLine
          S68K_002.s:293    .text:00000000000805f4 lineToUpper
          S68K_002.s:310    .text:0000000000080612 parseLine
          S68K_002.s:188    .text:0000000000080508 outChar1
          S68K_002.s:189    .text:0000000000080508 outChar
          S68K_002.s:197    .text:000000000008051c outChar2
          S68K_002.s:208    .text:0000000000080530 PSloop
          S68K_002.s:214    .text:0000000000080538 PSend
          S68K_002.s:222    .text:000000000008053a inChar1
          S68K_002.s:223    .text:000000000008053a inChar
          S68K_002.s:229    .text:000000000008054e inChar2
                            *ABS*:000000000007fbae varLineBuf
          S68K_002.s:240    .text:000000000008056e RLloop
          S68K_002.s:257    .text:000000000008059a RLBS
          S68K_002.s:268    .text:00000000000805b8 RLlineClr
          S68K_002.s:282    .text:00000000000805dc RLEndLn
          S68K_002.s:250    .text:000000000008058a .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_002.s:272    .text:00000000000805be RLlineClrloop
          S68K_002.s:295    .text:00000000000805fa LUloop
          S68K_002.s:302    .text:000000000008060c LUnext
          S68K_002.s:313    .text:000000000008061c PLfindCommand
          S68K_002.s:359    .text:0000000000080686 .examine
          S68K_002.s:741    .text:0000000000080996 .deposit
          S68K_002.s:784    .text:00000000000809fa .run
          S68K_002.s:338    .text:0000000000080662 .help
          S68K_002.s:427    .text:0000000000080710 loadSRec
          S68K_002.s:332    .text:000000000008065c .exit
          S68K_002.s:329    .text:0000000000080654 .invalid
          S68K_002.s:918    .text:0000000000080b76 msgInvalidCommand
          S68K_002.s:923    .text:0000000000080b8b msgHelp
          S68K_002.s:342    .text:000000000008066e .invalidAddr
          S68K_002.s:931    .text:0000000000080bea msgInvalidAddress
          S68K_002.s:346    .text:000000000008067a .invalidVal
          S68K_002.s:934    .text:0000000000080bfc msgInvalidValue
          S68K_002.s:616    .text:000000000008089a parseNumber
          S68K_002.s:364    .text:0000000000080692 .exloop
          S68K_002.s:378    .text:00000000000806b6 .exrange
          S68K_002.s:387    .text:00000000000806c8 .exlength
          S68K_002.s:395    .text:00000000000806da .exinter
          S68K_002.s:384    .text:00000000000806c4 .exquick
          S68K_002.s:391    .text:00000000000806d2 .exend
          S68K_002.s:669    .text:00000000000808fc dumpRAM
          S68K_002.s:400    .text:00000000000806e8 .exinterend
          S68K_002.s:407    .text:00000000000806fc .exinterpage
          S68K_002.s:928    .text:0000000000080bda ldSRecMsg
          S68K_002.s:430    .text:0000000000080718 loadSRecLoop
          S68K_002.s:489    .text:00000000000807ba setRecType
          S68K_002.s:508    .text:00000000000807d4 setBytCt
          S68K_002.s:548    .text:000000000008081e setAddr
          S68K_002.s:444    .text:000000000008074c loopSData
68K GAS  S68K_002.s 			page 23


          S68K_002.s:449    .text:000000000008075e sRecDataDone
          S68K_002.s:464    .text:0000000000080796 getSetLdData
          S68K_002.s:476    .text:00000000000807b0 getChksum
          S68K_002.s:524    .text:00000000000807e6 getHexPair
          S68K_002.s:472    .text:00000000000807ae skipLdData
          S68K_002.s:485    .text:00000000000807b8 failCSUM
          S68K_002.s:537    .text:0000000000080806 toNibble
          S68K_002.s:542    .text:0000000000080814 doHexLetter
          S68K_002.s:589    .text:000000000008087c adrLen16
          S68K_002.s:606    .text:0000000000080894 past16
          S68K_002.s:630    .text:00000000000808be PNinvalid
          S68K_002.s:636    .text:00000000000808c8 PNfirstdigit1
          S68K_002.s:633    .text:00000000000808c2 PNfirstdigit2
          S68K_002.s:638    .text:00000000000808cc PNloop
          S68K_002.s:649    .text:00000000000808e6 PNend
          S68K_002.s:656    .text:00000000000808f2 PNdigit1
          S68K_002.s:653    .text:00000000000808ec PNdigit2
          S68K_002.s:658    .text:00000000000808f6 PNdigit3
          S68K_002.s:673    .text:0000000000080904 .line
          S68K_002.s:808    .text:0000000000080a16 printHexAddr
          S68K_002.s:940    .text:0000000000080c0f msgColonSpace
          S68K_002.s:680    .text:0000000000080916 .hexbyte
          S68K_002.s:692    .text:0000000000080932 .endbytesShort
          S68K_002.s:707    .text:0000000000080958 .endbytes
          S68K_002.s:841    .text:0000000000080a3e printHexByte
          S68K_002.s:695    .text:0000000000080938 .endbytesShortLoop
          S68K_002.s:709    .text:000000000008095a .endbytesLoop
          S68K_002.s:724    .text:0000000000080980 .endline
          S68K_002.s:720    .text:0000000000080976 .unprintable
          S68K_002.s:943    .text:0000000000080c12 msgNewline
          S68K_002.s:730    .text:0000000000080990 .end
          S68K_002.s:766    .text:00000000000809ce DepCont
          S68K_002.s:750    .text:00000000000809aa DepLoop
          S68K_002.s:771    .text:00000000000809d8 DepMLine
          S68K_002.s:778    .text:00000000000809f0 DepEnd
                            *ABS*:000000000007fbaa varCurAddr
          S68K_002.s:912    .text:0000000000080b60 msgDepositPrompt
          S68K_002.s:799    .text:0000000000080a0c printHexWord
          S68K_002.s:827    .text:0000000000080a2e printHex_wordentry
          S68K_002.s:823    .text:0000000000080a28 printHex_addrentry
          S68K_002.s:816    .text:0000000000080a1e printHexLong
          S68K_002.s:851    .text:0000000000080a56 PHBsecond
          S68K_002.s:858    .text:0000000000080a6a PHBend
          S68K_002.s:893    .text:0000000000080afe delay1Sec
          S68K_002.s:895    .text:0000000000080b04 delay1Loop
          S68K_002.s:900    .text:0000000000080b0c READINLINE
          S68K_002.s:903    .text:0000000000080b1e L_TO_UPPER_MSG
          S68K_002.s:906    .text:0000000000080b3b WRITEOUTLINE
          S68K_002.s:921    .text:0000000000080b88 CRLF_MSG
          S68K_002.s:945    .text:0000000000080c15 debug_Srec_Typ_Msg
          S68K_002.s:948    .text:0000000000080c24 debug_Srec_BytCt_Msg
          S68K_002.s:951    .text:0000000000080c3b debug_Srec_CSum_Msg
          S68K_002.s:954    .text:0000000000080c4e debug_S2rec_Addr_Msg
          S68K_002.s:957    .text:0000000000080c63 debug_SXrec_Addr_Msg
          S68K_002.s:960    .text:0000000000080c7f debug_Srec_LDData_Msg

NO UNDEFINED SYMBOLS
68K GAS  S68K_002.s 			page 24


