68K GAS  S68K_002.s 			page 1


   1               	| S68K_002.s - 68K Monitor with extensions
   2               	|	Adds S Record loader
   3               	| Borrowed init code from 
   4               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   5               	
   6               	RAM_START	= 0x00000	| Beginning of the SRAM
   7               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   8               	RAM_END		= 0x7FFFF	| 512KB SRAM
   9               	ROM_START	= 0x80000	| ROM start
  10               	ROM_CODE	= ROM_START+1024| Skip vector table
  11               	*ROM_END	= 0x87FFF	| End of 32KB EPROM
  12               	ROM_END		= 0x8FFFF	| End of 64KB EPROM
  13               	
  14               	|||||||||||||||||||||||||||||||||
  15               	| 68681 Duart Register Addresses
  16               	|
  17               	DUART = 0x0F0000	  | Base Addr of DUART
  18               	MRA   = DUART+0		  | Mode Register A           (R/W)
  19               	SRA   = DUART+2       | Status Register A         (r)
  20               	CSRA  = DUART+2       | Clock Select Register A   (w)
  21               	CRA   = DUART+4       | Commands Register A       (w)
  22               	RBA   = DUART+6       | Receiver Buffer A         (r)
  23               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  24               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  25               	ISR   = DUART+10      | Interrupt Status Register (R)
  26               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  27               	MRB   = DUART+16      | Mode Register B           (R/W)
  28               	SRB   = DUART+18      | Status Register B         (R)
  29               	CSRB  = DUART+18      | Clock Select Register B   (W)
  30               	CRB   = DUART+20      | Commands Register B       (W)
  31               	RBB   = DUART+22      | Reciever Buffer B         (R)
  32               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  33               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  34               	OPC   = DUART+26      | Output port config        (W)
  35               	INU   = DUART+26      | Input port (unlatched)    (R)
  36               	OPS   = DUART+28      | Output port Set           (W)
  37               	OPR   = DUART+30      | Output port Clear         (W)
  38               	
  39               	||||||||||||||||||||||||||||||||||
  40               	| ASCII Control Characters
  41               	|
  42               	BEL   = 0x07
  43               	BKSP  = 0x08       | CTRL-H
  44               	TAB   = 0x09
  45               	LF    = 0x0A
  46               	CR    = 0x0D
  47               	ESC   = 0x1B
  48               	EOT	  = 0x00
  49               	
  50               	CTRLC	=	0x03
  51               	CTRLX	=	0x18     | Line Clear
  52               	
  53 0000 0000 0000 		.ORG	ROM_START
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
68K GAS  S68K_002.s 			page 2


  54               	
  55               	| FIRST 8 bytes loaded after reset |
  56 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  57 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  58               	
  59 80008 0000 0000 	        .ORG ROM_CODE
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  60 80400 4E71      		nop
  61 80402 4FF9 0007 		lea			STACK_END,%sp
  61      FFFC 
  62 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  62      0008 0000 
  63 80410 4E71      		nop
  64               	|
  65               	| Test the first two SRAM location
  66               	|
  67 80412 203C DEAD 		move.l	#0xDEADBEEF, %d0	| Test Pattern #1
  67      BEEF 
  68 80418 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  69 8041c 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  70 8041e 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  71 80420 B042      		cmp			%d2, %d0
  72 80422 6600 00C6 		bne			FERVR2						
  73 80426 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  73      AAAA 
  74 8042c 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  75 80430 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  76 80432 2611      		move.l	(%a1), %d3				| Read back
  77 80434 B243      		cmp			%d3, %d1
  78 80436 6600 00B2 		bne			FERVR2
  79 8043a 4E71      		nop
  80               	| Test bits of first location (as bytes)
  81 8043c 7001      		move.l	#1, %d0
  82 8043e 207C 0000 		move.l	#0, %a0
  82      0000 
  83               	loop1stLoc:
  84 80444 1080      		move.b	%d0, (%a0)
  85 80446 1210      		move.b	(%a0), %d1
  86 80448 B200      		cmp.b		%d0, %d1
  87 8044a 6600 009E 		bne			failBitTest
  88 8044e E348      		lsl			#1, %d0
  89 80450 0C80 0000 		cmp.l		#0x00000100, %d0
  89      0100 
  90 80456 6600 FFEC 		bne			loop1stLoc
  91               	|
  92               	| Test all address lines, 512KB SRAM
  93               	| Write incrementing pattern to data bits
  94               	|
  95 8045a 7001      		move.l	#1, %d0		| Fill pattern
  96 8045c 7401      		move.l	#1, %d2
  97 8045e 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
  97      0001 
  98               	loopAdrFill:
  99 80464 1080      		move.b	%d0,(%a0)	| Do the write
68K GAS  S68K_002.s 			page 3


 100 80466 5240      		addq		#1, %d0		| Increment the pattern
 101 80468 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
 102 8046a E38A      		lsl.l		#1, %d2		| Shift temp addr
 103 8046c 2042      		move.l	%d2, %a0	| Put back into addr reg
 104 8046e 0C82 0008 		cmp.l		#0x00080000,%d2
 104      0000 
 105 80474 6600 FFEE 		bne			loopAdrFill
 106               	| Check
 107 80478 7001      		move.l	#1, %d0
 108 8047a 7401      		move.l	#1, %d2
 109 8047c 207C 0000 		move.l	#1, %a0
 109      0001 
 110               	loopAdrCk:
 111 80482 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 112 80484 B200      		cmp.b		%d0, %d1
 113 80486 6600 0062 		bne			failAdrTest
 114 8048a 5240      		addq		#1, %d0
 115 8048c 2408      		move.l	%a0, %d2 
 116 8048e E38A      		lsl.l		#1, %d2
 117 80490 2042      		move.l	%d2, %a0
 118 80492 0C82 0008 		cmp.l		#0x00080000,%d2
 118      0000 
 119 80498 6600 FFE8 		bne			loopAdrCk
 120               		
 121               	|
 122               	| Fill SRAM with 0x00 values
 123               	|
 124               	fillSRAM:
 125 8049c 41F8 0000 		lea		RAM_START, %a0		| Start at base RAM address
 126 804a0 43F9 0007 		lea		RAM_END, %a1		| End when reach end RAM space
 126      FFFF 
 127 804a6 7000      		move.l	#0x00, %d0			| Fill with zeros
 128               	fillSRAMLoop:
 129 804a8 20C0      		move.l	%d0, (%a0)+			| Long fills are faster
 130 804aa B3C8      		cmpa.l	%a0, %a1
 131 804ac 6E00 FFFA 		bgt		fillSRAMLoop
 132               	
 133               	|
 134               	| Done with address test of SRAM
 135               	|
 136 804b0 4EBA 0422 		jsr     initDuart       	| Setup the serial port
 137               	monitorStart:					| Warm start
 138 804b4 41FA 050D 		lea		BANNER_MSG, %a0
 139 804b8 4EBA 005E 		jsr		printString1
 140 804bc 41FA 04F0 		lea		RAM_PASS_MSG, %a0
 141 804c0 4EBA 0056 		jsr		printString1
 142               	|
 143               	| Interpreter Loop
 144               	|
 145               	interpLoop:
 146 804c4 41FA 0596 	    lea     msgPrompt, %a0	| Prompt
 147 804c8 6100 004E 	    bsr.w   printString
 148 804cc 13FC 0004 		move.b	#0x04, OPR		| Turn on LED
 148      000F 001E 
 149 804d4 4EBA 0074 		jsr		readLine		| Blocking read of line
 150 804d8 13FC 0004 		move.b	#0x04, OPS		| Turn off LED
 150      000F 001C 
68K GAS  S68K_002.s 			page 4


 151 804e0 4EBA 00FA 		jsr		lineToUpper
 152 804e4 4EBA 0114 		jsr		parseLine
 153 804e8 60DA      		bra.s	interpLoop
 154               		
 155               	failBitTest:
 156               	failAdrTest:
 157               	FERVR2:
 158 804ea 4E71      		nop
 159 804ec 4EFA FFFC 		jmp	FERVR2
 160               	
 161               	|||||
 162               	| Writes a character to Port A, blocking if not ready (Full buffer)
 163               	|  - Takes a character in D0
 164               	outChar1:
 165               	outChar:
 166 804f0 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 166      000F 0002 
 167 804f8 6700 FFF6 	    beq     outChar1     
 168 804fc 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 168      0006 
 169 80502 4E75      	    rts
 170               	
 171               	| Writes a character to Port A, blocking if not ready (Full buffer)
 172               	|  - Takes a character in D0
 173               	outChar2:
 174 80504 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 174      000F 0012 
 175 8050c 6700 FFF6 	    beq     outChar2     
 176 80510 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 176      0016 
 177 80516 4E75      	    rts
 178               	
 179               	******
 180               	* Print a null terminated string
 181               	*
 182               	printString1:
 183               	printString:
 184               	 PSloop:
 185 80518 1018      	    move.b  (%a0)+, %d0  | Read in character
 186 8051a 6704      	    beq.s   PSend         | Check for the null
 187               	    
 188 8051c 61D2      	    bsr.s   outChar      | Otherwise write the character
 189 8051e 60F8      	    bra.s   PSloop        | And continue
 190               	PSend:
 191 80520 4E75      	    rts
 192               	
 193               	
 194               	|||||
 195               	| Reads in a character from Port A, blocking if none available
 196               	|  - Returns character in D0
 197               	|    
 198               	inChar1:
 199               	inChar:
 200 80522 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 200      000F 0002 
 201 8052a 6700 FFF6 	    beq     inChar1
 202 8052e 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
68K GAS  S68K_002.s 			page 5


 202      0006 
 203 80534 4E75      	    rts
 204               	
 205               	inChar2:
 206 80536 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 206      000F 0012 
 207 8053e 6700 FFF6 	    beq     inChar2
 208 80542 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 208      0016 
 209 80548 4E75      	    rts
 210               	
 211               	| Read in a line into the line buffer
 212               	readLine:
 213 8054a 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 214 8054e 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 214      FBAE 
 215 80554 B542      	    eor.w   %d2, %d2           	| Clear the character counter
 216               	 RLloop:
 217 80556 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 218 8055a 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 219 8055e 6722      	    beq.s   RLBS
 220 80560 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 221 80564 673A      	    beq.s   RLlineClr
 222 80566 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 223 8056a 6758      	    beq.s   RLEndLn
 224 8056c 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
 225 80570 67E4      	    beq.s   RLloop            	| Ignore LFs and get the next character
 226               	 .char:                      	| Normal character to be inserted into the buffer
 227 80572 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 228 80576 6CDE      	    bge.s   RLloop            	| If the buffer is full ignore the character
 229 80578 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 230 8057a 5242      	    addq.w  #1, %d2           	| Increment character count
 231 8057c 6100 FF72 	    bsr.w   outChar          	| Echo the character
 232 80580 60D4      	    bra.s   RLloop            	| And get the next one
 233               	 RLBS:
 234 80582 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 235 80584 67D0      	    beq.s   RLloop            	| Then ignore it
 236 80586 6100 FF68 	    bsr.w   outChar          	| Backspace
 237 8058a 103C 0020 	    move.b  #' ', %d0
 238 8058e 6100 FF60 	    bsr.w   outChar          	| Space
 239 80592 103C 0008 	    move.b  #BKSP, %d0
 240 80596 6100 FF58 	    bsr.w   outChar          	| Backspace
 241 8059a 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 242 8059c 5382      	    subq.l  #1, %d2           	| And current character count
 243 8059e 60B6      	    bra.s   RLloop            	| And goto the next character
 244               	 RLlineClr:
 245 805a0 4A42      	    tst     %d2               	| Anything to clear?
 246 805a2 67B2      	    beq.s   RLloop            	| If not, fetch the next character
 247 805a4 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 248               	 RLlineClrloop:
 249 805a6 103C 0008 	    move.b  #BKSP, %d0
 250 805aa 6100 FF44 	    bsr.w   outChar          	| Backspace
 251 805ae 103C 0020 	    move.b  #' ', %d0
 252 805b2 6100 FF3C 	    bsr.w   outChar          	| Space
 253 805b6 103C 0008 	    move.b  #BKSP, %d0
 254 805ba 6100 FF34 	    bsr.w   outChar          	| Backspace
 255 805be 5342      	    subq.w  #1, %d2          
68K GAS  S68K_002.s 			page 6


 256 805c0 66E4      	    bne.s   RLlineClrloop   	| Go till the start of the line
 257 805c2 6092      	    bra.s   RLloop   
 258               	 RLEndLn:
 259 805c4 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 260 805c8 103C 000A 	    move.b  #LF, %d0
 261 805cc 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 262 805d0 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 263 805d4 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 264 805d6 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 265 805da 4E75      	    rts                      	| And return
 266               	
 267               	
 268               	| Convert line buffer to upper case
 269               	lineToUpper:
 270 805dc 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 270      FBAE 
 271               	 LUloop:
 272 805e2 1010      	    move.b  (%a0), %d0        | Read in a character
 273 805e4 0C00 0061 	    cmp.b   #'a', %d0         
 274 805e8 6D0A      	    blt.s   LUnext            | Is it less than lower-case 'a', then move on
 275 805ea 0C00 007A 	    cmp.b   #'z', %d0
 276 805ee 6E04      	    bgt.s   LUnext            | Is it greater than lower-case 'z', then move on
 277 805f0 0400 0020 	    sub.b   #0x20, %d0         | Then convert a to A, b to B, etc.
 278               	 LUnext:
 279 805f4 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 280 805f6 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
 281 805f8 4E75      	    rts
 282               	
 283               	|
 284               	| Parse Line
 285               	|
 286               	parseLine:
 287 805fa 48E7 0030 	    movem.l %a2-%a3, -(%SP)     | Save registers
 288 805fe 41F9 0007 	    lea     varLineBuf, %a0
 288      FBAE 
 289               	 PLfindCommand:
 290 80604 1018      	    move.b  (%a0)+, %d0
 291 80606 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 292 8060a 6700 FFF8 	    beq.w   PLfindCommand    
 293 8060e 0C00 0045 	    cmp.b   #'E', %d0           | Examine command
 294 80612 6700 005C 	    beq.w   .examine
 295 80616 0C00 0044 	    cmp.b   #'D', %d0           | Deposit command
 296 8061a 6700 01DA 	    beq.w   .deposit
 297 8061e 0C00 0052 	    cmp.b   #'R', %d0           | Run command
 298 80622 6700 0236 	    beq.w   .run
 299 80626 0C00 0048 	    cmp.b   #'H', %d0           | Help command
 300 8062a 6700 001E 	    beq.w   .help
 301 8062e 0C00 004C 	    cmp.b   #'L', %d0           | Help command
 302 80632 6700 003A 	    beq.w   loadSRec
 303 80636 0C00 0000 	    cmp.b   #0, %d0             | Ignore blank lines
 304 8063a 6708      	    beq.s   .exit               
 305               	 .invalid:   
 306 8063c 41FA 0398 	    lea     msgInvalidCommand, %a0
 307 80640 6100 FED6 	    bsr.w   printString
 308               	 .exit:
 309 80644 4CDF 0C00 	    movem.l (%SP)+, %a2-%a3     | Restore registers
 310 80648 4E75      	    rts
68K GAS  S68K_002.s 			page 7


 311               	
 312               	|||||||||||||||||||||||||||||||
 313               	|| HELP command
 314               	 .help:
 315 8064a 41FA 039F 	    lea     msgHelp, %a0
 316 8064e 6100 FEC8 	    bsr.w   printString
 317 80652 6000 FFF0 	    bra.w   .exit
 318               	 .invalidAddr:
 319 80656 41FA 03E2 	    lea     msgInvalidAddress, %a0
 320 8065a 6100 FEBC 	    bsr.w   printString
 321 8065e 6000 FFE4 	    bra.w   .exit
 322               	 .invalidVal:
 323 80662 41FA 03E8 	    lea     msgInvalidValue, %a0
 324 80666 6100 FEB0 	    bsr.w   printString
 325 8066a 6000 FFD8 	    bra.w   .exit
 326               	
 327               	loadSRec:
 328 8066e 4E75      		rts
 329               		
 330               	|||||||||||||||||||||||||||||||
 331               	| Examines memory addresses
 332               	| Valid modes:
 333               	|   e ADDR                  Displays a single byte
 334               	|   e ADDR-ADDR             Dispalys all bytes between the two addresses
 335               	|   e ADDR+LEN              Dispays LEN bytes after ADDR
 336               	|   e ADDR;                 Interactive mode, space shows 16 lines, enter shows 1.
 337               	|   e ADDR.                 Quick line, displays one line 
 338               	.examine:
 339 80670 6100 0088 	    bsr.w   parseNumber         | Read in the start address
 340 80674 4A01      	    tst.b   %d1                 | Make sure it's valid (parseNumber returns non-zero in d1 for fail
 341 80676 6600 FFDE 	    bne.w   .invalidAddr        
 342 8067a 2640      	    move.l  %d0, %a3            | Save the start address
 343               	 .exloop:
 344 8067c 1018      	    move.b  (%a0)+, %d0
 345 8067e 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 346 80682 67F8      	    beq.s   .exloop
 347 80684 0C00 002D 	    cmp.b   #'-', %d0           | Check if it's a range specifier
 348 80688 6716      	    beq.s   .exrange
 349 8068a 0C00 002B 	    cmp.b   #'+', %d0           | Check if it's a length specifier
 350 8068e 6722      	    beq.s   .exlength
 351 80690 0C00 003B 	    cmp.b   #';', %d0           | Check if we're going interactive
 352 80694 672E      	    beq.s   .exinter
 353 80696 0C00 002E 	    cmp.b   #'.', %d0           | Check if quick 16 
 354 8069a 6712      	    beq.s   .exquick
 355 8069c 7001      	    move.l  #1, %d0             | Otherwise read in a single byte
 356 8069e 601C      	    bra.s   .exend              
 357               	 .exrange:
 358 806a0 6100 0058 	    bsr.w   parseNumber         | Find the end address
 359 806a4 4A01      	    tst.b   %d1                 | Check if we found a valid address
 360 806a6 6600 FFAE 	    bne.w   .invalidAddr
 361 806aa 908B      	    sub.l   %a3, %d0            | Get the length
 362 806ac 600E      	    bra.s   .exend
 363               	 .exquick:                      | Quick mode means show one line of 16 bytes
 364 806ae 7010      	    move.l  #0x10, %d0
 365 806b0 600A      	    bra.s   .exend
 366               	 .exlength:                     | Length mode means a length is specified
 367 806b2 6100 0046 	    bsr.w   parseNumber         | Find the length
68K GAS  S68K_002.s 			page 8


 368 806b6 4A01      	    tst.b   %d1
 369 806b8 6600 FF9C 	    bne.w   .invalidAddr
 370               	 .exend:                        | Done parsing, give the parameters to dumpRAM and exit
 371 806bc 204B      	    move.l  %a3, %a0
 372 806be 6100 009C 	    bsr.w   dumpRAM
 373 806c2 6080      	    bra.s   .exit
 374               	 .exinter:                      | Interactive mode, Space shows 16 lines, enter shows 1.
 375 806c4 204B      	    move.l  %a3, %a0            | Current Address
 376 806c6 7010      	    move.l  #0x10, %d0          | 16 bytes
 377 806c8 6100 0092 	    bsr.w   dumpRAM             | Dump this line
 378 806cc D7FC 0000 	    add.l   #0x10, %a3          | Move up the current address 16 bytes
 378      0010 
 379               	 .exinterend:
 380 806d2 6100 FE4E 	    bsr.w   inChar
 381 806d6 0C00 000D 	    cmp.b   #CR, %d0            | Display another line
 382 806da 67E8      	    beq.s   .exinter
 383 806dc 0C00 0020 	    cmp.b   #' ', %d0           | Display a page (256 bytes at a time)
 384 806e0 6704      	    beq.s   .exinterpage
 385 806e2 6000 FF60 	    bra	   .exit               | Otherwise exit
 386               	 .exinterpage:
 387 806e6 204B      	    move.l  %a3, %a0
 388 806e8 203C 0000 	    move.l  #0x100, %d0         | 256 bytes
 388      0100 
 389 806ee 6100 006C 	    bsr.w   dumpRAM             | Dump 16 lines of RAM
 390 806f2 D7FC 0000 	    add.l   #0x100, %a3         | Move up the current address by 256
 390      0100 
 391 806f8 60D8      	    bra.s   .exinterend
 392               	
 393               	|||||||||||||||||||||||||||||
 394               	| Find and parse a hex number
 395               	|  Starting address in A0
 396               	|  Number returned in D0
 397               	|  Status in D1   (0 success, 1 fail)
 398               	|  TODO: Try and merge first digit code with remaining digit code
 399               	parseNumber:
 400 806fa B180      	    eor.l   %d0, %d0		| Zero out d0
 401 806fc 1018      	    move.b  (%a0)+, %d0
 402 806fe 0C00 0020 	    cmp.b   #' ', %d0		|  Ignore all leading spaces
 403 80702 67F6      	    beq.s   parseNumber
 404 80704 0C00 0030 	    cmp.b   #'0', %d0       | Look for hex digits 0-9
 405 80708 6D14      	    blt.s	PNinvalid
 406 8070a 0C00 0039 	    cmp.b   #'9', %d0
 407 8070e 6F18      	    ble.s   PNfirstdigit1
 408               	
 409 80710 0C00 0041 	    cmp.b   #'A', %d0      	| Look for hex digits A-F
 410 80714 6D00 FF26 	    blt   .invalid    
 411 80718 0C00 0046 	    cmp.b   #'F', %d0
 412 8071c 6F04      	    ble.s   PNfirstdigit2
 413               	PNinvalid:
 414 8071e 7201      	    move.l  #1, %d1			| Invalid character, mark failure and return
 415 80720 4E75      	    rts
 416               	PNfirstdigit2:
 417 80722 0400 0037 	    sub.b   #'7', %d0       | Turn 'A' to 10
 418 80726 6004      	    bra.s   PNloop
 419               	PNfirstdigit1:
 420 80728 0400 0030 	    sub.b   #'0', %d0       | Turn '0' to 0
 421               	 PNloop:
68K GAS  S68K_002.s 			page 9


 422 8072c 1218      	    move.b  (%a0)+, %d1      | Read in a digit
 423 8072e 0C01 0030 	    cmp.b   #'0', %d1       | Look for hex digits 0-9
 424 80732 6D12      	    blt.s   PNend         	| Any other characters mean we're done reading
 425 80734 0C01 0039 	    cmp.b   #'9', %d1
 426 80738 6F18      	    ble.s   PNdigit1
 427 8073a 0C01 0041 	    cmp.b   #'A', %d1      	| Look for hex digits A-F
 428 8073e 6D06      	    blt.s   PNend
 429 80740 0C01 0046 	    cmp.b   #'F', %d1
 430 80744 6F06      	    ble.s   PNdigit2
 431               	
 432               	PNend:                       | We hit a non-hex digit character, we're done parsing
 433 80746 5388      	    subq.l  #1, %a0         | Move the pointer back before the end character we read
 434 80748 7200      	    move.l  #0, %d1
 435 8074a 4E75      	    rts
 436               	PNdigit2:
 437 8074c 0401 0037 	    sub.b   #'7', %d1		| Turn 'A' to 10
 438 80750 6004      	    bra.s   PNdigit3
 439               	PNdigit1:
 440 80752 0401 0030 	    sub.b   #'0', %d1       | Turn '0' to 0
 441               	PNdigit3:
 442 80756 E988      	    lsl.l   #4, %d0        	| Shift over to the next nybble
 443 80758 D001      	    add.b   %d1, %d0       	| Place in our current nybble (could be or.b instead)
 444 8075a 60D0      	    bra.s   PNloop
 445               	    
 446               	
 447               	|||||||||||||||||||||||||||||
 448               	| Dumps a section of RAM to the screen
 449               	| Displays both hex values and ASCII characters
 450               	| d0 - Number of bytes to dump
 451               	| a0 - Start Address
 452               	dumpRAM:
 453 8075c 48E7 3820 	    movem.l %d2-%d4/%a2, -(%SP) | Save registers
 454 80760 2448      	    move.l  %a0, %a2           	| Save the start address
 455 80762 2400      	    move.l  %d0, %d2           	| And the number of bytes
 456               	 .line:
 457 80764 200A      	    move.l  %a2, %d0          
 458 80766 6100 010E 	    bsr.w   printHexAddr     	| Starting address of this line
 459 8076a 41FA 02F3 	    lea     msgColonSpace, %a0
 460 8076e 6100 FDA8 	    bsr.w   printString
 461 80772 7610      	    move.l  #16, %d3         	| 16 Bytes can be printed on a line
 462 80774 2803      	    move.l  %d3, %d4       		| Save number of bytes on this line
 463               	 .hexbyte:
 464 80776 4A82      	    tst.l   %d2               	| Check if we're out of bytes
 465 80778 6718      	    beq.s   .endbytesShort
 466 8077a 4A03      	    tst.b   %d3               	| Check if we're done this line
 467 8077c 673A      	    beq.s   .endbytes    
 468 8077e 101A      	    move.b  (%a2)+, %d0        	| Read a byte in from RAM
 469 80780 6100 011C 	    bsr.w   printHexByte     	| Display it
 470 80784 103C 0020 	    move.b  #' ', %d0
 471 80788 6100 FD66 	    bsr.w   outChar          	| Space out bytes
 472 8078c 5383      	    subq.l  #1, %d3    
 473 8078e 5382      	    subq.l  #1, %d2        
 474 80790 60E4      	    bra.s   .hexbyte
 475               	 .endbytesShort:
 476 80792 9803      	    sub.b   %d3, %d4           	| Make d4 the actual number of bytes on this line
 477 80794 103C 0020 	    move.b  #' ', %d0
 478               	 .endbytesShortLoop:
68K GAS  S68K_002.s 			page 10


 479 80798 4A03      	    tst.b   %d3               	| Check if we ended the line
 480 8079a 671C      	    beq.s   .endbytes
 481 8079c 103C 0020 	    move.b  #' ', %d0
 482 807a0 6100 FD4E 	    bsr.w   outChar          	| Three spaces to pad out
 483 807a4 103C 0020 	    move.b  #' ', %d0
 484 807a8 6100 FD46 	    bsr.w   outChar
 485 807ac 103C 0020 	    move.b  #' ', %d0
 486 807b0 6100 FD3E 	    bsr.w   outChar
 487               	    
 488 807b4 5303      	    subq.b  #1, %d3
 489 807b6 60E0      	    bra.s   .endbytesShortLoop
 490               	 .endbytes:
 491 807b8 95C4      	    suba.l  %d4, %a2        	| Return to the start address of this line
 492               	 .endbytesLoop:
 493 807ba 4A04      	    tst.b   %d4               	| Check if we are done printing ascii
 494 807bc 6700 0022 	    beq     .endline    
 495 807c0 5304      	    subq.b  #1, %d4
 496 807c2 101A      	    move.b  (%a2)+, %d0        	| Read the byte again
 497 807c4 0C00 0020 	    cmp.b   #' ', %d0         	| Lowest printable character
 498 807c8 6D0C      	    blt.s   .unprintable
 499 807ca 0C00 007E 	    cmp.b   #'~', %d0         	| Highest printable character
 500 807ce 6E06      	    bgt.s   .unprintable
 501 807d0 6100 FD1E 	    bsr.w   outChar
 502 807d4 60E4      	    bra.s   .endbytesLoop
 503               	 .unprintable:
 504 807d6 103C 002E 	    move.b  #'.', %d0
 505 807da 6100 FD14 	    bsr.w   outChar
 506 807de 60DA      	    bra.s   .endbytesLoop
 507               	 .endline:
 508 807e0 41FA 0280 	    lea     msgNewline, %a0
 509 807e4 6100 FD32 	    bsr.w   printString
 510 807e8 4A82      	    tst.l   %d2
 511 807ea 6F04      	    ble.s   .end
 512 807ec 6000 FF76 	    bra.w   .line
 513               	 .end:
 514 807f0 4CDF 041C 	    movem.l (%SP)+, %d2-%d4/%a2		| Restore registers
 515 807f4 4E75      	    rts
 516               	
 517               	|||||||||||||||||||||||
 518               	| Deposit values into RAM
 519               	| d ADDR VAL VAL            Deposit value(s) into RAM
 520               	| d ADDR VAL VAL;           Deposit values, continue with values on next line
 521               	|  VAL VAL VAL;              - Continuing with further continue
 522               	| d: VAL VAL                Continue depositing values after the last address written to
 523               	|||||||||||||||||||||||
 524               	.deposit:
 525 807f6 1010      	    move.b  (%a0), %d0
 526 807f8 0C00 003A 	    cmp.b   #':', %d0       	| Check if we want to continue from last
 527 807fc 6730      	    beq.s   DepCont
 528               	    
 529 807fe 6100 FEFA 	    bsr.w   parseNumber         | Otherwise read the address
 530 80802 4A01      	    tst.b   %d1
 531 80804 6600 FE50 	    bne		.invalidAddr
 532 80808 2640      	    move.l  %d0, %a3           	| Save the start address
 533               	 DepLoop:
 534 8080a 1010      	    move.b  (%a0), %d0            
 535 8080c 0C00 003B 	    cmp.b   #';', %d0          	| Check for continue
68K GAS  S68K_002.s 			page 11


 536 80810 6726      	    beq.s   DepMLine
 537 80812 4A40      	    tst     %d0              	| Check for the end of line
 538 80814 6700 003A 	    beq     DepEnd
 539               	    
 540 80818 6100 FEE0 	    bsr		parseNumber         | Otherwise read a value
 541 8081c 4A01      	    tst.b   %d1
 542 8081e 6600 FE42 	    bne		.invalidVal
 543 80822 0C40 00FF 	    cmp.w   #255, %d0          	| Make sure it's a byte
 544 80826 6E00 FE3A 	    bgt		.invalidVal
 545               	    
 546 8082a 16C0      	    move.b  %d0, (%a3)+        	| Store the value into memory
 547 8082c 60DC      	    bra.s   DepLoop
 548               	    
 549               	 DepCont:
 550 8082e 2679 0007 	    move.l  varCurAddr, %a3   	| Read in the last address 
 550      FBAA 
 551 80834 5288      	    addq.l  #1, %a0           	| Skip over the ':'
 552 80836 60D2      	    bra.s   DepLoop
 553               	    
 554               	 DepMLine:
 555 80838 41FA 0186 	    lea     msgDepositPrompt, %a0
 556 8083c 6100 FCDA 	    bsr.w   printString
 557 80840 6100 FD08 	    bsr.w   readLine          	| Read in the next line to be parsed
 558 80844 6100 FD96 	    bsr.w   lineToUpper         | Convert to uppercase
 559 80848 41F9 0007 	    lea     varLineBuf, %a0    	| Reset our buffer pointer
 559      FBAE 
 560 8084e 60BA      	    bra.s   DepLoop            	| And jump back to decoding
 561               	 DepEnd:
 562 80850 23CB 0007 	    move.l  %a3, varCurAddr
 562      FBAA 
 563 80856 6000 FDEC 	    bra.w   .exit
 564               	
 565               	|||||||||||||||||||||||
 566               	| run code
 567               	 .run:
 568 8085a 6100 FE9E 	    bsr.w   parseNumber        	| Otherwise read the address
 569 8085e 4A01      	    tst.b   %d1
 570 80860 6600 FDF4 	    bne		.invalidAddr
 571 80864 2040      	    move.l  %d0, %a0
 572 80866 4E90      	    jsr     (%a0)             	| Jump to the code! 
 573               	                                | Go as subroutine to allow code to return to us
 574 80868 4EBA FC4A 	    jsr     monitorStart        | Warm start after returning so everything is in
 575               	                                | a known state.
 576               	
 577               	
 578               	|||||||||||||||||||||||
 579               	|| KEEP All printHex functions together ||
 580               	|||||||||||||||||||||||
 581               	| Print a hex word
 582               	printHexWord:
 583 8086c 2F02      	    move.l  %d2, -(%SP)		| Save D2
 584 8086e 2400      	    move.l  %d0, %d2		| Save the address in d2
 585               	    
 586 80870 E19A      	    rol.l   #0x8, %d2       | 4321 -> 3214
 587 80872 E19A      	    rol.l   #0x8, %d2       | 3214 -> 2143 
 588 80874 6018      	    bra.s   printHex_wordentry  | Print out the last 16 bits
 589               	|||||||||||||||||||||||
68K GAS  S68K_002.s 			page 12


 590               	| Print a hex 24-bit address
 591               	printHexAddr:
 592 80876 2F02      	    move.l %d2, -(%SP)   	| Save D2
 593 80878 2400      	    move.l %d0, %d2      	| Save the address in d2
 594               	    
 595 8087a E19A      	    rol.l   #0x8, %d2     	| 4321 -> 3214
 596 8087c 600A      	    bra.s   printHex_addrentry  | Print out the last 24 bits
 597               	|||||||||||||||||||||||
 598               	* Print a hex long
 599               	printHexLong:
 600 8087e 2F02      	    move.l  %d2, -(%SP)     | Save D2
 601 80880 2400      	    move.l  %d0, %d2        | Save the address in d2
 602               	    
 603 80882 E19A      	    rol.l   #0x8, %d2        | 4321 -> 3214 high byte in low
 604 80884 2002      	    move.l  %d2, %d0
 605 80886 6116      	    bsr.s   printHexByte  	| Print the high byte (24-31)
 606               	printHex_addrentry:     
 607 80888 E19A      	    rol.l   #0x8, %d2        	| 3214 -> 2143 middle-high byte in low
 608 8088a 2002      	    move.l  %d2, %d0              
 609 8088c 6110      	    bsr.s   printHexByte  	| Print the high-middle byte (16-23)
 610               	printHex_wordentry:    
 611 8088e E19A      	    rol.l   #0x8, %d2        	| 2143 -> 1432 Middle byte in low
 612 80890 2002      	    move.l  %d2, %d0
 613 80892 610A      	    bsr.s   printHexByte  	| Print the middle byte (8-15)
 614 80894 E19A      	    rol.l   #0x8, %d2
 615 80896 2002      	    move.l  %d2, %d0
 616 80898 6104      	    bsr.s   printHexByte  	| Print the low byte (0-7)
 617               	    
 618 8089a 241F      	    move.l (%SP)+, %d2      | Restore D2
 619 8089c 4E75      	    RTS
 620               	    
 621               	|||||||||||||||||||||||
 622               	| Print a hex byte
 623               	|  - Takes byte in D0
 624               	printHexByte:
 625 8089e 2F02      	    move.l  %D2, -(%SP)
 626 808a0 7400      		move.l	#0, %d2
 627 808a2 1400      	    move.b  %d0, %d2
 628 808a4 E808      	    lsr.b   #0x4, %d0		| Shift down upper nibble
 629 808a6 0200 000F 		andi.b	#0xf, %d0
 630 808aa 0600 0030 	    add.b   #'0', %d0
 631 808ae 0C00 0039 	    cmp.b   #'9', %d0		| Check if the hex number was from 0-9
 632 808b2 6F02      	    ble.s   PHBsecond
 633 808b4 5E00      	    add.b   #0x7, %d0			| Shift 0xA-0xF from ':' to 'A'
 634               	PHBsecond:
 635 808b6 6100 FC38 	    bsr   outChar			| Print the digit
 636 808ba 0202 000F 	    andi.b  #0x0F, %d2		| Now we want the lower digit Mask only the lower digit
 637 808be 0602 0030 	    add.b   #'0', %d2
 638 808c2 0C02 0039 	    cmp.b   #'9', %d2     	| Same as before    
 639 808c6 6F02      	    ble.s   PHBend
 640 808c8 5E02      	    add.b   #0x7, %D2
 641               	PHBend:
 642 808ca 1002      	    move.b  %D2, %D0
 643 808cc 6100 FC22 	    bsr	   outChar      	| Print the lower digit
 644 808d0 241F      	    move.l  (%SP)+, %D2
 645 808d2 4E75      	    rts
 646               		
68K GAS  S68K_002.s 			page 13


 647               	
 648               	|||||
 649               	| Initializes the 68681 DUART port A as 9600 8N1 
 650               	initDuart:
 651 808d4 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 651      000F 0004 
 652 808dc 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 652      000F 0004 
 653 808e4 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 653      000F 0004 
 654               	    
 655 808ec 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 655      000F 0008 
 656 808f4 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 656      000F 0002 
 657 808fc 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 657      000F 0000 
 658 80904 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 658      000F 0000 
 659               	    
 660 8090c 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 660      000F 0004 
 661               	
 662 80914 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 662      000F 0014 
 663 8091c 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 663      000F 0014 
 664 80924 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 664      000F 0014 
 665               	    
 666 8092c 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 666      000F 0012 
 667 80934 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 667      000F 0010 
 668 8093c 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 668      000F 0010 
 669               	    
 670 80944 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 670      000F 0014 
 671               		
 672 8094c 13FC 0000 		move.b	#0x00, OPC		 | Output port configuration (all bit are outs)
 672      000F 001A 
 673 80954 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 673      000F 001E 
 674 8095c 4E75      	    rts    
 675               	
 676               	delay1Sec:
 677 8095e 203C 0003 		move.l	#200000, %d0	| rough count
 677      0D40 
 678               	delay1Loop:
 679 80964 5380      		sub.l	#1, %d0			
 680 80966 6600 FFFC 		bne		delay1Loop
 681 8096a 4E75      		rts
 682               	
 683               	READINLINE:	  
 684 8096c 5265 6164 		.ascii  "Reading in line"
 684      696E 6720 
68K GAS  S68K_002.s 			page 14


 684      696E 206C 
 684      696E 65
 685 8097b 0D0A 00   		dc.b CR,LF,EOT
 686               	L_TO_UPPER_MSG:  
 687 8097e 436F 6E76 		.ascii  "Convert line to upper case"
 687      6572 7420 
 687      6C69 6E65 
 687      2074 6F20 
 687      7570 7065 
 688 80998 0D0A 00   		dc.b CR,LF,EOT
 689               	WRITEOUTLINE:	  
 690 8099b 5772 6974 		.ascii  "Writing out line"
 690      696E 6720 
 690      6F75 7420 
 690      6C69 6E65 
 691 809ab 0D0A 00   		dc.b CR,LF,EOT
 692               	RAM_PASS_MSG:  
 693 809ae 5241 4D20 		.ascii  "RAM Test Passed"
 693      5465 7374 
 693      2050 6173 
 693      7365 64
 694 809bd 0D0A 00   		dc.b CR,LF,EOT
 695               	msgDepositPrompt:
 696 809c0 3A20      	    .ascii	": "
 697 809c2 00        		dc.b 	EOT
 698               	BANNER_MSG:	
 699 809c3 5349 4D50 		.ascii  "SIMPLE-68008 CPU"
 699      4C45 2D36 
 699      3830 3038 
 699      2043 5055 
 700 809d3 0D0A 00   		dc.b CR,LF,EOT
 701               	msgInvalidCommand:
 702 809d6 496E 7661 	    .ascii "Invalid Command"
 702      6C69 6420 
 702      436F 6D6D 
 702      616E 64
 703 809e5 0D0A 00   		dc.b CR,LF,EOT
 704               	CRLF_MSG:	
 705 809e8 0D0A 00   		dc.b CR,LF,EOT
 706               	msgHelp:
 707 809eb 4176 6169 	    .ascii	"Available Commands: "
 707      6C61 626C 
 707      6520 436F 
 707      6D6D 616E 
 707      6473 3A20 
 708 809ff 0D0A      		dc.b	CR,LF
 709 80a01 2028 4529 	    .ascii	" (E)xamine    (D)eposit    (R)un     (L)oad     (H)elp"
 709      7861 6D69 
 709      6E65 2020 
 709      2020 2844 
 709      2965 706F 
 710 80a37 0D0A 00   		dc.b	CR,LF,EOT
 711               	msgInvalidAddress:
 712 80a3a 496E 7661 	    .ascii	"Invalid Address"
 712      6C69 6420 
 712      4164 6472 
 712      6573 73
68K GAS  S68K_002.s 			page 15


 713 80a49 0D0A 00   		dc.b 	CR,LF,EOT
 714               	msgInvalidValue:
 715 80a4c 496E 7661 	    .ascii	"Invalid Value"
 715      6C69 6420 
 715      5661 6C75 
 715      65
 716 80a59 0D0A 00   		dc.b	CR,LF,EOT
 717               	msgPrompt:
 718 80a5c 3E20      		.ascii "> "
 719 80a5e 00        	    dc.b EOT
 720               	msgColonSpace:
 721 80a5f 3A20      	    .ascii ": "
 722 80a61 00        	    dc.b EOT
 723               	msgNewline:
 724 80a62 0D0A 00   	    dc.b CR,LF,EOT
 725               		
 726               	MAX_LINE_LENGTH = 80
 727               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
 728               	varCurAddr = varLineBuf-4
68K GAS  S68K_002.s 			page 16


DEFINED SYMBOLS
          S68K_002.s:6      *ABS*:0000000000000000 RAM_START
          S68K_002.s:7      *ABS*:000000000007fffc STACK_END
          S68K_002.s:8      *ABS*:000000000007ffff RAM_END
          S68K_002.s:9      *ABS*:0000000000080000 ROM_START
          S68K_002.s:10     *ABS*:0000000000080400 ROM_CODE
          S68K_002.s:12     *ABS*:000000000008ffff ROM_END
          S68K_002.s:17     *ABS*:00000000000f0000 DUART
          S68K_002.s:18     *ABS*:00000000000f0000 MRA
          S68K_002.s:19     *ABS*:00000000000f0002 SRA
          S68K_002.s:20     *ABS*:00000000000f0002 CSRA
          S68K_002.s:21     *ABS*:00000000000f0004 CRA
          S68K_002.s:22     *ABS*:00000000000f0006 RBA
          S68K_002.s:23     *ABS*:00000000000f0006 TBA
          S68K_002.s:24     *ABS*:00000000000f0008 ACR
          S68K_002.s:25     *ABS*:00000000000f000a ISR
          S68K_002.s:26     *ABS*:00000000000f000a IMR
          S68K_002.s:27     *ABS*:00000000000f0010 MRB
          S68K_002.s:28     *ABS*:00000000000f0012 SRB
          S68K_002.s:29     *ABS*:00000000000f0012 CSRB
          S68K_002.s:30     *ABS*:00000000000f0014 CRB
          S68K_002.s:31     *ABS*:00000000000f0016 RBB
          S68K_002.s:32     *ABS*:00000000000f0016 TBB
          S68K_002.s:33     *ABS*:00000000000f0018 IVR
          S68K_002.s:34     *ABS*:00000000000f001a OPC
          S68K_002.s:35     *ABS*:00000000000f001a INU
          S68K_002.s:36     *ABS*:00000000000f001c OPS
          S68K_002.s:37     *ABS*:00000000000f001e OPR
          S68K_002.s:42     *ABS*:0000000000000007 BEL
          S68K_002.s:43     *ABS*:0000000000000008 BKSP
          S68K_002.s:44     *ABS*:0000000000000009 TAB
          S68K_002.s:45     *ABS*:000000000000000a LF
          S68K_002.s:46     *ABS*:000000000000000d CR
          S68K_002.s:47     *ABS*:000000000000001b ESC
          S68K_002.s:48     *ABS*:0000000000000000 EOT
          S68K_002.s:50     *ABS*:0000000000000003 CTRLC
          S68K_002.s:51     *ABS*:0000000000000018 CTRLX
          S68K_002.s:157    .text:00000000000804ea FERVR2
          S68K_002.s:83     .text:0000000000080444 loop1stLoc
          S68K_002.s:155    .text:00000000000804ea failBitTest
          S68K_002.s:98     .text:0000000000080464 loopAdrFill
          S68K_002.s:110    .text:0000000000080482 loopAdrCk
          S68K_002.s:156    .text:00000000000804ea failAdrTest
          S68K_002.s:124    .text:000000000008049c fillSRAM
          S68K_002.s:128    .text:00000000000804a8 fillSRAMLoop
          S68K_002.s:650    .text:00000000000808d4 initDuart
          S68K_002.s:137    .text:00000000000804b4 monitorStart
          S68K_002.s:698    .text:00000000000809c3 BANNER_MSG
          S68K_002.s:182    .text:0000000000080518 printString1
          S68K_002.s:692    .text:00000000000809ae RAM_PASS_MSG
          S68K_002.s:145    .text:00000000000804c4 interpLoop
          S68K_002.s:717    .text:0000000000080a5c msgPrompt
          S68K_002.s:183    .text:0000000000080518 printString
          S68K_002.s:212    .text:000000000008054a readLine
          S68K_002.s:269    .text:00000000000805dc lineToUpper
          S68K_002.s:286    .text:00000000000805fa parseLine
          S68K_002.s:164    .text:00000000000804f0 outChar1
68K GAS  S68K_002.s 			page 17


          S68K_002.s:165    .text:00000000000804f0 outChar
          S68K_002.s:173    .text:0000000000080504 outChar2
          S68K_002.s:184    .text:0000000000080518 PSloop
          S68K_002.s:190    .text:0000000000080520 PSend
          S68K_002.s:198    .text:0000000000080522 inChar1
          S68K_002.s:199    .text:0000000000080522 inChar
          S68K_002.s:205    .text:0000000000080536 inChar2
                            *ABS*:000000000007fbae varLineBuf
          S68K_002.s:216    .text:0000000000080556 RLloop
          S68K_002.s:233    .text:0000000000080582 RLBS
          S68K_002.s:244    .text:00000000000805a0 RLlineClr
          S68K_002.s:258    .text:00000000000805c4 RLEndLn
          S68K_002.s:226    .text:0000000000080572 .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_002.s:248    .text:00000000000805a6 RLlineClrloop
          S68K_002.s:271    .text:00000000000805e2 LUloop
          S68K_002.s:278    .text:00000000000805f4 LUnext
          S68K_002.s:289    .text:0000000000080604 PLfindCommand
          S68K_002.s:338    .text:0000000000080670 .examine
          S68K_002.s:524    .text:00000000000807f6 .deposit
          S68K_002.s:567    .text:000000000008085a .run
          S68K_002.s:314    .text:000000000008064a .help
          S68K_002.s:327    .text:000000000008066e loadSRec
          S68K_002.s:308    .text:0000000000080644 .exit
          S68K_002.s:305    .text:000000000008063c .invalid
          S68K_002.s:701    .text:00000000000809d6 msgInvalidCommand
          S68K_002.s:706    .text:00000000000809eb msgHelp
          S68K_002.s:318    .text:0000000000080656 .invalidAddr
          S68K_002.s:711    .text:0000000000080a3a msgInvalidAddress
          S68K_002.s:322    .text:0000000000080662 .invalidVal
          S68K_002.s:714    .text:0000000000080a4c msgInvalidValue
          S68K_002.s:399    .text:00000000000806fa parseNumber
          S68K_002.s:343    .text:000000000008067c .exloop
          S68K_002.s:357    .text:00000000000806a0 .exrange
          S68K_002.s:366    .text:00000000000806b2 .exlength
          S68K_002.s:374    .text:00000000000806c4 .exinter
          S68K_002.s:363    .text:00000000000806ae .exquick
          S68K_002.s:370    .text:00000000000806bc .exend
          S68K_002.s:452    .text:000000000008075c dumpRAM
          S68K_002.s:379    .text:00000000000806d2 .exinterend
          S68K_002.s:386    .text:00000000000806e6 .exinterpage
          S68K_002.s:413    .text:000000000008071e PNinvalid
          S68K_002.s:419    .text:0000000000080728 PNfirstdigit1
          S68K_002.s:416    .text:0000000000080722 PNfirstdigit2
          S68K_002.s:421    .text:000000000008072c PNloop
          S68K_002.s:432    .text:0000000000080746 PNend
          S68K_002.s:439    .text:0000000000080752 PNdigit1
          S68K_002.s:436    .text:000000000008074c PNdigit2
          S68K_002.s:441    .text:0000000000080756 PNdigit3
          S68K_002.s:456    .text:0000000000080764 .line
          S68K_002.s:591    .text:0000000000080876 printHexAddr
          S68K_002.s:720    .text:0000000000080a5f msgColonSpace
          S68K_002.s:463    .text:0000000000080776 .hexbyte
          S68K_002.s:475    .text:0000000000080792 .endbytesShort
          S68K_002.s:490    .text:00000000000807b8 .endbytes
          S68K_002.s:624    .text:000000000008089e printHexByte
          S68K_002.s:478    .text:0000000000080798 .endbytesShortLoop
68K GAS  S68K_002.s 			page 18


          S68K_002.s:492    .text:00000000000807ba .endbytesLoop
          S68K_002.s:507    .text:00000000000807e0 .endline
          S68K_002.s:503    .text:00000000000807d6 .unprintable
          S68K_002.s:723    .text:0000000000080a62 msgNewline
          S68K_002.s:513    .text:00000000000807f0 .end
          S68K_002.s:549    .text:000000000008082e DepCont
          S68K_002.s:533    .text:000000000008080a DepLoop
          S68K_002.s:554    .text:0000000000080838 DepMLine
          S68K_002.s:561    .text:0000000000080850 DepEnd
                            *ABS*:000000000007fbaa varCurAddr
          S68K_002.s:695    .text:00000000000809c0 msgDepositPrompt
          S68K_002.s:582    .text:000000000008086c printHexWord
          S68K_002.s:610    .text:000000000008088e printHex_wordentry
          S68K_002.s:606    .text:0000000000080888 printHex_addrentry
          S68K_002.s:599    .text:000000000008087e printHexLong
          S68K_002.s:634    .text:00000000000808b6 PHBsecond
          S68K_002.s:641    .text:00000000000808ca PHBend
          S68K_002.s:676    .text:000000000008095e delay1Sec
          S68K_002.s:678    .text:0000000000080964 delay1Loop
          S68K_002.s:683    .text:000000000008096c READINLINE
          S68K_002.s:686    .text:000000000008097e L_TO_UPPER_MSG
          S68K_002.s:689    .text:000000000008099b WRITEOUTLINE
          S68K_002.s:704    .text:00000000000809e8 CRLF_MSG

NO UNDEFINED SYMBOLS
