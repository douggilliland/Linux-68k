68K GAS  S68K_002.s 			page 1


   1               	| S68K_002.s - 68K Monitor with extensions
   2               	|	Adds S Record loader
   3               	| Borrowed init code from 
   4               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   5               	
   6               	RAM_START	= 0x00000	| Beginning of the SRAM
   7               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   8               	RAM_END		= 0x7FFFF	| 512KB SRAM
   9               	ROM_START	= 0x80000	| ROM start
  10               	ROM_CODE	= ROM_START+1024| Skip vector table
  11               	*ROM_END	= 0x87FFF	| End of 32KB EPROM
  12               	ROM_END		= 0x8FFFF	| End of 64KB EPROM
  13               	
  14               	|||||||||||||||||||||||||||||||||
  15               	| 68681 Duart Register Addresses
  16               	|
  17               	DUART = 0x0F0000	  | Base Addr of DUART
  18               	MRA   = DUART+0		  | Mode Register A           (R/W)
  19               	SRA   = DUART+2       | Status Register A         (r)
  20               	CSRA  = DUART+2       | Clock Select Register A   (w)
  21               	CRA   = DUART+4       | Commands Register A       (w)
  22               	RBA   = DUART+6       | Receiver Buffer A         (r)
  23               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  24               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  25               	ISR   = DUART+10      | Interrupt Status Register (R)
  26               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  27               	MRB   = DUART+16      | Mode Register B           (R/W)
  28               	SRB   = DUART+18      | Status Register B         (R)
  29               	CSRB  = DUART+18      | Clock Select Register B   (W)
  30               	CRB   = DUART+20      | Commands Register B       (W)
  31               	RBB   = DUART+22      | Reciever Buffer B         (R)
  32               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  33               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  34               	OPC   = DUART+26      | Output port config        (W)
  35               	INU   = DUART+26      | Input port (unlatched)    (R)
  36               	OPS   = DUART+28      | Output port Set           (W)
  37               	OPR   = DUART+30      | Output port Clear         (W)
  38               	
  39               	||||||||||||||||||||||||||||||||||
  40               	| ASCII Control Characters
  41               	|
  42               	BEL   = 0x07
  43               	BKSP  = 0x08       | CTRL-H
  44               	TAB   = 0x09
  45               	LF    = 0x0A
  46               	CR    = 0x0D
  47               	ESC   = 0x1B
  48               	EOT	  = 0x00
  49               	
  50               	CTRLC	=	0x03
  51               	CTRLX	=	0x18     | Line Clear
  52               	
  53 0000 0000 0000 		.ORG    0x000400
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
68K GAS  S68K_002.s 			page 2


  54 0400 00        	srecType:	ds.b	1		| S1-S9 stored as binary 1-9
  55 0401 00        	srecByCt:	ds.b	1		| Byte Count
  56 0402 00        	srecData:	ds.b	1 		| Data
  57 0403 00        	srecCSum:	ds.b	1 		| S-Record Checksum
  58 0404 0000 0000 	srecAddr:	ds.l	1		| S Record current byte address
  59               	
  60 0408 0000 0000 		.ORG	ROM_START
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  61               	
  62               	| FIRST 8 bytes loaded after reset |
  63 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  64 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  65               	
  66 80008 0000 0000 	        .ORG ROM_CODE
  66      0000 0000 
  66      0000 0000 
  66      0000 0000 
  66      0000 0000 
  67 80400 4E71      		nop
  68 80402 4FF9 0007 		lea			STACK_END,%sp
  68      FFFC 
  69 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  69      0008 0000 
  70 80410 4E71      		nop
  71               	| LEDs
  72 80412 13FC 0000 		move.b	#0x00, OPC		| Output port configuration (all bit are outs)
  72      000F 001A 
  73 8041a 13FC 00FC 		move.b	#0xFC, OPR		| Clear all outputs
  73      000F 001E 
  74 80422 13FC 0004 		move.b	#0x04, OPS		| Turn off LED on DUART O2
  74      000F 001C 
  75               	|
  76               	| Test the first two SRAM location
  77               	|
  78 8042a 203C DEAD 		move.l	#0xDEADBEEF, %d0		| Test Pattern #1
  78      BEEF 
  79 80430 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  80 80434 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  81 80436 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  82 80438 B042      		cmp			%d2, %d0
  83 8043a 6600 00C6 		bne			FERVR2						
  84 8043e 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  84      AAAA 
  85 80444 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  86 80448 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  87 8044a 2611      		move.l	(%a1), %d3				| Read back
  88 8044c B243      		cmp			%d3, %d1
  89 8044e 6600 00B2 		bne			FERVR2
  90 80452 4E71      		nop
  91               	| Test bits of first location (as bytes)
  92 80454 7001      		move.l	#1, %d0
  93 80456 207C 0000 		move.l	#0, %a0
  93      0000 
  94               	loop1stLoc:
68K GAS  S68K_002.s 			page 3


  95 8045c 1080      		move.b	%d0, (%a0)
  96 8045e 1210      		move.b	(%a0), %d1
  97 80460 B200      		cmp.b		%d0, %d1
  98 80462 6600 009E 		bne			failBitTest
  99 80466 E348      		lsl			#1, %d0
 100 80468 0C80 0000 		cmp.l		#0x00000100, %d0
 100      0100 
 101 8046e 6600 FFEC 		bne			loop1stLoc
 102               	|
 103               	| Test all address lines, 512KB SRAM
 104               	| Write incrementing pattern to data bits
 105               	|
 106 80472 7001      		move.l	#1, %d0		| Fill pattern
 107 80474 7401      		move.l	#1, %d2
 108 80476 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
 108      0001 
 109               	loopAdrFill:
 110 8047c 1080      		move.b	%d0,(%a0)	| Do the write
 111 8047e 5240      		addq		#1, %d0		| Increment the pattern
 112 80480 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
 113 80482 E38A      		lsl.l		#1, %d2		| Shift temp addr
 114 80484 2042      		move.l	%d2, %a0	| Put back into addr reg
 115 80486 0C82 0008 		cmp.l		#0x00080000,%d2
 115      0000 
 116 8048c 6600 FFEE 		bne			loopAdrFill
 117               	| Check
 118 80490 7001      		move.l	#1, %d0
 119 80492 7401      		move.l	#1, %d2
 120 80494 207C 0000 		move.l	#1, %a0
 120      0001 
 121               	loopAdrCk:
 122 8049a 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 123 8049c B200      		cmp.b		%d0, %d1
 124 8049e 6600 0062 		bne			failAdrTest
 125 804a2 5240      		addq		#1, %d0
 126 804a4 2408      		move.l	%a0, %d2 
 127 804a6 E38A      		lsl.l		#1, %d2
 128 804a8 2042      		move.l	%d2, %a0
 129 804aa 0C82 0008 		cmp.l		#0x00080000,%d2
 129      0000 
 130 804b0 6600 FFE8 		bne			loopAdrCk
 131               		
 132               	|
 133               	| Fill SRAM with 0x00 values
 134               	| 512KB fill takes about 2.5 seconds at 10 MHz CPU speed
 135               	|
 136               	fillSRAM:
 137 804b4 41F8 0000 		lea		RAM_START, %a0		| Start at base RAM address
 138 804b8 43F9 0007 		lea		RAM_END, %a1		| End when reach end RAM space
 138      FFFF 
 139 804be 7000      		move.l	#0x00, %d0			| Fill with zeros
 140               	fillSRAMLoop:
 141 804c0 20C0      		move.l	%d0, (%a0)+			| Long fills are faster
 142 804c2 B3C8      		cmpa.l	%a0, %a1
 143 804c4 6E00 FFFA 		bgt		fillSRAMLoop
 144               	
 145               	|
68K GAS  S68K_002.s 			page 4


 146               	| Done with address test of SRAM
 147               	|
 148 804c8 4EBA 05C6 		jsr     initDuart       	| Setup the serial port
 149               	monitorStart:					| Warm start
 150 804cc 41FA 06B1 		lea		BANNER_MSG, %a0
 151 804d0 4EBA 005E 		jsr		printString1
 152 804d4 41FA 0694 		lea		RAM_PASS_MSG, %a0
 153 804d8 4EBA 0056 		jsr		printString1
 154               	|
 155               	| Interpreter Loop
 156               	|
 157               	interpLoop:
 158 804dc 41FA 074A 	    lea     msgPrompt, %a0	| Prompt
 159 804e0 6100 004E 	    bsr.w   printString
 160 804e4 13FC 0004 		move.b	#0x04, OPR		| Turn on LED
 160      000F 001E 
 161 804ec 4EBA 0074 		jsr		readLine		| Blocking read of line
 162 804f0 13FC 0004 		move.b	#0x04, OPS		| Turn off LED
 162      000F 001C 
 163 804f8 4EBA 00FA 		jsr		lineToUpper
 164 804fc 4EBA 0114 		jsr		parseLine
 165 80500 60DA      		bra.s	interpLoop
 166               		
 167               	failBitTest:
 168               	failAdrTest:
 169               	FERVR2:
 170 80502 4E71      		nop
 171 80504 4EFA FFFC 		jmp	FERVR2
 172               	
 173               	|||||
 174               	| Writes a character to Port A, blocking if not ready (Full buffer)
 175               	|  - Takes a character in D0
 176               	outChar1:
 177               	outChar:
 178 80508 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 178      000F 0002 
 179 80510 6700 FFF6 	    beq     outChar1     
 180 80514 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 180      0006 
 181 8051a 4E75      	    rts
 182               	
 183               	| Writes a character to Port A, blocking if not ready (Full buffer)
 184               	|  - Takes a character in D0
 185               	outChar2:
 186 8051c 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 186      000F 0012 
 187 80524 6700 FFF6 	    beq     outChar2     
 188 80528 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 188      0016 
 189 8052e 4E75      	    rts
 190               	
 191               	******
 192               	* Print a null terminated string
 193               	*
 194               	printString1:
 195               	printString:
 196               	PSloop:
68K GAS  S68K_002.s 			page 5


 197 80530 1018      	    move.b  (%a0)+, %d0  | Read in character
 198 80532 6704      	    beq.s   PSend         | Check for the null
 199               	    
 200 80534 61D2      	    bsr.s   outChar      | Otherwise write the character
 201 80536 60F8      	    bra.s   PSloop        | And continue
 202               	PSend:
 203 80538 4E75      	    rts
 204               	
 205               	
 206               	|||||
 207               	| Reads in a character from Port A, blocking if none available
 208               	|  - Returns character in D0
 209               	|    
 210               	inChar1:
 211               	inChar:
 212 8053a 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 212      000F 0002 
 213 80542 6700 FFF6 	    beq     inChar1
 214 80546 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 214      0006 
 215 8054c 4E75      	    rts
 216               	
 217               	inChar2:
 218 8054e 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 218      000F 0012 
 219 80556 6700 FFF6 	    beq     inChar2
 220 8055a 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 220      0016 
 221 80560 4E75      	    rts
 222               	
 223               	| Read in a line into the line buffer
 224               	readLine:
 225 80562 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 226 80566 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 226      FBAE 
 227 8056c B542      	    eor.w   %d2, %d2           	| Clear the character counter
 228               	 RLloop:
 229 8056e 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 230 80572 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 231 80576 6722      	    beq.s   RLBS
 232 80578 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 233 8057c 673A      	    beq.s   RLlineClr
 234 8057e 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 235 80582 6758      	    beq.s   RLEndLn
 236 80584 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
 237 80588 67E4      	    beq.s   RLloop            	| Ignore LFs and get the next character
 238               	 .char:                      	| Normal character to be inserted into the buffer
 239 8058a 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 240 8058e 6CDE      	    bge.s   RLloop            	| If the buffer is full ignore the character
 241 80590 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 242 80592 5242      	    addq.w  #1, %d2           	| Increment character count
 243 80594 6100 FF72 	    bsr.w   outChar          	| Echo the character
 244 80598 60D4      	    bra.s   RLloop            	| And get the next one
 245               	 RLBS:
 246 8059a 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 247 8059c 67D0      	    beq.s   RLloop            	| Then ignore it
 248 8059e 6100 FF68 	    bsr.w   outChar          	| Backspace
68K GAS  S68K_002.s 			page 6


 249 805a2 103C 0020 	    move.b  #' ', %d0
 250 805a6 6100 FF60 	    bsr.w   outChar          	| Space
 251 805aa 103C 0008 	    move.b  #BKSP, %d0
 252 805ae 6100 FF58 	    bsr.w   outChar          	| Backspace
 253 805b2 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 254 805b4 5382      	    subq.l  #1, %d2           	| And current character count
 255 805b6 60B6      	    bra.s   RLloop            	| And goto the next character
 256               	 RLlineClr:
 257 805b8 4A42      	    tst     %d2               	| Anything to clear?
 258 805ba 67B2      	    beq.s   RLloop            	| If not, fetch the next character
 259 805bc 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 260               	 RLlineClrloop:
 261 805be 103C 0008 	    move.b  #BKSP, %d0
 262 805c2 6100 FF44 	    bsr.w   outChar          	| Backspace
 263 805c6 103C 0020 	    move.b  #' ', %d0
 264 805ca 6100 FF3C 	    bsr.w   outChar          	| Space
 265 805ce 103C 0008 	    move.b  #BKSP, %d0
 266 805d2 6100 FF34 	    bsr.w   outChar          	| Backspace
 267 805d6 5342      	    subq.w  #1, %d2          
 268 805d8 66E4      	    bne.s   RLlineClrloop   	| Go till the start of the line
 269 805da 6092      	    bra.s   RLloop   
 270               	 RLEndLn:
 271 805dc 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 272 805e0 103C 000A 	    move.b  #LF, %d0
 273 805e4 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 274 805e8 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 275 805ec 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 276 805ee 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 277 805f2 4E75      	    rts                      	| And return
 278               	
 279               	
 280               	| Convert line buffer to upper case
 281               	lineToUpper:
 282 805f4 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 282      FBAE 
 283               	 LUloop:
 284 805fa 1010      	    move.b  (%a0), %d0        | Read in a character
 285 805fc 0C00 0061 	    cmp.b   #'a', %d0         
 286 80600 6D0A      	    blt.s   LUnext            | Is it less than lower-case 'a', then move on
 287 80602 0C00 007A 	    cmp.b   #'z', %d0
 288 80606 6E04      	    bgt.s   LUnext            | Is it greater than lower-case 'z', then move on
 289 80608 0400 0020 	    sub.b   #0x20, %d0         | Then convert a to A, b to B, etc.
 290               	 LUnext:
 291 8060c 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 292 8060e 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
 293 80610 4E75      	    rts
 294               	
 295               	|
 296               	| Parse Line
 297               	|
 298               	parseLine:
 299 80612 48E7 0030 	    movem.l %a2-%a3, -(%SP)     | Save registers
 300 80616 41F9 0007 	    lea     varLineBuf, %a0
 300      FBAE 
 301               	 PLfindCommand:
 302 8061c 1018      	    move.b  (%a0)+, %d0
 303 8061e 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
68K GAS  S68K_002.s 			page 7


 304 80622 6700 FFF8 	    beq.w   PLfindCommand    
 305 80626 0C00 0045 	    cmp.b   #'E', %d0           | Examine command
 306 8062a 6700 005A 	    beq.w   .examine
 307 8062e 0C00 0044 	    cmp.b   #'D', %d0           | Deposit command
 308 80632 6700 037E 	    beq.w   .deposit
 309 80636 0C00 0052 	    cmp.b   #'R', %d0           | Run command
 310 8063a 6700 03DA 	    beq.w   .run
 311 8063e 0C00 0048 	    cmp.b   #'H', %d0           | Help command
 312 80642 6700 001E 	    beq.w   .help
 313 80646 0C00 004C 	    cmp.b   #'L', %d0           | Help command
 314 8064a 6700 00C4 	    beq.w   loadSRec
 315 8064e 0C00 0000 	    cmp.b   #0, %d0             | Ignore blank lines
 316 80652 6708      	    beq.s   .exit               
 317               	 .invalid:   
 318 80654 41FA 053C 	    lea     msgInvalidCommand, %a0
 319 80658 6100 FED6 	    bsr.w   printString
 320               	 .exit:
 321 8065c 4CDF 0C00 	    movem.l (%SP)+, %a2-%a3     | Restore registers
 322 80660 4E75      	    rts
 323               	
 324               	|||||||||||||||||||||||||||||||
 325               	|| HELP command
 326               	 .help:
 327 80662 41FA 0543 	    lea     msgHelp, %a0
 328 80666 6100 FEC8 	    bsr.w   printString
 329 8066a 6000 FFF0 	    bra.w   .exit
 330               	 .invalidAddr:
 331 8066e 41FA 0596 	    lea     msgInvalidAddress, %a0
 332 80672 6100 FEBC 	    bsr.w   printString
 333 80676 6000 FFE4 	    bra.w   .exit
 334               	 .invalidVal:
 335 8067a 41FA 059C 	    lea     msgInvalidValue, %a0
 336 8067e 6100 FEB0 	    bsr.w   printString
 337 80682 6000 FFD8 	    bra.w   .exit
 338               		
 339               	|||||||||||||||||||||||||||||||
 340               	| Examines memory addresses
 341               	| Valid modes:
 342               	|   e ADDR                  Displays a single byte
 343               	|   e ADDR-ADDR             Dispalys all bytes between the two addresses
 344               	|   e ADDR+LEN              Dispays LEN bytes after ADDR
 345               	|   e ADDR;                 Interactive mode, space shows 16 lines, enter shows 1.
 346               	|   e ADDR.                 Quick line, displays one line 
 347               	.examine:
 348 80686 6100 022E 	    bsr.w   parseNumber         | Read in the start address
 349 8068a 4A01      	    tst.b   %d1                 | Make sure it's valid (parseNumber returns non-zero in d1 for fail
 350 8068c 6600 FFE0 	    bne.w   .invalidAddr        
 351 80690 2640      	    move.l  %d0, %a3            | Save the start address
 352               	 .exloop:
 353 80692 1018      	    move.b  (%a0)+, %d0
 354 80694 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 355 80698 67F8      	    beq.s   .exloop
 356 8069a 0C00 002D 	    cmp.b   #'-', %d0           | Check if it's a range specifier
 357 8069e 6716      	    beq.s   .exrange
 358 806a0 0C00 002B 	    cmp.b   #'+', %d0           | Check if it's a length specifier
 359 806a4 6722      	    beq.s   .exlength
 360 806a6 0C00 003B 	    cmp.b   #';', %d0           | Check if we're going interactive
68K GAS  S68K_002.s 			page 8


 361 806aa 672E      	    beq.s   .exinter
 362 806ac 0C00 002E 	    cmp.b   #'.', %d0           | Check if quick 16 
 363 806b0 6712      	    beq.s   .exquick
 364 806b2 7001      	    move.l  #1, %d0             | Otherwise read in a single byte
 365 806b4 601C      	    bra.s   .exend              
 366               	 .exrange:
 367 806b6 6100 01FE 	    bsr.w   parseNumber         | Find the end address
 368 806ba 4A01      	    tst.b   %d1                 | Check if we found a valid address
 369 806bc 6600 FFB0 	    bne.w   .invalidAddr
 370 806c0 908B      	    sub.l   %a3, %d0            | Get the length
 371 806c2 600E      	    bra.s   .exend
 372               	 .exquick:                      | Quick mode means show one line of 16 bytes
 373 806c4 7010      	    move.l  #0x10, %d0
 374 806c6 600A      	    bra.s   .exend
 375               	 .exlength:                     | Length mode means a length is specified
 376 806c8 6100 01EC 	    bsr.w   parseNumber         | Find the length
 377 806cc 4A01      	    tst.b   %d1
 378 806ce 6600 FF9E 	    bne.w   .invalidAddr
 379               	 .exend:                        | Done parsing, give the parameters to dumpRAM and exit
 380 806d2 204B      	    move.l  %a3, %a0
 381 806d4 6100 0242 	    bsr.w   dumpRAM
 382 806d8 6082      	    bra.s   .exit
 383               	 .exinter:                      | Interactive mode, Space shows 16 lines, enter shows 1.
 384 806da 204B      	    move.l  %a3, %a0            | Current Address
 385 806dc 7010      	    move.l  #0x10, %d0          | 16 bytes
 386 806de 6100 0238 	    bsr.w   dumpRAM             | Dump this line
 387 806e2 D7FC 0000 	    add.l   #0x10, %a3          | Move up the current address 16 bytes
 387      0010 
 388               	 .exinterend:
 389 806e8 6100 FE50 	    bsr.w   inChar
 390 806ec 0C00 000D 	    cmp.b   #CR, %d0            | Display another line
 391 806f0 67E8      	    beq.s   .exinter
 392 806f2 0C00 0020 	    cmp.b   #' ', %d0           | Display a page (256 bytes at a time)
 393 806f6 6704      	    beq.s   .exinterpage
 394 806f8 6000 FF62 	    bra	   .exit               | Otherwise exit
 395               	 .exinterpage:
 396 806fc 204B      	    move.l  %a3, %a0
 397 806fe 203C 0000 	    move.l  #0x100, %d0         | 256 bytes
 397      0100 
 398 80704 6100 0212 	    bsr.w   dumpRAM             | Dump 16 lines of RAM
 399 80708 D7FC 0000 	    add.l   #0x100, %a3         | Move up the current address by 256
 399      0100 
 400 8070e 60D8      	    bra.s   .exinterend
 401               	
 402               	|||||||||||||||||||||||||||||
 403               	|| Load S Record
 404               	|	srecType:	ds.b	1		| S1-S9 stored as binary 1-9
 405               	|	srecByCt:	ds.b	1		| Byte Count
 406               	|	srecData:	ds.b	1 		| Data
 407               	|	srecCSum:	ds.b	1 		| S-Record Checksum
 408               	|	srecAddr:	ds.l	1		| S Record current byte address
 409               	|
 410               	| Supports 3 S record types (matches gcc m68k output)
 411               	|	S00F00005336384B5F3030322E746D7074
 412               	|	S2240800000007FFFC00080400000000000000000000000000000000000000000000000000C5
 413               	|	S503005BA1
 414               	
68K GAS  S68K_002.s 			page 9


 415               	loadSRec:
 416 80710 41FA 04E4 	    lea     ldSRecMsg, %a0
 417 80714 6100 FE1A 	    bsr.w   printString
 418 80718 6100 0080 		bsr		getRecType
 419 8071c 6100 00B6 		bsr		getBytCt
 420 80720 13FC 0000 		move.b 	#0, srecCSum
 420      0000 0000 
 421 80728 6100 0110 		bsr		getAddr
 422               	loopSData:
 423 8072c 0C39 0001 		cmp.b 	#1, srecByCt
 423      0000 0000 
 424 80734 6700 000A 		beq		sRecDataDone
 425 80738 4EBA 000E 		jsr		getLdData
 426 8073c 6000 FFEE 		bra		loopSData
 427               	sRecDataDone:
 428 80740 4EBA 0032 		jsr		getChksum
 429 80744 6000 FF16 		bra.w   .exit
 430               	
 431               	getLdData:
 432 80748 4EBA 00BC 		jsr		getHexPair
 433 8074c 0C39 0002 		cmp.b	#2, srecType
 433      0000 0000 
 434 80754 6600 0010 		bne		skipLdData
 435 80758 41F9 0000 		lea 	srecAddr, %a0
 435      0000 
 436 8075e 1080      		move.b	%d0, (%a0)
 437 80760 52B9 0000 		add.l	#1, srecAddr
 437      0000 
 438               	skipLdData:
 439 80766 D139 0000 		add.b	%d0, srecCSum
 439      0000 
 440 8076c 5339 0000 		sub.b	#1, srecByCt
 440      0000 
 441 80772 4E75      		rts
 442               	
 443               	getChksum:
 444 80774 41FA 04DF 		lea		debug_Srec_CSum_Msg, %a0
 445 80778 6100 FDB6 	    bsr.w   printString
 446 8077c 4EBA 0088 		jsr		getHexPair
 447 80780 D139 0000 		add.b	%d0, srecCSum
 447      0000 
 448 80786 1039 0000 		move.b	srecCSum, %d0
 448      0000 
 449 8078c 4EBA 02CC 		jsr		printHexByte
 450 80790 41FA 0412 		lea		CRLF_MSG, %a0
 451 80794 6100 FD9A 	    bsr.w   printString
 452               	failCSUM:
 453 80798 4E75      		rts
 454               	
 455               	getRecType:
 456 8079a 4EBA FD9E 		jsr		inChar
 457 8079e 0C00 0053 		cmp.b	#'S', %d0
 458 807a2 6600 FFF6 		bne		getRecType
 459 807a6 4EBA FD92 		jsr		inChar
 460 807aa 0200 000F 		andi.b	#0x0f, %d0
 461 807ae 13C0 0000 		move.b	%d0, srecType
 461      0000 
68K GAS  S68K_002.s 			page 10


 462               	| Debug messages follow
 463 807b4 41FA 047B 		lea		debug_Srec_Typ_Msg, %a0		| Debug message
 464 807b8 6100 FD76 	    bsr.w   printString
 465 807bc 1039 0000 		move.b	srecType, %d0
 465      0000 
 466 807c2 0600 0030 		add.b	#'0', %d0
 467 807c6 4EBA FD40 		jsr		outChar
 468 807ca 41FA 03D8 		lea		CRLF_MSG, %a0
 469 807ce 6100 FD60 	    bsr.w   printString
 470               	| Debug messages end
 471 807d2 4E75      		rts
 472               		
 473               	getBytCt:
 474 807d4 4EBA 0030 		jsr		getHexPair
 475 807d8 13C0 0000 		move.b 	%d0, srecCSum
 475      0000 
 476 807de 13C0 0000 		move.b	%d0, srecByCt
 476      0000 
 477               	| Debug messages follow
 478 807e4 41FA 045A 		lea		debug_Srec_BytCt_Msg, %a0
 479 807e8 6100 FD46 	    bsr.w   printString
 480 807ec 1039 0000 		move.b	srecByCt, %d0
 480      0000 
 481 807f2 4EBA 0266 		jsr		printHexByte
 482 807f6 41FA 03AC 		lea		CRLF_MSG, %a0
 483 807fa 6100 FD34 	    bsr.w   printString
 484               	| Debug messages end
 485 807fe 5339 0000 		sub.b	#1, srecByCt
 485      0000 
 486 80804 4E75      		rts
 487               	
 488               	getHexPair:
 489 80806 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 490 8080a 4EBA FD2E 		jsr		inChar
 491 8080e 4EBA 0016 		jsr		toNibble
 492 80812 E900      		asl.b	#4, %d0
 493 80814 1400      		move.b	%d0, %d2
 494 80816 4EBA FD22 		jsr		inChar
 495 8081a 4EBA 000A 		jsr		toNibble
 496 8081e 8002      		or.b	%d2, %d0
 497 80820 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 498 80824 4E75      		rts
 499               	
 500               	toNibble:
 501 80826 0C00 0041 		cmp.b	#'A', %d0
 502 8082a 6C00 0008 		bge		doHexLetter
 503 8082e 0400 0030 		sub.b	#'0', %d0
 504 80832 4E75      		rts
 505               	doHexLetter:
 506 80834 0400 004B 		sub.b	#'A'+10, %d0
 507 80838 4E75      		rts
 508               	
 509               	getAddr:
 510 8083a 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 511 8083e 1039 0000 		move.b	srecType, %d0
 511      0000 
 512 80844 0C00 0032 		cmp.b	#'2', %d0
68K GAS  S68K_002.s 			page 11


 513 80848 6600 0050 		bne		adrLen16
 514 8084c 41FA 041A 		lea		debug_Srec_Addr_Msg, %a0
 515 80850 6100 FCDE 		bsr		printString
 516 80854 7400      		move.l	#0, %d2
 517 80856 4EBA FFAE 		jsr		getHexPair
 518 8085a 6100 01DE 		bsr		printHexLong
 519 8085e D139 0000 		add.b 	%d0, srecCSum
 519      0000 
 520 80864 8480      		or.l	%d0, %d2
 521 80866 E182      		asl.l	#8, %d2
 522 80868 4EBA FF9C 		jsr		getHexPair
 523 8086c 6100 01CC 		bsr		printHexLong
 524 80870 D139 0000 		add.b 	%d0, srecCSum
 524      0000 
 525 80876 8480      		or.l	%d0, %d2
 526 80878 E182      		asl.l	#8, %d2
 527 8087a 4EBA FF8A 		jsr		getHexPair
 528 8087e 6100 01BA 		bsr		printHexLong
 529 80882 D139 0000 		add.b 	%d0, srecCSum
 529      0000 
 530 80888 8480      		or.l	%d0, %d2
 531 8088a 23C2 0000 		move.l	%d2, srecAddr
 531      0000 
 532 80890 5739 0000 		sub.b	#3, srecByCt
 532      0000 
 533 80896 6000 0018 		bra		past16
 534               	adrLen16:
 535               	|	move.l	#0, %d2
 536 8089a 4EBA FF6A 		jsr		getHexPair
 537 8089e 6100 019A 		bsr		printHexLong
 538               	|	or.l	%d0, %d2
 539               	|	asl.l	#8, %d2
 540 808a2 4EBA FF62 		jsr		getHexPair
 541 808a6 6100 0192 		bsr		printHexLong
 542               	|	or.l	%d0, %d2
 543               	|	move.l	%d2, srecAddr
 544 808aa 5539 0000 		sub.b	#2, srecByCt
 544      0000 
 545               	past16:
 546 808b0 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 547 808b4 4E75      		rts
 548               			
 549               	|||||||||||||||||||||||||||||
 550               	| Find and parse a hex number
 551               	|  Starting address in A0
 552               	|  Number returned in D0
 553               	|  Status in D1   (0 success, 1 fail)
 554               	|  TODO: Try and merge first digit code with remaining digit code
 555               	parseNumber:
 556 808b6 B180      	    eor.l   %d0, %d0		| Zero out d0
 557 808b8 1018      	    move.b  (%a0)+, %d0
 558 808ba 0C00 0020 	    cmp.b   #' ', %d0		|  Ignore all leading spaces
 559 808be 67F6      	    beq.s   parseNumber
 560 808c0 0C00 0030 	    cmp.b   #'0', %d0       | Look for hex digits 0-9
 561 808c4 6D14      	    blt.s	PNinvalid
 562 808c6 0C00 0039 	    cmp.b   #'9', %d0
 563 808ca 6F18      	    ble.s   PNfirstdigit1
68K GAS  S68K_002.s 			page 12


 564               	
 565 808cc 0C00 0041 	    cmp.b   #'A', %d0      	| Look for hex digits A-F
 566 808d0 6D00 FD82 	    blt   .invalid    
 567 808d4 0C00 0046 	    cmp.b   #'F', %d0
 568 808d8 6F04      	    ble.s   PNfirstdigit2
 569               	PNinvalid:
 570 808da 7201      	    move.l  #1, %d1			| Invalid character, mark failure and return
 571 808dc 4E75      	    rts
 572               	PNfirstdigit2:
 573 808de 0400 0037 	    sub.b   #'7', %d0       | Turn 'A' to 10
 574 808e2 6004      	    bra.s   PNloop
 575               	PNfirstdigit1:
 576 808e4 0400 0030 	    sub.b   #'0', %d0       | Turn '0' to 0
 577               	 PNloop:
 578 808e8 1218      	    move.b  (%a0)+, %d1      | Read in a digit
 579 808ea 0C01 0030 	    cmp.b   #'0', %d1       | Look for hex digits 0-9
 580 808ee 6D12      	    blt.s   PNend         	| Any other characters mean we're done reading
 581 808f0 0C01 0039 	    cmp.b   #'9', %d1
 582 808f4 6F18      	    ble.s   PNdigit1
 583 808f6 0C01 0041 	    cmp.b   #'A', %d1      	| Look for hex digits A-F
 584 808fa 6D06      	    blt.s   PNend
 585 808fc 0C01 0046 	    cmp.b   #'F', %d1
 586 80900 6F06      	    ble.s   PNdigit2
 587               	
 588               	PNend:                       | We hit a non-hex digit character, we're done parsing
 589 80902 5388      	    subq.l  #1, %a0         | Move the pointer back before the end character we read
 590 80904 7200      	    move.l  #0, %d1
 591 80906 4E75      	    rts
 592               	PNdigit2:
 593 80908 0401 0037 	    sub.b   #'7', %d1		| Turn 'A' to 10
 594 8090c 6004      	    bra.s   PNdigit3
 595               	PNdigit1:
 596 8090e 0401 0030 	    sub.b   #'0', %d1       | Turn '0' to 0
 597               	PNdigit3:
 598 80912 E988      	    lsl.l   #4, %d0        	| Shift over to the next nybble
 599 80914 D001      	    add.b   %d1, %d0       	| Place in our current nybble (could be or.b instead)
 600 80916 60D0      	    bra.s   PNloop
 601               	    
 602               	
 603               	|||||||||||||||||||||||||||||
 604               	| Dumps a section of RAM to the screen
 605               	| Displays both hex values and ASCII characters
 606               	| d0 - Number of bytes to dump
 607               	| a0 - Start Address
 608               	dumpRAM:
 609 80918 48E7 3820 	    movem.l %d2-%d4/%a2, -(%SP) | Save registers
 610 8091c 2448      	    move.l  %a0, %a2           	| Save the start address
 611 8091e 2400      	    move.l  %d0, %d2           	| And the number of bytes
 612               	 .line:
 613 80920 200A      	    move.l  %a2, %d0          
 614 80922 6100 010E 	    bsr.w   printHexAddr     	| Starting address of this line
 615 80926 41FA 0303 	    lea     msgColonSpace, %a0
 616 8092a 6100 FC04 	    bsr.w   printString
 617 8092e 7610      	    move.l  #16, %d3         	| 16 Bytes can be printed on a line
 618 80930 2803      	    move.l  %d3, %d4       		| Save number of bytes on this line
 619               	 .hexbyte:
 620 80932 4A82      	    tst.l   %d2               	| Check if we're out of bytes
68K GAS  S68K_002.s 			page 13


 621 80934 6718      	    beq.s   .endbytesShort
 622 80936 4A03      	    tst.b   %d3               	| Check if we're done this line
 623 80938 673A      	    beq.s   .endbytes    
 624 8093a 101A      	    move.b  (%a2)+, %d0        	| Read a byte in from RAM
 625 8093c 6100 011C 	    bsr.w   printHexByte     	| Display it
 626 80940 103C 0020 	    move.b  #' ', %d0
 627 80944 6100 FBC2 	    bsr.w   outChar          	| Space out bytes
 628 80948 5383      	    subq.l  #1, %d3    
 629 8094a 5382      	    subq.l  #1, %d2        
 630 8094c 60E4      	    bra.s   .hexbyte
 631               	 .endbytesShort:
 632 8094e 9803      	    sub.b   %d3, %d4           	| Make d4 the actual number of bytes on this line
 633 80950 103C 0020 	    move.b  #' ', %d0
 634               	 .endbytesShortLoop:
 635 80954 4A03      	    tst.b   %d3               	| Check if we ended the line
 636 80956 671C      	    beq.s   .endbytes
 637 80958 103C 0020 	    move.b  #' ', %d0
 638 8095c 6100 FBAA 	    bsr.w   outChar          	| Three spaces to pad out
 639 80960 103C 0020 	    move.b  #' ', %d0
 640 80964 6100 FBA2 	    bsr.w   outChar
 641 80968 103C 0020 	    move.b  #' ', %d0
 642 8096c 6100 FB9A 	    bsr.w   outChar
 643               	    
 644 80970 5303      	    subq.b  #1, %d3
 645 80972 60E0      	    bra.s   .endbytesShortLoop
 646               	 .endbytes:
 647 80974 95C4      	    suba.l  %d4, %a2        	| Return to the start address of this line
 648               	 .endbytesLoop:
 649 80976 4A04      	    tst.b   %d4               	| Check if we are done printing ascii
 650 80978 6700 0022 	    beq     .endline    
 651 8097c 5304      	    subq.b  #1, %d4
 652 8097e 101A      	    move.b  (%a2)+, %d0        	| Read the byte again
 653 80980 0C00 0020 	    cmp.b   #' ', %d0         	| Lowest printable character
 654 80984 6D0C      	    blt.s   .unprintable
 655 80986 0C00 007E 	    cmp.b   #'~', %d0         	| Highest printable character
 656 8098a 6E06      	    bgt.s   .unprintable
 657 8098c 6100 FB7A 	    bsr.w   outChar
 658 80990 60E4      	    bra.s   .endbytesLoop
 659               	 .unprintable:
 660 80992 103C 002E 	    move.b  #'.', %d0
 661 80996 6100 FB70 	    bsr.w   outChar
 662 8099a 60DA      	    bra.s   .endbytesLoop
 663               	 .endline:
 664 8099c 41FA 0290 	    lea     msgNewline, %a0
 665 809a0 6100 FB8E 	    bsr.w   printString
 666 809a4 4A82      	    tst.l   %d2
 667 809a6 6F04      	    ble.s   .end
 668 809a8 6000 FF76 	    bra.w   .line
 669               	 .end:
 670 809ac 4CDF 041C 	    movem.l (%SP)+, %d2-%d4/%a2		| Restore registers
 671 809b0 4E75      	    rts
 672               	
 673               	|||||||||||||||||||||||
 674               	| Deposit values into RAM
 675               	| d ADDR VAL VAL            Deposit value(s) into RAM
 676               	| d ADDR VAL VAL;           Deposit values, continue with values on next line
 677               	|  VAL VAL VAL;              - Continuing with further continue
68K GAS  S68K_002.s 			page 14


 678               	| d: VAL VAL                Continue depositing values after the last address written to
 679               	|||||||||||||||||||||||
 680               	.deposit:
 681 809b2 1010      	    move.b  (%a0), %d0
 682 809b4 0C00 003A 	    cmp.b   #':', %d0       	| Check if we want to continue from last
 683 809b8 6730      	    beq.s   DepCont
 684               	    
 685 809ba 6100 FEFA 	    bsr.w   parseNumber         | Otherwise read the address
 686 809be 4A01      	    tst.b   %d1
 687 809c0 6600 FCAC 	    bne		.invalidAddr
 688 809c4 2640      	    move.l  %d0, %a3           	| Save the start address
 689               	 DepLoop:
 690 809c6 1010      	    move.b  (%a0), %d0            
 691 809c8 0C00 003B 	    cmp.b   #';', %d0          	| Check for continue
 692 809cc 6726      	    beq.s   DepMLine
 693 809ce 4A40      	    tst     %d0              	| Check for the end of line
 694 809d0 6700 003A 	    beq     DepEnd
 695               	    
 696 809d4 6100 FEE0 	    bsr		parseNumber         | Otherwise read a value
 697 809d8 4A01      	    tst.b   %d1
 698 809da 6600 FC9E 	    bne		.invalidVal
 699 809de 0C40 00FF 	    cmp.w   #255, %d0          	| Make sure it's a byte
 700 809e2 6E00 FC96 	    bgt		.invalidVal
 701               	    
 702 809e6 16C0      	    move.b  %d0, (%a3)+        	| Store the value into memory
 703 809e8 60DC      	    bra.s   DepLoop
 704               	    
 705               	 DepCont:
 706 809ea 2679 0007 	    move.l  varCurAddr, %a3   	| Read in the last address 
 706      FBAA 
 707 809f0 5288      	    addq.l  #1, %a0           	| Skip over the ':'
 708 809f2 60D2      	    bra.s   DepLoop
 709               	    
 710               	 DepMLine:
 711 809f4 41FA 0186 	    lea     msgDepositPrompt, %a0
 712 809f8 6100 FB36 	    bsr.w   printString
 713 809fc 6100 FB64 	    bsr.w   readLine          	| Read in the next line to be parsed
 714 80a00 6100 FBF2 	    bsr.w   lineToUpper         | Convert to uppercase
 715 80a04 41F9 0007 	    lea     varLineBuf, %a0    	| Reset our buffer pointer
 715      FBAE 
 716 80a0a 60BA      	    bra.s   DepLoop            	| And jump back to decoding
 717               	 DepEnd:
 718 80a0c 23CB 0007 	    move.l  %a3, varCurAddr
 718      FBAA 
 719 80a12 6000 FC48 	    bra.w   .exit
 720               	
 721               	|||||||||||||||||||||||
 722               	| run code
 723               	 .run:
 724 80a16 6100 FE9E 	    bsr.w   parseNumber        	| Otherwise read the address
 725 80a1a 4A01      	    tst.b   %d1
 726 80a1c 6600 FC50 	    bne		.invalidAddr
 727 80a20 2040      	    move.l  %d0, %a0
 728 80a22 4E90      	    jsr     (%a0)             	| Jump to the code! 
 729               	                                | Go as subroutine to allow code to return to us
 730 80a24 4EBA FAA6 	    jsr     monitorStart        | Warm start after returning so everything is in
 731               	                                | a known state.
68K GAS  S68K_002.s 			page 15


 732               	
 733               	
 734               	|||||||||||||||||||||||
 735               	|| KEEP All printHex functions together ||
 736               	|||||||||||||||||||||||
 737               	| Print a hex word
 738               	printHexWord:
 739 80a28 2F02      	    move.l  %d2, -(%SP)		| Save D2
 740 80a2a 2400      	    move.l  %d0, %d2		| Save the address in d2
 741               	    
 742 80a2c E19A      	    rol.l   #0x8, %d2       | 4321 -> 3214
 743 80a2e E19A      	    rol.l   #0x8, %d2       | 3214 -> 2143 
 744 80a30 6018      	    bra.s   printHex_wordentry  | Print out the last 16 bits
 745               	|||||||||||||||||||||||
 746               	| Print a hex 24-bit address
 747               	printHexAddr:
 748 80a32 2F02      	    move.l %d2, -(%SP)   	| Save D2
 749 80a34 2400      	    move.l %d0, %d2      	| Save the address in d2
 750               	    
 751 80a36 E19A      	    rol.l   #0x8, %d2     	| 4321 -> 3214
 752 80a38 600A      	    bra.s   printHex_addrentry  | Print out the last 24 bits
 753               	|||||||||||||||||||||||
 754               	* Print a hex long
 755               	printHexLong:
 756 80a3a 2F02      	    move.l  %d2, -(%SP)     | Save D2
 757 80a3c 2400      	    move.l  %d0, %d2        | Save the address in d2
 758               	    
 759 80a3e E19A      	    rol.l   #0x8, %d2        | 4321 -> 3214 high byte in low
 760 80a40 2002      	    move.l  %d2, %d0
 761 80a42 6116      	    bsr.s   printHexByte  	| Print the high byte (24-31)
 762               	printHex_addrentry:     
 763 80a44 E19A      	    rol.l   #0x8, %d2        	| 3214 -> 2143 middle-high byte in low
 764 80a46 2002      	    move.l  %d2, %d0              
 765 80a48 6110      	    bsr.s   printHexByte  	| Print the high-middle byte (16-23)
 766               	printHex_wordentry:    
 767 80a4a E19A      	    rol.l   #0x8, %d2        	| 2143 -> 1432 Middle byte in low
 768 80a4c 2002      	    move.l  %d2, %d0
 769 80a4e 610A      	    bsr.s   printHexByte  	| Print the middle byte (8-15)
 770 80a50 E19A      	    rol.l   #0x8, %d2
 771 80a52 2002      	    move.l  %d2, %d0
 772 80a54 6104      	    bsr.s   printHexByte  	| Print the low byte (0-7)
 773               	    
 774 80a56 241F      	    move.l (%SP)+, %d2      | Restore D2
 775 80a58 4E75      	    RTS
 776               	    
 777               	|||||||||||||||||||||||
 778               	| Print a hex byte
 779               	|  - Takes byte in D0
 780               	printHexByte:
 781 80a5a 2F02      	    move.l  %D2, -(%SP)
 782 80a5c 7400      		move.l	#0, %d2
 783 80a5e 1400      	    move.b  %d0, %d2
 784 80a60 E808      	    lsr.b   #0x4, %d0		| Shift down upper nibble
 785 80a62 0200 000F 		andi.b	#0xf, %d0
 786 80a66 0600 0030 	    add.b   #'0', %d0
 787 80a6a 0C00 0039 	    cmp.b   #'9', %d0		| Check if the hex number was from 0-9
 788 80a6e 6F02      	    ble.s   PHBsecond
68K GAS  S68K_002.s 			page 16


 789 80a70 5E00      	    add.b   #0x7, %d0			| Shift 0xA-0xF from ':' to 'A'
 790               	PHBsecond:
 791 80a72 6100 FA94 	    bsr   outChar			| Print the digit
 792 80a76 0202 000F 	    andi.b  #0x0F, %d2		| Now we want the lower digit Mask only the lower digit
 793 80a7a 0602 0030 	    add.b   #'0', %d2
 794 80a7e 0C02 0039 	    cmp.b   #'9', %d2     	| Same as before    
 795 80a82 6F02      	    ble.s   PHBend
 796 80a84 5E02      	    add.b   #0x7, %D2
 797               	PHBend:
 798 80a86 1002      	    move.b  %D2, %D0
 799 80a88 6100 FA7E 	    bsr	   outChar      	| Print the lower digit
 800 80a8c 241F      	    move.l  (%SP)+, %D2
 801 80a8e 4E75      	    rts
 802               		
 803               	
 804               	|||||
 805               	| Initializes the 68681 DUART port A as 9600 8N1 
 806               	initDuart:
 807 80a90 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 807      000F 0004 
 808 80a98 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 808      000F 0004 
 809 80aa0 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 809      000F 0004 
 810               	    
 811 80aa8 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 811      000F 0008 
 812 80ab0 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 812      000F 0002 
 813 80ab8 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 813      000F 0000 
 814 80ac0 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 814      000F 0000 
 815               	    
 816 80ac8 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 816      000F 0004 
 817               	
 818 80ad0 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 818      000F 0014 
 819 80ad8 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 819      000F 0014 
 820 80ae0 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 820      000F 0014 
 821               	    
 822 80ae8 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 822      000F 0012 
 823 80af0 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 823      000F 0010 
 824 80af8 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 824      000F 0010 
 825               	    
 826 80b00 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 826      000F 0014 
 827               		
 828 80b08 13FC 0000 		move.b	#0x00, OPC		 | Output port configuration (all bit are outs)
 828      000F 001A 
 829 80b10 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
68K GAS  S68K_002.s 			page 17


 829      000F 001E 
 830 80b18 4E75      	    rts    
 831               	
 832               	delay1Sec:
 833 80b1a 203C 0003 		move.l	#200000, %d0	| rough count
 833      0D40 
 834               	delay1Loop:
 835 80b20 5380      		sub.l	#1, %d0			
 836 80b22 6600 FFFC 		bne		delay1Loop
 837 80b26 4E75      		rts
 838               	
 839               	READINLINE:	  
 840 80b28 5265 6164 		.ascii  "Reading in line"
 840      696E 6720 
 840      696E 206C 
 840      696E 65
 841 80b37 0D0A 00   		dc.b CR,LF,EOT
 842               	L_TO_UPPER_MSG:  
 843 80b3a 436F 6E76 		.ascii  "Convert line to upper case"
 843      6572 7420 
 843      6C69 6E65 
 843      2074 6F20 
 843      7570 7065 
 844 80b54 0D0A 00   		dc.b CR,LF,EOT
 845               	WRITEOUTLINE:	  
 846 80b57 5772 6974 		.ascii  "Writing out line"
 846      696E 6720 
 846      6F75 7420 
 846      6C69 6E65 
 847 80b67 0D0A 00   		dc.b CR,LF,EOT
 848               	RAM_PASS_MSG:  
 849 80b6a 5241 4D20 		.ascii  "RAM Test Passed"
 849      5465 7374 
 849      2050 6173 
 849      7365 64
 850 80b79 0D0A 00   		dc.b CR,LF,EOT
 851               	msgDepositPrompt:
 852 80b7c 3A20      	    .ascii	": "
 853 80b7e 00        		dc.b 	EOT
 854               	BANNER_MSG:	
 855 80b7f 5349 4D50 		.ascii  "SIMPLE-68008 CPU"
 855      4C45 2D36 
 855      3830 3038 
 855      2043 5055 
 856 80b8f 0D0A 00   		dc.b CR,LF,EOT
 857               	msgInvalidCommand:
 858 80b92 496E 7661 	    .ascii "Invalid Command"
 858      6C69 6420 
 858      436F 6D6D 
 858      616E 64
 859 80ba1 0D0A 00   		dc.b CR,LF,EOT
 860               	CRLF_MSG:	
 861 80ba4 0D0A 00   		dc.b CR,LF,EOT
 862               	msgHelp:
 863 80ba7 4176 6169 	    .ascii	"Available Commands: "
 863      6C61 626C 
 863      6520 436F 
68K GAS  S68K_002.s 			page 18


 863      6D6D 616E 
 863      6473 3A20 
 864 80bbb 0D0A      		dc.b	CR,LF
 865 80bbd 2028 4529 	    .ascii	" (E)xamine    (D)eposit    (R)un     (L)oad     (H)elp"
 865      7861 6D69 
 865      6E65 2020 
 865      2020 2844 
 865      2965 706F 
 866 80bf3 0D0A 00   		dc.b	CR,LF,EOT
 867               	ldSRecMsg:
 868 80bf6 4C6F 6164 	    .ascii	"Load S-Record"
 868      2053 2D52 
 868      6563 6F72 
 868      64
 869 80c03 0D0A 00   		dc.b	CR,LF,EOT
 870               	msgInvalidAddress:
 871 80c06 496E 7661 	    .ascii	"Invalid Address"
 871      6C69 6420 
 871      4164 6472 
 871      6573 73
 872 80c15 0D0A 00   		dc.b 	CR,LF,EOT
 873               	msgInvalidValue:
 874 80c18 496E 7661 	    .ascii	"Invalid Value"
 874      6C69 6420 
 874      5661 6C75 
 874      65
 875 80c25 0D0A 00   		dc.b	CR,LF,EOT
 876               	msgPrompt:
 877 80c28 3E20      		.ascii "> "
 878 80c2a 00        	    dc.b EOT
 879               	msgColonSpace:
 880 80c2b 3A20      	    .ascii ": "
 881 80c2d 00        	    dc.b EOT
 882               	msgNewline:
 883 80c2e 0D0A 00   	    dc.b CR,LF,EOT
 884               	debug_Srec_Typ_Msg:
 885 80c31 5320 5265 		.ascii	"S Record Type="
 885      636F 7264 
 885      2054 7970 
 885      653D 
 886 80c3f 00        	    dc.b EOT
 887               	debug_Srec_BytCt_Msg:
 888 80c40 5320 5265 		.ascii	"S Record Byte Count="
 888      636F 7264 
 888      2042 7974 
 888      6520 436F 
 888      756E 743D 
 889 80c54 00        	    dc.b EOT
 890               	debug_Srec_CSum_Msg:
 891 80c55 5320 5265 		.ascii	"S Record Checksum="
 891      636F 7264 
 891      2043 6865 
 891      636B 7375 
 891      6D3D 
 892 80c67 00        	    dc.b EOT
 893               	debug_Srec_Addr_Msg:
 894 80c68 5320 5265 		.ascii	"S Record Address="
68K GAS  S68K_002.s 			page 19


 894      636F 7264 
 894      2041 6464 
 894      7265 7373 
 894      3D
 895 80c79 00        	    dc.b EOT
 896               	
 897               	MAX_LINE_LENGTH = 80
 898               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
 899               	varCurAddr = varLineBuf-4
68K GAS  S68K_002.s 			page 20


DEFINED SYMBOLS
          S68K_002.s:6      *ABS*:0000000000000000 RAM_START
          S68K_002.s:7      *ABS*:000000000007fffc STACK_END
          S68K_002.s:8      *ABS*:000000000007ffff RAM_END
          S68K_002.s:9      *ABS*:0000000000080000 ROM_START
          S68K_002.s:10     *ABS*:0000000000080400 ROM_CODE
          S68K_002.s:12     *ABS*:000000000008ffff ROM_END
          S68K_002.s:17     *ABS*:00000000000f0000 DUART
          S68K_002.s:18     *ABS*:00000000000f0000 MRA
          S68K_002.s:19     *ABS*:00000000000f0002 SRA
          S68K_002.s:20     *ABS*:00000000000f0002 CSRA
          S68K_002.s:21     *ABS*:00000000000f0004 CRA
          S68K_002.s:22     *ABS*:00000000000f0006 RBA
          S68K_002.s:23     *ABS*:00000000000f0006 TBA
          S68K_002.s:24     *ABS*:00000000000f0008 ACR
          S68K_002.s:25     *ABS*:00000000000f000a ISR
          S68K_002.s:26     *ABS*:00000000000f000a IMR
          S68K_002.s:27     *ABS*:00000000000f0010 MRB
          S68K_002.s:28     *ABS*:00000000000f0012 SRB
          S68K_002.s:29     *ABS*:00000000000f0012 CSRB
          S68K_002.s:30     *ABS*:00000000000f0014 CRB
          S68K_002.s:31     *ABS*:00000000000f0016 RBB
          S68K_002.s:32     *ABS*:00000000000f0016 TBB
          S68K_002.s:33     *ABS*:00000000000f0018 IVR
          S68K_002.s:34     *ABS*:00000000000f001a OPC
          S68K_002.s:35     *ABS*:00000000000f001a INU
          S68K_002.s:36     *ABS*:00000000000f001c OPS
          S68K_002.s:37     *ABS*:00000000000f001e OPR
          S68K_002.s:42     *ABS*:0000000000000007 BEL
          S68K_002.s:43     *ABS*:0000000000000008 BKSP
          S68K_002.s:44     *ABS*:0000000000000009 TAB
          S68K_002.s:45     *ABS*:000000000000000a LF
          S68K_002.s:46     *ABS*:000000000000000d CR
          S68K_002.s:47     *ABS*:000000000000001b ESC
          S68K_002.s:48     *ABS*:0000000000000000 EOT
          S68K_002.s:50     *ABS*:0000000000000003 CTRLC
          S68K_002.s:51     *ABS*:0000000000000018 CTRLX
          S68K_002.s:54     .text:0000000000000400 srecType
          S68K_002.s:55     .text:0000000000000401 srecByCt
          S68K_002.s:56     .text:0000000000000402 srecData
          S68K_002.s:57     .text:0000000000000403 srecCSum
          S68K_002.s:58     .text:0000000000000404 srecAddr
          S68K_002.s:169    .text:0000000000080502 FERVR2
          S68K_002.s:94     .text:000000000008045c loop1stLoc
          S68K_002.s:167    .text:0000000000080502 failBitTest
          S68K_002.s:109    .text:000000000008047c loopAdrFill
          S68K_002.s:121    .text:000000000008049a loopAdrCk
          S68K_002.s:168    .text:0000000000080502 failAdrTest
          S68K_002.s:136    .text:00000000000804b4 fillSRAM
          S68K_002.s:140    .text:00000000000804c0 fillSRAMLoop
          S68K_002.s:806    .text:0000000000080a90 initDuart
          S68K_002.s:149    .text:00000000000804cc monitorStart
          S68K_002.s:854    .text:0000000000080b7f BANNER_MSG
          S68K_002.s:194    .text:0000000000080530 printString1
          S68K_002.s:848    .text:0000000000080b6a RAM_PASS_MSG
          S68K_002.s:157    .text:00000000000804dc interpLoop
          S68K_002.s:876    .text:0000000000080c28 msgPrompt
68K GAS  S68K_002.s 			page 21


          S68K_002.s:195    .text:0000000000080530 printString
          S68K_002.s:224    .text:0000000000080562 readLine
          S68K_002.s:281    .text:00000000000805f4 lineToUpper
          S68K_002.s:298    .text:0000000000080612 parseLine
          S68K_002.s:176    .text:0000000000080508 outChar1
          S68K_002.s:177    .text:0000000000080508 outChar
          S68K_002.s:185    .text:000000000008051c outChar2
          S68K_002.s:196    .text:0000000000080530 PSloop
          S68K_002.s:202    .text:0000000000080538 PSend
          S68K_002.s:210    .text:000000000008053a inChar1
          S68K_002.s:211    .text:000000000008053a inChar
          S68K_002.s:217    .text:000000000008054e inChar2
                            *ABS*:000000000007fbae varLineBuf
          S68K_002.s:228    .text:000000000008056e RLloop
          S68K_002.s:245    .text:000000000008059a RLBS
          S68K_002.s:256    .text:00000000000805b8 RLlineClr
          S68K_002.s:270    .text:00000000000805dc RLEndLn
          S68K_002.s:238    .text:000000000008058a .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_002.s:260    .text:00000000000805be RLlineClrloop
          S68K_002.s:283    .text:00000000000805fa LUloop
          S68K_002.s:290    .text:000000000008060c LUnext
          S68K_002.s:301    .text:000000000008061c PLfindCommand
          S68K_002.s:347    .text:0000000000080686 .examine
          S68K_002.s:680    .text:00000000000809b2 .deposit
          S68K_002.s:723    .text:0000000000080a16 .run
          S68K_002.s:326    .text:0000000000080662 .help
          S68K_002.s:415    .text:0000000000080710 loadSRec
          S68K_002.s:320    .text:000000000008065c .exit
          S68K_002.s:317    .text:0000000000080654 .invalid
          S68K_002.s:857    .text:0000000000080b92 msgInvalidCommand
          S68K_002.s:862    .text:0000000000080ba7 msgHelp
          S68K_002.s:330    .text:000000000008066e .invalidAddr
          S68K_002.s:870    .text:0000000000080c06 msgInvalidAddress
          S68K_002.s:334    .text:000000000008067a .invalidVal
          S68K_002.s:873    .text:0000000000080c18 msgInvalidValue
          S68K_002.s:555    .text:00000000000808b6 parseNumber
          S68K_002.s:352    .text:0000000000080692 .exloop
          S68K_002.s:366    .text:00000000000806b6 .exrange
          S68K_002.s:375    .text:00000000000806c8 .exlength
          S68K_002.s:383    .text:00000000000806da .exinter
          S68K_002.s:372    .text:00000000000806c4 .exquick
          S68K_002.s:379    .text:00000000000806d2 .exend
          S68K_002.s:608    .text:0000000000080918 dumpRAM
          S68K_002.s:388    .text:00000000000806e8 .exinterend
          S68K_002.s:395    .text:00000000000806fc .exinterpage
          S68K_002.s:867    .text:0000000000080bf6 ldSRecMsg
          S68K_002.s:455    .text:000000000008079a getRecType
          S68K_002.s:473    .text:00000000000807d4 getBytCt
          S68K_002.s:509    .text:000000000008083a getAddr
          S68K_002.s:422    .text:000000000008072c loopSData
          S68K_002.s:427    .text:0000000000080740 sRecDataDone
          S68K_002.s:431    .text:0000000000080748 getLdData
          S68K_002.s:443    .text:0000000000080774 getChksum
          S68K_002.s:488    .text:0000000000080806 getHexPair
          S68K_002.s:438    .text:0000000000080766 skipLdData
          S68K_002.s:890    .text:0000000000080c55 debug_Srec_CSum_Msg
68K GAS  S68K_002.s 			page 22


          S68K_002.s:780    .text:0000000000080a5a printHexByte
          S68K_002.s:860    .text:0000000000080ba4 CRLF_MSG
          S68K_002.s:452    .text:0000000000080798 failCSUM
          S68K_002.s:884    .text:0000000000080c31 debug_Srec_Typ_Msg
          S68K_002.s:887    .text:0000000000080c40 debug_Srec_BytCt_Msg
          S68K_002.s:500    .text:0000000000080826 toNibble
          S68K_002.s:505    .text:0000000000080834 doHexLetter
          S68K_002.s:534    .text:000000000008089a adrLen16
          S68K_002.s:893    .text:0000000000080c68 debug_Srec_Addr_Msg
          S68K_002.s:755    .text:0000000000080a3a printHexLong
          S68K_002.s:545    .text:00000000000808b0 past16
          S68K_002.s:569    .text:00000000000808da PNinvalid
          S68K_002.s:575    .text:00000000000808e4 PNfirstdigit1
          S68K_002.s:572    .text:00000000000808de PNfirstdigit2
          S68K_002.s:577    .text:00000000000808e8 PNloop
          S68K_002.s:588    .text:0000000000080902 PNend
          S68K_002.s:595    .text:000000000008090e PNdigit1
          S68K_002.s:592    .text:0000000000080908 PNdigit2
          S68K_002.s:597    .text:0000000000080912 PNdigit3
          S68K_002.s:612    .text:0000000000080920 .line
          S68K_002.s:747    .text:0000000000080a32 printHexAddr
          S68K_002.s:879    .text:0000000000080c2b msgColonSpace
          S68K_002.s:619    .text:0000000000080932 .hexbyte
          S68K_002.s:631    .text:000000000008094e .endbytesShort
          S68K_002.s:646    .text:0000000000080974 .endbytes
          S68K_002.s:634    .text:0000000000080954 .endbytesShortLoop
          S68K_002.s:648    .text:0000000000080976 .endbytesLoop
          S68K_002.s:663    .text:000000000008099c .endline
          S68K_002.s:659    .text:0000000000080992 .unprintable
          S68K_002.s:882    .text:0000000000080c2e msgNewline
          S68K_002.s:669    .text:00000000000809ac .end
          S68K_002.s:705    .text:00000000000809ea DepCont
          S68K_002.s:689    .text:00000000000809c6 DepLoop
          S68K_002.s:710    .text:00000000000809f4 DepMLine
          S68K_002.s:717    .text:0000000000080a0c DepEnd
                            *ABS*:000000000007fbaa varCurAddr
          S68K_002.s:851    .text:0000000000080b7c msgDepositPrompt
          S68K_002.s:738    .text:0000000000080a28 printHexWord
          S68K_002.s:766    .text:0000000000080a4a printHex_wordentry
          S68K_002.s:762    .text:0000000000080a44 printHex_addrentry
          S68K_002.s:790    .text:0000000000080a72 PHBsecond
          S68K_002.s:797    .text:0000000000080a86 PHBend
          S68K_002.s:832    .text:0000000000080b1a delay1Sec
          S68K_002.s:834    .text:0000000000080b20 delay1Loop
          S68K_002.s:839    .text:0000000000080b28 READINLINE
          S68K_002.s:842    .text:0000000000080b3a L_TO_UPPER_MSG
          S68K_002.s:845    .text:0000000000080b57 WRITEOUTLINE

NO UNDEFINED SYMBOLS
