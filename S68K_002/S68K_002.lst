68K GAS  S68K_002.s 			page 1


   1               	| S68K_002.s - 68K Monitor with extensions
   2               	|	Adds S Record loader
   3               	| Borrowed init code from 
   4               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   5               	
   6               	RAM_START	= 0x00000	| Beginning of the SRAM
   7               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   8               	RAM_END		= 0x7FFFF	| 512KB SRAM
   9               	ROM_START	= 0x80000	| ROM start
  10               	ROM_CODE	= ROM_START+1024| Skip vector table
  11               	*ROM_END	= 0x87FFF	| End of 32KB EPROM
  12               	ROM_END		= 0x8FFFF	| End of 64KB EPROM
  13               	
  14               	|||||||||||||||||||||||||||||||||
  15               	| 68681 Duart Register Addresses
  16               	|
  17               	DUART = 0x0F0000	  | Base Addr of DUART
  18               	MRA   = DUART+0		  | Mode Register A           (R/W)
  19               	SRA   = DUART+2       | Status Register A         (r)
  20               	CSRA  = DUART+2       | Clock Select Register A   (w)
  21               	CRA   = DUART+4       | Commands Register A       (w)
  22               	RBA   = DUART+6       | Receiver Buffer A         (r)
  23               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  24               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  25               	ISR   = DUART+10      | Interrupt Status Register (R)
  26               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  27               	MRB   = DUART+16      | Mode Register B           (R/W)
  28               	SRB   = DUART+18      | Status Register B         (R)
  29               	CSRB  = DUART+18      | Clock Select Register B   (W)
  30               	CRB   = DUART+20      | Commands Register B       (W)
  31               	RBB   = DUART+22      | Reciever Buffer B         (R)
  32               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  33               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  34               	OPC   = DUART+26      | Output port config        (W)
  35               	INU   = DUART+26      | Input port (unlatched)    (R)
  36               	OPS   = DUART+28      | Output port Set           (W)
  37               	OPR   = DUART+30      | Output port Clear         (W)
  38               	
  39               	||||||||||||||||||||||||||||||||||
  40               	| ASCII Control Characters
  41               	|
  42               	BEL   = 0x07
  43               	BKSP  = 0x08       | CTRL-H
  44               	TAB   = 0x09
  45               	LF    = 0x0A
  46               	CR    = 0x0D
  47               	ESC   = 0x1B
  48               	EOT	  = 0x00
  49               	
  50               	CTRLC	=	0x03
  51               	CTRLX	=	0x18     | Line Clear
  52               	
  53 0000 0000 0000 		.ORG    0x000400
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
68K GAS  S68K_002.s 			page 2


  54 0400 00        	_srecType:	ds.b	1		| S1-S9 stored as binary 1-9
  55 0401 00        	_srecByCt:	ds.b	1		| Byte Count
  56 0402 00        	_srecData:	ds.b	1 		| Data
  57 0403 00        	_srecCSum:	ds.b	1 		| S-Record Checksum
  58 0404 0000 0000 	_srecAddr:	ds.l	1		| S Record current byte address
  59               	
  60               	srecType	=		0x000400	| S1-S9 stored as binary 1-9
  61               	srecByCt	=		0x000401	| Byte Count
  62               	srecData	=		0x000402	| Data
  63               	srecCSum	=		0x000403	| S-Record Checksum
  64               	srecAddr	=		0x000404	| S Record current byte address
  65               	
  66 0408 0000 0000 		.ORG	ROM_START
  66      0000 0000 
  66      0000 0000 
  66      0000 0000 
  66      0000 0000 
  67               	
  68               	| FIRST 8 bytes loaded after reset |
  69 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  70 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  71               	
  72 80008 0000 0000 	        .ORG ROM_CODE
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73 80400 4E71      		nop
  74 80402 4FF9 0007 		lea			STACK_END,%sp
  74      FFFC 
  75 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  75      0008 0000 
  76 80410 4E71      		nop
  77               	| LEDs
  78 80412 13FC 0000 		move.b	#0x00, OPC		| Output port configuration (all bit are outs)
  78      000F 001A 
  79 8041a 13FC 00FC 		move.b	#0xFC, OPR		| Clear all outputs
  79      000F 001E 
  80 80422 13FC 0004 		move.b	#0x04, OPS		| Turn off LED on DUART O2
  80      000F 001C 
  81               	|
  82               	| Test the first two SRAM location
  83               	|
  84 8042a 203C DEAD 		move.l	#0xDEADBEEF, %d0		| Test Pattern #1
  84      BEEF 
  85 80430 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  86 80434 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  87 80436 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  88 80438 B042      		cmp			%d2, %d0
  89 8043a 6600 00C6 		bne			FERVR2						
  90 8043e 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  90      AAAA 
  91 80444 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  92 80448 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  93 8044a 2611      		move.l	(%a1), %d3				| Read back
  94 8044c B243      		cmp			%d3, %d1
  95 8044e 6600 00B2 		bne			FERVR2
68K GAS  S68K_002.s 			page 3


  96 80452 4E71      		nop
  97               	| Test bits of first location (as bytes)
  98 80454 7001      		move.l	#1, %d0
  99 80456 207C 0000 		move.l	#0, %a0
  99      0000 
 100               	loop1stLoc:
 101 8045c 1080      		move.b	%d0, (%a0)
 102 8045e 1210      		move.b	(%a0), %d1
 103 80460 B200      		cmp.b		%d0, %d1
 104 80462 6600 009E 		bne			failBitTest
 105 80466 E348      		lsl			#1, %d0
 106 80468 0C80 0000 		cmp.l		#0x00000100, %d0
 106      0100 
 107 8046e 6600 FFEC 		bne			loop1stLoc
 108               	|
 109               	| Test all address lines, 512KB SRAM
 110               	| Write incrementing pattern to data bits
 111               	|
 112 80472 7001      		move.l	#1, %d0		| Fill pattern
 113 80474 7401      		move.l	#1, %d2
 114 80476 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
 114      0001 
 115               	loopAdrFill:
 116 8047c 1080      		move.b	%d0,(%a0)	| Do the write
 117 8047e 5240      		addq		#1, %d0		| Increment the pattern
 118 80480 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
 119 80482 E38A      		lsl.l		#1, %d2		| Shift temp addr
 120 80484 2042      		move.l	%d2, %a0	| Put back into addr reg
 121 80486 0C82 0008 		cmp.l		#0x00080000,%d2
 121      0000 
 122 8048c 6600 FFEE 		bne			loopAdrFill
 123               	| Check
 124 80490 7001      		move.l	#1, %d0
 125 80492 7401      		move.l	#1, %d2
 126 80494 207C 0000 		move.l	#1, %a0
 126      0001 
 127               	loopAdrCk:
 128 8049a 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 129 8049c B200      		cmp.b		%d0, %d1
 130 8049e 6600 0062 		bne			failAdrTest
 131 804a2 5240      		addq		#1, %d0
 132 804a4 2408      		move.l	%a0, %d2 
 133 804a6 E38A      		lsl.l		#1, %d2
 134 804a8 2042      		move.l	%d2, %a0
 135 804aa 0C82 0008 		cmp.l		#0x00080000,%d2
 135      0000 
 136 804b0 6600 FFE8 		bne			loopAdrCk
 137               		
 138               	|
 139               	| Fill SRAM with 0x00 values
 140               	| 512KB fill takes about 2.5 seconds at 10 MHz CPU speed
 141               	|
 142               	fillSRAM:
 143 804b4 41F8 0000 		lea		RAM_START, %a0		| Start at base RAM address
 144 804b8 43F9 0007 		lea		RAM_END, %a1		| End when reach end RAM space
 144      FFFF 
 145 804be 7000      		move.l	#0x00, %d0			| Fill with zeros
68K GAS  S68K_002.s 			page 4


 146               	fillSRAMLoop:
 147 804c0 20C0      		move.l	%d0, (%a0)+			| Long fills are faster
 148 804c2 B3C8      		cmpa.l	%a0, %a1
 149 804c4 6E00 FFFA 		bgt		fillSRAMLoop
 150               	
 151               	|
 152               	| Done with address test of SRAM
 153               	|
 154 804c8 4EBA 05E2 		jsr     initDuart       	| Setup the serial port
 155               	monitorStart:					| Warm start
 156 804cc 41FA 06CD 		lea		BANNER_MSG, %a0
 157 804d0 4EBA 005E 		jsr		printString1
 158 804d4 41FA 06B0 		lea		RAM_PASS_MSG, %a0
 159 804d8 4EBA 0056 		jsr		printString1
 160               	|
 161               	| Interpreter Loop
 162               	|
 163               	interpLoop:
 164 804dc 41FA 0766 	    lea     msgPrompt, %a0	| Prompt
 165 804e0 6100 004E 	    bsr.w   printString
 166 804e4 13FC 0004 		move.b	#0x04, OPR		| Turn on LED
 166      000F 001E 
 167 804ec 4EBA 0074 		jsr		readLine		| Blocking read of line
 168 804f0 13FC 0004 		move.b	#0x04, OPS		| Turn off LED
 168      000F 001C 
 169 804f8 4EBA 00FA 		jsr		lineToUpper
 170 804fc 4EBA 0114 		jsr		parseLine
 171 80500 60DA      		bra.s	interpLoop
 172               		
 173               	failBitTest:
 174               	failAdrTest:
 175               	FERVR2:
 176 80502 4E71      		nop
 177 80504 4EFA FFFC 		jmp	FERVR2
 178               	
 179               	|||||
 180               	| Writes a character to Port A, blocking if not ready (Full buffer)
 181               	|  - Takes a character in D0
 182               	outChar1:
 183               	outChar:
 184 80508 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 184      000F 0002 
 185 80510 6700 FFF6 	    beq     outChar1     
 186 80514 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 186      0006 
 187 8051a 4E75      	    rts
 188               	
 189               	| Writes a character to Port A, blocking if not ready (Full buffer)
 190               	|  - Takes a character in D0
 191               	outChar2:
 192 8051c 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 192      000F 0012 
 193 80524 6700 FFF6 	    beq     outChar2     
 194 80528 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 194      0016 
 195 8052e 4E75      	    rts
 196               	
68K GAS  S68K_002.s 			page 5


 197               	******
 198               	* Print a null terminated string
 199               	*
 200               	printString1:
 201               	printString:
 202               	PSloop:
 203 80530 1018      	    move.b  (%a0)+, %d0  | Read in character
 204 80532 6704      	    beq.s   PSend         | Check for the null
 205               	    
 206 80534 61D2      	    bsr.s   outChar      | Otherwise write the character
 207 80536 60F8      	    bra.s   PSloop        | And continue
 208               	PSend:
 209 80538 4E75      	    rts
 210               	
 211               	
 212               	|||||
 213               	| Reads in a character from Port A, blocking if none available
 214               	|  - Returns character in D0
 215               	|    
 216               	inChar1:
 217               	inChar:
 218 8053a 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 218      000F 0002 
 219 80542 6700 FFF6 	    beq     inChar1
 220 80546 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 220      0006 
 221 8054c 4E75      	    rts
 222               	
 223               	inChar2:
 224 8054e 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 224      000F 0012 
 225 80556 6700 FFF6 	    beq     inChar2
 226 8055a 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 226      0016 
 227 80560 4E75      	    rts
 228               	
 229               	| Read in a line into the line buffer
 230               	readLine:
 231 80562 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 232 80566 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 232      FBAE 
 233 8056c B542      	    eor.w   %d2, %d2           	| Clear the character counter
 234               	 RLloop:
 235 8056e 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 236 80572 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 237 80576 6722      	    beq.s   RLBS
 238 80578 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 239 8057c 673A      	    beq.s   RLlineClr
 240 8057e 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 241 80582 6758      	    beq.s   RLEndLn
 242 80584 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
 243 80588 67E4      	    beq.s   RLloop            	| Ignore LFs and get the next character
 244               	 .char:                      	| Normal character to be inserted into the buffer
 245 8058a 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 246 8058e 6CDE      	    bge.s   RLloop            	| If the buffer is full ignore the character
 247 80590 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 248 80592 5242      	    addq.w  #1, %d2           	| Increment character count
68K GAS  S68K_002.s 			page 6


 249 80594 6100 FF72 	    bsr.w   outChar          	| Echo the character
 250 80598 60D4      	    bra.s   RLloop            	| And get the next one
 251               	 RLBS:
 252 8059a 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 253 8059c 67D0      	    beq.s   RLloop            	| Then ignore it
 254 8059e 6100 FF68 	    bsr.w   outChar          	| Backspace
 255 805a2 103C 0020 	    move.b  #' ', %d0
 256 805a6 6100 FF60 	    bsr.w   outChar          	| Space
 257 805aa 103C 0008 	    move.b  #BKSP, %d0
 258 805ae 6100 FF58 	    bsr.w   outChar          	| Backspace
 259 805b2 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 260 805b4 5382      	    subq.l  #1, %d2           	| And current character count
 261 805b6 60B6      	    bra.s   RLloop            	| And goto the next character
 262               	 RLlineClr:
 263 805b8 4A42      	    tst     %d2               	| Anything to clear?
 264 805ba 67B2      	    beq.s   RLloop            	| If not, fetch the next character
 265 805bc 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 266               	 RLlineClrloop:
 267 805be 103C 0008 	    move.b  #BKSP, %d0
 268 805c2 6100 FF44 	    bsr.w   outChar          	| Backspace
 269 805c6 103C 0020 	    move.b  #' ', %d0
 270 805ca 6100 FF3C 	    bsr.w   outChar          	| Space
 271 805ce 103C 0008 	    move.b  #BKSP, %d0
 272 805d2 6100 FF34 	    bsr.w   outChar          	| Backspace
 273 805d6 5342      	    subq.w  #1, %d2          
 274 805d8 66E4      	    bne.s   RLlineClrloop   	| Go till the start of the line
 275 805da 6092      	    bra.s   RLloop   
 276               	 RLEndLn:
 277 805dc 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 278 805e0 103C 000A 	    move.b  #LF, %d0
 279 805e4 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 280 805e8 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 281 805ec 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 282 805ee 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 283 805f2 4E75      	    rts                      	| And return
 284               	
 285               	
 286               	| Convert line buffer to upper case
 287               	lineToUpper:
 288 805f4 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 288      FBAE 
 289               	 LUloop:
 290 805fa 1010      	    move.b  (%a0), %d0        | Read in a character
 291 805fc 0C00 0061 	    cmp.b   #'a', %d0         
 292 80600 6D0A      	    blt.s   LUnext            | Is it less than lower-case 'a', then move on
 293 80602 0C00 007A 	    cmp.b   #'z', %d0
 294 80606 6E04      	    bgt.s   LUnext            | Is it greater than lower-case 'z', then move on
 295 80608 0400 0020 	    sub.b   #0x20, %d0         | Then convert a to A, b to B, etc.
 296               	 LUnext:
 297 8060c 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 298 8060e 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
 299 80610 4E75      	    rts
 300               	
 301               	|
 302               	| Parse Line
 303               	|
 304               	parseLine:
68K GAS  S68K_002.s 			page 7


 305 80612 48E7 0030 	    movem.l %a2-%a3, -(%SP)     | Save registers
 306 80616 41F9 0007 	    lea     varLineBuf, %a0
 306      FBAE 
 307               	 PLfindCommand:
 308 8061c 1018      	    move.b  (%a0)+, %d0
 309 8061e 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 310 80622 6700 FFF8 	    beq.w   PLfindCommand    
 311 80626 0C00 0045 	    cmp.b   #'E', %d0           | Examine command
 312 8062a 6700 005A 	    beq.w   .examine
 313 8062e 0C00 0044 	    cmp.b   #'D', %d0           | Deposit command
 314 80632 6700 039A 	    beq.w   .deposit
 315 80636 0C00 0052 	    cmp.b   #'R', %d0           | Run command
 316 8063a 6700 03F6 	    beq.w   .run
 317 8063e 0C00 0048 	    cmp.b   #'H', %d0           | Help command
 318 80642 6700 001E 	    beq.w   .help
 319 80646 0C00 004C 	    cmp.b   #'L', %d0           | Help command
 320 8064a 6700 00C4 	    beq.w   loadSRec
 321 8064e 0C00 0000 	    cmp.b   #0, %d0             | Ignore blank lines
 322 80652 6708      	    beq.s   .exit               
 323               	 .invalid:   
 324 80654 41FA 0558 	    lea     msgInvalidCommand, %a0
 325 80658 6100 FED6 	    bsr.w   printString
 326               	 .exit:
 327 8065c 4CDF 0C00 	    movem.l (%SP)+, %a2-%a3     | Restore registers
 328 80660 4E75      	    rts
 329               	
 330               	|||||||||||||||||||||||||||||||
 331               	|| HELP command
 332               	 .help:
 333 80662 41FA 055F 	    lea     msgHelp, %a0
 334 80666 6100 FEC8 	    bsr.w   printString
 335 8066a 6000 FFF0 	    bra.w   .exit
 336               	 .invalidAddr:
 337 8066e 41FA 05B2 	    lea     msgInvalidAddress, %a0
 338 80672 6100 FEBC 	    bsr.w   printString
 339 80676 6000 FFE4 	    bra.w   .exit
 340               	 .invalidVal:
 341 8067a 41FA 05B8 	    lea     msgInvalidValue, %a0
 342 8067e 6100 FEB0 	    bsr.w   printString
 343 80682 6000 FFD8 	    bra.w   .exit
 344               		
 345               	|||||||||||||||||||||||||||||||
 346               	| Examines memory addresses
 347               	| Valid modes:
 348               	|   e ADDR                  Displays a single byte
 349               	|   e ADDR-ADDR             Dispalys all bytes between the two addresses
 350               	|   e ADDR+LEN              Dispays LEN bytes after ADDR
 351               	|   e ADDR;                 Interactive mode, space shows 16 lines, enter shows 1.
 352               	|   e ADDR.                 Quick line, displays one line 
 353               	.examine:
 354 80686 6100 024A 	    bsr.w   parseNumber         | Read in the start address
 355 8068a 4A01      	    tst.b   %d1                 | Make sure it's valid (parseNumber returns non-zero in d1 for fail
 356 8068c 6600 FFE0 	    bne.w   .invalidAddr        
 357 80690 2640      	    move.l  %d0, %a3            | Save the start address
 358               	 .exloop:
 359 80692 1018      	    move.b  (%a0)+, %d0
 360 80694 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
68K GAS  S68K_002.s 			page 8


 361 80698 67F8      	    beq.s   .exloop
 362 8069a 0C00 002D 	    cmp.b   #'-', %d0           | Check if it's a range specifier
 363 8069e 6716      	    beq.s   .exrange
 364 806a0 0C00 002B 	    cmp.b   #'+', %d0           | Check if it's a length specifier
 365 806a4 6722      	    beq.s   .exlength
 366 806a6 0C00 003B 	    cmp.b   #';', %d0           | Check if we're going interactive
 367 806aa 672E      	    beq.s   .exinter
 368 806ac 0C00 002E 	    cmp.b   #'.', %d0           | Check if quick 16 
 369 806b0 6712      	    beq.s   .exquick
 370 806b2 7001      	    move.l  #1, %d0             | Otherwise read in a single byte
 371 806b4 601C      	    bra.s   .exend              
 372               	 .exrange:
 373 806b6 6100 021A 	    bsr.w   parseNumber         | Find the end address
 374 806ba 4A01      	    tst.b   %d1                 | Check if we found a valid address
 375 806bc 6600 FFB0 	    bne.w   .invalidAddr
 376 806c0 908B      	    sub.l   %a3, %d0            | Get the length
 377 806c2 600E      	    bra.s   .exend
 378               	 .exquick:                      | Quick mode means show one line of 16 bytes
 379 806c4 7010      	    move.l  #0x10, %d0
 380 806c6 600A      	    bra.s   .exend
 381               	 .exlength:                     | Length mode means a length is specified
 382 806c8 6100 0208 	    bsr.w   parseNumber         | Find the length
 383 806cc 4A01      	    tst.b   %d1
 384 806ce 6600 FF9E 	    bne.w   .invalidAddr
 385               	 .exend:                        | Done parsing, give the parameters to dumpRAM and exit
 386 806d2 204B      	    move.l  %a3, %a0
 387 806d4 6100 025E 	    bsr.w   dumpRAM
 388 806d8 6082      	    bra.s   .exit
 389               	 .exinter:                      | Interactive mode, Space shows 16 lines, enter shows 1.
 390 806da 204B      	    move.l  %a3, %a0            | Current Address
 391 806dc 7010      	    move.l  #0x10, %d0          | 16 bytes
 392 806de 6100 0254 	    bsr.w   dumpRAM             | Dump this line
 393 806e2 D7FC 0000 	    add.l   #0x10, %a3          | Move up the current address 16 bytes
 393      0010 
 394               	 .exinterend:
 395 806e8 6100 FE50 	    bsr.w   inChar
 396 806ec 0C00 000D 	    cmp.b   #CR, %d0            | Display another line
 397 806f0 67E8      	    beq.s   .exinter
 398 806f2 0C00 0020 	    cmp.b   #' ', %d0           | Display a page (256 bytes at a time)
 399 806f6 6704      	    beq.s   .exinterpage
 400 806f8 6000 FF62 	    bra	   .exit               | Otherwise exit
 401               	 .exinterpage:
 402 806fc 204B      	    move.l  %a3, %a0
 403 806fe 203C 0000 	    move.l  #0x100, %d0         | 256 bytes
 403      0100 
 404 80704 6100 022E 	    bsr.w   dumpRAM             | Dump 16 lines of RAM
 405 80708 D7FC 0000 	    add.l   #0x100, %a3         | Move up the current address by 256
 405      0100 
 406 8070e 60D8      	    bra.s   .exinterend
 407               	
 408               	|||||||||||||||||||||||||||||
 409               	|| Load S Record
 410               	|	srecType:	ds.b	1		| S1-S9 stored as binary 1-9
 411               	|	srecByCt:	ds.b	1		| Byte Count
 412               	|	srecData:	ds.b	1 		| Data
 413               	|	srecCSum:	ds.b	1 		| S-Record Checksum
 414               	|	srecAddr:	ds.l	1		| S Record current byte address
68K GAS  S68K_002.s 			page 9


 415               	|
 416               	| Supports 3 S record types (matches gcc m68k output)
 417               	|	S00F00005336384B5F3030322E746D7074
 418               	|	S2240800000007FFFC00080400000000000000000000000000000000000000000000000000C5
 419               	|	S503005BA1
 420               	
 421               	loadSRec:
 422 80710 41FA 0500 	    lea     ldSRecMsg, %a0
 423 80714 6100 FE1A 	    bsr.w   printString
 424 80718 6100 0076 		bsr		getRecType
 425 8071c 6100 00A8 		bsr		getBytCt
 426 80720 11FC 0000 		move.b 	#0, srecCSum
 426      0403 
 427 80726 6100 00FC 		bsr		getAddr
 428 8072a 41FA 058B 		lea		debug_Srec_LDData_Msg, %a0
 429 8072e 6100 FE00 		bsr		printString
 430               	loopSData:
 431 80732 0C38 0001 		cmp.b 	#1, srecByCt
 431      0401 
 432 80738 6700 000A 		beq		sRecDataDone
 433 8073c 4EBA 000E 		jsr		getLdData
 434 80740 6000 FFF0 		bra		loopSData
 435               	sRecDataDone:
 436 80744 4EBA 0028 		jsr		getChksum
 437 80748 6000 FF12 		bra.w   .exit
 438               	
 439               	getLdData:
 440 8074c 0C38 0002 		cmp.b	#2, srecType
 440      0400 
 441 80752 6600 0018 		bne		skipLdData
 442 80756 4EBA 0098 		jsr		getHexPair
 443 8075a 41F8 0404 		lea 	srecAddr, %a0
 444 8075e 1080      		move.b	%d0, (%a0)
 445 80760 52B8 0404 		add.l	#1, srecAddr
 446 80764 D138 0403 		add.b	%d0, srecCSum
 447 80768 5338 0401 		sub.b	#1, srecByCt
 448               	skipLdData:
 449 8076c 4E75      		rts
 450               	
 451               	getChksum:
 452 8076e 41FA 0503 		lea		debug_Srec_CSum_Msg, %a0
 453 80772 6100 FDBC 	    bsr.w   printString
 454 80776 4EBA 0078 		jsr		getHexPair
 455 8077a D138 0403 		add.b	%d0, srecCSum
 456 8077e 1038 0403 		move.b	srecCSum, %d0
 457 80782 4EBA 02F2 		jsr		printHexByte
 458 80786 41FA 0438 		lea		CRLF_MSG, %a0
 459 8078a 6100 FDA4 	    bsr.w   printString
 460               	failCSUM:
 461 8078e 4E75      		rts
 462               	
 463               	getRecType:
 464 80790 4EBA FDA8 		jsr		inChar
 465 80794 0C00 0053 		cmp.b	#'S', %d0
 466 80798 6600 FFF6 		bne		getRecType					| Toss extra chars
 467 8079c 4EBA FD9C 		jsr		inChar
 468 807a0 0200 000F 		andi.b	#0x0f, %d0
68K GAS  S68K_002.s 			page 10


 469 807a4 11C0 0400 		move.b	%d0, srecType
 470               	| Debug messages follow
 471 807a8 41FA 04A3 		lea		debug_Srec_Typ_Msg, %a0		| Debug message
 472 807ac 6100 FD82 	    bsr.w   printString
 473 807b0 1038 0400 		move.b	srecType, %d0
 474 807b4 0600 0030 		add.b	#'0', %d0
 475 807b8 4EBA FD4E 		jsr		outChar
 476 807bc 41FA 0402 		lea		CRLF_MSG, %a0
 477 807c0 6100 FD6E 	    bsr.w   printString
 478               	| Debug messages end
 479 807c4 4E75      		rts
 480               		
 481               	getBytCt:
 482 807c6 4EBA 0028 		jsr		getHexPair
 483 807ca 11C0 0403 		move.b 	%d0, srecCSum	| Initialize checksum
 484 807ce 11C0 0401 		move.b	%d0, srecByCt	| Byte count
 485               	| Debug messages follow
 486 807d2 41FA 0488 		lea		debug_Srec_BytCt_Msg, %a0
 487 807d6 6100 FD58 	    bsr.w   printString
 488 807da 1038 0401 		move.b	srecByCt, %d0
 489 807de 4EBA 0296 		jsr		printHexByte
 490 807e2 41FA 03DC 		lea		CRLF_MSG, %a0
 491 807e6 6100 FD48 	    bsr.w   printString
 492               	| Debug messages end
 493 807ea 5338 0401 		sub.b	#1, srecByCt
 494 807ee 4E75      		rts
 495               	
 496               	getHexPair:
 497 807f0 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 498 807f4 4EBA FD44 		jsr		inChar
 499 807f8 4EBA 0016 		jsr		toNibble
 500 807fc E900      		asl.b	#4, %d0
 501 807fe 1400      		move.b	%d0, %d2
 502 80800 4EBA FD38 		jsr		inChar
 503 80804 4EBA 000A 		jsr		toNibble
 504 80808 8002      		or.b	%d2, %d0
 505 8080a 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 506 8080e 4E75      		rts
 507               	
 508               	toNibble:
 509 80810 0C00 0041 		cmp.b	#'A', %d0
 510 80814 6C00 0008 		bge		doHexLetter
 511 80818 0400 0030 		sub.b	#'0', %d0
 512 8081c 4E75      		rts
 513               	doHexLetter:
 514 8081e 0400 004B 		sub.b	#'A'+10, %d0
 515 80822 4E75      		rts
 516               	
 517               	getAddr:
 518 80824 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 519 80828 0C38 0002 		cmp.b	#2, srecType
 519      0400 
 520 8082e 6600 0068 		bne		adrLen16
 521 80832 21FC 0000 		move.l	#0, srecAddr
 521      0000 0404 
 522 8083a 41FA 044A 		lea		debug_S2rec_Addr_Msg, %a0
 523 8083e 6100 FCF0 		bsr		printString
68K GAS  S68K_002.s 			page 11


 524 80842 7400      		move.l	#0, %d2			| d2 stores address for accumulation of bytes
 525               		| Get the upper 8-bits of 24-bits
 526 80844 4EBA FFAA 		jsr		getHexPair
 527 80848 0280 0000 		and.l	#0xff, %d0
 527      00FF 
 528 8084e D138 0403 		add.b 	%d0, srecCSum
 529 80852 8480      		or.l	%d0, %d2
 530 80854 E182      		asl.l	#8, %d2
 531               	|	move.l	%d2, %d0
 532               	|	bsr		printHexLong
 533               	|	lea		CRLF_MSG, %a0
 534               	|   bsr.w   printString
 535               		| Get the middle 8-bits of 24-bits
 536 80856 4EBA FF98 		jsr		getHexPair
 537 8085a 0280 0000 		and.l	#0xff, %d0
 537      00FF 
 538 80860 D138 0403 		add.b 	%d0, srecCSum
 539 80864 8480      		or.l	%d0, %d2
 540 80866 E182      		asl.l	#8, %d2
 541               	|	move.l	%d2, %d0
 542               	|	bsr		printHexLong
 543               	|	lea		CRLF_MSG, %a0
 544               	|   bsr.w   printString
 545               		| Get the lower 8-bits of 24-bits
 546 80868 4EBA FF86 		jsr		getHexPair
 547 8086c 0280 0000 		and.l	#0xff, %d0
 547      00FF 
 548 80872 D138 0403 		add.b 	%d0, srecCSum
 549 80876 8480      		or.l	%d0, %d2
 550 80878 0282 00FF 		andi.l	#0x00ffffff, %d2
 550      FFFF 
 551 8087e 21C2 0404 		move.l	%d2, srecAddr		| Save the S record address
 552 80882 2002      		move.l	%d2, %d0
 553 80884 6100 01D0 		bsr		printHexLong
 554 80888 41FA 0336 		lea		CRLF_MSG, %a0
 555 8088c 6100 FCA2 	    bsr.w   printString
 556 80890 5738 0401 		sub.b	#3, srecByCt
 557 80894 6000 0036 		bra		past16
 558               	adrLen16:
 559 80898 41FA 0401 		lea		debug_SXrec_Addr_Msg, %a0
 560 8089c 6100 FC92 		bsr		printString
 561               	|	move.l	#0, %d2
 562 808a0 4EBA FF4E 		jsr		getHexPair
 563 808a4 5738 0401 		sub.b	#3, srecByCt
 564 808a8 6100 01AC 		bsr		printHexLong
 565 808ac 41FA 0312 		lea		CRLF_MSG, %a0
 566 808b0 6100 FC7E 	    bsr.w   printString
 567               	|	or.l	%d0, %d2
 568               	|	asl.l	#8, %d2
 569 808b4 4EBA FF3A 		jsr		getHexPair
 570 808b8 5738 0401 		sub.b	#3, srecByCt
 571 808bc 6100 0198 		bsr		printHexLong
 572 808c0 41FA 02FE 		lea		CRLF_MSG, %a0
 573 808c4 6100 FC6A 	    bsr.w   printString
 574               	|	or.l	%d0, %d2
 575               	|	move.l	%d2, srecAddr
 576 808c8 5538 0401 		sub.b	#2, srecByCt
68K GAS  S68K_002.s 			page 12


 577               	past16:
 578 808cc 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 579 808d0 4E75      		rts
 580               			
 581               	|||||||||||||||||||||||||||||
 582               	| Find and parse a hex number
 583               	|  Starting address in A0
 584               	|  Number returned in D0
 585               	|  Status in D1   (0 success, 1 fail)
 586               	|  TODO: Try and merge first digit code with remaining digit code
 587               	parseNumber:
 588 808d2 B180      	    eor.l   %d0, %d0		| Zero out d0
 589 808d4 1018      	    move.b  (%a0)+, %d0
 590 808d6 0C00 0020 	    cmp.b   #' ', %d0		|  Ignore all leading spaces
 591 808da 67F6      	    beq.s   parseNumber
 592 808dc 0C00 0030 	    cmp.b   #'0', %d0       | Look for hex digits 0-9
 593 808e0 6D14      	    blt.s	PNinvalid
 594 808e2 0C00 0039 	    cmp.b   #'9', %d0
 595 808e6 6F18      	    ble.s   PNfirstdigit1
 596               	
 597 808e8 0C00 0041 	    cmp.b   #'A', %d0      	| Look for hex digits A-F
 598 808ec 6D00 FD66 	    blt   .invalid    
 599 808f0 0C00 0046 	    cmp.b   #'F', %d0
 600 808f4 6F04      	    ble.s   PNfirstdigit2
 601               	PNinvalid:
 602 808f6 7201      	    move.l  #1, %d1			| Invalid character, mark failure and return
 603 808f8 4E75      	    rts
 604               	PNfirstdigit2:
 605 808fa 0400 0037 	    sub.b   #'7', %d0       | Turn 'A' to 10
 606 808fe 6004      	    bra.s   PNloop
 607               	PNfirstdigit1:
 608 80900 0400 0030 	    sub.b   #'0', %d0       | Turn '0' to 0
 609               	 PNloop:
 610 80904 1218      	    move.b  (%a0)+, %d1      | Read in a digit
 611 80906 0C01 0030 	    cmp.b   #'0', %d1       | Look for hex digits 0-9
 612 8090a 6D12      	    blt.s   PNend         	| Any other characters mean we're done reading
 613 8090c 0C01 0039 	    cmp.b   #'9', %d1
 614 80910 6F18      	    ble.s   PNdigit1
 615 80912 0C01 0041 	    cmp.b   #'A', %d1      	| Look for hex digits A-F
 616 80916 6D06      	    blt.s   PNend
 617 80918 0C01 0046 	    cmp.b   #'F', %d1
 618 8091c 6F06      	    ble.s   PNdigit2
 619               	
 620               	PNend:                       | We hit a non-hex digit character, we're done parsing
 621 8091e 5388      	    subq.l  #1, %a0         | Move the pointer back before the end character we read
 622 80920 7200      	    move.l  #0, %d1
 623 80922 4E75      	    rts
 624               	PNdigit2:
 625 80924 0401 0037 	    sub.b   #'7', %d1		| Turn 'A' to 10
 626 80928 6004      	    bra.s   PNdigit3
 627               	PNdigit1:
 628 8092a 0401 0030 	    sub.b   #'0', %d1       | Turn '0' to 0
 629               	PNdigit3:
 630 8092e E988      	    lsl.l   #4, %d0        	| Shift over to the next nybble
 631 80930 D001      	    add.b   %d1, %d0       	| Place in our current nybble (could be or.b instead)
 632 80932 60D0      	    bra.s   PNloop
 633               	    
68K GAS  S68K_002.s 			page 13


 634               	
 635               	|||||||||||||||||||||||||||||
 636               	| Dumps a section of RAM to the screen
 637               	| Displays both hex values and ASCII characters
 638               	| d0 - Number of bytes to dump
 639               	| a0 - Start Address
 640               	dumpRAM:
 641 80934 48E7 3820 	    movem.l %d2-%d4/%a2, -(%SP) | Save registers
 642 80938 2448      	    move.l  %a0, %a2           	| Save the start address
 643 8093a 2400      	    move.l  %d0, %d2           	| And the number of bytes
 644               	 .line:
 645 8093c 200A      	    move.l  %a2, %d0          
 646 8093e 6100 010E 	    bsr.w   printHexAddr     	| Starting address of this line
 647 80942 41FA 0303 	    lea     msgColonSpace, %a0
 648 80946 6100 FBE8 	    bsr.w   printString
 649 8094a 7610      	    move.l  #16, %d3         	| 16 Bytes can be printed on a line
 650 8094c 2803      	    move.l  %d3, %d4       		| Save number of bytes on this line
 651               	 .hexbyte:
 652 8094e 4A82      	    tst.l   %d2               	| Check if we're out of bytes
 653 80950 6718      	    beq.s   .endbytesShort
 654 80952 4A03      	    tst.b   %d3               	| Check if we're done this line
 655 80954 673A      	    beq.s   .endbytes    
 656 80956 101A      	    move.b  (%a2)+, %d0        	| Read a byte in from RAM
 657 80958 6100 011C 	    bsr.w   printHexByte     	| Display it
 658 8095c 103C 0020 	    move.b  #' ', %d0
 659 80960 6100 FBA6 	    bsr.w   outChar          	| Space out bytes
 660 80964 5383      	    subq.l  #1, %d3    
 661 80966 5382      	    subq.l  #1, %d2        
 662 80968 60E4      	    bra.s   .hexbyte
 663               	 .endbytesShort:
 664 8096a 9803      	    sub.b   %d3, %d4           	| Make d4 the actual number of bytes on this line
 665 8096c 103C 0020 	    move.b  #' ', %d0
 666               	 .endbytesShortLoop:
 667 80970 4A03      	    tst.b   %d3               	| Check if we ended the line
 668 80972 671C      	    beq.s   .endbytes
 669 80974 103C 0020 	    move.b  #' ', %d0
 670 80978 6100 FB8E 	    bsr.w   outChar          	| Three spaces to pad out
 671 8097c 103C 0020 	    move.b  #' ', %d0
 672 80980 6100 FB86 	    bsr.w   outChar
 673 80984 103C 0020 	    move.b  #' ', %d0
 674 80988 6100 FB7E 	    bsr.w   outChar
 675               	    
 676 8098c 5303      	    subq.b  #1, %d3
 677 8098e 60E0      	    bra.s   .endbytesShortLoop
 678               	 .endbytes:
 679 80990 95C4      	    suba.l  %d4, %a2        	| Return to the start address of this line
 680               	 .endbytesLoop:
 681 80992 4A04      	    tst.b   %d4               	| Check if we are done printing ascii
 682 80994 6700 0022 	    beq     .endline    
 683 80998 5304      	    subq.b  #1, %d4
 684 8099a 101A      	    move.b  (%a2)+, %d0        	| Read the byte again
 685 8099c 0C00 0020 	    cmp.b   #' ', %d0         	| Lowest printable character
 686 809a0 6D0C      	    blt.s   .unprintable
 687 809a2 0C00 007E 	    cmp.b   #'~', %d0         	| Highest printable character
 688 809a6 6E06      	    bgt.s   .unprintable
 689 809a8 6100 FB5E 	    bsr.w   outChar
 690 809ac 60E4      	    bra.s   .endbytesLoop
68K GAS  S68K_002.s 			page 14


 691               	 .unprintable:
 692 809ae 103C 002E 	    move.b  #'.', %d0
 693 809b2 6100 FB54 	    bsr.w   outChar
 694 809b6 60DA      	    bra.s   .endbytesLoop
 695               	 .endline:
 696 809b8 41FA 0290 	    lea     msgNewline, %a0
 697 809bc 6100 FB72 	    bsr.w   printString
 698 809c0 4A82      	    tst.l   %d2
 699 809c2 6F04      	    ble.s   .end
 700 809c4 6000 FF76 	    bra.w   .line
 701               	 .end:
 702 809c8 4CDF 041C 	    movem.l (%SP)+, %d2-%d4/%a2		| Restore registers
 703 809cc 4E75      	    rts
 704               	
 705               	|||||||||||||||||||||||
 706               	| Deposit values into RAM
 707               	| d ADDR VAL VAL            Deposit value(s) into RAM
 708               	| d ADDR VAL VAL;           Deposit values, continue with values on next line
 709               	|  VAL VAL VAL;              - Continuing with further continue
 710               	| d: VAL VAL                Continue depositing values after the last address written to
 711               	|||||||||||||||||||||||
 712               	.deposit:
 713 809ce 1010      	    move.b  (%a0), %d0
 714 809d0 0C00 003A 	    cmp.b   #':', %d0       	| Check if we want to continue from last
 715 809d4 6730      	    beq.s   DepCont
 716               	    
 717 809d6 6100 FEFA 	    bsr.w   parseNumber         | Otherwise read the address
 718 809da 4A01      	    tst.b   %d1
 719 809dc 6600 FC90 	    bne		.invalidAddr
 720 809e0 2640      	    move.l  %d0, %a3           	| Save the start address
 721               	 DepLoop:
 722 809e2 1010      	    move.b  (%a0), %d0            
 723 809e4 0C00 003B 	    cmp.b   #';', %d0          	| Check for continue
 724 809e8 6726      	    beq.s   DepMLine
 725 809ea 4A40      	    tst     %d0              	| Check for the end of line
 726 809ec 6700 003A 	    beq     DepEnd
 727               	    
 728 809f0 6100 FEE0 	    bsr		parseNumber         | Otherwise read a value
 729 809f4 4A01      	    tst.b   %d1
 730 809f6 6600 FC82 	    bne		.invalidVal
 731 809fa 0C40 00FF 	    cmp.w   #255, %d0          	| Make sure it's a byte
 732 809fe 6E00 FC7A 	    bgt		.invalidVal
 733               	    
 734 80a02 16C0      	    move.b  %d0, (%a3)+        	| Store the value into memory
 735 80a04 60DC      	    bra.s   DepLoop
 736               	    
 737               	 DepCont:
 738 80a06 2679 0007 	    move.l  varCurAddr, %a3   	| Read in the last address 
 738      FBAA 
 739 80a0c 5288      	    addq.l  #1, %a0           	| Skip over the ':'
 740 80a0e 60D2      	    bra.s   DepLoop
 741               	    
 742               	 DepMLine:
 743 80a10 41FA 0186 	    lea     msgDepositPrompt, %a0
 744 80a14 6100 FB1A 	    bsr.w   printString
 745 80a18 6100 FB48 	    bsr.w   readLine          	| Read in the next line to be parsed
 746 80a1c 6100 FBD6 	    bsr.w   lineToUpper         | Convert to uppercase
68K GAS  S68K_002.s 			page 15


 747 80a20 41F9 0007 	    lea     varLineBuf, %a0    	| Reset our buffer pointer
 747      FBAE 
 748 80a26 60BA      	    bra.s   DepLoop            	| And jump back to decoding
 749               	 DepEnd:
 750 80a28 23CB 0007 	    move.l  %a3, varCurAddr
 750      FBAA 
 751 80a2e 6000 FC2C 	    bra.w   .exit
 752               	
 753               	|||||||||||||||||||||||
 754               	| run code
 755               	 .run:
 756 80a32 6100 FE9E 	    bsr.w   parseNumber        	| Otherwise read the address
 757 80a36 4A01      	    tst.b   %d1
 758 80a38 6600 FC34 	    bne		.invalidAddr
 759 80a3c 2040      	    move.l  %d0, %a0
 760 80a3e 4E90      	    jsr     (%a0)             	| Jump to the code! 
 761               	                                | Go as subroutine to allow code to return to us
 762 80a40 4EBA FA8A 	    jsr     monitorStart        | Warm start after returning so everything is in
 763               	                                | a known state.
 764               	
 765               	
 766               	|||||||||||||||||||||||
 767               	|| KEEP All printHex functions together ||
 768               	|||||||||||||||||||||||
 769               	| Print a hex word
 770               	printHexWord:
 771 80a44 2F02      	    move.l  %d2, -(%SP)		| Save D2
 772 80a46 2400      	    move.l  %d0, %d2		| Save the address in d2
 773               	    
 774 80a48 E19A      	    rol.l   #0x8, %d2       | 4321 -> 3214
 775 80a4a E19A      	    rol.l   #0x8, %d2       | 3214 -> 2143 
 776 80a4c 6018      	    bra.s   printHex_wordentry  | Print out the last 16 bits
 777               	|||||||||||||||||||||||
 778               	| Print a hex 24-bit address
 779               	printHexAddr:
 780 80a4e 2F02      	    move.l %d2, -(%SP)   	| Save D2
 781 80a50 2400      	    move.l %d0, %d2      	| Save the address in d2
 782               	    
 783 80a52 E19A      	    rol.l   #0x8, %d2     	| 4321 -> 3214
 784 80a54 600A      	    bra.s   printHex_addrentry  | Print out the last 24 bits
 785               	|||||||||||||||||||||||
 786               	* Print a hex long
 787               	printHexLong:
 788 80a56 2F02      	    move.l  %d2, -(%SP)     | Save D2
 789 80a58 2400      	    move.l  %d0, %d2        | Save the address in d2
 790               	    
 791 80a5a E19A      	    rol.l   #0x8, %d2        | 4321 -> 3214 high byte in low
 792 80a5c 2002      	    move.l  %d2, %d0
 793 80a5e 6116      	    bsr.s   printHexByte  	| Print the high byte (24-31)
 794               	printHex_addrentry:     
 795 80a60 E19A      	    rol.l   #0x8, %d2        	| 3214 -> 2143 middle-high byte in low
 796 80a62 2002      	    move.l  %d2, %d0              
 797 80a64 6110      	    bsr.s   printHexByte  	| Print the high-middle byte (16-23)
 798               	printHex_wordentry:    
 799 80a66 E19A      	    rol.l   #0x8, %d2        	| 2143 -> 1432 Middle byte in low
 800 80a68 2002      	    move.l  %d2, %d0
 801 80a6a 610A      	    bsr.s   printHexByte  	| Print the middle byte (8-15)
68K GAS  S68K_002.s 			page 16


 802 80a6c E19A      	    rol.l   #0x8, %d2
 803 80a6e 2002      	    move.l  %d2, %d0
 804 80a70 6104      	    bsr.s   printHexByte  	| Print the low byte (0-7)
 805               	    
 806 80a72 241F      	    move.l (%SP)+, %d2      | Restore D2
 807 80a74 4E75      	    RTS
 808               	    
 809               	|||||||||||||||||||||||
 810               	| Print a hex byte
 811               	|  - Takes byte in D0
 812               	printHexByte:
 813 80a76 2F02      	    move.l  %D2, -(%SP)
 814 80a78 7400      		move.l	#0, %d2
 815 80a7a 1400      	    move.b  %d0, %d2
 816 80a7c E808      	    lsr.b   #0x4, %d0		| Shift down upper nibble
 817 80a7e 0200 000F 		andi.b	#0xf, %d0
 818 80a82 0600 0030 	    add.b   #'0', %d0
 819 80a86 0C00 0039 	    cmp.b   #'9', %d0		| Check if the hex number was from 0-9
 820 80a8a 6F02      	    ble.s   PHBsecond
 821 80a8c 5E00      	    add.b   #0x7, %d0			| Shift 0xA-0xF from ':' to 'A'
 822               	PHBsecond:
 823 80a8e 6100 FA78 	    bsr   outChar			| Print the digit
 824 80a92 0202 000F 	    andi.b  #0x0F, %d2		| Now we want the lower digit Mask only the lower digit
 825 80a96 0602 0030 	    add.b   #'0', %d2
 826 80a9a 0C02 0039 	    cmp.b   #'9', %d2     	| Same as before    
 827 80a9e 6F02      	    ble.s   PHBend
 828 80aa0 5E02      	    add.b   #0x7, %D2
 829               	PHBend:
 830 80aa2 1002      	    move.b  %D2, %D0
 831 80aa4 6100 FA62 	    bsr	   outChar      	| Print the lower digit
 832 80aa8 241F      	    move.l  (%SP)+, %D2
 833 80aaa 4E75      	    rts
 834               		
 835               	
 836               	|||||
 837               	| Initializes the 68681 DUART port A as 9600 8N1 
 838               	initDuart:
 839 80aac 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 839      000F 0004 
 840 80ab4 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 840      000F 0004 
 841 80abc 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 841      000F 0004 
 842               	    
 843 80ac4 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 843      000F 0008 
 844 80acc 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 844      000F 0002 
 845 80ad4 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 845      000F 0000 
 846 80adc 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 846      000F 0000 
 847               	    
 848 80ae4 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 848      000F 0004 
 849               	
 850 80aec 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
68K GAS  S68K_002.s 			page 17


 850      000F 0014 
 851 80af4 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 851      000F 0014 
 852 80afc 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 852      000F 0014 
 853               	    
 854 80b04 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 854      000F 0012 
 855 80b0c 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 855      000F 0010 
 856 80b14 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 856      000F 0010 
 857               	    
 858 80b1c 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 858      000F 0014 
 859               		
 860 80b24 13FC 0000 		move.b	#0x00, OPC		 | Output port configuration (all bit are outs)
 860      000F 001A 
 861 80b2c 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 861      000F 001E 
 862 80b34 4E75      	    rts    
 863               	
 864               	delay1Sec:
 865 80b36 203C 0003 		move.l	#200000, %d0	| rough count
 865      0D40 
 866               	delay1Loop:
 867 80b3c 5380      		sub.l	#1, %d0			
 868 80b3e 6600 FFFC 		bne		delay1Loop
 869 80b42 4E75      		rts
 870               	
 871               	READINLINE:	  
 872 80b44 5265 6164 		.ascii  "Reading in line"
 872      696E 6720 
 872      696E 206C 
 872      696E 65
 873 80b53 0D0A 00   		dc.b CR,LF,EOT
 874               	L_TO_UPPER_MSG:  
 875 80b56 436F 6E76 		.ascii  "Convert line to upper case"
 875      6572 7420 
 875      6C69 6E65 
 875      2074 6F20 
 875      7570 7065 
 876 80b70 0D0A 00   		dc.b CR,LF,EOT
 877               	WRITEOUTLINE:	  
 878 80b73 5772 6974 		.ascii  "Writing out line"
 878      696E 6720 
 878      6F75 7420 
 878      6C69 6E65 
 879 80b83 0D0A 00   		dc.b CR,LF,EOT
 880               	RAM_PASS_MSG:  
 881 80b86 5241 4D20 		.ascii  "RAM Test Passed"
 881      5465 7374 
 881      2050 6173 
 881      7365 64
 882 80b95 0D0A 00   		dc.b CR,LF,EOT
 883               	msgDepositPrompt:
 884 80b98 3A20      	    .ascii	": "
68K GAS  S68K_002.s 			page 18


 885 80b9a 00        		dc.b 	EOT
 886               	BANNER_MSG:	
 887 80b9b 5349 4D50 		.ascii  "SIMPLE-68008 CPU"
 887      4C45 2D36 
 887      3830 3038 
 887      2043 5055 
 888 80bab 0D0A 00   		dc.b CR,LF,EOT
 889               	msgInvalidCommand:
 890 80bae 496E 7661 	    .ascii "Invalid Command"
 890      6C69 6420 
 890      436F 6D6D 
 890      616E 64
 891 80bbd 0D0A 00   		dc.b CR,LF,EOT
 892               	CRLF_MSG:	
 893 80bc0 0D0A 00   		dc.b CR,LF,EOT
 894               	msgHelp:
 895 80bc3 4176 6169 	    .ascii	"Available Commands: "
 895      6C61 626C 
 895      6520 436F 
 895      6D6D 616E 
 895      6473 3A20 
 896 80bd7 0D0A      		dc.b	CR,LF
 897 80bd9 2028 4529 	    .ascii	" (E)xamine    (D)eposit    (R)un     (L)oad     (H)elp"
 897      7861 6D69 
 897      6E65 2020 
 897      2020 2844 
 897      2965 706F 
 898 80c0f 0D0A 00   		dc.b	CR,LF,EOT
 899               	ldSRecMsg:
 900 80c12 4C6F 6164 	    .ascii	"Load S-Record"
 900      2053 2D52 
 900      6563 6F72 
 900      64
 901 80c1f 0D0A 00   		dc.b	CR,LF,EOT
 902               	msgInvalidAddress:
 903 80c22 496E 7661 	    .ascii	"Invalid Address"
 903      6C69 6420 
 903      4164 6472 
 903      6573 73
 904 80c31 0D0A 00   		dc.b 	CR,LF,EOT
 905               	msgInvalidValue:
 906 80c34 496E 7661 	    .ascii	"Invalid Value"
 906      6C69 6420 
 906      5661 6C75 
 906      65
 907 80c41 0D0A 00   		dc.b	CR,LF,EOT
 908               	msgPrompt:
 909 80c44 3E20      		.ascii "> "
 910 80c46 00        	    dc.b EOT
 911               	msgColonSpace:
 912 80c47 3A20      	    .ascii ": "
 913 80c49 00        	    dc.b EOT
 914               	msgNewline:
 915 80c4a 0D0A 00   	    dc.b CR,LF,EOT
 916               	debug_Srec_Typ_Msg:
 917 80c4d 5320 5265 		.ascii	"S Record Type="
 917      636F 7264 
68K GAS  S68K_002.s 			page 19


 917      2054 7970 
 917      653D 
 918 80c5b 00        	    dc.b EOT
 919               	debug_Srec_BytCt_Msg:
 920 80c5c 5320 5265 		.ascii	"S Record Byte Count=0x"
 920      636F 7264 
 920      2042 7974 
 920      6520 436F 
 920      756E 743D 
 921 80c72 00        	    dc.b EOT
 922               	debug_Srec_CSum_Msg:
 923 80c73 5320 5265 		.ascii	"S Record Checksum="
 923      636F 7264 
 923      2043 6865 
 923      636B 7375 
 923      6D3D 
 924 80c85 00        	    dc.b EOT
 925               	debug_S2rec_Addr_Msg:
 926 80c86 5332 2052 		.ascii	"S2 Record Address=0x"
 926      6563 6F72 
 926      6420 4164 
 926      6472 6573 
 926      733D 3078 
 927 80c9a 00        	    dc.b EOT
 928               	debug_SXrec_Addr_Msg:
 929 80c9b 5320 286E 		.ascii	"S (not 2) Record Address=0x"
 929      6F74 2032 
 929      2920 5265 
 929      636F 7264 
 929      2041 6464 
 930 80cb6 00        	    dc.b EOT
 931               	debug_Srec_LDData_Msg:
 932 80cb7 4C6F 6164 	    .ascii	"Load Data Loop start"
 932      2044 6174 
 932      6120 4C6F 
 932      6F70 2073 
 932      7461 7274 
 933 80ccb 0D0A 00   		dc.b 	CR,LF,EOT
 934               	
 935               	
 936               	MAX_LINE_LENGTH = 80
 937               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
 938               	varCurAddr = varLineBuf-4
68K GAS  S68K_002.s 			page 20


DEFINED SYMBOLS
          S68K_002.s:6      *ABS*:0000000000000000 RAM_START
          S68K_002.s:7      *ABS*:000000000007fffc STACK_END
          S68K_002.s:8      *ABS*:000000000007ffff RAM_END
          S68K_002.s:9      *ABS*:0000000000080000 ROM_START
          S68K_002.s:10     *ABS*:0000000000080400 ROM_CODE
          S68K_002.s:12     *ABS*:000000000008ffff ROM_END
          S68K_002.s:17     *ABS*:00000000000f0000 DUART
          S68K_002.s:18     *ABS*:00000000000f0000 MRA
          S68K_002.s:19     *ABS*:00000000000f0002 SRA
          S68K_002.s:20     *ABS*:00000000000f0002 CSRA
          S68K_002.s:21     *ABS*:00000000000f0004 CRA
          S68K_002.s:22     *ABS*:00000000000f0006 RBA
          S68K_002.s:23     *ABS*:00000000000f0006 TBA
          S68K_002.s:24     *ABS*:00000000000f0008 ACR
          S68K_002.s:25     *ABS*:00000000000f000a ISR
          S68K_002.s:26     *ABS*:00000000000f000a IMR
          S68K_002.s:27     *ABS*:00000000000f0010 MRB
          S68K_002.s:28     *ABS*:00000000000f0012 SRB
          S68K_002.s:29     *ABS*:00000000000f0012 CSRB
          S68K_002.s:30     *ABS*:00000000000f0014 CRB
          S68K_002.s:31     *ABS*:00000000000f0016 RBB
          S68K_002.s:32     *ABS*:00000000000f0016 TBB
          S68K_002.s:33     *ABS*:00000000000f0018 IVR
          S68K_002.s:34     *ABS*:00000000000f001a OPC
          S68K_002.s:35     *ABS*:00000000000f001a INU
          S68K_002.s:36     *ABS*:00000000000f001c OPS
          S68K_002.s:37     *ABS*:00000000000f001e OPR
          S68K_002.s:42     *ABS*:0000000000000007 BEL
          S68K_002.s:43     *ABS*:0000000000000008 BKSP
          S68K_002.s:44     *ABS*:0000000000000009 TAB
          S68K_002.s:45     *ABS*:000000000000000a LF
          S68K_002.s:46     *ABS*:000000000000000d CR
          S68K_002.s:47     *ABS*:000000000000001b ESC
          S68K_002.s:48     *ABS*:0000000000000000 EOT
          S68K_002.s:50     *ABS*:0000000000000003 CTRLC
          S68K_002.s:51     *ABS*:0000000000000018 CTRLX
          S68K_002.s:54     .text:0000000000000400 _srecType
          S68K_002.s:55     .text:0000000000000401 _srecByCt
          S68K_002.s:56     .text:0000000000000402 _srecData
          S68K_002.s:57     .text:0000000000000403 _srecCSum
          S68K_002.s:58     .text:0000000000000404 _srecAddr
          S68K_002.s:60     *ABS*:0000000000000400 srecType
          S68K_002.s:61     *ABS*:0000000000000401 srecByCt
          S68K_002.s:62     *ABS*:0000000000000402 srecData
          S68K_002.s:63     *ABS*:0000000000000403 srecCSum
          S68K_002.s:64     *ABS*:0000000000000404 srecAddr
          S68K_002.s:175    .text:0000000000080502 FERVR2
          S68K_002.s:100    .text:000000000008045c loop1stLoc
          S68K_002.s:173    .text:0000000000080502 failBitTest
          S68K_002.s:115    .text:000000000008047c loopAdrFill
          S68K_002.s:127    .text:000000000008049a loopAdrCk
          S68K_002.s:174    .text:0000000000080502 failAdrTest
          S68K_002.s:142    .text:00000000000804b4 fillSRAM
          S68K_002.s:146    .text:00000000000804c0 fillSRAMLoop
          S68K_002.s:838    .text:0000000000080aac initDuart
          S68K_002.s:155    .text:00000000000804cc monitorStart
68K GAS  S68K_002.s 			page 21


          S68K_002.s:886    .text:0000000000080b9b BANNER_MSG
          S68K_002.s:200    .text:0000000000080530 printString1
          S68K_002.s:880    .text:0000000000080b86 RAM_PASS_MSG
          S68K_002.s:163    .text:00000000000804dc interpLoop
          S68K_002.s:908    .text:0000000000080c44 msgPrompt
          S68K_002.s:201    .text:0000000000080530 printString
          S68K_002.s:230    .text:0000000000080562 readLine
          S68K_002.s:287    .text:00000000000805f4 lineToUpper
          S68K_002.s:304    .text:0000000000080612 parseLine
          S68K_002.s:182    .text:0000000000080508 outChar1
          S68K_002.s:183    .text:0000000000080508 outChar
          S68K_002.s:191    .text:000000000008051c outChar2
          S68K_002.s:202    .text:0000000000080530 PSloop
          S68K_002.s:208    .text:0000000000080538 PSend
          S68K_002.s:216    .text:000000000008053a inChar1
          S68K_002.s:217    .text:000000000008053a inChar
          S68K_002.s:223    .text:000000000008054e inChar2
                            *ABS*:000000000007fbae varLineBuf
          S68K_002.s:234    .text:000000000008056e RLloop
          S68K_002.s:251    .text:000000000008059a RLBS
          S68K_002.s:262    .text:00000000000805b8 RLlineClr
          S68K_002.s:276    .text:00000000000805dc RLEndLn
          S68K_002.s:244    .text:000000000008058a .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_002.s:266    .text:00000000000805be RLlineClrloop
          S68K_002.s:289    .text:00000000000805fa LUloop
          S68K_002.s:296    .text:000000000008060c LUnext
          S68K_002.s:307    .text:000000000008061c PLfindCommand
          S68K_002.s:353    .text:0000000000080686 .examine
          S68K_002.s:712    .text:00000000000809ce .deposit
          S68K_002.s:755    .text:0000000000080a32 .run
          S68K_002.s:332    .text:0000000000080662 .help
          S68K_002.s:421    .text:0000000000080710 loadSRec
          S68K_002.s:326    .text:000000000008065c .exit
          S68K_002.s:323    .text:0000000000080654 .invalid
          S68K_002.s:889    .text:0000000000080bae msgInvalidCommand
          S68K_002.s:894    .text:0000000000080bc3 msgHelp
          S68K_002.s:336    .text:000000000008066e .invalidAddr
          S68K_002.s:902    .text:0000000000080c22 msgInvalidAddress
          S68K_002.s:340    .text:000000000008067a .invalidVal
          S68K_002.s:905    .text:0000000000080c34 msgInvalidValue
          S68K_002.s:587    .text:00000000000808d2 parseNumber
          S68K_002.s:358    .text:0000000000080692 .exloop
          S68K_002.s:372    .text:00000000000806b6 .exrange
          S68K_002.s:381    .text:00000000000806c8 .exlength
          S68K_002.s:389    .text:00000000000806da .exinter
          S68K_002.s:378    .text:00000000000806c4 .exquick
          S68K_002.s:385    .text:00000000000806d2 .exend
          S68K_002.s:640    .text:0000000000080934 dumpRAM
          S68K_002.s:394    .text:00000000000806e8 .exinterend
          S68K_002.s:401    .text:00000000000806fc .exinterpage
          S68K_002.s:899    .text:0000000000080c12 ldSRecMsg
          S68K_002.s:463    .text:0000000000080790 getRecType
          S68K_002.s:481    .text:00000000000807c6 getBytCt
          S68K_002.s:517    .text:0000000000080824 getAddr
          S68K_002.s:931    .text:0000000000080cb7 debug_Srec_LDData_Msg
          S68K_002.s:430    .text:0000000000080732 loopSData
68K GAS  S68K_002.s 			page 22


          S68K_002.s:435    .text:0000000000080744 sRecDataDone
          S68K_002.s:439    .text:000000000008074c getLdData
          S68K_002.s:451    .text:000000000008076e getChksum
          S68K_002.s:448    .text:000000000008076c skipLdData
          S68K_002.s:496    .text:00000000000807f0 getHexPair
          S68K_002.s:922    .text:0000000000080c73 debug_Srec_CSum_Msg
          S68K_002.s:812    .text:0000000000080a76 printHexByte
          S68K_002.s:892    .text:0000000000080bc0 CRLF_MSG
          S68K_002.s:460    .text:000000000008078e failCSUM
          S68K_002.s:916    .text:0000000000080c4d debug_Srec_Typ_Msg
          S68K_002.s:919    .text:0000000000080c5c debug_Srec_BytCt_Msg
          S68K_002.s:508    .text:0000000000080810 toNibble
          S68K_002.s:513    .text:000000000008081e doHexLetter
          S68K_002.s:558    .text:0000000000080898 adrLen16
          S68K_002.s:925    .text:0000000000080c86 debug_S2rec_Addr_Msg
          S68K_002.s:787    .text:0000000000080a56 printHexLong
          S68K_002.s:577    .text:00000000000808cc past16
          S68K_002.s:928    .text:0000000000080c9b debug_SXrec_Addr_Msg
          S68K_002.s:601    .text:00000000000808f6 PNinvalid
          S68K_002.s:607    .text:0000000000080900 PNfirstdigit1
          S68K_002.s:604    .text:00000000000808fa PNfirstdigit2
          S68K_002.s:609    .text:0000000000080904 PNloop
          S68K_002.s:620    .text:000000000008091e PNend
          S68K_002.s:627    .text:000000000008092a PNdigit1
          S68K_002.s:624    .text:0000000000080924 PNdigit2
          S68K_002.s:629    .text:000000000008092e PNdigit3
          S68K_002.s:644    .text:000000000008093c .line
          S68K_002.s:779    .text:0000000000080a4e printHexAddr
          S68K_002.s:911    .text:0000000000080c47 msgColonSpace
          S68K_002.s:651    .text:000000000008094e .hexbyte
          S68K_002.s:663    .text:000000000008096a .endbytesShort
          S68K_002.s:678    .text:0000000000080990 .endbytes
          S68K_002.s:666    .text:0000000000080970 .endbytesShortLoop
          S68K_002.s:680    .text:0000000000080992 .endbytesLoop
          S68K_002.s:695    .text:00000000000809b8 .endline
          S68K_002.s:691    .text:00000000000809ae .unprintable
          S68K_002.s:914    .text:0000000000080c4a msgNewline
          S68K_002.s:701    .text:00000000000809c8 .end
          S68K_002.s:737    .text:0000000000080a06 DepCont
          S68K_002.s:721    .text:00000000000809e2 DepLoop
          S68K_002.s:742    .text:0000000000080a10 DepMLine
          S68K_002.s:749    .text:0000000000080a28 DepEnd
                            *ABS*:000000000007fbaa varCurAddr
          S68K_002.s:883    .text:0000000000080b98 msgDepositPrompt
          S68K_002.s:770    .text:0000000000080a44 printHexWord
          S68K_002.s:798    .text:0000000000080a66 printHex_wordentry
          S68K_002.s:794    .text:0000000000080a60 printHex_addrentry
          S68K_002.s:822    .text:0000000000080a8e PHBsecond
          S68K_002.s:829    .text:0000000000080aa2 PHBend
          S68K_002.s:864    .text:0000000000080b36 delay1Sec
          S68K_002.s:866    .text:0000000000080b3c delay1Loop
          S68K_002.s:871    .text:0000000000080b44 READINLINE
          S68K_002.s:874    .text:0000000000080b56 L_TO_UPPER_MSG
          S68K_002.s:877    .text:0000000000080b73 WRITEOUTLINE

NO UNDEFINED SYMBOLS
