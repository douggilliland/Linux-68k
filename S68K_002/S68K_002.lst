68K GAS  S68K_002.s 			page 1


   1               	| S68K_002.s - 68K Monitor with extensions
   2               	|	Adds S Record loader
   3               	| Land Boards, LLC
   4               	|	(c) 2024
   5               	| Use it however you want
   6               	| Borrowed init code from 
   7               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   8               	|
   9               	| Added S-Record load code
  10               	|	Uses SRAM from 0x400-0x407
  11               	
  12               	RAM_START	= 0x00000	| Beginning of the SRAM
  13               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
  14               	RAM_END		= 0x7FFFF	| 512KB SRAM
  15               	ROM_START	= 0x80000	| ROM start
  16               	ROM_CODE	= ROM_START+1024| Skip vector table
  17               	*ROM_END	= 0x87FFF	| End of 32KB EPROM
  18               	ROM_END		= 0x8FFFF	| End of 64KB EPROM
  19               	
  20               	|||||||||||||||||||||||||||||||||
  21               	| 68681 Duart Register Addresses
  22               	|
  23               	DUART = 0x0F0000	  | Base Addr of DUART
  24               	MRA   = DUART+0		  | Mode Register A           (R/W)
  25               	SRA   = DUART+2       | Status Register A         (r)
  26               	CSRA  = DUART+2       | Clock Select Register A   (w)
  27               	CRA   = DUART+4       | Commands Register A       (w)
  28               	RBA   = DUART+6       | Receiver Buffer A         (r)
  29               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  30               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  31               	ISR   = DUART+10      | Interrupt Status Register (R)
  32               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  33               	MRB   = DUART+16      | Mode Register B           (R/W)
  34               	SRB   = DUART+18      | Status Register B         (R)
  35               	CSRB  = DUART+18      | Clock Select Register B   (W)
  36               	CRB   = DUART+20      | Commands Register B       (W)
  37               	RBB   = DUART+22      | Reciever Buffer B         (R)
  38               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  39               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  40               	OPC   = DUART+26      | Output port config        (W)
  41               	INU   = DUART+26      | Input port (unlatched)    (R)
  42               	OPS   = DUART+28      | Output port Set           (W)
  43               	OPR   = DUART+30      | Output port Clear         (W)
  44               	
  45               	||||||||||||||||||||||||||||||||||
  46               	| ASCII Control Characters
  47               	|
  48               	BEL   = 0x07
  49               	BKSP  = 0x08       | CTRL-H
  50               	TAB   = 0x09
  51               	LF    = 0x0A
  52               	CR    = 0x0D
  53               	ESC   = 0x1B
  54               	EOT	  = 0x00
  55               	
  56               	CTRLC	=	0x03
  57               	CTRLX	=	0x18     | Line Clear
68K GAS  S68K_002.s 			page 2


  58               	
  59 0000 0000 0000 		.ORG    0x000400
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  60 0400 00        	_srecType:	ds.b	1		| S1-S9 stored as binary 1-9
  61 0401 00        	_srecByCt:	ds.b	1		| Byte Count
  62 0402 00        	_srecData:	ds.b	1 		| Data
  63 0403 00        	_srecCSum:	ds.b	1 		| S-Record Checksum
  64 0404 0000 0000 	_srecAddr:	ds.l	1		| S Record current byte address
  65               	
  66               	srecType	=		0x000400	| S1-S9 stored as binary 1-9
  67               	srecByCt	=		0x000401	| Byte Count
  68               	srecData	=		0x000402	| Data
  69               	srecCSum	=		0x000403	| S-Record Checksum
  70               	srecAddr	=		0x000404	| S Record current byte address
  71               	
  72 0408 0000 0000 		.ORG	ROM_START
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  72      0000 0000 
  73               	
  74               	| FIRST 8 bytes loaded after reset |
  75 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  76 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  77               	
  78 80008 0000 0000 	        .ORG ROM_CODE
  78      0000 0000 
  78      0000 0000 
  78      0000 0000 
  78      0000 0000 
  79 80400 4E71      		nop
  80 80402 4FF9 0007 		lea			STACK_END,%sp
  80      FFFC 
  81 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  81      0008 0000 
  82 80410 4E71      		nop
  83               	| LEDs
  84 80412 13FC 0000 		move.b	#0x00, OPC		| Output port configuration (all bit are outs)
  84      000F 001A 
  85 8041a 13FC 00FC 		move.b	#0xFC, OPR		| Clear all outputs
  85      000F 001E 
  86 80422 13FC 0004 		move.b	#0x04, OPS		| Turn off LED on DUART O2
  86      000F 001C 
  87               	|
  88               	| Test the first two SRAM location
  89               	|
  90 8042a 203C DEAD 		move.l	#0xDEADBEEF, %d0		| Test Pattern #1
  90      BEEF 
  91 80430 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  92 80434 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  93 80436 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  94 80438 B042      		cmp			%d2, %d0
  95 8043a 6600 00C6 		bne			FERVR2						
  96 8043e 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
68K GAS  S68K_002.s 			page 3


  96      AAAA 
  97 80444 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  98 80448 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  99 8044a 2611      		move.l	(%a1), %d3				| Read back
 100 8044c B243      		cmp			%d3, %d1
 101 8044e 6600 00B2 		bne			FERVR2
 102 80452 4E71      		nop
 103               	| Test bits of first location (as bytes)
 104 80454 7001      		move.l	#1, %d0
 105 80456 207C 0000 		move.l	#0, %a0
 105      0000 
 106               	loop1stLoc:
 107 8045c 1080      		move.b	%d0, (%a0)
 108 8045e 1210      		move.b	(%a0), %d1
 109 80460 B200      		cmp.b		%d0, %d1
 110 80462 6600 009E 		bne			failBitTest
 111 80466 E348      		lsl			#1, %d0
 112 80468 0C80 0000 		cmp.l		#0x00000100, %d0
 112      0100 
 113 8046e 6600 FFEC 		bne			loop1stLoc
 114               	|
 115               	| Test all address lines, 512KB SRAM
 116               	| Write incrementing pattern to data bits
 117               	|
 118 80472 7001      		move.l	#1, %d0		| Fill pattern
 119 80474 7401      		move.l	#1, %d2
 120 80476 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
 120      0001 
 121               	loopAdrFill:
 122 8047c 1080      		move.b	%d0,(%a0)	| Do the write
 123 8047e 5240      		addq		#1, %d0		| Increment the pattern
 124 80480 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
 125 80482 E38A      		lsl.l		#1, %d2		| Shift temp addr
 126 80484 2042      		move.l	%d2, %a0	| Put back into addr reg
 127 80486 0C82 0008 		cmp.l		#0x00080000,%d2
 127      0000 
 128 8048c 6600 FFEE 		bne			loopAdrFill
 129               	| Check
 130 80490 7001      		move.l	#1, %d0
 131 80492 7401      		move.l	#1, %d2
 132 80494 207C 0000 		move.l	#1, %a0
 132      0001 
 133               	loopAdrCk:
 134 8049a 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 135 8049c B200      		cmp.b		%d0, %d1
 136 8049e 6600 0062 		bne			failAdrTest
 137 804a2 5240      		addq		#1, %d0
 138 804a4 2408      		move.l	%a0, %d2 
 139 804a6 E38A      		lsl.l		#1, %d2
 140 804a8 2042      		move.l	%d2, %a0
 141 804aa 0C82 0008 		cmp.l		#0x00080000,%d2
 141      0000 
 142 804b0 6600 FFE8 		bne			loopAdrCk
 143               		
 144               	|
 145               	| Fill SRAM with 0x00 values
 146               	| 512KB fill takes about 2.5 seconds at 10 MHz CPU speed
68K GAS  S68K_002.s 			page 4


 147               	|
 148               	fillSRAM:
 149 804b4 41F8 0000 		lea		RAM_START, %a0		| Start at base RAM address
 150 804b8 43F9 0007 		lea		RAM_END, %a1		| End when reach end RAM space
 150      FFFF 
 151 804be 7000      		move.l	#0x00, %d0			| Fill with zeros
 152               	fillSRAMLoop:
 153 804c0 20C0      		move.l	%d0, (%a0)+			| Long fills are faster
 154 804c2 B3C8      		cmpa.l	%a0, %a1
 155 804c4 6E00 FFFA 		bgt		fillSRAMLoop
 156               	
 157               	|
 158               	| Done with address test of SRAM
 159               	|
 160 804c8 4EBA 05A0 		jsr     initDuart       	| Setup the serial port
 161               	monitorStart:					| Warm start
 162 804cc 41FA 068B 		lea		BANNER_MSG, %a0
 163 804d0 4EBA 005E 		jsr		printString1
 164 804d4 41FA 066E 		lea		RAM_PASS_MSG, %a0
 165 804d8 4EBA 0056 		jsr		printString1
 166               	|
 167               	| Interpreter Loop
 168               	|
 169               	interpLoop:
 170 804dc 41FA 0724 	    lea     msgPrompt, %a0	| Prompt
 171 804e0 6100 004E 	    bsr.w   printString
 172 804e4 13FC 0004 		move.b	#0x04, OPR		| Turn on LED
 172      000F 001E 
 173 804ec 4EBA 0074 		jsr		readLine		| Blocking read of line
 174 804f0 13FC 0004 		move.b	#0x04, OPS		| Turn off LED
 174      000F 001C 
 175 804f8 4EBA 00FA 		jsr		lineToUpper
 176 804fc 4EBA 0114 		jsr		parseLine
 177 80500 60DA      		bra.s	interpLoop
 178               		
 179               	failBitTest:
 180               	failAdrTest:
 181               	FERVR2:
 182 80502 4E71      		nop
 183 80504 4EFA FFFC 		jmp	FERVR2
 184               	
 185               	|||||
 186               	| Writes a character to Port A, blocking if not ready (Full buffer)
 187               	|  - Takes a character in D0
 188               	outChar1:
 189               	outChar:
 190 80508 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 190      000F 0002 
 191 80510 6700 FFF6 	    beq     outChar1     
 192 80514 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 192      0006 
 193 8051a 4E75      	    rts
 194               	
 195               	| Writes a character to Port A, blocking if not ready (Full buffer)
 196               	|  - Takes a character in D0
 197               	outChar2:
 198 8051c 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
68K GAS  S68K_002.s 			page 5


 198      000F 0012 
 199 80524 6700 FFF6 	    beq     outChar2     
 200 80528 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 200      0016 
 201 8052e 4E75      	    rts
 202               	
 203               	******
 204               	* Print a null terminated string
 205               	*
 206               	printString1:
 207               	printString:
 208               	PSloop:
 209 80530 1018      	    move.b  (%a0)+, %d0  | Read in character
 210 80532 6704      	    beq.s   PSend         | Check for the null
 211               	    
 212 80534 61D2      	    bsr.s   outChar      | Otherwise write the character
 213 80536 60F8      	    bra.s   PSloop        | And continue
 214               	PSend:
 215 80538 4E75      	    rts
 216               	
 217               	
 218               	|||||
 219               	| Reads in a character from Port A, blocking if none available
 220               	|  - Returns character in D0
 221               	|    
 222               	inChar1:
 223               	inChar:
 224 8053a 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 224      000F 0002 
 225 80542 6700 FFF6 	    beq     inChar1
 226 80546 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 226      0006 
 227 8054c 4E75      	    rts
 228               	
 229               	inChar2:
 230 8054e 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 230      000F 0012 
 231 80556 6700 FFF6 	    beq     inChar2
 232 8055a 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 232      0016 
 233 80560 4E75      	    rts
 234               	
 235               	| Read in a line into the line buffer
 236               	readLine:
 237 80562 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 238 80566 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 238      FBAE 
 239 8056c B542      	    eor.w   %d2, %d2           	| Clear the character counter
 240               	 RLloop:
 241 8056e 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 242 80572 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 243 80576 6722      	    beq.s   RLBS
 244 80578 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 245 8057c 673A      	    beq.s   RLlineClr
 246 8057e 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 247 80582 6758      	    beq.s   RLEndLn
 248 80584 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
68K GAS  S68K_002.s 			page 6


 249 80588 67E4      	    beq.s   RLloop            	| Ignore LFs and get the next character
 250               	 .char:                      	| Normal character to be inserted into the buffer
 251 8058a 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 252 8058e 6CDE      	    bge.s   RLloop            	| If the buffer is full ignore the character
 253 80590 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 254 80592 5242      	    addq.w  #1, %d2           	| Increment character count
 255 80594 6100 FF72 	    bsr.w   outChar          	| Echo the character
 256 80598 60D4      	    bra.s   RLloop            	| And get the next one
 257               	 RLBS:
 258 8059a 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 259 8059c 67D0      	    beq.s   RLloop            	| Then ignore it
 260 8059e 6100 FF68 	    bsr.w   outChar          	| Backspace
 261 805a2 103C 0020 	    move.b  #' ', %d0
 262 805a6 6100 FF60 	    bsr.w   outChar          	| Space
 263 805aa 103C 0008 	    move.b  #BKSP, %d0
 264 805ae 6100 FF58 	    bsr.w   outChar          	| Backspace
 265 805b2 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 266 805b4 5382      	    subq.l  #1, %d2           	| And current character count
 267 805b6 60B6      	    bra.s   RLloop            	| And goto the next character
 268               	 RLlineClr:
 269 805b8 4A42      	    tst     %d2               	| Anything to clear?
 270 805ba 67B2      	    beq.s   RLloop            	| If not, fetch the next character
 271 805bc 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 272               	 RLlineClrloop:
 273 805be 103C 0008 	    move.b  #BKSP, %d0
 274 805c2 6100 FF44 	    bsr.w   outChar          	| Backspace
 275 805c6 103C 0020 	    move.b  #' ', %d0
 276 805ca 6100 FF3C 	    bsr.w   outChar          	| Space
 277 805ce 103C 0008 	    move.b  #BKSP, %d0
 278 805d2 6100 FF34 	    bsr.w   outChar          	| Backspace
 279 805d6 5342      	    subq.w  #1, %d2          
 280 805d8 66E4      	    bne.s   RLlineClrloop   	| Go till the start of the line
 281 805da 6092      	    bra.s   RLloop   
 282               	 RLEndLn:
 283 805dc 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 284 805e0 103C 000A 	    move.b  #LF, %d0
 285 805e4 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 286 805e8 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 287 805ec 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 288 805ee 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 289 805f2 4E75      	    rts                      	| And return
 290               	
 291               	
 292               	| Convert line buffer to upper case
 293               	lineToUpper:
 294 805f4 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 294      FBAE 
 295               	 LUloop:
 296 805fa 1010      	    move.b  (%a0), %d0        | Read in a character
 297 805fc 0C00 0061 	    cmp.b   #'a', %d0         
 298 80600 6D0A      	    blt.s   LUnext            | Is it less than lower-case 'a', then move on
 299 80602 0C00 007A 	    cmp.b   #'z', %d0
 300 80606 6E04      	    bgt.s   LUnext            | Is it greater than lower-case 'z', then move on
 301 80608 0400 0020 	    sub.b   #0x20, %d0         | Then convert a to A, b to B, etc.
 302               	 LUnext:
 303 8060c 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 304 8060e 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
68K GAS  S68K_002.s 			page 7


 305 80610 4E75      	    rts
 306               	
 307               	|
 308               	| Parse Line
 309               	|
 310               	parseLine:
 311 80612 48E7 0030 	    movem.l %a2-%a3, -(%SP)     | Save registers
 312 80616 41F9 0007 	    lea     varLineBuf, %a0
 312      FBAE 
 313               	 PLfindCommand:
 314 8061c 1018      	    move.b  (%a0)+, %d0
 315 8061e 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 316 80622 6700 FFF8 	    beq.w   PLfindCommand    
 317 80626 0C00 0045 	    cmp.b   #'E', %d0           | Examine command
 318 8062a 6700 005A 	    beq.w   .examine
 319 8062e 0C00 0044 	    cmp.b   #'D', %d0           | Deposit command
 320 80632 6700 0358 	    beq.w   .deposit
 321 80636 0C00 0052 	    cmp.b   #'R', %d0           | Run command
 322 8063a 6700 03B4 	    beq.w   .run
 323 8063e 0C00 0048 	    cmp.b   #'H', %d0           | Help command
 324 80642 6700 001E 	    beq.w   .help
 325 80646 0C00 004C 	    cmp.b   #'L', %d0           | Help command
 326 8064a 6700 00C4 	    beq.w   loadSRec
 327 8064e 0C00 0000 	    cmp.b   #0, %d0             | Ignore blank lines
 328 80652 6708      	    beq.s   .exit               
 329               	 .invalid:   
 330 80654 41FA 0516 	    lea     msgInvalidCommand, %a0
 331 80658 6100 FED6 	    bsr.w   printString
 332               	 .exit:
 333 8065c 4CDF 0C00 	    movem.l (%SP)+, %a2-%a3     | Restore registers
 334 80660 4E75      	    rts
 335               	
 336               	|||||||||||||||||||||||||||||||
 337               	|| HELP command
 338               	 .help:
 339 80662 41FA 051D 	    lea     msgHelp, %a0
 340 80666 6100 FEC8 	    bsr.w   printString
 341 8066a 6000 FFF0 	    bra.w   .exit
 342               	 .invalidAddr:
 343 8066e 41FA 0570 	    lea     msgInvalidAddress, %a0
 344 80672 6100 FEBC 	    bsr.w   printString
 345 80676 6000 FFE4 	    bra.w   .exit
 346               	 .invalidVal:
 347 8067a 41FA 0576 	    lea     msgInvalidValue, %a0
 348 8067e 6100 FEB0 	    bsr.w   printString
 349 80682 6000 FFD8 	    bra.w   .exit
 350               		
 351               	|||||||||||||||||||||||||||||||
 352               	| Examines memory addresses
 353               	| Valid modes:
 354               	|   e ADDR                  Displays a single byte
 355               	|   e ADDR-ADDR             Dispalys all bytes between the two addresses
 356               	|   e ADDR+LEN              Dispays LEN bytes after ADDR
 357               	|   e ADDR;                 Interactive mode, space shows 16 lines, enter shows 1.
 358               	|   e ADDR.                 Quick line, displays one line 
 359               	.examine:
 360 80686 6100 0208 	    bsr.w   parseNumber         | Read in the start address
68K GAS  S68K_002.s 			page 8


 361 8068a 4A01      	    tst.b   %d1                 | Make sure it's valid (parseNumber returns non-zero in d1 for fail
 362 8068c 6600 FFE0 	    bne.w   .invalidAddr        
 363 80690 2640      	    move.l  %d0, %a3            | Save the start address
 364               	 .exloop:
 365 80692 1018      	    move.b  (%a0)+, %d0
 366 80694 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 367 80698 67F8      	    beq.s   .exloop
 368 8069a 0C00 002D 	    cmp.b   #'-', %d0           | Check if it's a range specifier
 369 8069e 6716      	    beq.s   .exrange
 370 806a0 0C00 002B 	    cmp.b   #'+', %d0           | Check if it's a length specifier
 371 806a4 6722      	    beq.s   .exlength
 372 806a6 0C00 003B 	    cmp.b   #';', %d0           | Check if we're going interactive
 373 806aa 672E      	    beq.s   .exinter
 374 806ac 0C00 002E 	    cmp.b   #'.', %d0           | Check if quick 16 
 375 806b0 6712      	    beq.s   .exquick
 376 806b2 7001      	    move.l  #1, %d0             | Otherwise read in a single byte
 377 806b4 601C      	    bra.s   .exend              
 378               	 .exrange:
 379 806b6 6100 01D8 	    bsr.w   parseNumber         | Find the end address
 380 806ba 4A01      	    tst.b   %d1                 | Check if we found a valid address
 381 806bc 6600 FFB0 	    bne.w   .invalidAddr
 382 806c0 908B      	    sub.l   %a3, %d0            | Get the length
 383 806c2 600E      	    bra.s   .exend
 384               	 .exquick:                      | Quick mode means show one line of 16 bytes
 385 806c4 7010      	    move.l  #0x10, %d0
 386 806c6 600A      	    bra.s   .exend
 387               	 .exlength:                     | Length mode means a length is specified
 388 806c8 6100 01C6 	    bsr.w   parseNumber         | Find the length
 389 806cc 4A01      	    tst.b   %d1
 390 806ce 6600 FF9E 	    bne.w   .invalidAddr
 391               	 .exend:                        | Done parsing, give the parameters to dumpRAM and exit
 392 806d2 204B      	    move.l  %a3, %a0
 393 806d4 6100 021C 	    bsr.w   dumpRAM
 394 806d8 6082      	    bra.s   .exit
 395               	 .exinter:                      | Interactive mode, Space shows 16 lines, enter shows 1.
 396 806da 204B      	    move.l  %a3, %a0            | Current Address
 397 806dc 7010      	    move.l  #0x10, %d0          | 16 bytes
 398 806de 6100 0212 	    bsr.w   dumpRAM             | Dump this line
 399 806e2 D7FC 0000 	    add.l   #0x10, %a3          | Move up the current address 16 bytes
 399      0010 
 400               	 .exinterend:
 401 806e8 6100 FE50 	    bsr.w   inChar
 402 806ec 0C00 000D 	    cmp.b   #CR, %d0            | Display another line
 403 806f0 67E8      	    beq.s   .exinter
 404 806f2 0C00 0020 	    cmp.b   #' ', %d0           | Display a page (256 bytes at a time)
 405 806f6 6704      	    beq.s   .exinterpage
 406 806f8 6000 FF62 	    bra	   .exit               | Otherwise exit
 407               	 .exinterpage:
 408 806fc 204B      	    move.l  %a3, %a0
 409 806fe 203C 0000 	    move.l  #0x100, %d0         | 256 bytes
 409      0100 
 410 80704 6100 01EC 	    bsr.w   dumpRAM             | Dump 16 lines of RAM
 411 80708 D7FC 0000 	    add.l   #0x100, %a3         | Move up the current address by 256
 411      0100 
 412 8070e 60D8      	    bra.s   .exinterend
 413               	
 414               	|||||||||||||||||||||||||||||
68K GAS  S68K_002.s 			page 9


 415               	|| Load S Record
 416               	|	srecType:	ds.b	1		| S1-S9 stored as binary 1-9
 417               	|	srecByCt:	ds.b	1		| Byte Count
 418               	|	srecData:	ds.b	1 		| Data
 419               	|	srecCSum:	ds.b	1 		| S-Record Checksum
 420               	|	srecAddr:	ds.l	1		| S Record current byte address
 421               	|
 422               	| Supports 3 S record types (matches gcc m68k output)
 423               	|	S00F00005336384B5F3030322E746D7074
 424               	|	S2240800000007FFFC00080400000000000000000000000000000000000000000000000000C5
 425               	|	S503005BA1
 426               	
 427               	loadSRec:
 428 80710 41FA 04BE 	    lea     ldSRecMsg, %a0					| "Load S-Record"
 429 80714 6100 FE1A 	    bsr.w   printString
 430               	loadSRecLoop:
 431 80718 6100 0096 		bsr		setRecType
 432 8071c 6100 00AC 		bsr		setBytCt
 433 80720 11FC 0000 		move.b 	#0, srecCSum
 433      0403 
 434 80726 6100 00EC 		bsr		setAddr
 435               	|	lea		debug_Srec_LDData_Msg, %a0		| "Load Data Loop start"
 436               	|	bsr		printString
 437 8072a 0C38 0001 		cmp.b	#1, srecType			| 16-bit Address
 437      0400 
 438 80730 6700 0010 		beq		loopSData
 439 80734 0C38 0002 		cmp.b	#2, srecType			| 24-bit Address
 439      0400 
 440 8073a 6700 0006 		beq		loopSData
 441 8073e 6000 0014 		bra		sRecDataDone
 442               	loopSData:
 443 80742 0C38 0000 		cmp.b 	#0, srecByCt
 443      0401 
 444 80748 6700 000A 		beq		sRecDataDone
 445 8074c 6100 003E 		bsr		getSetLdData
 446 80750 6000 FFF0 		bra		loopSData
 447               	sRecDataDone:
 448 80754 6100 0050 		bsr		getChksum
 449 80758 103C 002B 		move.b	#'+', %d0
 450 8075c 6100 FDAA 		bsr		outChar
 451 80760 0C38 0000 		cmp.b	#0, srecType
 451      0400 
 452 80766 6700 FFB0 		beq		loadSRecLoop
 453 8076a 0C38 0001 		cmp.b	#1, srecType
 453      0400 
 454 80770 6700 FFA6 		beq		loadSRecLoop
 455 80774 0C38 0002 		cmp.b	#2, srecType
 455      0400 
 456 8077a 6700 FF9C 		beq		loadSRecLoop
 457 8077e 0C38 0003 		cmp.b	#3, srecType
 457      0400 
 458 80784 6700 FF92 		beq		loadSRecLoop
 459 80788 6000 FED2 		bra.w   .exit
 460               	
 461               	|||||||||||||||||||||||||||||
 462               	getSetLdData:
 463 8078c 4EBA 004E 		jsr		getHexPair
68K GAS  S68K_002.s 			page 10


 464 80790 41F8 0404 		lea 	srecAddr, %a0
 465 80794 2250      		move.l	(%a0), %a1
 466 80796 12C0      		move.b	%d0, (%a1)+
 467 80798 21C9 0404 		move.l	%a1, srecAddr
 468 8079c D138 0403 		add.b	%d0, srecCSum
 469 807a0 5338 0401 		sub.b	#1, srecByCt
 470               	skipLdData:
 471 807a4 4E75      		rts
 472               	
 473               	|||||||||||||||||||||||||||||
 474               	getChksum:
 475               	|	lea		debug_Srec_CSum_Msg, %a0	| "S Record Checksum="
 476               	|	bsr.w   printString
 477 807a6 4EBA 0034 		jsr		getHexPair
 478 807aa D138 0403 		add.b	%d0, srecCSum
 479               	|	move.b	srecCSum, %d0
 480               	|	jsr		printHexByte
 481               	|	lea		CRLF_MSG, %a0
 482               	|	bsr.w   printString
 483               	failCSUM:
 484 807ae 4E75      		rts
 485               	
 486               	|||||||||||||||||||||||||||||
 487               	setRecType:
 488 807b0 4EBA FD88 		jsr		inChar
 489 807b4 0C00 0053 		cmp.b	#'S', %d0
 490 807b8 6600 FFF6 		bne		setRecType					| Toss extra chars
 491 807bc 4EBA FD7C 		jsr		inChar
 492 807c0 0200 000F 		andi.b	#0x0f, %d0
 493 807c4 11C0 0400 		move.b	%d0, srecType
 494               	| Debug messages follow
 495               	|	lea		debug_Srec_Typ_Msg, %a0		| "S Record Type="
 496               	|	bsr.w   printString
 497               	|	move.b	srecType, %d0
 498               	|	add.b	#'0', %d0
 499               	|	jsr		outChar
 500               	|	lea		CRLF_MSG, %a0
 501               	|	bsr.w   printString
 502               	| Debug messages end
 503 807c8 4E75      		rts
 504               		
 505               	|||||||||||||||||||||||||||||
 506               	setBytCt:
 507 807ca 4EBA 0010 		jsr		getHexPair
 508 807ce 11C0 0403 		move.b 	%d0, srecCSum				| Initialize checksum
 509 807d2 11C0 0401 		move.b	%d0, srecByCt				| Byte count
 510               	| Debug messages follow
 511               	|	lea		debug_Srec_BytCt_Msg, %a0	| "S Record Byte Count=0x"
 512               	|	bsr.w   printString
 513               	|	move.b	srecByCt, %d0
 514               	|	jsr		printHexByte
 515               	|	lea		CRLF_MSG, %a0
 516               	|	bsr		printString
 517               	| Debug messages end
 518 807d6 5338 0401 		sub.b	#1, srecByCt
 519 807da 4E75      		rts
 520               	
68K GAS  S68K_002.s 			page 11


 521               	|||||||||||||||||||||||||||||
 522               	getHexPair:
 523 807dc 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 524 807e0 4EBA FD58 		jsr		inChar
 525 807e4 4EBA 0016 		jsr		toNibble
 526 807e8 E900      		asl.b	#4, %d0
 527 807ea 1400      		move.b	%d0, %d2
 528 807ec 4EBA FD4C 		jsr		inChar
 529 807f0 4EBA 000A 		jsr		toNibble
 530 807f4 8002      		or.b	%d2, %d0
 531 807f6 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 532 807fa 4E75      		rts
 533               	
 534               	|||||||||||||||||||||||||||||
 535               	toNibble:
 536 807fc 0C00 0041 		cmp.b	#'A', %d0
 537 80800 6C00 0008 		bge		doHexLetter
 538 80804 0400 0030 		sub.b	#'0', %d0
 539 80808 4E75      		rts
 540               	doHexLetter:
 541 8080a 0400 0041 		sub.b	#'A', %d0
 542 8080e 0600 000A 		add.b	#10, %d0
 543 80812 4E75      		rts
 544               	
 545               	|||||||||||||||||||||||||||||
 546               	setAddr:
 547 80814 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 548 80818 0C38 0002 		cmp.b	#2, srecType
 548      0400 
 549 8081e 6600 0052 		bne		adrLen16
 550 80822 21FC 0000 		move.l	#0, srecAddr
 550      0000 0404 
 551               	|	lea		debug_S2rec_Addr_Msg, %a0
 552               	|	bsr		printString
 553 8082a 7400      		move.l	#0, %d2			| d2 stores address for accumulation of bytes
 554               		| Get the upper 8-bits of 24-bits
 555 8082c 4EBA FFAE 		jsr		getHexPair
 556 80830 0280 0000 		and.l	#0xff, %d0
 556      00FF 
 557 80836 D138 0403 		add.b 	%d0, srecCSum
 558 8083a 8480      		or.l	%d0, %d2
 559 8083c E182      		asl.l	#8, %d2
 560               	|	move.l	%d2, %d0
 561               	|	bsr		printHexLong
 562               	|	lea		CRLF_MSG, %a0
 563               	|   bsr.w   printString
 564               		| Get the middle 8-bits of 24-bits
 565 8083e 4EBA FF9C 		jsr		getHexPair
 566 80842 0280 0000 		and.l	#0xff, %d0
 566      00FF 
 567 80848 D138 0403 		add.b 	%d0, srecCSum
 568 8084c 8480      		or.l	%d0, %d2
 569 8084e E182      		asl.l	#8, %d2
 570               	|	move.l	%d2, %d0
 571               	|	bsr		printHexLong
 572               	|	lea		CRLF_MSG, %a0
 573               	|   bsr.w   printString
68K GAS  S68K_002.s 			page 12


 574               		| Get the lower 8-bits of 24-bits
 575 80850 4EBA FF8A 		jsr		getHexPair
 576 80854 0280 0000 		and.l	#0xff, %d0
 576      00FF 
 577 8085a D138 0403 		add.b 	%d0, srecCSum
 578 8085e 8480      		or.l	%d0, %d2
 579 80860 0282 00FF 		andi.l	#0x00ffffff, %d2
 579      FFFF 
 580 80866 21C2 0404 		move.l	%d2, srecAddr		| Save the S record address
 581               	|	move.l	%d2, %d0
 582               	|	bsr		printHexLong
 583               	|	lea		CRLF_MSG, %a0
 584               	|	bsr.w   printString
 585 8086a 5738 0401 		sub.b	#3, srecByCt
 586 8086e 6000 001A 		bra		past16
 587               	adrLen16:
 588               	|	lea		debug_SXrec_Addr_Msg, %a0	| "S (not 2) Record Address=0x"
 589               	|	bsr		printString
 590 80872 7400      		move.l	#0, %d2
 591 80874 4EBA FF66 		jsr		getHexPair
 592               	|	bsr		printHexLong
 593               	|	lea		CRLF_MSG, %a0
 594               	|   bsr.w   printString
 595 80878 8480      		or.l	%d0, %d2
 596 8087a E182      		asl.l	#8, %d2
 597 8087c 4EBA FF5E 		jsr		getHexPair
 598               	|	bsr		printHexLong
 599               	|	lea		CRLF_MSG, %a0
 600               	|	bsr.w   printString
 601 80880 8480      		or.l	%d0, %d2
 602 80882 21C2 0404 		move.l	%d2, srecAddr
 603 80886 5538 0401 		sub.b	#2, srecByCt
 604               	past16:
 605 8088a 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 606 8088e 4E75      		rts
 607               			
 608               	|||||||||||||||||||||||||||||
 609               	| Find and parse a hex number
 610               	|  Starting address in A0
 611               	|  Number returned in D0
 612               	|  Status in D1   (0 success, 1 fail)
 613               	|  TODO: Try and merge first digit code with remaining digit code
 614               	parseNumber:
 615 80890 B180      	    eor.l   %d0, %d0		| Zero out d0
 616 80892 1018      	    move.b  (%a0)+, %d0
 617 80894 0C00 0020 	    cmp.b   #' ', %d0		|  Ignore all leading spaces
 618 80898 67F6      	    beq.s   parseNumber
 619 8089a 0C00 0030 	    cmp.b   #'0', %d0       | Look for hex digits 0-9
 620 8089e 6D14      	    blt.s	PNinvalid
 621 808a0 0C00 0039 	    cmp.b   #'9', %d0
 622 808a4 6F18      	    ble.s   PNfirstdigit1
 623               	
 624 808a6 0C00 0041 	    cmp.b   #'A', %d0      	| Look for hex digits A-F
 625 808aa 6D00 FDA8 	    blt   .invalid    
 626 808ae 0C00 0046 	    cmp.b   #'F', %d0
 627 808b2 6F04      	    ble.s   PNfirstdigit2
 628               	PNinvalid:
68K GAS  S68K_002.s 			page 13


 629 808b4 7201      	    move.l  #1, %d1			| Invalid character, mark failure and return
 630 808b6 4E75      	    rts
 631               	PNfirstdigit2:
 632 808b8 0400 0037 	    sub.b   #'7', %d0       | Turn 'A' to 10
 633 808bc 6004      	    bra.s   PNloop
 634               	PNfirstdigit1:
 635 808be 0400 0030 	    sub.b   #'0', %d0       | Turn '0' to 0
 636               	 PNloop:
 637 808c2 1218      	    move.b  (%a0)+, %d1      | Read in a digit
 638 808c4 0C01 0030 	    cmp.b   #'0', %d1       | Look for hex digits 0-9
 639 808c8 6D12      	    blt.s   PNend         	| Any other characters mean we're done reading
 640 808ca 0C01 0039 	    cmp.b   #'9', %d1
 641 808ce 6F18      	    ble.s   PNdigit1
 642 808d0 0C01 0041 	    cmp.b   #'A', %d1      	| Look for hex digits A-F
 643 808d4 6D06      	    blt.s   PNend
 644 808d6 0C01 0046 	    cmp.b   #'F', %d1
 645 808da 6F06      	    ble.s   PNdigit2
 646               	
 647               	PNend:                       | We hit a non-hex digit character, we're done parsing
 648 808dc 5388      	    subq.l  #1, %a0         | Move the pointer back before the end character we read
 649 808de 7200      	    move.l  #0, %d1
 650 808e0 4E75      	    rts
 651               	PNdigit2:
 652 808e2 0401 0037 	    sub.b   #'7', %d1		| Turn 'A' to 10
 653 808e6 6004      	    bra.s   PNdigit3
 654               	PNdigit1:
 655 808e8 0401 0030 	    sub.b   #'0', %d1       | Turn '0' to 0
 656               	PNdigit3:
 657 808ec E988      	    lsl.l   #4, %d0        	| Shift over to the next nybble
 658 808ee D001      	    add.b   %d1, %d0       	| Place in our current nybble (could be or.b instead)
 659 808f0 60D0      	    bra.s   PNloop
 660               	    
 661               	
 662               	|||||||||||||||||||||||||||||
 663               	| Dumps a section of RAM to the screen
 664               	| Displays both hex values and ASCII characters
 665               	| d0 - Number of bytes to dump
 666               	| a0 - Start Address
 667               	dumpRAM:
 668 808f2 48E7 3820 	    movem.l %d2-%d4/%a2, -(%SP) | Save registers
 669 808f6 2448      	    move.l  %a0, %a2           	| Save the start address
 670 808f8 2400      	    move.l  %d0, %d2           	| And the number of bytes
 671               	 .line:
 672 808fa 200A      	    move.l  %a2, %d0          
 673 808fc 6100 010E 	    bsr.w   printHexAddr     	| Starting address of this line
 674 80900 41FA 0303 	    lea     msgColonSpace, %a0
 675 80904 6100 FC2A 	    bsr.w   printString
 676 80908 7610      	    move.l  #16, %d3         	| 16 Bytes can be printed on a line
 677 8090a 2803      	    move.l  %d3, %d4       		| Save number of bytes on this line
 678               	 .hexbyte:
 679 8090c 4A82      	    tst.l   %d2               	| Check if we're out of bytes
 680 8090e 6718      	    beq.s   .endbytesShort
 681 80910 4A03      	    tst.b   %d3               	| Check if we're done this line
 682 80912 673A      	    beq.s   .endbytes    
 683 80914 101A      	    move.b  (%a2)+, %d0        	| Read a byte in from RAM
 684 80916 6100 011C 	    bsr.w   printHexByte     	| Display it
 685 8091a 103C 0020 	    move.b  #' ', %d0
68K GAS  S68K_002.s 			page 14


 686 8091e 6100 FBE8 	    bsr.w   outChar          	| Space out bytes
 687 80922 5383      	    subq.l  #1, %d3    
 688 80924 5382      	    subq.l  #1, %d2        
 689 80926 60E4      	    bra.s   .hexbyte
 690               	 .endbytesShort:
 691 80928 9803      	    sub.b   %d3, %d4           	| Make d4 the actual number of bytes on this line
 692 8092a 103C 0020 	    move.b  #' ', %d0
 693               	 .endbytesShortLoop:
 694 8092e 4A03      	    tst.b   %d3               	| Check if we ended the line
 695 80930 671C      	    beq.s   .endbytes
 696 80932 103C 0020 	    move.b  #' ', %d0
 697 80936 6100 FBD0 	    bsr.w   outChar          	| Three spaces to pad out
 698 8093a 103C 0020 	    move.b  #' ', %d0
 699 8093e 6100 FBC8 	    bsr.w   outChar
 700 80942 103C 0020 	    move.b  #' ', %d0
 701 80946 6100 FBC0 	    bsr.w   outChar
 702               	    
 703 8094a 5303      	    subq.b  #1, %d3
 704 8094c 60E0      	    bra.s   .endbytesShortLoop
 705               	 .endbytes:
 706 8094e 95C4      	    suba.l  %d4, %a2        	| Return to the start address of this line
 707               	 .endbytesLoop:
 708 80950 4A04      	    tst.b   %d4               	| Check if we are done printing ascii
 709 80952 6700 0022 	    beq     .endline    
 710 80956 5304      	    subq.b  #1, %d4
 711 80958 101A      	    move.b  (%a2)+, %d0        	| Read the byte again
 712 8095a 0C00 0020 	    cmp.b   #' ', %d0         	| Lowest printable character
 713 8095e 6D0C      	    blt.s   .unprintable
 714 80960 0C00 007E 	    cmp.b   #'~', %d0         	| Highest printable character
 715 80964 6E06      	    bgt.s   .unprintable
 716 80966 6100 FBA0 	    bsr.w   outChar
 717 8096a 60E4      	    bra.s   .endbytesLoop
 718               	 .unprintable:
 719 8096c 103C 002E 	    move.b  #'.', %d0
 720 80970 6100 FB96 	    bsr.w   outChar
 721 80974 60DA      	    bra.s   .endbytesLoop
 722               	 .endline:
 723 80976 41FA 0290 	    lea     msgNewline, %a0
 724 8097a 6100 FBB4 	    bsr.w   printString
 725 8097e 4A82      	    tst.l   %d2
 726 80980 6F04      	    ble.s   .end
 727 80982 6000 FF76 	    bra.w   .line
 728               	 .end:
 729 80986 4CDF 041C 	    movem.l (%SP)+, %d2-%d4/%a2		| Restore registers
 730 8098a 4E75      	    rts
 731               	
 732               	|||||||||||||||||||||||
 733               	| Deposit values into RAM
 734               	| d ADDR VAL VAL            Deposit value(s) into RAM
 735               	| d ADDR VAL VAL;           Deposit values, continue with values on next line
 736               	|  VAL VAL VAL;              - Continuing with further continue
 737               	| d: VAL VAL                Continue depositing values after the last address written to
 738               	|||||||||||||||||||||||
 739               	.deposit:
 740 8098c 1010      	    move.b  (%a0), %d0
 741 8098e 0C00 003A 	    cmp.b   #':', %d0       	| Check if we want to continue from last
 742 80992 6730      	    beq.s   DepCont
68K GAS  S68K_002.s 			page 15


 743               	    
 744 80994 6100 FEFA 	    bsr.w   parseNumber         | Otherwise read the address
 745 80998 4A01      	    tst.b   %d1
 746 8099a 6600 FCD2 	    bne		.invalidAddr
 747 8099e 2640      	    move.l  %d0, %a3           	| Save the start address
 748               	 DepLoop:
 749 809a0 1010      	    move.b  (%a0), %d0            
 750 809a2 0C00 003B 	    cmp.b   #';', %d0          	| Check for continue
 751 809a6 6726      	    beq.s   DepMLine
 752 809a8 4A40      	    tst     %d0              	| Check for the end of line
 753 809aa 6700 003A 	    beq     DepEnd
 754               	    
 755 809ae 6100 FEE0 	    bsr		parseNumber         | Otherwise read a value
 756 809b2 4A01      	    tst.b   %d1
 757 809b4 6600 FCC4 	    bne		.invalidVal
 758 809b8 0C40 00FF 	    cmp.w   #255, %d0          	| Make sure it's a byte
 759 809bc 6E00 FCBC 	    bgt		.invalidVal
 760               	    
 761 809c0 16C0      	    move.b  %d0, (%a3)+        	| Store the value into memory
 762 809c2 60DC      	    bra.s   DepLoop
 763               	    
 764               	 DepCont:
 765 809c4 2679 0007 	    move.l  varCurAddr, %a3   	| Read in the last address 
 765      FBAA 
 766 809ca 5288      	    addq.l  #1, %a0           	| Skip over the ':'
 767 809cc 60D2      	    bra.s   DepLoop
 768               	    
 769               	 DepMLine:
 770 809ce 41FA 0186 	    lea     msgDepositPrompt, %a0
 771 809d2 6100 FB5C 	    bsr.w   printString
 772 809d6 6100 FB8A 	    bsr.w   readLine          	| Read in the next line to be parsed
 773 809da 6100 FC18 	    bsr.w   lineToUpper         | Convert to uppercase
 774 809de 41F9 0007 	    lea     varLineBuf, %a0    	| Reset our buffer pointer
 774      FBAE 
 775 809e4 60BA      	    bra.s   DepLoop            	| And jump back to decoding
 776               	 DepEnd:
 777 809e6 23CB 0007 	    move.l  %a3, varCurAddr
 777      FBAA 
 778 809ec 6000 FC6E 	    bra.w   .exit
 779               	
 780               	|||||||||||||||||||||||
 781               	| run code
 782               	 .run:
 783 809f0 6100 FE9E 	    bsr.w   parseNumber        	| Otherwise read the address
 784 809f4 4A01      	    tst.b   %d1
 785 809f6 6600 FC76 	    bne		.invalidAddr
 786 809fa 2040      	    move.l  %d0, %a0
 787 809fc 4E90      	    jsr     (%a0)             	| Jump to the code! 
 788               	                                | Go as subroutine to allow code to return to us
 789 809fe 4EBA FACC 	    jsr     monitorStart        | Warm start after returning so everything is in
 790               	                                | a known state.
 791               	
 792               	
 793               	|||||||||||||||||||||||
 794               	|| KEEP All printHex functions together ||
 795               	|||||||||||||||||||||||
 796               	| Print a hex word
68K GAS  S68K_002.s 			page 16


 797               	printHexWord:
 798 80a02 2F02      	    move.l  %d2, -(%SP)		| Save D2
 799 80a04 2400      	    move.l  %d0, %d2		| Save the address in d2
 800               	    
 801 80a06 E19A      	    rol.l   #0x8, %d2       | 4321 -> 3214
 802 80a08 E19A      	    rol.l   #0x8, %d2       | 3214 -> 2143 
 803 80a0a 6018      	    bra.s   printHex_wordentry  | Print out the last 16 bits
 804               	|||||||||||||||||||||||
 805               	| Print a hex 24-bit address
 806               	printHexAddr:
 807 80a0c 2F02      	    move.l %d2, -(%SP)   	| Save D2
 808 80a0e 2400      	    move.l %d0, %d2      	| Save the address in d2
 809               	    
 810 80a10 E19A      	    rol.l   #0x8, %d2     	| 4321 -> 3214
 811 80a12 600A      	    bra.s   printHex_addrentry  | Print out the last 24 bits
 812               	|||||||||||||||||||||||
 813               	* Print a hex long
 814               	printHexLong:
 815 80a14 2F02      	    move.l  %d2, -(%SP)     | Save D2
 816 80a16 2400      	    move.l  %d0, %d2        | Save the address in d2
 817               	    
 818 80a18 E19A      	    rol.l   #0x8, %d2        | 4321 -> 3214 high byte in low
 819 80a1a 2002      	    move.l  %d2, %d0
 820 80a1c 6116      	    bsr.s   printHexByte  	| Print the high byte (24-31)
 821               	printHex_addrentry:     
 822 80a1e E19A      	    rol.l   #0x8, %d2        	| 3214 -> 2143 middle-high byte in low
 823 80a20 2002      	    move.l  %d2, %d0              
 824 80a22 6110      	    bsr.s   printHexByte  	| Print the high-middle byte (16-23)
 825               	printHex_wordentry:    
 826 80a24 E19A      	    rol.l   #0x8, %d2        	| 2143 -> 1432 Middle byte in low
 827 80a26 2002      	    move.l  %d2, %d0
 828 80a28 610A      	    bsr.s   printHexByte  	| Print the middle byte (8-15)
 829 80a2a E19A      	    rol.l   #0x8, %d2
 830 80a2c 2002      	    move.l  %d2, %d0
 831 80a2e 6104      	    bsr.s   printHexByte  	| Print the low byte (0-7)
 832               	    
 833 80a30 241F      	    move.l (%SP)+, %d2      | Restore D2
 834 80a32 4E75      	    RTS
 835               	    
 836               	|||||||||||||||||||||||
 837               	| Print a hex byte
 838               	|  - Takes byte in D0
 839               	printHexByte:
 840 80a34 2F02      	    move.l  %D2, -(%SP)
 841 80a36 7400      		move.l	#0, %d2
 842 80a38 1400      	    move.b  %d0, %d2
 843 80a3a E808      	    lsr.b   #0x4, %d0		| Shift down upper nibble
 844 80a3c 0200 000F 		andi.b	#0xf, %d0
 845 80a40 0600 0030 	    add.b   #'0', %d0
 846 80a44 0C00 0039 	    cmp.b   #'9', %d0		| Check if the hex number was from 0-9
 847 80a48 6F02      	    ble.s   PHBsecond
 848 80a4a 5E00      	    add.b   #0x7, %d0			| Shift 0xA-0xF from ':' to 'A'
 849               	PHBsecond:
 850 80a4c 6100 FABA 	    bsr   outChar			| Print the digit
 851 80a50 0202 000F 	    andi.b  #0x0F, %d2		| Now we want the lower digit Mask only the lower digit
 852 80a54 0602 0030 	    add.b   #'0', %d2
 853 80a58 0C02 0039 	    cmp.b   #'9', %d2     	| Same as before    
68K GAS  S68K_002.s 			page 17


 854 80a5c 6F02      	    ble.s   PHBend
 855 80a5e 5E02      	    add.b   #0x7, %D2
 856               	PHBend:
 857 80a60 1002      	    move.b  %D2, %D0
 858 80a62 6100 FAA4 	    bsr	   outChar      	| Print the lower digit
 859 80a66 241F      	    move.l  (%SP)+, %D2
 860 80a68 4E75      	    rts
 861               		
 862               	
 863               	|||||
 864               	| Initializes the 68681 DUART port A as 9600 8N1 
 865               	initDuart:
 866 80a6a 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 866      000F 0004 
 867 80a72 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 867      000F 0004 
 868 80a7a 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 868      000F 0004 
 869               	    
 870 80a82 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 870      000F 0008 
 871 80a8a 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 871      000F 0002 
 872 80a92 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 872      000F 0000 
 873 80a9a 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 873      000F 0000 
 874               	    
 875 80aa2 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 875      000F 0004 
 876               	
 877 80aaa 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 877      000F 0014 
 878 80ab2 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 878      000F 0014 
 879 80aba 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 879      000F 0014 
 880               	    
 881 80ac2 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 881      000F 0012 
 882 80aca 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 882      000F 0010 
 883 80ad2 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 883      000F 0010 
 884               	    
 885 80ada 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 885      000F 0014 
 886               		
 887 80ae2 13FC 0000 		move.b	#0x00, OPC		 | Output port configuration (all bit are outs)
 887      000F 001A 
 888 80aea 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 888      000F 001E 
 889 80af2 4E75      	    rts    
 890               	
 891               	delay1Sec:
 892 80af4 203C 0003 		move.l	#200000, %d0	| rough count
 892      0D40 
68K GAS  S68K_002.s 			page 18


 893               	delay1Loop:
 894 80afa 5380      		sub.l	#1, %d0			
 895 80afc 6600 FFFC 		bne		delay1Loop
 896 80b00 4E75      		rts
 897               	
 898               	READINLINE:	  
 899 80b02 5265 6164 		.ascii  "Reading in line"
 899      696E 6720 
 899      696E 206C 
 899      696E 65
 900 80b11 0D0A 00   		dc.b CR,LF,EOT
 901               	L_TO_UPPER_MSG:  
 902 80b14 436F 6E76 		.ascii  "Convert line to upper case"
 902      6572 7420 
 902      6C69 6E65 
 902      2074 6F20 
 902      7570 7065 
 903 80b2e 0D0A 00   		dc.b CR,LF,EOT
 904               	WRITEOUTLINE:	  
 905 80b31 5772 6974 		.ascii  "Writing out line"
 905      696E 6720 
 905      6F75 7420 
 905      6C69 6E65 
 906 80b41 0D0A 00   		dc.b CR,LF,EOT
 907               	RAM_PASS_MSG:  
 908 80b44 5241 4D20 		.ascii  "RAM Test Passed"
 908      5465 7374 
 908      2050 6173 
 908      7365 64
 909 80b53 0D0A 00   		dc.b CR,LF,EOT
 910               	msgDepositPrompt:
 911 80b56 3A20      	    .ascii	": "
 912 80b58 00        		dc.b 	EOT
 913               	BANNER_MSG:	
 914 80b59 5349 4D50 		.ascii  "SIMPLE-68008 CPU"
 914      4C45 2D36 
 914      3830 3038 
 914      2043 5055 
 915 80b69 0D0A 00   		dc.b CR,LF,EOT
 916               	msgInvalidCommand:
 917 80b6c 496E 7661 	    .ascii "Invalid Command"
 917      6C69 6420 
 917      436F 6D6D 
 917      616E 64
 918 80b7b 0D0A 00   		dc.b CR,LF,EOT
 919               	CRLF_MSG:	
 920 80b7e 0D0A 00   		dc.b CR,LF,EOT
 921               	msgHelp:
 922 80b81 4176 6169 	    .ascii	"Available Commands: "
 922      6C61 626C 
 922      6520 436F 
 922      6D6D 616E 
 922      6473 3A20 
 923 80b95 0D0A      		dc.b	CR,LF
 924 80b97 2028 4529 	    .ascii	" (E)xamine    (D)eposit    (R)un     (L)oad     (H)elp"
 924      7861 6D69 
 924      6E65 2020 
68K GAS  S68K_002.s 			page 19


 924      2020 2844 
 924      2965 706F 
 925 80bcd 0D0A 00   		dc.b	CR,LF,EOT
 926               	ldSRecMsg:
 927 80bd0 4C6F 6164 	    .ascii	"Load S-Record"
 927      2053 2D52 
 927      6563 6F72 
 927      64
 928 80bdd 0D0A 00   		dc.b	CR,LF,EOT
 929               	msgInvalidAddress:
 930 80be0 496E 7661 	    .ascii	"Invalid Address"
 930      6C69 6420 
 930      4164 6472 
 930      6573 73
 931 80bef 0D0A 00   		dc.b 	CR,LF,EOT
 932               	msgInvalidValue:
 933 80bf2 496E 7661 	    .ascii	"Invalid Value"
 933      6C69 6420 
 933      5661 6C75 
 933      65
 934 80bff 0D0A 00   		dc.b	CR,LF,EOT
 935               	msgPrompt:
 936 80c02 3E20      		.ascii "> "
 937 80c04 00        	    dc.b EOT
 938               	msgColonSpace:
 939 80c05 3A20      	    .ascii ": "
 940 80c07 00        	    dc.b EOT
 941               	msgNewline:
 942 80c08 0D0A 00   	    dc.b CR,LF,EOT
 943               	debug_Srec_Typ_Msg:
 944 80c0b 5320 5265 		.ascii	"S Record Type="
 944      636F 7264 
 944      2054 7970 
 944      653D 
 945 80c19 00        	    dc.b EOT
 946               	debug_Srec_BytCt_Msg:
 947 80c1a 5320 5265 		.ascii	"S Record Byte Count=0x"
 947      636F 7264 
 947      2042 7974 
 947      6520 436F 
 947      756E 743D 
 948 80c30 00        	    dc.b EOT
 949               	debug_Srec_CSum_Msg:
 950 80c31 5320 5265 		.ascii	"S Record Checksum="
 950      636F 7264 
 950      2043 6865 
 950      636B 7375 
 950      6D3D 
 951 80c43 00        	    dc.b EOT
 952               	debug_S2rec_Addr_Msg:
 953 80c44 5332 2052 		.ascii	"S2 Record Address=0x"
 953      6563 6F72 
 953      6420 4164 
 953      6472 6573 
 953      733D 3078 
 954 80c58 00        	    dc.b EOT
 955               	debug_SXrec_Addr_Msg:
68K GAS  S68K_002.s 			page 20


 956 80c59 5320 286E 		.ascii	"S (not 2) Record Address=0x"
 956      6F74 2032 
 956      2920 5265 
 956      636F 7264 
 956      2041 6464 
 957 80c74 00        	    dc.b EOT
 958               	debug_Srec_LDData_Msg:
 959 80c75 4C6F 6164 	    .ascii	"Load Data Loop start"
 959      2044 6174 
 959      6120 4C6F 
 959      6F70 2073 
 959      7461 7274 
 960 80c89 0D0A 00   		dc.b 	CR,LF,EOT
 961               	
 962               	
 963               	MAX_LINE_LENGTH = 80
 964               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
 965               	varCurAddr = varLineBuf-4
68K GAS  S68K_002.s 			page 21


DEFINED SYMBOLS
          S68K_002.s:12     *ABS*:0000000000000000 RAM_START
          S68K_002.s:13     *ABS*:000000000007fffc STACK_END
          S68K_002.s:14     *ABS*:000000000007ffff RAM_END
          S68K_002.s:15     *ABS*:0000000000080000 ROM_START
          S68K_002.s:16     *ABS*:0000000000080400 ROM_CODE
          S68K_002.s:18     *ABS*:000000000008ffff ROM_END
          S68K_002.s:23     *ABS*:00000000000f0000 DUART
          S68K_002.s:24     *ABS*:00000000000f0000 MRA
          S68K_002.s:25     *ABS*:00000000000f0002 SRA
          S68K_002.s:26     *ABS*:00000000000f0002 CSRA
          S68K_002.s:27     *ABS*:00000000000f0004 CRA
          S68K_002.s:28     *ABS*:00000000000f0006 RBA
          S68K_002.s:29     *ABS*:00000000000f0006 TBA
          S68K_002.s:30     *ABS*:00000000000f0008 ACR
          S68K_002.s:31     *ABS*:00000000000f000a ISR
          S68K_002.s:32     *ABS*:00000000000f000a IMR
          S68K_002.s:33     *ABS*:00000000000f0010 MRB
          S68K_002.s:34     *ABS*:00000000000f0012 SRB
          S68K_002.s:35     *ABS*:00000000000f0012 CSRB
          S68K_002.s:36     *ABS*:00000000000f0014 CRB
          S68K_002.s:37     *ABS*:00000000000f0016 RBB
          S68K_002.s:38     *ABS*:00000000000f0016 TBB
          S68K_002.s:39     *ABS*:00000000000f0018 IVR
          S68K_002.s:40     *ABS*:00000000000f001a OPC
          S68K_002.s:41     *ABS*:00000000000f001a INU
          S68K_002.s:42     *ABS*:00000000000f001c OPS
          S68K_002.s:43     *ABS*:00000000000f001e OPR
          S68K_002.s:48     *ABS*:0000000000000007 BEL
          S68K_002.s:49     *ABS*:0000000000000008 BKSP
          S68K_002.s:50     *ABS*:0000000000000009 TAB
          S68K_002.s:51     *ABS*:000000000000000a LF
          S68K_002.s:52     *ABS*:000000000000000d CR
          S68K_002.s:53     *ABS*:000000000000001b ESC
          S68K_002.s:54     *ABS*:0000000000000000 EOT
          S68K_002.s:56     *ABS*:0000000000000003 CTRLC
          S68K_002.s:57     *ABS*:0000000000000018 CTRLX
          S68K_002.s:60     .text:0000000000000400 _srecType
          S68K_002.s:61     .text:0000000000000401 _srecByCt
          S68K_002.s:62     .text:0000000000000402 _srecData
          S68K_002.s:63     .text:0000000000000403 _srecCSum
          S68K_002.s:64     .text:0000000000000404 _srecAddr
          S68K_002.s:66     *ABS*:0000000000000400 srecType
          S68K_002.s:67     *ABS*:0000000000000401 srecByCt
          S68K_002.s:68     *ABS*:0000000000000402 srecData
          S68K_002.s:69     *ABS*:0000000000000403 srecCSum
          S68K_002.s:70     *ABS*:0000000000000404 srecAddr
          S68K_002.s:181    .text:0000000000080502 FERVR2
          S68K_002.s:106    .text:000000000008045c loop1stLoc
          S68K_002.s:179    .text:0000000000080502 failBitTest
          S68K_002.s:121    .text:000000000008047c loopAdrFill
          S68K_002.s:133    .text:000000000008049a loopAdrCk
          S68K_002.s:180    .text:0000000000080502 failAdrTest
          S68K_002.s:148    .text:00000000000804b4 fillSRAM
          S68K_002.s:152    .text:00000000000804c0 fillSRAMLoop
          S68K_002.s:865    .text:0000000000080a6a initDuart
          S68K_002.s:161    .text:00000000000804cc monitorStart
68K GAS  S68K_002.s 			page 22


          S68K_002.s:913    .text:0000000000080b59 BANNER_MSG
          S68K_002.s:206    .text:0000000000080530 printString1
          S68K_002.s:907    .text:0000000000080b44 RAM_PASS_MSG
          S68K_002.s:169    .text:00000000000804dc interpLoop
          S68K_002.s:935    .text:0000000000080c02 msgPrompt
          S68K_002.s:207    .text:0000000000080530 printString
          S68K_002.s:236    .text:0000000000080562 readLine
          S68K_002.s:293    .text:00000000000805f4 lineToUpper
          S68K_002.s:310    .text:0000000000080612 parseLine
          S68K_002.s:188    .text:0000000000080508 outChar1
          S68K_002.s:189    .text:0000000000080508 outChar
          S68K_002.s:197    .text:000000000008051c outChar2
          S68K_002.s:208    .text:0000000000080530 PSloop
          S68K_002.s:214    .text:0000000000080538 PSend
          S68K_002.s:222    .text:000000000008053a inChar1
          S68K_002.s:223    .text:000000000008053a inChar
          S68K_002.s:229    .text:000000000008054e inChar2
                            *ABS*:000000000007fbae varLineBuf
          S68K_002.s:240    .text:000000000008056e RLloop
          S68K_002.s:257    .text:000000000008059a RLBS
          S68K_002.s:268    .text:00000000000805b8 RLlineClr
          S68K_002.s:282    .text:00000000000805dc RLEndLn
          S68K_002.s:250    .text:000000000008058a .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_002.s:272    .text:00000000000805be RLlineClrloop
          S68K_002.s:295    .text:00000000000805fa LUloop
          S68K_002.s:302    .text:000000000008060c LUnext
          S68K_002.s:313    .text:000000000008061c PLfindCommand
          S68K_002.s:359    .text:0000000000080686 .examine
          S68K_002.s:739    .text:000000000008098c .deposit
          S68K_002.s:782    .text:00000000000809f0 .run
          S68K_002.s:338    .text:0000000000080662 .help
          S68K_002.s:427    .text:0000000000080710 loadSRec
          S68K_002.s:332    .text:000000000008065c .exit
          S68K_002.s:329    .text:0000000000080654 .invalid
          S68K_002.s:916    .text:0000000000080b6c msgInvalidCommand
          S68K_002.s:921    .text:0000000000080b81 msgHelp
          S68K_002.s:342    .text:000000000008066e .invalidAddr
          S68K_002.s:929    .text:0000000000080be0 msgInvalidAddress
          S68K_002.s:346    .text:000000000008067a .invalidVal
          S68K_002.s:932    .text:0000000000080bf2 msgInvalidValue
          S68K_002.s:614    .text:0000000000080890 parseNumber
          S68K_002.s:364    .text:0000000000080692 .exloop
          S68K_002.s:378    .text:00000000000806b6 .exrange
          S68K_002.s:387    .text:00000000000806c8 .exlength
          S68K_002.s:395    .text:00000000000806da .exinter
          S68K_002.s:384    .text:00000000000806c4 .exquick
          S68K_002.s:391    .text:00000000000806d2 .exend
          S68K_002.s:667    .text:00000000000808f2 dumpRAM
          S68K_002.s:400    .text:00000000000806e8 .exinterend
          S68K_002.s:407    .text:00000000000806fc .exinterpage
          S68K_002.s:926    .text:0000000000080bd0 ldSRecMsg
          S68K_002.s:430    .text:0000000000080718 loadSRecLoop
          S68K_002.s:487    .text:00000000000807b0 setRecType
          S68K_002.s:506    .text:00000000000807ca setBytCt
          S68K_002.s:546    .text:0000000000080814 setAddr
          S68K_002.s:442    .text:0000000000080742 loopSData
68K GAS  S68K_002.s 			page 23


          S68K_002.s:447    .text:0000000000080754 sRecDataDone
          S68K_002.s:462    .text:000000000008078c getSetLdData
          S68K_002.s:474    .text:00000000000807a6 getChksum
          S68K_002.s:522    .text:00000000000807dc getHexPair
          S68K_002.s:470    .text:00000000000807a4 skipLdData
          S68K_002.s:483    .text:00000000000807ae failCSUM
          S68K_002.s:535    .text:00000000000807fc toNibble
          S68K_002.s:540    .text:000000000008080a doHexLetter
          S68K_002.s:587    .text:0000000000080872 adrLen16
          S68K_002.s:604    .text:000000000008088a past16
          S68K_002.s:628    .text:00000000000808b4 PNinvalid
          S68K_002.s:634    .text:00000000000808be PNfirstdigit1
          S68K_002.s:631    .text:00000000000808b8 PNfirstdigit2
          S68K_002.s:636    .text:00000000000808c2 PNloop
          S68K_002.s:647    .text:00000000000808dc PNend
          S68K_002.s:654    .text:00000000000808e8 PNdigit1
          S68K_002.s:651    .text:00000000000808e2 PNdigit2
          S68K_002.s:656    .text:00000000000808ec PNdigit3
          S68K_002.s:671    .text:00000000000808fa .line
          S68K_002.s:806    .text:0000000000080a0c printHexAddr
          S68K_002.s:938    .text:0000000000080c05 msgColonSpace
          S68K_002.s:678    .text:000000000008090c .hexbyte
          S68K_002.s:690    .text:0000000000080928 .endbytesShort
          S68K_002.s:705    .text:000000000008094e .endbytes
          S68K_002.s:839    .text:0000000000080a34 printHexByte
          S68K_002.s:693    .text:000000000008092e .endbytesShortLoop
          S68K_002.s:707    .text:0000000000080950 .endbytesLoop
          S68K_002.s:722    .text:0000000000080976 .endline
          S68K_002.s:718    .text:000000000008096c .unprintable
          S68K_002.s:941    .text:0000000000080c08 msgNewline
          S68K_002.s:728    .text:0000000000080986 .end
          S68K_002.s:764    .text:00000000000809c4 DepCont
          S68K_002.s:748    .text:00000000000809a0 DepLoop
          S68K_002.s:769    .text:00000000000809ce DepMLine
          S68K_002.s:776    .text:00000000000809e6 DepEnd
                            *ABS*:000000000007fbaa varCurAddr
          S68K_002.s:910    .text:0000000000080b56 msgDepositPrompt
          S68K_002.s:797    .text:0000000000080a02 printHexWord
          S68K_002.s:825    .text:0000000000080a24 printHex_wordentry
          S68K_002.s:821    .text:0000000000080a1e printHex_addrentry
          S68K_002.s:814    .text:0000000000080a14 printHexLong
          S68K_002.s:849    .text:0000000000080a4c PHBsecond
          S68K_002.s:856    .text:0000000000080a60 PHBend
          S68K_002.s:891    .text:0000000000080af4 delay1Sec
          S68K_002.s:893    .text:0000000000080afa delay1Loop
          S68K_002.s:898    .text:0000000000080b02 READINLINE
          S68K_002.s:901    .text:0000000000080b14 L_TO_UPPER_MSG
          S68K_002.s:904    .text:0000000000080b31 WRITEOUTLINE
          S68K_002.s:919    .text:0000000000080b7e CRLF_MSG
          S68K_002.s:943    .text:0000000000080c0b debug_Srec_Typ_Msg
          S68K_002.s:946    .text:0000000000080c1a debug_Srec_BytCt_Msg
          S68K_002.s:949    .text:0000000000080c31 debug_Srec_CSum_Msg
          S68K_002.s:952    .text:0000000000080c44 debug_S2rec_Addr_Msg
          S68K_002.s:955    .text:0000000000080c59 debug_SXrec_Addr_Msg
          S68K_002.s:958    .text:0000000000080c75 debug_Srec_LDData_Msg

NO UNDEFINED SYMBOLS
68K GAS  S68K_002.s 			page 24


