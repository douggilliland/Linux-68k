68K GAS  S68K_002.s 			page 1


   1               	| S68K_002.s - 68K Monitor with extensions
   2               	|	Adds S Record loader
   3               	| Borrowed init code from 
   4               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   5               	
   6               	RAM_START	= 0x00000	| Beginning of the SRAM
   7               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   8               	RAM_END		= 0x7FFFF	| 512KB SRAM
   9               	ROM_START	= 0x80000	| ROM start
  10               	ROM_CODE	= ROM_START+1024| Skip vector table
  11               	*ROM_END	= 0x87FFF	| End of 32KB EPROM
  12               	ROM_END		= 0x8FFFF	| End of 64KB EPROM
  13               	
  14               	|||||||||||||||||||||||||||||||||
  15               	| 68681 Duart Register Addresses
  16               	|
  17               	DUART = 0x0F0000	  | Base Addr of DUART
  18               	MRA   = DUART+0		  | Mode Register A           (R/W)
  19               	SRA   = DUART+2       | Status Register A         (r)
  20               	CSRA  = DUART+2       | Clock Select Register A   (w)
  21               	CRA   = DUART+4       | Commands Register A       (w)
  22               	RBA   = DUART+6       | Receiver Buffer A         (r)
  23               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  24               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  25               	ISR   = DUART+10      | Interrupt Status Register (R)
  26               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  27               	MRB   = DUART+16      | Mode Register B           (R/W)
  28               	SRB   = DUART+18      | Status Register B         (R)
  29               	CSRB  = DUART+18      | Clock Select Register B   (W)
  30               	CRB   = DUART+20      | Commands Register B       (W)
  31               	RBB   = DUART+22      | Reciever Buffer B         (R)
  32               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  33               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  34               	OPC   = DUART+26      | Output port config        (W)
  35               	INU   = DUART+26      | Input port (unlatched)    (R)
  36               	OPS   = DUART+28      | Output port Set           (W)
  37               	OPR   = DUART+30      | Output port Clear         (W)
  38               	
  39               	||||||||||||||||||||||||||||||||||
  40               	| ASCII Control Characters
  41               	|
  42               	BEL   = 0x07
  43               	BKSP  = 0x08       | CTRL-H
  44               	TAB   = 0x09
  45               	LF    = 0x0A
  46               	CR    = 0x0D
  47               	ESC   = 0x1B
  48               	EOT	  = 0x00
  49               	
  50               	CTRLC	=	0x03
  51               	CTRLX	=	0x18     | Line Clear
  52               	
  53 0000 0000 0000 		.ORG    0x000400
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
  53      0000 0000 
68K GAS  S68K_002.s 			page 2


  54 0400 00        	srecType:	ds.b	1		| S1-S9 stored as binary 1-9
  55 0401 00        	srecByCt:	ds.b	1		| Byte Count
  56 0402 00        	srecData:	ds.b	1 		| Data
  57 0403 00        	srecCSum:	ds.b	1 		| S-Record Checksum
  58 0404 0000 0000 	srecAddr:	ds.l	1		| S Record current byte address
  59               	
  60 0408 0000 0000 		.ORG	ROM_START
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  61               	
  62               	| FIRST 8 bytes loaded after reset |
  63 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  64 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  65               	
  66 80008 0000 0000 	        .ORG ROM_CODE
  66      0000 0000 
  66      0000 0000 
  66      0000 0000 
  66      0000 0000 
  67 80400 4E71      		nop
  68 80402 4FF9 0007 		lea			STACK_END,%sp
  68      FFFC 
  69 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  69      0008 0000 
  70 80410 4E71      		nop
  71               	|
  72               	| Test the first two SRAM location
  73               	|
  74 80412 203C DEAD 		move.l	#0xDEADBEEF, %d0		| Test Pattern #1
  74      BEEF 
  75 80418 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  76 8041c 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  77 8041e 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  78 80420 B042      		cmp			%d2, %d0
  79 80422 6600 00C6 		bne			FERVR2						
  80 80426 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  80      AAAA 
  81 8042c 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  82 80430 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  83 80432 2611      		move.l	(%a1), %d3				| Read back
  84 80434 B243      		cmp			%d3, %d1
  85 80436 6600 00B2 		bne			FERVR2
  86 8043a 4E71      		nop
  87               	| Test bits of first location (as bytes)
  88 8043c 7001      		move.l	#1, %d0
  89 8043e 207C 0000 		move.l	#0, %a0
  89      0000 
  90               	loop1stLoc:
  91 80444 1080      		move.b	%d0, (%a0)
  92 80446 1210      		move.b	(%a0), %d1
  93 80448 B200      		cmp.b		%d0, %d1
  94 8044a 6600 009E 		bne			failBitTest
  95 8044e E348      		lsl			#1, %d0
  96 80450 0C80 0000 		cmp.l		#0x00000100, %d0
  96      0100 
68K GAS  S68K_002.s 			page 3


  97 80456 6600 FFEC 		bne			loop1stLoc
  98               	|
  99               	| Test all address lines, 512KB SRAM
 100               	| Write incrementing pattern to data bits
 101               	|
 102 8045a 7001      		move.l	#1, %d0		| Fill pattern
 103 8045c 7401      		move.l	#1, %d2
 104 8045e 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
 104      0001 
 105               	loopAdrFill:
 106 80464 1080      		move.b	%d0,(%a0)	| Do the write
 107 80466 5240      		addq		#1, %d0		| Increment the pattern
 108 80468 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
 109 8046a E38A      		lsl.l		#1, %d2		| Shift temp addr
 110 8046c 2042      		move.l	%d2, %a0	| Put back into addr reg
 111 8046e 0C82 0008 		cmp.l		#0x00080000,%d2
 111      0000 
 112 80474 6600 FFEE 		bne			loopAdrFill
 113               	| Check
 114 80478 7001      		move.l	#1, %d0
 115 8047a 7401      		move.l	#1, %d2
 116 8047c 207C 0000 		move.l	#1, %a0
 116      0001 
 117               	loopAdrCk:
 118 80482 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 119 80484 B200      		cmp.b		%d0, %d1
 120 80486 6600 0062 		bne			failAdrTest
 121 8048a 5240      		addq		#1, %d0
 122 8048c 2408      		move.l	%a0, %d2 
 123 8048e E38A      		lsl.l		#1, %d2
 124 80490 2042      		move.l	%d2, %a0
 125 80492 0C82 0008 		cmp.l		#0x00080000,%d2
 125      0000 
 126 80498 6600 FFE8 		bne			loopAdrCk
 127               		
 128               	|
 129               	| Fill SRAM with 0x00 values
 130               	| 512KB fill takes about 2.5 seconds at 10 MHz CPU speed
 131               	|
 132               	fillSRAM:
 133 8049c 41F8 0000 		lea		RAM_START, %a0		| Start at base RAM address
 134 804a0 43F9 0007 		lea		RAM_END, %a1		| End when reach end RAM space
 134      FFFF 
 135 804a6 7000      		move.l	#0x00, %d0			| Fill with zeros
 136               	fillSRAMLoop:
 137 804a8 20C0      		move.l	%d0, (%a0)+			| Long fills are faster
 138 804aa B3C8      		cmpa.l	%a0, %a1
 139 804ac 6E00 FFFA 		bgt		fillSRAMLoop
 140               	
 141               	|
 142               	| Done with address test of SRAM
 143               	|
 144 804b0 4EBA 04DE 		jsr     initDuart       	| Setup the serial port
 145               	monitorStart:					| Warm start
 146 804b4 41FA 05C9 		lea		BANNER_MSG, %a0
 147 804b8 4EBA 005E 		jsr		printString1
 148 804bc 41FA 05AC 		lea		RAM_PASS_MSG, %a0
68K GAS  S68K_002.s 			page 4


 149 804c0 4EBA 0056 		jsr		printString1
 150               	|
 151               	| Interpreter Loop
 152               	|
 153               	interpLoop:
 154 804c4 41FA 0662 	    lea     msgPrompt, %a0	| Prompt
 155 804c8 6100 004E 	    bsr.w   printString
 156 804cc 13FC 0004 		move.b	#0x04, OPR		| Turn on LED
 156      000F 001E 
 157 804d4 4EBA 0074 		jsr		readLine		| Blocking read of line
 158 804d8 13FC 0004 		move.b	#0x04, OPS		| Turn off LED
 158      000F 001C 
 159 804e0 4EBA 00FA 		jsr		lineToUpper
 160 804e4 4EBA 0114 		jsr		parseLine
 161 804e8 60DA      		bra.s	interpLoop
 162               		
 163               	failBitTest:
 164               	failAdrTest:
 165               	FERVR2:
 166 804ea 4E71      		nop
 167 804ec 4EFA FFFC 		jmp	FERVR2
 168               	
 169               	|||||
 170               	| Writes a character to Port A, blocking if not ready (Full buffer)
 171               	|  - Takes a character in D0
 172               	outChar1:
 173               	outChar:
 174 804f0 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 174      000F 0002 
 175 804f8 6700 FFF6 	    beq     outChar1     
 176 804fc 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 176      0006 
 177 80502 4E75      	    rts
 178               	
 179               	| Writes a character to Port A, blocking if not ready (Full buffer)
 180               	|  - Takes a character in D0
 181               	outChar2:
 182 80504 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 182      000F 0012 
 183 8050c 6700 FFF6 	    beq     outChar2     
 184 80510 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 184      0016 
 185 80516 4E75      	    rts
 186               	
 187               	******
 188               	* Print a null terminated string
 189               	*
 190               	printString1:
 191               	printString:
 192               	 PSloop:
 193 80518 1018      	    move.b  (%a0)+, %d0  | Read in character
 194 8051a 6704      	    beq.s   PSend         | Check for the null
 195               	    
 196 8051c 61D2      	    bsr.s   outChar      | Otherwise write the character
 197 8051e 60F8      	    bra.s   PSloop        | And continue
 198               	PSend:
 199 80520 4E75      	    rts
68K GAS  S68K_002.s 			page 5


 200               	
 201               	
 202               	|||||
 203               	| Reads in a character from Port A, blocking if none available
 204               	|  - Returns character in D0
 205               	|    
 206               	inChar1:
 207               	inChar:
 208 80522 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 208      000F 0002 
 209 8052a 6700 FFF6 	    beq     inChar1
 210 8052e 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 210      0006 
 211 80534 4E75      	    rts
 212               	
 213               	inChar2:
 214 80536 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 214      000F 0012 
 215 8053e 6700 FFF6 	    beq     inChar2
 216 80542 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 216      0016 
 217 80548 4E75      	    rts
 218               	
 219               	| Read in a line into the line buffer
 220               	readLine:
 221 8054a 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 222 8054e 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 222      FBAE 
 223 80554 B542      	    eor.w   %d2, %d2           	| Clear the character counter
 224               	 RLloop:
 225 80556 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 226 8055a 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 227 8055e 6722      	    beq.s   RLBS
 228 80560 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 229 80564 673A      	    beq.s   RLlineClr
 230 80566 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 231 8056a 6758      	    beq.s   RLEndLn
 232 8056c 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
 233 80570 67E4      	    beq.s   RLloop            	| Ignore LFs and get the next character
 234               	 .char:                      	| Normal character to be inserted into the buffer
 235 80572 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 236 80576 6CDE      	    bge.s   RLloop            	| If the buffer is full ignore the character
 237 80578 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 238 8057a 5242      	    addq.w  #1, %d2           	| Increment character count
 239 8057c 6100 FF72 	    bsr.w   outChar          	| Echo the character
 240 80580 60D4      	    bra.s   RLloop            	| And get the next one
 241               	 RLBS:
 242 80582 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 243 80584 67D0      	    beq.s   RLloop            	| Then ignore it
 244 80586 6100 FF68 	    bsr.w   outChar          	| Backspace
 245 8058a 103C 0020 	    move.b  #' ', %d0
 246 8058e 6100 FF60 	    bsr.w   outChar          	| Space
 247 80592 103C 0008 	    move.b  #BKSP, %d0
 248 80596 6100 FF58 	    bsr.w   outChar          	| Backspace
 249 8059a 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 250 8059c 5382      	    subq.l  #1, %d2           	| And current character count
 251 8059e 60B6      	    bra.s   RLloop            	| And goto the next character
68K GAS  S68K_002.s 			page 6


 252               	 RLlineClr:
 253 805a0 4A42      	    tst     %d2               	| Anything to clear?
 254 805a2 67B2      	    beq.s   RLloop            	| If not, fetch the next character
 255 805a4 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 256               	 RLlineClrloop:
 257 805a6 103C 0008 	    move.b  #BKSP, %d0
 258 805aa 6100 FF44 	    bsr.w   outChar          	| Backspace
 259 805ae 103C 0020 	    move.b  #' ', %d0
 260 805b2 6100 FF3C 	    bsr.w   outChar          	| Space
 261 805b6 103C 0008 	    move.b  #BKSP, %d0
 262 805ba 6100 FF34 	    bsr.w   outChar          	| Backspace
 263 805be 5342      	    subq.w  #1, %d2          
 264 805c0 66E4      	    bne.s   RLlineClrloop   	| Go till the start of the line
 265 805c2 6092      	    bra.s   RLloop   
 266               	 RLEndLn:
 267 805c4 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 268 805c8 103C 000A 	    move.b  #LF, %d0
 269 805cc 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 270 805d0 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 271 805d4 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 272 805d6 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 273 805da 4E75      	    rts                      	| And return
 274               	
 275               	
 276               	| Convert line buffer to upper case
 277               	lineToUpper:
 278 805dc 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 278      FBAE 
 279               	 LUloop:
 280 805e2 1010      	    move.b  (%a0), %d0        | Read in a character
 281 805e4 0C00 0061 	    cmp.b   #'a', %d0         
 282 805e8 6D0A      	    blt.s   LUnext            | Is it less than lower-case 'a', then move on
 283 805ea 0C00 007A 	    cmp.b   #'z', %d0
 284 805ee 6E04      	    bgt.s   LUnext            | Is it greater than lower-case 'z', then move on
 285 805f0 0400 0020 	    sub.b   #0x20, %d0         | Then convert a to A, b to B, etc.
 286               	 LUnext:
 287 805f4 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 288 805f6 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
 289 805f8 4E75      	    rts
 290               	
 291               	|
 292               	| Parse Line
 293               	|
 294               	parseLine:
 295 805fa 48E7 0030 	    movem.l %a2-%a3, -(%SP)     | Save registers
 296 805fe 41F9 0007 	    lea     varLineBuf, %a0
 296      FBAE 
 297               	 PLfindCommand:
 298 80604 1018      	    move.b  (%a0)+, %d0
 299 80606 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 300 8060a 6700 FFF8 	    beq.w   PLfindCommand    
 301 8060e 0C00 0045 	    cmp.b   #'E', %d0           | Examine command
 302 80612 6700 005A 	    beq.w   .examine
 303 80616 0C00 0044 	    cmp.b   #'D', %d0           | Deposit command
 304 8061a 6700 0296 	    beq.w   .deposit
 305 8061e 0C00 0052 	    cmp.b   #'R', %d0           | Run command
 306 80622 6700 02F2 	    beq.w   .run
68K GAS  S68K_002.s 			page 7


 307 80626 0C00 0048 	    cmp.b   #'H', %d0           | Help command
 308 8062a 6700 001E 	    beq.w   .help
 309 8062e 0C00 004C 	    cmp.b   #'L', %d0           | Help command
 310 80632 6700 00C4 	    beq.w   loadSRec
 311 80636 0C00 0000 	    cmp.b   #0, %d0             | Ignore blank lines
 312 8063a 6708      	    beq.s   .exit               
 313               	 .invalid:   
 314 8063c 41FA 0454 	    lea     msgInvalidCommand, %a0
 315 80640 6100 FED6 	    bsr.w   printString
 316               	 .exit:
 317 80644 4CDF 0C00 	    movem.l (%SP)+, %a2-%a3     | Restore registers
 318 80648 4E75      	    rts
 319               	
 320               	|||||||||||||||||||||||||||||||
 321               	|| HELP command
 322               	 .help:
 323 8064a 41FA 045B 	    lea     msgHelp, %a0
 324 8064e 6100 FEC8 	    bsr.w   printString
 325 80652 6000 FFF0 	    bra.w   .exit
 326               	 .invalidAddr:
 327 80656 41FA 04AE 	    lea     msgInvalidAddress, %a0
 328 8065a 6100 FEBC 	    bsr.w   printString
 329 8065e 6000 FFE4 	    bra.w   .exit
 330               	 .invalidVal:
 331 80662 41FA 04B4 	    lea     msgInvalidValue, %a0
 332 80666 6100 FEB0 	    bsr.w   printString
 333 8066a 6000 FFD8 	    bra.w   .exit
 334               		
 335               	|||||||||||||||||||||||||||||||
 336               	| Examines memory addresses
 337               	| Valid modes:
 338               	|   e ADDR                  Displays a single byte
 339               	|   e ADDR-ADDR             Dispalys all bytes between the two addresses
 340               	|   e ADDR+LEN              Dispays LEN bytes after ADDR
 341               	|   e ADDR;                 Interactive mode, space shows 16 lines, enter shows 1.
 342               	|   e ADDR.                 Quick line, displays one line 
 343               	.examine:
 344 8066e 6100 0146 	    bsr.w   parseNumber         | Read in the start address
 345 80672 4A01      	    tst.b   %d1                 | Make sure it's valid (parseNumber returns non-zero in d1 for fail
 346 80674 6600 FFE0 	    bne.w   .invalidAddr        
 347 80678 2640      	    move.l  %d0, %a3            | Save the start address
 348               	 .exloop:
 349 8067a 1018      	    move.b  (%a0)+, %d0
 350 8067c 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 351 80680 67F8      	    beq.s   .exloop
 352 80682 0C00 002D 	    cmp.b   #'-', %d0           | Check if it's a range specifier
 353 80686 6716      	    beq.s   .exrange
 354 80688 0C00 002B 	    cmp.b   #'+', %d0           | Check if it's a length specifier
 355 8068c 6722      	    beq.s   .exlength
 356 8068e 0C00 003B 	    cmp.b   #';', %d0           | Check if we're going interactive
 357 80692 672E      	    beq.s   .exinter
 358 80694 0C00 002E 	    cmp.b   #'.', %d0           | Check if quick 16 
 359 80698 6712      	    beq.s   .exquick
 360 8069a 7001      	    move.l  #1, %d0             | Otherwise read in a single byte
 361 8069c 601C      	    bra.s   .exend              
 362               	 .exrange:
 363 8069e 6100 0116 	    bsr.w   parseNumber         | Find the end address
68K GAS  S68K_002.s 			page 8


 364 806a2 4A01      	    tst.b   %d1                 | Check if we found a valid address
 365 806a4 6600 FFB0 	    bne.w   .invalidAddr
 366 806a8 908B      	    sub.l   %a3, %d0            | Get the length
 367 806aa 600E      	    bra.s   .exend
 368               	 .exquick:                      | Quick mode means show one line of 16 bytes
 369 806ac 7010      	    move.l  #0x10, %d0
 370 806ae 600A      	    bra.s   .exend
 371               	 .exlength:                     | Length mode means a length is specified
 372 806b0 6100 0104 	    bsr.w   parseNumber         | Find the length
 373 806b4 4A01      	    tst.b   %d1
 374 806b6 6600 FF9E 	    bne.w   .invalidAddr
 375               	 .exend:                        | Done parsing, give the parameters to dumpRAM and exit
 376 806ba 204B      	    move.l  %a3, %a0
 377 806bc 6100 015A 	    bsr.w   dumpRAM
 378 806c0 6082      	    bra.s   .exit
 379               	 .exinter:                      | Interactive mode, Space shows 16 lines, enter shows 1.
 380 806c2 204B      	    move.l  %a3, %a0            | Current Address
 381 806c4 7010      	    move.l  #0x10, %d0          | 16 bytes
 382 806c6 6100 0150 	    bsr.w   dumpRAM             | Dump this line
 383 806ca D7FC 0000 	    add.l   #0x10, %a3          | Move up the current address 16 bytes
 383      0010 
 384               	 .exinterend:
 385 806d0 6100 FE50 	    bsr.w   inChar
 386 806d4 0C00 000D 	    cmp.b   #CR, %d0            | Display another line
 387 806d8 67E8      	    beq.s   .exinter
 388 806da 0C00 0020 	    cmp.b   #' ', %d0           | Display a page (256 bytes at a time)
 389 806de 6704      	    beq.s   .exinterpage
 390 806e0 6000 FF62 	    bra	   .exit               | Otherwise exit
 391               	 .exinterpage:
 392 806e4 204B      	    move.l  %a3, %a0
 393 806e6 203C 0000 	    move.l  #0x100, %d0         | 256 bytes
 393      0100 
 394 806ec 6100 012A 	    bsr.w   dumpRAM             | Dump 16 lines of RAM
 395 806f0 D7FC 0000 	    add.l   #0x100, %a3         | Move up the current address by 256
 395      0100 
 396 806f6 60D8      	    bra.s   .exinterend
 397               	
 398               	|||||||||||||||||||||||||||||
 399               	|| Load S Record
 400               	|	srecType:	ds.b	1		| S1-S9 stored as binary 1-9
 401               	|	srecByCt:	ds.b	1		| Byte Count
 402               	|	srecData:	ds.b	1 		| Data
 403               	|	srecCSum:	ds.b	1 		| S-Record Checksum
 404               	|	srecAddr:	ds.l	1		| S Record current byte address
 405               	
 406               	loadSRec:
 407 806f8 41FA 03FC 	    lea     ldSRecMsg, %a0
 408 806fc 6100 FE1A 	    bsr.w   printString
 409 80700 4EBA 0016 		jsr		getRecType
 410 80704 4EBA 004C 		jsr		getBytCt
 411 80708 4EBA 00A6 		jsr		getAddr
 412 8070c 4EBA 00A4 		jsr		getLdData
 413 80710 4EBA 00A2 		jsr		getChksum
 414 80714 6000 FF2E 		bra.w   .exit
 415               	
 416               	getRecType:
 417 80718 4EBA FE08 		jsr		inChar
68K GAS  S68K_002.s 			page 9


 418 8071c 0C00 0053 		cmp.b	#'S', %d0
 419 80720 6600 FFF6 		bne		getRecType
 420 80724 4EBA FDFC 		jsr		inChar
 421 80728 0200 000F 		andi.b	#0x0f, %d0
 422 8072c 13C0 0000 		move.b	%d0, srecType
 422      0000 
 423               	| Debug messages follow
 424 80732 41FA 03FD 		lea		debug_Srec_Typ_Msg, %a0		| Debug message
 425 80736 6100 FDE0 	    bsr.w   printString
 426 8073a 1039 0000 		move.b	srecType, %d0
 426      0000 
 427 80740 0600 0030 		add.b	#'0', %d0
 428 80744 4EBA FDAA 		jsr		outChar
 429 80748 41FA 035A 		lea		CRLF_MSG, %a0
 430 8074c 6100 FDCA 	    bsr.w   printString
 431               	| Debug messages end
 432 80750 4E75      		rts
 433               		
 434               	getBytCt:
 435 80752 4EBA 0028 		jsr		getHexPair
 436 80756 13C0 0000 		move.b	%d0, srecByCt
 436      0000 
 437               	| Debug messages follow
 438 8075c 41FA 03E2 		lea		debug_Srec_BytCt_Msg, %a0
 439 80760 6100 FDB6 	    bsr.w   printString
 440 80764 1039 0000 		move.b	srecByCt, %d0
 440      0000 
 441 8076a 0600 0030 		add.b	#'0', %d0
 442 8076e 4EBA FD80 		jsr		outChar
 443 80772 41FA 0330 		lea		CRLF_MSG, %a0
 444 80776 6100 FDA0 	    bsr.w   printString
 445               	| Debug messages end
 446 8077a 4E75      		rts
 447               	
 448               	getHexPair:
 449 8077c 48E7 2000 		movem.l %d2, -(%SP)		| Save registers
 450 80780 4EBA FDA0 		jsr		inChar
 451 80784 4EBA 0016 		jsr		toNibble
 452 80788 E900      		asl.b	#4, %d0
 453 8078a 1400      		move.b	%d0, %d2
 454 8078c 4EBA FD94 		jsr		inChar
 455 80790 4EBA 000A 		jsr		toNibble
 456 80794 8002      		or.b	%d2, %d0
 457 80796 4CDF 0004 		movem.l (%SP)+, %d2		| Restore registers
 458 8079a 4E75      		rts
 459               	
 460               	toNibble:
 461 8079c 0C00 0041 		cmp.b	#'A', %d0
 462 807a0 6C00 0008 		bge		doHexLetter
 463 807a4 0400 0030 		sub.b	#'0', %d0
 464 807a8 4E75      		rts
 465               	doHexLetter:
 466 807aa 0400 004B 		sub.b	#'A'+10, %d0
 467 807ae 4E75      		rts
 468               	
 469               	getAddr:
 470 807b0 4E75      		rts
68K GAS  S68K_002.s 			page 10


 471               		
 472               	getLdData:
 473 807b2 4E75      		rts
 474               	
 475               	getChksum:
 476 807b4 4E75      		rts
 477               		
 478               	|||||||||||||||||||||||||||||
 479               	| Find and parse a hex number
 480               	|  Starting address in A0
 481               	|  Number returned in D0
 482               	|  Status in D1   (0 success, 1 fail)
 483               	|  TODO: Try and merge first digit code with remaining digit code
 484               	parseNumber:
 485 807b6 B180      	    eor.l   %d0, %d0		| Zero out d0
 486 807b8 1018      	    move.b  (%a0)+, %d0
 487 807ba 0C00 0020 	    cmp.b   #' ', %d0		|  Ignore all leading spaces
 488 807be 67F6      	    beq.s   parseNumber
 489 807c0 0C00 0030 	    cmp.b   #'0', %d0       | Look for hex digits 0-9
 490 807c4 6D14      	    blt.s	PNinvalid
 491 807c6 0C00 0039 	    cmp.b   #'9', %d0
 492 807ca 6F18      	    ble.s   PNfirstdigit1
 493               	
 494 807cc 0C00 0041 	    cmp.b   #'A', %d0      	| Look for hex digits A-F
 495 807d0 6D00 FE6A 	    blt   .invalid    
 496 807d4 0C00 0046 	    cmp.b   #'F', %d0
 497 807d8 6F04      	    ble.s   PNfirstdigit2
 498               	PNinvalid:
 499 807da 7201      	    move.l  #1, %d1			| Invalid character, mark failure and return
 500 807dc 4E75      	    rts
 501               	PNfirstdigit2:
 502 807de 0400 0037 	    sub.b   #'7', %d0       | Turn 'A' to 10
 503 807e2 6004      	    bra.s   PNloop
 504               	PNfirstdigit1:
 505 807e4 0400 0030 	    sub.b   #'0', %d0       | Turn '0' to 0
 506               	 PNloop:
 507 807e8 1218      	    move.b  (%a0)+, %d1      | Read in a digit
 508 807ea 0C01 0030 	    cmp.b   #'0', %d1       | Look for hex digits 0-9
 509 807ee 6D12      	    blt.s   PNend         	| Any other characters mean we're done reading
 510 807f0 0C01 0039 	    cmp.b   #'9', %d1
 511 807f4 6F18      	    ble.s   PNdigit1
 512 807f6 0C01 0041 	    cmp.b   #'A', %d1      	| Look for hex digits A-F
 513 807fa 6D06      	    blt.s   PNend
 514 807fc 0C01 0046 	    cmp.b   #'F', %d1
 515 80800 6F06      	    ble.s   PNdigit2
 516               	
 517               	PNend:                       | We hit a non-hex digit character, we're done parsing
 518 80802 5388      	    subq.l  #1, %a0         | Move the pointer back before the end character we read
 519 80804 7200      	    move.l  #0, %d1
 520 80806 4E75      	    rts
 521               	PNdigit2:
 522 80808 0401 0037 	    sub.b   #'7', %d1		| Turn 'A' to 10
 523 8080c 6004      	    bra.s   PNdigit3
 524               	PNdigit1:
 525 8080e 0401 0030 	    sub.b   #'0', %d1       | Turn '0' to 0
 526               	PNdigit3:
 527 80812 E988      	    lsl.l   #4, %d0        	| Shift over to the next nybble
68K GAS  S68K_002.s 			page 11


 528 80814 D001      	    add.b   %d1, %d0       	| Place in our current nybble (could be or.b instead)
 529 80816 60D0      	    bra.s   PNloop
 530               	    
 531               	
 532               	|||||||||||||||||||||||||||||
 533               	| Dumps a section of RAM to the screen
 534               	| Displays both hex values and ASCII characters
 535               	| d0 - Number of bytes to dump
 536               	| a0 - Start Address
 537               	dumpRAM:
 538 80818 48E7 3820 	    movem.l %d2-%d4/%a2, -(%SP) | Save registers
 539 8081c 2448      	    move.l  %a0, %a2           	| Save the start address
 540 8081e 2400      	    move.l  %d0, %d2           	| And the number of bytes
 541               	 .line:
 542 80820 200A      	    move.l  %a2, %d0          
 543 80822 6100 010E 	    bsr.w   printHexAddr     	| Starting address of this line
 544 80826 41FA 0303 	    lea     msgColonSpace, %a0
 545 8082a 6100 FCEC 	    bsr.w   printString
 546 8082e 7610      	    move.l  #16, %d3         	| 16 Bytes can be printed on a line
 547 80830 2803      	    move.l  %d3, %d4       		| Save number of bytes on this line
 548               	 .hexbyte:
 549 80832 4A82      	    tst.l   %d2               	| Check if we're out of bytes
 550 80834 6718      	    beq.s   .endbytesShort
 551 80836 4A03      	    tst.b   %d3               	| Check if we're done this line
 552 80838 673A      	    beq.s   .endbytes    
 553 8083a 101A      	    move.b  (%a2)+, %d0        	| Read a byte in from RAM
 554 8083c 6100 011C 	    bsr.w   printHexByte     	| Display it
 555 80840 103C 0020 	    move.b  #' ', %d0
 556 80844 6100 FCAA 	    bsr.w   outChar          	| Space out bytes
 557 80848 5383      	    subq.l  #1, %d3    
 558 8084a 5382      	    subq.l  #1, %d2        
 559 8084c 60E4      	    bra.s   .hexbyte
 560               	 .endbytesShort:
 561 8084e 9803      	    sub.b   %d3, %d4           	| Make d4 the actual number of bytes on this line
 562 80850 103C 0020 	    move.b  #' ', %d0
 563               	 .endbytesShortLoop:
 564 80854 4A03      	    tst.b   %d3               	| Check if we ended the line
 565 80856 671C      	    beq.s   .endbytes
 566 80858 103C 0020 	    move.b  #' ', %d0
 567 8085c 6100 FC92 	    bsr.w   outChar          	| Three spaces to pad out
 568 80860 103C 0020 	    move.b  #' ', %d0
 569 80864 6100 FC8A 	    bsr.w   outChar
 570 80868 103C 0020 	    move.b  #' ', %d0
 571 8086c 6100 FC82 	    bsr.w   outChar
 572               	    
 573 80870 5303      	    subq.b  #1, %d3
 574 80872 60E0      	    bra.s   .endbytesShortLoop
 575               	 .endbytes:
 576 80874 95C4      	    suba.l  %d4, %a2        	| Return to the start address of this line
 577               	 .endbytesLoop:
 578 80876 4A04      	    tst.b   %d4               	| Check if we are done printing ascii
 579 80878 6700 0022 	    beq     .endline    
 580 8087c 5304      	    subq.b  #1, %d4
 581 8087e 101A      	    move.b  (%a2)+, %d0        	| Read the byte again
 582 80880 0C00 0020 	    cmp.b   #' ', %d0         	| Lowest printable character
 583 80884 6D0C      	    blt.s   .unprintable
 584 80886 0C00 007E 	    cmp.b   #'~', %d0         	| Highest printable character
68K GAS  S68K_002.s 			page 12


 585 8088a 6E06      	    bgt.s   .unprintable
 586 8088c 6100 FC62 	    bsr.w   outChar
 587 80890 60E4      	    bra.s   .endbytesLoop
 588               	 .unprintable:
 589 80892 103C 002E 	    move.b  #'.', %d0
 590 80896 6100 FC58 	    bsr.w   outChar
 591 8089a 60DA      	    bra.s   .endbytesLoop
 592               	 .endline:
 593 8089c 41FA 0290 	    lea     msgNewline, %a0
 594 808a0 6100 FC76 	    bsr.w   printString
 595 808a4 4A82      	    tst.l   %d2
 596 808a6 6F04      	    ble.s   .end
 597 808a8 6000 FF76 	    bra.w   .line
 598               	 .end:
 599 808ac 4CDF 041C 	    movem.l (%SP)+, %d2-%d4/%a2		| Restore registers
 600 808b0 4E75      	    rts
 601               	
 602               	|||||||||||||||||||||||
 603               	| Deposit values into RAM
 604               	| d ADDR VAL VAL            Deposit value(s) into RAM
 605               	| d ADDR VAL VAL;           Deposit values, continue with values on next line
 606               	|  VAL VAL VAL;              - Continuing with further continue
 607               	| d: VAL VAL                Continue depositing values after the last address written to
 608               	|||||||||||||||||||||||
 609               	.deposit:
 610 808b2 1010      	    move.b  (%a0), %d0
 611 808b4 0C00 003A 	    cmp.b   #':', %d0       	| Check if we want to continue from last
 612 808b8 6730      	    beq.s   DepCont
 613               	    
 614 808ba 6100 FEFA 	    bsr.w   parseNumber         | Otherwise read the address
 615 808be 4A01      	    tst.b   %d1
 616 808c0 6600 FD94 	    bne		.invalidAddr
 617 808c4 2640      	    move.l  %d0, %a3           	| Save the start address
 618               	 DepLoop:
 619 808c6 1010      	    move.b  (%a0), %d0            
 620 808c8 0C00 003B 	    cmp.b   #';', %d0          	| Check for continue
 621 808cc 6726      	    beq.s   DepMLine
 622 808ce 4A40      	    tst     %d0              	| Check for the end of line
 623 808d0 6700 003A 	    beq     DepEnd
 624               	    
 625 808d4 6100 FEE0 	    bsr		parseNumber         | Otherwise read a value
 626 808d8 4A01      	    tst.b   %d1
 627 808da 6600 FD86 	    bne		.invalidVal
 628 808de 0C40 00FF 	    cmp.w   #255, %d0          	| Make sure it's a byte
 629 808e2 6E00 FD7E 	    bgt		.invalidVal
 630               	    
 631 808e6 16C0      	    move.b  %d0, (%a3)+        	| Store the value into memory
 632 808e8 60DC      	    bra.s   DepLoop
 633               	    
 634               	 DepCont:
 635 808ea 2679 0007 	    move.l  varCurAddr, %a3   	| Read in the last address 
 635      FBAA 
 636 808f0 5288      	    addq.l  #1, %a0           	| Skip over the ':'
 637 808f2 60D2      	    bra.s   DepLoop
 638               	    
 639               	 DepMLine:
 640 808f4 41FA 0186 	    lea     msgDepositPrompt, %a0
68K GAS  S68K_002.s 			page 13


 641 808f8 6100 FC1E 	    bsr.w   printString
 642 808fc 6100 FC4C 	    bsr.w   readLine          	| Read in the next line to be parsed
 643 80900 6100 FCDA 	    bsr.w   lineToUpper         | Convert to uppercase
 644 80904 41F9 0007 	    lea     varLineBuf, %a0    	| Reset our buffer pointer
 644      FBAE 
 645 8090a 60BA      	    bra.s   DepLoop            	| And jump back to decoding
 646               	 DepEnd:
 647 8090c 23CB 0007 	    move.l  %a3, varCurAddr
 647      FBAA 
 648 80912 6000 FD30 	    bra.w   .exit
 649               	
 650               	|||||||||||||||||||||||
 651               	| run code
 652               	 .run:
 653 80916 6100 FE9E 	    bsr.w   parseNumber        	| Otherwise read the address
 654 8091a 4A01      	    tst.b   %d1
 655 8091c 6600 FD38 	    bne		.invalidAddr
 656 80920 2040      	    move.l  %d0, %a0
 657 80922 4E90      	    jsr     (%a0)             	| Jump to the code! 
 658               	                                | Go as subroutine to allow code to return to us
 659 80924 4EBA FB8E 	    jsr     monitorStart        | Warm start after returning so everything is in
 660               	                                | a known state.
 661               	
 662               	
 663               	|||||||||||||||||||||||
 664               	|| KEEP All printHex functions together ||
 665               	|||||||||||||||||||||||
 666               	| Print a hex word
 667               	printHexWord:
 668 80928 2F02      	    move.l  %d2, -(%SP)		| Save D2
 669 8092a 2400      	    move.l  %d0, %d2		| Save the address in d2
 670               	    
 671 8092c E19A      	    rol.l   #0x8, %d2       | 4321 -> 3214
 672 8092e E19A      	    rol.l   #0x8, %d2       | 3214 -> 2143 
 673 80930 6018      	    bra.s   printHex_wordentry  | Print out the last 16 bits
 674               	|||||||||||||||||||||||
 675               	| Print a hex 24-bit address
 676               	printHexAddr:
 677 80932 2F02      	    move.l %d2, -(%SP)   	| Save D2
 678 80934 2400      	    move.l %d0, %d2      	| Save the address in d2
 679               	    
 680 80936 E19A      	    rol.l   #0x8, %d2     	| 4321 -> 3214
 681 80938 600A      	    bra.s   printHex_addrentry  | Print out the last 24 bits
 682               	|||||||||||||||||||||||
 683               	* Print a hex long
 684               	printHexLong:
 685 8093a 2F02      	    move.l  %d2, -(%SP)     | Save D2
 686 8093c 2400      	    move.l  %d0, %d2        | Save the address in d2
 687               	    
 688 8093e E19A      	    rol.l   #0x8, %d2        | 4321 -> 3214 high byte in low
 689 80940 2002      	    move.l  %d2, %d0
 690 80942 6116      	    bsr.s   printHexByte  	| Print the high byte (24-31)
 691               	printHex_addrentry:     
 692 80944 E19A      	    rol.l   #0x8, %d2        	| 3214 -> 2143 middle-high byte in low
 693 80946 2002      	    move.l  %d2, %d0              
 694 80948 6110      	    bsr.s   printHexByte  	| Print the high-middle byte (16-23)
 695               	printHex_wordentry:    
68K GAS  S68K_002.s 			page 14


 696 8094a E19A      	    rol.l   #0x8, %d2        	| 2143 -> 1432 Middle byte in low
 697 8094c 2002      	    move.l  %d2, %d0
 698 8094e 610A      	    bsr.s   printHexByte  	| Print the middle byte (8-15)
 699 80950 E19A      	    rol.l   #0x8, %d2
 700 80952 2002      	    move.l  %d2, %d0
 701 80954 6104      	    bsr.s   printHexByte  	| Print the low byte (0-7)
 702               	    
 703 80956 241F      	    move.l (%SP)+, %d2      | Restore D2
 704 80958 4E75      	    RTS
 705               	    
 706               	|||||||||||||||||||||||
 707               	| Print a hex byte
 708               	|  - Takes byte in D0
 709               	printHexByte:
 710 8095a 2F02      	    move.l  %D2, -(%SP)
 711 8095c 7400      		move.l	#0, %d2
 712 8095e 1400      	    move.b  %d0, %d2
 713 80960 E808      	    lsr.b   #0x4, %d0		| Shift down upper nibble
 714 80962 0200 000F 		andi.b	#0xf, %d0
 715 80966 0600 0030 	    add.b   #'0', %d0
 716 8096a 0C00 0039 	    cmp.b   #'9', %d0		| Check if the hex number was from 0-9
 717 8096e 6F02      	    ble.s   PHBsecond
 718 80970 5E00      	    add.b   #0x7, %d0			| Shift 0xA-0xF from ':' to 'A'
 719               	PHBsecond:
 720 80972 6100 FB7C 	    bsr   outChar			| Print the digit
 721 80976 0202 000F 	    andi.b  #0x0F, %d2		| Now we want the lower digit Mask only the lower digit
 722 8097a 0602 0030 	    add.b   #'0', %d2
 723 8097e 0C02 0039 	    cmp.b   #'9', %d2     	| Same as before    
 724 80982 6F02      	    ble.s   PHBend
 725 80984 5E02      	    add.b   #0x7, %D2
 726               	PHBend:
 727 80986 1002      	    move.b  %D2, %D0
 728 80988 6100 FB66 	    bsr	   outChar      	| Print the lower digit
 729 8098c 241F      	    move.l  (%SP)+, %D2
 730 8098e 4E75      	    rts
 731               		
 732               	
 733               	|||||
 734               	| Initializes the 68681 DUART port A as 9600 8N1 
 735               	initDuart:
 736 80990 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 736      000F 0004 
 737 80998 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 737      000F 0004 
 738 809a0 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 738      000F 0004 
 739               	    
 740 809a8 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 740      000F 0008 
 741 809b0 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 741      000F 0002 
 742 809b8 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 742      000F 0000 
 743 809c0 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 743      000F 0000 
 744               	    
 745 809c8 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
68K GAS  S68K_002.s 			page 15


 745      000F 0004 
 746               	
 747 809d0 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 747      000F 0014 
 748 809d8 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 748      000F 0014 
 749 809e0 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 749      000F 0014 
 750               	    
 751 809e8 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 751      000F 0012 
 752 809f0 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 752      000F 0010 
 753 809f8 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 753      000F 0010 
 754               	    
 755 80a00 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 755      000F 0014 
 756               		
 757 80a08 13FC 0000 		move.b	#0x00, OPC		 | Output port configuration (all bit are outs)
 757      000F 001A 
 758 80a10 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 758      000F 001E 
 759 80a18 4E75      	    rts    
 760               	
 761               	delay1Sec:
 762 80a1a 203C 0003 		move.l	#200000, %d0	| rough count
 762      0D40 
 763               	delay1Loop:
 764 80a20 5380      		sub.l	#1, %d0			
 765 80a22 6600 FFFC 		bne		delay1Loop
 766 80a26 4E75      		rts
 767               	
 768               	READINLINE:	  
 769 80a28 5265 6164 		.ascii  "Reading in line"
 769      696E 6720 
 769      696E 206C 
 769      696E 65
 770 80a37 0D0A 00   		dc.b CR,LF,EOT
 771               	L_TO_UPPER_MSG:  
 772 80a3a 436F 6E76 		.ascii  "Convert line to upper case"
 772      6572 7420 
 772      6C69 6E65 
 772      2074 6F20 
 772      7570 7065 
 773 80a54 0D0A 00   		dc.b CR,LF,EOT
 774               	WRITEOUTLINE:	  
 775 80a57 5772 6974 		.ascii  "Writing out line"
 775      696E 6720 
 775      6F75 7420 
 775      6C69 6E65 
 776 80a67 0D0A 00   		dc.b CR,LF,EOT
 777               	RAM_PASS_MSG:  
 778 80a6a 5241 4D20 		.ascii  "RAM Test Passed"
 778      5465 7374 
 778      2050 6173 
 778      7365 64
68K GAS  S68K_002.s 			page 16


 779 80a79 0D0A 00   		dc.b CR,LF,EOT
 780               	msgDepositPrompt:
 781 80a7c 3A20      	    .ascii	": "
 782 80a7e 00        		dc.b 	EOT
 783               	BANNER_MSG:	
 784 80a7f 5349 4D50 		.ascii  "SIMPLE-68008 CPU"
 784      4C45 2D36 
 784      3830 3038 
 784      2043 5055 
 785 80a8f 0D0A 00   		dc.b CR,LF,EOT
 786               	msgInvalidCommand:
 787 80a92 496E 7661 	    .ascii "Invalid Command"
 787      6C69 6420 
 787      436F 6D6D 
 787      616E 64
 788 80aa1 0D0A 00   		dc.b CR,LF,EOT
 789               	CRLF_MSG:	
 790 80aa4 0D0A 00   		dc.b CR,LF,EOT
 791               	msgHelp:
 792 80aa7 4176 6169 	    .ascii	"Available Commands: "
 792      6C61 626C 
 792      6520 436F 
 792      6D6D 616E 
 792      6473 3A20 
 793 80abb 0D0A      		dc.b	CR,LF
 794 80abd 2028 4529 	    .ascii	" (E)xamine    (D)eposit    (R)un     (L)oad     (H)elp"
 794      7861 6D69 
 794      6E65 2020 
 794      2020 2844 
 794      2965 706F 
 795 80af3 0D0A 00   		dc.b	CR,LF,EOT
 796               	ldSRecMsg:
 797 80af6 4C6F 6164 	    .ascii	"Load S-Record"
 797      2053 2D52 
 797      6563 6F72 
 797      64
 798 80b03 0D0A 00   		dc.b	CR,LF,EOT
 799               	msgInvalidAddress:
 800 80b06 496E 7661 	    .ascii	"Invalid Address"
 800      6C69 6420 
 800      4164 6472 
 800      6573 73
 801 80b15 0D0A 00   		dc.b 	CR,LF,EOT
 802               	msgInvalidValue:
 803 80b18 496E 7661 	    .ascii	"Invalid Value"
 803      6C69 6420 
 803      5661 6C75 
 803      65
 804 80b25 0D0A 00   		dc.b	CR,LF,EOT
 805               	msgPrompt:
 806 80b28 3E20      		.ascii "> "
 807 80b2a 00        	    dc.b EOT
 808               	msgColonSpace:
 809 80b2b 3A20      	    .ascii ": "
 810 80b2d 00        	    dc.b EOT
 811               	msgNewline:
 812 80b2e 0D0A 00   	    dc.b CR,LF,EOT
68K GAS  S68K_002.s 			page 17


 813               	debug_Srec_Typ_Msg:
 814 80b31 5320 5265 		.ascii	"S Record Type="
 814      636F 7264 
 814      2054 7970 
 814      653D 
 815 80b3f 00        	    dc.b EOT
 816               	debug_Srec_BytCt_Msg:
 817 80b40 5320 5265 		.ascii	"S Record Byte Count="
 817      636F 7264 
 817      2042 7974 
 817      6520 436F 
 817      756E 743D 
 818 80b54 00        	    dc.b EOT
 819               	
 820               	
 821               	MAX_LINE_LENGTH = 80
 822               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
 823               	varCurAddr = varLineBuf-4
68K GAS  S68K_002.s 			page 18


DEFINED SYMBOLS
          S68K_002.s:6      *ABS*:0000000000000000 RAM_START
          S68K_002.s:7      *ABS*:000000000007fffc STACK_END
          S68K_002.s:8      *ABS*:000000000007ffff RAM_END
          S68K_002.s:9      *ABS*:0000000000080000 ROM_START
          S68K_002.s:10     *ABS*:0000000000080400 ROM_CODE
          S68K_002.s:12     *ABS*:000000000008ffff ROM_END
          S68K_002.s:17     *ABS*:00000000000f0000 DUART
          S68K_002.s:18     *ABS*:00000000000f0000 MRA
          S68K_002.s:19     *ABS*:00000000000f0002 SRA
          S68K_002.s:20     *ABS*:00000000000f0002 CSRA
          S68K_002.s:21     *ABS*:00000000000f0004 CRA
          S68K_002.s:22     *ABS*:00000000000f0006 RBA
          S68K_002.s:23     *ABS*:00000000000f0006 TBA
          S68K_002.s:24     *ABS*:00000000000f0008 ACR
          S68K_002.s:25     *ABS*:00000000000f000a ISR
          S68K_002.s:26     *ABS*:00000000000f000a IMR
          S68K_002.s:27     *ABS*:00000000000f0010 MRB
          S68K_002.s:28     *ABS*:00000000000f0012 SRB
          S68K_002.s:29     *ABS*:00000000000f0012 CSRB
          S68K_002.s:30     *ABS*:00000000000f0014 CRB
          S68K_002.s:31     *ABS*:00000000000f0016 RBB
          S68K_002.s:32     *ABS*:00000000000f0016 TBB
          S68K_002.s:33     *ABS*:00000000000f0018 IVR
          S68K_002.s:34     *ABS*:00000000000f001a OPC
          S68K_002.s:35     *ABS*:00000000000f001a INU
          S68K_002.s:36     *ABS*:00000000000f001c OPS
          S68K_002.s:37     *ABS*:00000000000f001e OPR
          S68K_002.s:42     *ABS*:0000000000000007 BEL
          S68K_002.s:43     *ABS*:0000000000000008 BKSP
          S68K_002.s:44     *ABS*:0000000000000009 TAB
          S68K_002.s:45     *ABS*:000000000000000a LF
          S68K_002.s:46     *ABS*:000000000000000d CR
          S68K_002.s:47     *ABS*:000000000000001b ESC
          S68K_002.s:48     *ABS*:0000000000000000 EOT
          S68K_002.s:50     *ABS*:0000000000000003 CTRLC
          S68K_002.s:51     *ABS*:0000000000000018 CTRLX
          S68K_002.s:54     .text:0000000000000400 srecType
          S68K_002.s:55     .text:0000000000000401 srecByCt
          S68K_002.s:56     .text:0000000000000402 srecData
          S68K_002.s:57     .text:0000000000000403 srecCSum
          S68K_002.s:58     .text:0000000000000404 srecAddr
          S68K_002.s:165    .text:00000000000804ea FERVR2
          S68K_002.s:90     .text:0000000000080444 loop1stLoc
          S68K_002.s:163    .text:00000000000804ea failBitTest
          S68K_002.s:105    .text:0000000000080464 loopAdrFill
          S68K_002.s:117    .text:0000000000080482 loopAdrCk
          S68K_002.s:164    .text:00000000000804ea failAdrTest
          S68K_002.s:132    .text:000000000008049c fillSRAM
          S68K_002.s:136    .text:00000000000804a8 fillSRAMLoop
          S68K_002.s:735    .text:0000000000080990 initDuart
          S68K_002.s:145    .text:00000000000804b4 monitorStart
          S68K_002.s:783    .text:0000000000080a7f BANNER_MSG
          S68K_002.s:190    .text:0000000000080518 printString1
          S68K_002.s:777    .text:0000000000080a6a RAM_PASS_MSG
          S68K_002.s:153    .text:00000000000804c4 interpLoop
          S68K_002.s:805    .text:0000000000080b28 msgPrompt
68K GAS  S68K_002.s 			page 19


          S68K_002.s:191    .text:0000000000080518 printString
          S68K_002.s:220    .text:000000000008054a readLine
          S68K_002.s:277    .text:00000000000805dc lineToUpper
          S68K_002.s:294    .text:00000000000805fa parseLine
          S68K_002.s:172    .text:00000000000804f0 outChar1
          S68K_002.s:173    .text:00000000000804f0 outChar
          S68K_002.s:181    .text:0000000000080504 outChar2
          S68K_002.s:192    .text:0000000000080518 PSloop
          S68K_002.s:198    .text:0000000000080520 PSend
          S68K_002.s:206    .text:0000000000080522 inChar1
          S68K_002.s:207    .text:0000000000080522 inChar
          S68K_002.s:213    .text:0000000000080536 inChar2
                            *ABS*:000000000007fbae varLineBuf
          S68K_002.s:224    .text:0000000000080556 RLloop
          S68K_002.s:241    .text:0000000000080582 RLBS
          S68K_002.s:252    .text:00000000000805a0 RLlineClr
          S68K_002.s:266    .text:00000000000805c4 RLEndLn
          S68K_002.s:234    .text:0000000000080572 .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_002.s:256    .text:00000000000805a6 RLlineClrloop
          S68K_002.s:279    .text:00000000000805e2 LUloop
          S68K_002.s:286    .text:00000000000805f4 LUnext
          S68K_002.s:297    .text:0000000000080604 PLfindCommand
          S68K_002.s:343    .text:000000000008066e .examine
          S68K_002.s:609    .text:00000000000808b2 .deposit
          S68K_002.s:652    .text:0000000000080916 .run
          S68K_002.s:322    .text:000000000008064a .help
          S68K_002.s:406    .text:00000000000806f8 loadSRec
          S68K_002.s:316    .text:0000000000080644 .exit
          S68K_002.s:313    .text:000000000008063c .invalid
          S68K_002.s:786    .text:0000000000080a92 msgInvalidCommand
          S68K_002.s:791    .text:0000000000080aa7 msgHelp
          S68K_002.s:326    .text:0000000000080656 .invalidAddr
          S68K_002.s:799    .text:0000000000080b06 msgInvalidAddress
          S68K_002.s:330    .text:0000000000080662 .invalidVal
          S68K_002.s:802    .text:0000000000080b18 msgInvalidValue
          S68K_002.s:484    .text:00000000000807b6 parseNumber
          S68K_002.s:348    .text:000000000008067a .exloop
          S68K_002.s:362    .text:000000000008069e .exrange
          S68K_002.s:371    .text:00000000000806b0 .exlength
          S68K_002.s:379    .text:00000000000806c2 .exinter
          S68K_002.s:368    .text:00000000000806ac .exquick
          S68K_002.s:375    .text:00000000000806ba .exend
          S68K_002.s:537    .text:0000000000080818 dumpRAM
          S68K_002.s:384    .text:00000000000806d0 .exinterend
          S68K_002.s:391    .text:00000000000806e4 .exinterpage
          S68K_002.s:796    .text:0000000000080af6 ldSRecMsg
          S68K_002.s:416    .text:0000000000080718 getRecType
          S68K_002.s:434    .text:0000000000080752 getBytCt
          S68K_002.s:469    .text:00000000000807b0 getAddr
          S68K_002.s:472    .text:00000000000807b2 getLdData
          S68K_002.s:475    .text:00000000000807b4 getChksum
          S68K_002.s:813    .text:0000000000080b31 debug_Srec_Typ_Msg
          S68K_002.s:789    .text:0000000000080aa4 CRLF_MSG
          S68K_002.s:448    .text:000000000008077c getHexPair
          S68K_002.s:816    .text:0000000000080b40 debug_Srec_BytCt_Msg
          S68K_002.s:460    .text:000000000008079c toNibble
68K GAS  S68K_002.s 			page 20


          S68K_002.s:465    .text:00000000000807aa doHexLetter
          S68K_002.s:498    .text:00000000000807da PNinvalid
          S68K_002.s:504    .text:00000000000807e4 PNfirstdigit1
          S68K_002.s:501    .text:00000000000807de PNfirstdigit2
          S68K_002.s:506    .text:00000000000807e8 PNloop
          S68K_002.s:517    .text:0000000000080802 PNend
          S68K_002.s:524    .text:000000000008080e PNdigit1
          S68K_002.s:521    .text:0000000000080808 PNdigit2
          S68K_002.s:526    .text:0000000000080812 PNdigit3
          S68K_002.s:541    .text:0000000000080820 .line
          S68K_002.s:676    .text:0000000000080932 printHexAddr
          S68K_002.s:808    .text:0000000000080b2b msgColonSpace
          S68K_002.s:548    .text:0000000000080832 .hexbyte
          S68K_002.s:560    .text:000000000008084e .endbytesShort
          S68K_002.s:575    .text:0000000000080874 .endbytes
          S68K_002.s:709    .text:000000000008095a printHexByte
          S68K_002.s:563    .text:0000000000080854 .endbytesShortLoop
          S68K_002.s:577    .text:0000000000080876 .endbytesLoop
          S68K_002.s:592    .text:000000000008089c .endline
          S68K_002.s:588    .text:0000000000080892 .unprintable
          S68K_002.s:811    .text:0000000000080b2e msgNewline
          S68K_002.s:598    .text:00000000000808ac .end
          S68K_002.s:634    .text:00000000000808ea DepCont
          S68K_002.s:618    .text:00000000000808c6 DepLoop
          S68K_002.s:639    .text:00000000000808f4 DepMLine
          S68K_002.s:646    .text:000000000008090c DepEnd
                            *ABS*:000000000007fbaa varCurAddr
          S68K_002.s:780    .text:0000000000080a7c msgDepositPrompt
          S68K_002.s:667    .text:0000000000080928 printHexWord
          S68K_002.s:695    .text:000000000008094a printHex_wordentry
          S68K_002.s:691    .text:0000000000080944 printHex_addrentry
          S68K_002.s:684    .text:000000000008093a printHexLong
          S68K_002.s:719    .text:0000000000080972 PHBsecond
          S68K_002.s:726    .text:0000000000080986 PHBend
          S68K_002.s:761    .text:0000000000080a1a delay1Sec
          S68K_002.s:763    .text:0000000000080a20 delay1Loop
          S68K_002.s:768    .text:0000000000080a28 READINLINE
          S68K_002.s:771    .text:0000000000080a3a L_TO_UPPER_MSG
          S68K_002.s:774    .text:0000000000080a57 WRITEOUTLINE

NO UNDEFINED SYMBOLS
