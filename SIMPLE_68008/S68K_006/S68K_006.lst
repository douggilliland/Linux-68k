68K GAS  S68K_006.s 			page 1


   1               	| S68K_002.s - Interrupt test code
   2               	| Interrupt on transmit empty
   3               	| Send out a character with every interrupt
   4               	
   5               	CODE_START	= 0x001000	| Start of code
   6               	RAM_END		= 0x07FFFF	| 512KB SRAM
   7               	
   8               	|||||||||||||||||||||||||||||||||
   9               	| 68681 Duart Register Addresses
  10               	
  11               	DUART = 0x0F0000	  | Base Addr of DUART
  12               	MRA   = DUART+0		  | Mode Register A           (R/W)
  13               	SRA   = DUART+2       | Status Register A         (r)
  14               	CSRA  = DUART+2       | Clock Select Register A   (w)
  15               	CRA   = DUART+4       | Commands Register A       (w)
  16               	RBA   = DUART+6       | Receiver Buffer A         (r)
  17               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  18               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  19               	ISR   = DUART+10      | Interrupt Status Register (R)
  20               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  21               	MRB   = DUART+16      | Mode Register B           (R/W)
  22               	SRB   = DUART+18      | Status Register B         (R)
  23               	CSRB  = DUART+18      | Clock Select Register B   (W)
  24               	CRB   = DUART+20      | Commands Register B       (W)
  25               	RBB   = DUART+22      | Reciever Buffer B         (R)
  26               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  27               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  28               	OPC   = DUART+26      | Output port config        (W)
  29               	INU   = DUART+26      | Input port (unlatched)    (R)
  30               	OPS   = DUART+28      | Output port Set           (W)
  31               	OPR   = DUART+30      | Output port Clear         (W)
  32               	
  33               	charTempPtr = 0x600
  34               	DUART_Vect = 0x100
  35               	DUART_VR = 0x40
  36               	
  37 0000 0000 0000 		.ORG	CODE_START
  37      0000 0000 
  37      0000 0000 
  37      0000 0000 
  37      0000 0000 
  38 1000 48E7 80C0 	    movem.l %d0/%a0-%a1, -(%SP)	| Save changed registers
  39 1004 007C 0700 		ori.w	#0x0700, %sr		| Disable interrupts
  40               		| Set the start character (a '1')
  41 1008 207C 0000 		movea.l	#charTempPtr, %a0
  41      0600 
  42 100e 10BC 0031 		move.b	#'1', (%a0)			| Start character is a space
  43               		| Fill the interrupt vector table entry for DUART interrupt
  44 1012 207C 0000 		movea.l	#DUART_Vect, %a0
  44      0100 
  45 1018 203C 0000 		move.l	#0x1200, %d0
  45      1200 
  46               	fillTable:
  47               	|	move.l	%d0, (%a0)+
  48               	|	cmp.l	#0x400,%a0
  49               	|	blt		fillTable
  50 101e 103C 0040 		move.b 	#DUART_VR, %d0
68K GAS  S68K_006.s 			page 2


  51               		| Set DUART interrupt vector
  52 1022 207C 000F 		movea.l	#DUART, %a0			| DUART base address
  52      0000 
  53 1028 1140 0018 		move.b	%d0, 24(%a0)		| Interrupt Vector Register
  54               		| Set DUART interrupt mask to enable Transmit Empty interrupt
  55 102c 117C 0001 		move.b	#0x01, 10(%a0)		| Interrupt Mask Register
  55      000A 
  56 1032 4CDF 0301 	    movem.l (%SP)+, %d0/%a0-%a1	| Restore registers
  57 1036 4E75      		rts
  58               	
  59 1038 0000 0000 		.ORG	0x1100
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  59      0000 0000 
  60               	enInts:
  61 1100 027C F8FF 		andi.w	#0xF8FF, %sr		| Enable interrupts
  62 1104 4E75      		rts
  63               		
  64 1106 0000 0000 		.ORG	0x1200
  64      0000 0000 
  64      0000 0000 
  64      0000 0000 
  64      0000 0000 
  65               	IntLev2:
  66 1200 48E7 80C0 	    movem.l %d0/%a0-%a1, -(%SP)     | Save changed registers
  67 1204 207C 0000 		movea.l	#charTempPtr, %a0		| Get the character to write out
  67      0600 
  68 120a 227C 000F 		movea.l	#DUART, %a1				| DUART base address
  68      0000 
  69 1210 1010      		move.b	(%a0), %d0				| Put char in d0
  70 1212 1340 0006 		move.b	%d0, 6(%a1)				| Write out the character
  71 1216 5200      		add.b	#1, %d0					| Increment character
  72 1218 0C00 007A 		cmp.b	#'z', %d0				| Go up to z
  73 121c 6F00 0002 		ble		skipCRes
  74               	|	move.b	#'1', %d0				| Start character is a '1'
  75               	skipCRes:
  76               	|	move.b	%d0, (%a0)
  77               	|	move.b	#0x00, 10(%a1)			| Interrupt Mask Register
  78 1220 4CDF 0301 	    movem.l (%SP)+, %d0/%a0-%a1     | Restore registers
  79 1224 4E73      		rte
68K GAS  S68K_006.s 			page 3


DEFINED SYMBOLS
          S68K_006.s:5      *ABS*:0000000000001000 CODE_START
          S68K_006.s:6      *ABS*:000000000007ffff RAM_END
          S68K_006.s:11     *ABS*:00000000000f0000 DUART
          S68K_006.s:12     *ABS*:00000000000f0000 MRA
          S68K_006.s:13     *ABS*:00000000000f0002 SRA
          S68K_006.s:14     *ABS*:00000000000f0002 CSRA
          S68K_006.s:15     *ABS*:00000000000f0004 CRA
          S68K_006.s:16     *ABS*:00000000000f0006 RBA
          S68K_006.s:17     *ABS*:00000000000f0006 TBA
          S68K_006.s:18     *ABS*:00000000000f0008 ACR
          S68K_006.s:19     *ABS*:00000000000f000a ISR
          S68K_006.s:20     *ABS*:00000000000f000a IMR
          S68K_006.s:21     *ABS*:00000000000f0010 MRB
          S68K_006.s:22     *ABS*:00000000000f0012 SRB
          S68K_006.s:23     *ABS*:00000000000f0012 CSRB
          S68K_006.s:24     *ABS*:00000000000f0014 CRB
          S68K_006.s:25     *ABS*:00000000000f0016 RBB
          S68K_006.s:26     *ABS*:00000000000f0016 TBB
          S68K_006.s:27     *ABS*:00000000000f0018 IVR
          S68K_006.s:28     *ABS*:00000000000f001a OPC
          S68K_006.s:29     *ABS*:00000000000f001a INU
          S68K_006.s:30     *ABS*:00000000000f001c OPS
          S68K_006.s:31     *ABS*:00000000000f001e OPR
          S68K_006.s:33     *ABS*:0000000000000600 charTempPtr
          S68K_006.s:34     *ABS*:0000000000000100 DUART_Vect
          S68K_006.s:35     *ABS*:0000000000000040 DUART_VR
          S68K_006.s:46     .text:000000000000101e fillTable
          S68K_006.s:60     .text:0000000000001100 enInts
          S68K_006.s:65     .text:0000000000001200 IntLev2
          S68K_006.s:75     .text:0000000000001220 skipCRes

NO UNDEFINED SYMBOLS
