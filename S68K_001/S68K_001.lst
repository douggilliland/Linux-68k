68K GAS  S68K_001.s 			page 1


   1               	| Borrowed init code from 
   2               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   3               	
   4               	RAM_START	= 0x00000	| Beginning of the SRAM
   5               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   6               	RAM_END		= 0x7FFFF	| 512KB SRAM
   7               	ROM_START	= 0x80000	| ROM start
   8               	ROM_CODE	= ROM_START+1024| Skip vector table
   9               	ROM_END		= 0x87FFF	| End of 32KB EPROM
  10               	
  11               	|||||||||||||||||||||||||||||||||
  12               	| 68681 Duart Register Addresses
  13               	|
  14               	DUART = 0x0F0000	  | Base Addr of DUART
  15               	MRA   = DUART+0		  | Mode Register A           (R/W)
  16               	SRA   = DUART+2       | Status Register A         (r)
  17               	CSRA  = DUART+2       | Clock Select Register A   (w)
  18               	CRA   = DUART+4       | Commands Register A       (w)
  19               	RBA   = DUART+6       | Receiver Buffer A         (r)
  20               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  21               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  22               	ISR   = DUART+10      | Interrupt Status Register (R)
  23               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  24               	MRB   = DUART+16      | Mode Register B           (R/W)
  25               	SRB   = DUART+18      | Status Register B         (R)
  26               	CSRB  = DUART+18      | Clock Select Register B   (W)
  27               	CRB   = DUART+20      | Commands Register B       (W)
  28               	RBB   = DUART+22      | Reciever Buffer B         (R)
  29               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  30               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  31               	OPC   = DUART+26      | Output port config        (W)
  32               	INU   = DUART+26      | Input port (unlatched)    (R)
  33               	OPS   = DUART+28      | Output port Set           (W)
  34               	OPR   = DUART+30      | Output port Clear         (W)
  35               	
  36               	||||||||||||||||||||||||||||||||||
  37               	| ASCII Control Characters
  38               	|
  39               	BEL   = 0x07
  40               	BKSP  = 0x08       | CTRL-H
  41               	TAB   = 0x09
  42               	LF    = 0x0A
  43               	CR    = 0x0D
  44               	ESC   = 0x1B
  45               	
  46               	CTRLC	=	0x03
  47               	CTRLX	=	0x18     | Line Clear
  48               	
  49 0000 0000 0000 		.ORG	ROM_START
  49      0000 0000 
  49      0000 0000 
  49      0000 0000 
  49      0000 0000 
  50               	
  51               	| FIRST 8 bytes loaded after reset |
  52 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  53 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
68K GAS  S68K_001.s 			page 2


  54               	
  55 80008 0000 0000 	        .ORG ROM_CODE
  55      0000 0000 
  55      0000 0000 
  55      0000 0000 
  55      0000 0000 
  56 80400 4E71      		nop
  57 80402 4FF9 0007 		lea			STACK_END,%sp
  57      FFFC 
  58 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  58      0008 0000 
  59 80410 4E71      		nop
  60               	|
  61               	| Test the first two SRAM location
  62               	|
  63 80412 203C DEAD 		move.l	#0xDEADBEEF, %d0	| Test Pattern #1
  63      BEEF 
  64 80418 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  65 8041c 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  66 8041e 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  67 80420 B042      		cmp			%d2, %d0
  68 80422 6600 00FC 		bne			FERVR2						
  69 80426 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  69      AAAA 
  70 8042c 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  71 80430 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  72 80432 2611      		move.l	(%a1), %d3				| Read back
  73 80434 B243      		cmp			%d3, %d1
  74 80436 6600 00E8 		bne			FERVR2
  75 8043a 4E71      		nop
  76               	| Test bits of first location (as bytes)
  77 8043c 7001      		move.l	#1, %d0
  78 8043e 207C 0000 		move.l	#0, %a0
  78      0000 
  79               	loop1stLoc:
  80 80444 1080      		move.b	%d0, (%a0)
  81 80446 1210      		move.b	(%a0), %d1
  82 80448 B200      		cmp.b		%d0, %d1
  83 8044a 6600 00DA 		bne			failBitTest
  84 8044e E348      		lsl			#1, %d0
  85 80450 0C80 0000 		cmp.l		#0x00000100, %d0
  85      0100 
  86 80456 6600 FFEC 		bne			loop1stLoc
  87               	|
  88               	| Test all address lines, 512KB SRAM
  89               	| Write incrementing pattern to data bits
  90               	|
  91 8045a 7001      		move.l	#1, %d0		| Fill pattern
  92 8045c 7401      		move.l	#1, %d2
  93 8045e 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
  93      0001 
  94               	loopAdrFill:
  95 80464 1080      		move.b	%d0,(%a0)	| Do the write
  96 80466 5240      		addq		#1, %d0		| Increment the pattern
  97 80468 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
  98 8046a E38A      		lsl.l		#1, %d2		| Shift temp addr
  99 8046c 2042      		move.l	%d2, %a0	| Put back into addr reg
68K GAS  S68K_001.s 			page 3


 100 8046e 0C82 0008 		cmp.l		#0x00080000,%d2
 100      0000 
 101 80474 6600 FFEE 		bne			loopAdrFill
 102               	| Check
 103 80478 7001      		move.l	#1, %d0
 104 8047a 7401      		move.l	#1, %d2
 105 8047c 207C 0000 		move.l	#1, %a0
 105      0001 
 106               	loopAdrCk:
 107 80482 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 108 80484 B200      		cmp.b		%d0, %d1
 109 80486 6600 00A4 		bne			failAdrTest
 110 8048a 5240      		addq		#1, %d0
 111 8048c 2408      		move.l	%a0, %d2 
 112 8048e E38A      		lsl.l		#1, %d2
 113 80490 2042      		move.l	%d2, %a0
 114 80492 0C82 0008 		cmp.l		#0x00080000,%d2
 114      0000 
 115 80498 6600 FFE8 		bne			loopAdrCk
 116               	|
 117               	| Done with address test of SRAM
 118               	|
 119 8049c 4EBA 01A2 		jsr     initDuart       | Setup the serial port
 120               		
 121 804a0 41FA 0285 		lea		BANNER_MSG, %a0
 122 804a4 4EBA 00B4 		jsr		printString1
 123 804a8 41FA 027A 		lea		CRLF_MSG, %a0
 124 804ac 4EBA 00AC 		jsr		printString1
 125 804b0 41FA 0262 		lea		RAM_PASS_MSG, %a0
 126 804b4 4EBA 00A4 		jsr		printString1
 127 804b8 41FA 026A 		lea		CRLF_MSG, %a0
 128 804bc 4EBA 009C 		jsr		printString1
 129               	|
 130 804c0 41FA 0216 		lea		READINLINE, %a0
 131 804c4 4EBA 0094 		jsr		printString1
 132 804c8 41FA 025A 		lea		CRLF_MSG, %a0
 133 804cc 4EBA 008C 		jsr		printString1
 134 804d0 4EBA 00BA 		jsr		readLine
 135 804d4 41FA 0212 		lea		LINETOUPPER, %a0
 136 804d8 4EBA 0080 		jsr		printString1
 137 804dc 41FA 0246 		lea		CRLF_MSG, %a0
 138 804e0 4EBA 0078 		jsr		printString1
 139 804e4 4EBA 013C 		jsr		lineToUpper
 140 804e8 41FA 0219 		lea		WRITEOUTLINE,%a0
 141 804ec 4EBA 006C 		jsr		printString1
 142 804f0 41FA 0232 		lea		CRLF_MSG, %a0
 143 804f4 4EBA 0064 		jsr		printString1
 144 804f8 41F9 0007 		lea     varLineBuf, %a0
 144      FBAE 
 145 804fe 4EBA 005A 		jsr		printString1
 146               		
 147               	FERVR:
 148 80502 4E71      		nop
 149 80504 13FC 0004 		move.b	#0x04, OPS		| Blink LED on DUART Out2
 149      000F 001C 
 150 8050c 4EBA 01BC 		jsr		delay1Sec
 151 80510 13FC 0004 		move.b	#0x04, OPR
68K GAS  S68K_001.s 			page 4


 151      000F 001E 
 152 80518 4EBA 01B0 		jsr		delay1Sec
 153 8051c 4EFA FFE4 		jmp		FERVR
 154               	|
 155               	FERVR2:
 156 80520 4E71      		nop
 157 80522 4EFA FFFC 		jmp	FERVR2
 158               	failBitTest:
 159 80526 4E71      		nop
 160 80528 4EFA FFFC 		jmp	failBitTest
 161               	failAdrTest:
 162 8052c 4E71      		nop
 163 8052e 4EFA FFFC 		jmp	failAdrTest
 164               	
 165               	|||||
 166               	| Writes a character to Port A, blocking if not ready (Full buffer)
 167               	|  - Takes a character in D0
 168               	outChar1:
 169               	outChar:
 170 80532 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 170      000F 0002 
 171 8053a 6700 FFF6 	    beq     outChar1     
 172 8053e 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 172      0006 
 173 80544 4E75      	    rts
 174               	
 175               	| Writes a character to Port A, blocking if not ready (Full buffer)
 176               	|  - Takes a character in D0
 177               	outChar2:
 178 80546 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 178      000F 0012 
 179 8054e 6700 FFF6 	    beq     outChar2     
 180 80552 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 180      0016 
 181 80558 4E75      	    rts
 182               	
 183               	******
 184               	* Print a null terminated string
 185               	*
 186               	printString1:
 187               	printString:
 188               	 PSloop:
 189 8055a 1018      	    move.b  (%a0)+, %d0  | Read in character
 190 8055c 6704      	    beq.s   PSend         | Check for the null
 191               	    
 192 8055e 61D2      	    bsr.s   outChar      | Otherwise write the character
 193 80560 60F8      	    bra.s   PSloop        | And continue
 194               	PSend:
 195 80562 4E75      	    rts
 196               	
 197               	
 198               	|||||
 199               	| Reads in a character from Port A, blocking if none available
 200               	|  - Returns character in D0
 201               	|    
 202               	inChar1:
 203               	inChar:
68K GAS  S68K_001.s 			page 5


 204 80564 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 204      000F 0002 
 205 8056c 6700 FFF6 	    beq     inChar1
 206 80570 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 206      0006 
 207 80576 4E75      	    rts
 208               	
 209               	inChar2:
 210 80578 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 210      000F 0012 
 211 80580 6700 FFF6 	    beq     inChar2
 212 80584 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 212      0016 
 213 8058a 4E75      	    rts
 214               	
 215               	| Read in a line into the line buffer
 216               	readLine:
 217 8058c 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 218 80590 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 218      FBAE 
 219 80596 B542      	    eor.w   %d2, %d2           	| Clear the character counter
 220               	 .loop:
 221 80598 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 222 8059c 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 223 805a0 6726      	    beq.s   .backspace
 224 805a2 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 225 805a6 673E      	    beq.s   .lineclear
 226 805a8 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 227 805ac 675C      	    beq.s   .endline
 228 805ae 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
 229 805b2 67E4      	    beq.s   .loop            	| Ignore LFs and get the next character
 230               	 .char:                      	| Normal character to be inserted into the buffer
 231 805b4 0C79 0050 	    cmp.w   #MAX_LINE_LENGTH, d2
 231      0000 0000 
 232 805bc 6CDA      	    bge.s   .loop            	| If the buffer is full ignore the character
 233 805be 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 234 805c0 5242      	    addq.w  #1, %d2           	| Increment character count
 235 805c2 6100 FF6E 	    bsr.w   outChar          	| Echo the character
 236 805c6 60D0      	    bra.s   .loop            	| And get the next one
 237               	 .backspace:
 238 805c8 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 239 805ca 67CC      	    beq.s   .loop            	| Then ignore it
 240 805cc 6100 FF64 	    bsr.w   outChar          	| Backspace
 241 805d0 103C 0020 	    move.b  #' ', %d0
 242 805d4 6100 FF5C 	    bsr.w   outChar          	| Space
 243 805d8 103C 0008 	    move.b  #BKSP, %d0
 244 805dc 6100 FF54 	    bsr.w   outChar          	| Backspace
 245 805e0 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 246 805e2 5382      	    subq.l  #1, %d2           	| And current character count
 247 805e4 60B2      	    bra.s   .loop            	| And goto the next character
 248               	 .lineclear:
 249 805e6 4A42      	    tst     %d2               	| Anything to clear?
 250 805e8 67AE      	    beq.s   .loop            	| If not, fetch the next character
 251 805ea 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 252               	 .lineclearloop:
 253 805ec 103C 0008 	    move.b  #BKSP, %d0
 254 805f0 6100 FF40 	    bsr.w   outChar          	| Backspace
68K GAS  S68K_001.s 			page 6


 255 805f4 103C 0020 	    move.b  #' ', %d0
 256 805f8 6100 FF38 	    bsr.w   outChar          	| Space
 257 805fc 103C 0008 	    move.b  #BKSP, %d0
 258 80600 6100 FF30 	    bsr.w   outChar          	| Backspace
 259 80604 5342      	    subq.w  #1, %d2          
 260 80606 66E4      	    bne.s   .lineclearloop   	| Go till the start of the line
 261 80608 608E      	    bra.s   .loop   
 262               	 .endline:
 263 8060a 6100 FF26 	    bsr.w   outChar          	| Echo the CR
 264 8060e 103C 000A 	    move.b  #LF, %d0
 265 80612 6100 FF1E 	    bsr.w   outChar          	| Line feed to be safe
 266 80616 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 267 8061a 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 268 8061c 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 269 80620 4E75      	    rts                      	| And return
 270               	
 271               	
 272               	| Convert line buffer to upper case
 273               	lineToUpper:
 274 80622 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 274      FBAE 
 275               	 LUloop:
 276 80628 1010      	    move.b  (%a0), %d0        | Read in a character
 277 8062a 0C00 0061 	    cmp.b   #'a', %d0         
 278 8062e 6D0C      	    blt.s   LUnext2            | Is it less than lower-case 'a', then move on
 279 80630 0C00 007A 	    cmp.b   #'z', %d0
 280 80634 6E06      	    bgt.s   LUnext2            | Is it greater than lower-case 'z', then move on
 281 80636 0400 0000 	    sub.b   #$20, %d0         | Then convert a to A, b to B, etc.
 282               	 LUnext:
 283 8063a 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 284               	LUnext2:
 285 8063c 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
 286 8063e 4E75      	    rts
 287               	
 288               	
 289               	|||||
 290               	| Initializes the 68681 DUART port A as 9600 8N1 
 291               	initDuart:
 292 80640 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 292      000F 0004 
 293 80648 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 293      000F 0004 
 294 80650 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 294      000F 0004 
 295               	    
 296 80658 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 296      000F 0008 
 297 80660 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 297      000F 0002 
 298 80668 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 298      000F 0000 
 299 80670 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 299      000F 0000 
 300               	    
 301 80678 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 301      000F 0004 
 302               	
68K GAS  S68K_001.s 			page 7


 303 80680 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 303      000F 0014 
 304 80688 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 304      000F 0014 
 305 80690 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 305      000F 0014 
 306               	    
 307 80698 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 307      000F 0012 
 308 806a0 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 308      000F 0010 
 309 806a8 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 309      000F 0010 
 310               	    
 311 806b0 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 311      000F 0014 
 312               		
 313 806b8 13FC 00FC 		move.b	#0xFC, OPC		 | Output port configuration (all bit are outs)
 313      000F 001A 
 314 806c0 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 314      000F 001E 
 315 806c8 4E75      	    rts    
 316               	
 317               	delay1Sec:
 318 806ca 203C 0003 		move.l	#200000, %d0	| rough count
 318      0D40 
 319               	delay1Loop:
 320 806d0 5380      		sub.l	#1, %d0			
 321 806d2 6600 FFFC 		bne		delay1Loop
 322 806d6 4E75      		rts
 323               	
 324 806d8 5265 6164 	READINLINE:	  .ascii  "Reading in line"
 324      696E 6720 
 324      696E 206C 
 324      696E 65
 325 806e7 00        				DC.B    EOT
 326 806e8 436F 6E76 	LINETOUPPER:  .ascii  "Convert line to upper case"
 326      6572 7420 
 326      6C69 6E65 
 326      2074 6F20 
 326      7570 7065 
 327 80702 00        				DC.B    EOT
 328 80703 5772 6974 	WRITEOUTLINE:	  .ascii  "Writing out line"
 328      696E 6720 
 328      6F75 7420 
 328      6C69 6E65 
 329 80713 00        				DC.B    EOT
 330 80714 5241 4D20 	RAM_PASS_MSG:  .ascii  "RAM Test Passed"
 330      5465 7374 
 330      2050 6173 
 330      7365 64
 331 80723 00        				DC.B    EOT
 332 80724 0A0D 00   	CRLF_MSG:	dc.b 0x0a,0xd,0
 333 80727 5349 4D50 	BANNER_MSG:	.ascii  "SIMPLE-68008 CPU"
 333      4C45 2D36 
 333      3830 3038 
 333      2043 5055 
68K GAS  S68K_001.s 			page 8


 334 80737 00        				DC.B    EOT
 335               	
 336               	MAX_LINE_LENGTH = 80
 337               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
68K GAS  S68K_001.s 			page 9


DEFINED SYMBOLS
          S68K_001.s:4      *ABS*:0000000000000000 RAM_START
          S68K_001.s:5      *ABS*:000000000007fffc STACK_END
          S68K_001.s:6      *ABS*:000000000007ffff RAM_END
          S68K_001.s:7      *ABS*:0000000000080000 ROM_START
          S68K_001.s:8      *ABS*:0000000000080400 ROM_CODE
          S68K_001.s:9      *ABS*:0000000000087fff ROM_END
          S68K_001.s:14     *ABS*:00000000000f0000 DUART
          S68K_001.s:15     *ABS*:00000000000f0000 MRA
          S68K_001.s:16     *ABS*:00000000000f0002 SRA
          S68K_001.s:17     *ABS*:00000000000f0002 CSRA
          S68K_001.s:18     *ABS*:00000000000f0004 CRA
          S68K_001.s:19     *ABS*:00000000000f0006 RBA
          S68K_001.s:20     *ABS*:00000000000f0006 TBA
          S68K_001.s:21     *ABS*:00000000000f0008 ACR
          S68K_001.s:22     *ABS*:00000000000f000a ISR
          S68K_001.s:23     *ABS*:00000000000f000a IMR
          S68K_001.s:24     *ABS*:00000000000f0010 MRB
          S68K_001.s:25     *ABS*:00000000000f0012 SRB
          S68K_001.s:26     *ABS*:00000000000f0012 CSRB
          S68K_001.s:27     *ABS*:00000000000f0014 CRB
          S68K_001.s:28     *ABS*:00000000000f0016 RBB
          S68K_001.s:29     *ABS*:00000000000f0016 TBB
          S68K_001.s:30     *ABS*:00000000000f0018 IVR
          S68K_001.s:31     *ABS*:00000000000f001a OPC
          S68K_001.s:32     *ABS*:00000000000f001a INU
          S68K_001.s:33     *ABS*:00000000000f001c OPS
          S68K_001.s:34     *ABS*:00000000000f001e OPR
          S68K_001.s:39     *ABS*:0000000000000007 BEL
          S68K_001.s:40     *ABS*:0000000000000008 BKSP
          S68K_001.s:41     *ABS*:0000000000000009 TAB
          S68K_001.s:42     *ABS*:000000000000000a LF
          S68K_001.s:43     *ABS*:000000000000000d CR
          S68K_001.s:44     *ABS*:000000000000001b ESC
          S68K_001.s:46     *ABS*:0000000000000003 CTRLC
          S68K_001.s:47     *ABS*:0000000000000018 CTRLX
          S68K_001.s:155    .text:0000000000080520 FERVR2
          S68K_001.s:79     .text:0000000000080444 loop1stLoc
          S68K_001.s:158    .text:0000000000080526 failBitTest
          S68K_001.s:94     .text:0000000000080464 loopAdrFill
          S68K_001.s:106    .text:0000000000080482 loopAdrCk
          S68K_001.s:161    .text:000000000008052c failAdrTest
          S68K_001.s:291    .text:0000000000080640 initDuart
          S68K_001.s:333    .text:0000000000080727 BANNER_MSG
          S68K_001.s:186    .text:000000000008055a printString1
          S68K_001.s:332    .text:0000000000080724 CRLF_MSG
          S68K_001.s:330    .text:0000000000080714 RAM_PASS_MSG
          S68K_001.s:324    .text:00000000000806d8 READINLINE
          S68K_001.s:216    .text:000000000008058c readLine
          S68K_001.s:326    .text:00000000000806e8 LINETOUPPER
          S68K_001.s:273    .text:0000000000080622 lineToUpper
          S68K_001.s:328    .text:0000000000080703 WRITEOUTLINE
                            *ABS*:000000000007fbae varLineBuf
          S68K_001.s:147    .text:0000000000080502 FERVR
          S68K_001.s:317    .text:00000000000806ca delay1Sec
          S68K_001.s:168    .text:0000000000080532 outChar1
          S68K_001.s:169    .text:0000000000080532 outChar
68K GAS  S68K_001.s 			page 10


          S68K_001.s:177    .text:0000000000080546 outChar2
          S68K_001.s:187    .text:000000000008055a printString
          S68K_001.s:188    .text:000000000008055a PSloop
          S68K_001.s:194    .text:0000000000080562 PSend
          S68K_001.s:202    .text:0000000000080564 inChar1
          S68K_001.s:203    .text:0000000000080564 inChar
          S68K_001.s:209    .text:0000000000080578 inChar2
          S68K_001.s:220    .text:0000000000080598 .loop
          S68K_001.s:237    .text:00000000000805c8 .backspace
          S68K_001.s:248    .text:00000000000805e6 .lineclear
          S68K_001.s:262    .text:000000000008060a .endline
          S68K_001.s:230    .text:00000000000805b4 .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_001.s:252    .text:00000000000805ec .lineclearloop
          S68K_001.s:275    .text:0000000000080628 LUloop
          S68K_001.s:284    .text:000000000008063c LUnext2
          S68K_001.s:282    .text:000000000008063a LUnext
          S68K_001.s:319    .text:00000000000806d0 delay1Loop

UNDEFINED SYMBOLS
d2
$20
EOT
