68K GAS  S68K_001.s 			page 1


   1               	| Borrowed init code from 
   2               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   3               	
   4               	RAM_START	= 0x00000	| Beginning of the SRAM
   5               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   6               	RAM_END		= 0x7FFFF	| 512KB SRAM
   7               	ROM_START	= 0x80000	| ROM start
   8               	ROM_CODE	= ROM_START+1024| Skip vector table
   9               	ROM_END		= 0x87FFF	| End of 32KB EPROM
  10               	
  11               	|||||||||||||||||||||||||||||||||
  12               	| 68681 Duart Register Addresses
  13               	|
  14               	DUART = 0x0F0000	  | Base Addr of DUART
  15               	MRA   = DUART+0		  | Mode Register A           (R/W)
  16               	SRA   = DUART+2       | Status Register A         (r)
  17               	CSRA  = DUART+2       | Clock Select Register A   (w)
  18               	CRA   = DUART+4       | Commands Register A       (w)
  19               	RBA   = DUART+6       | Receiver Buffer A         (r)
  20               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  21               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  22               	ISR   = DUART+10      | Interrupt Status Register (R)
  23               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  24               	MRB   = DUART+16      | Mode Register B           (R/W)
  25               	SRB   = DUART+18      | Status Register B         (R)
  26               	CSRB  = DUART+18      | Clock Select Register B   (W)
  27               	CRB   = DUART+20      | Commands Register B       (W)
  28               	RBB   = DUART+22      | Reciever Buffer B         (R)
  29               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  30               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  31               	OPC   = DUART+26      | Output port config        (W)
  32               	INU   = DUART+26      | Input port (unlatched)    (R)
  33               	OPS   = DUART+28      | Output port Set           (W)
  34               	OPR   = DUART+30      | Output port Clear         (W)
  35               	
  36               	||||||||||||||||||||||||||||||||||
  37               	| ASCII Control Characters
  38               	|
  39               	BEL   = 0x07
  40               	BKSP  = 0x08       | CTRL-H
  41               	TAB   = 0x09
  42               	LF    = 0x0A
  43               	CR    = 0x0D
  44               	ESC   = 0x1B
  45               	
  46               	CTRLC	=	0x03
  47               	CTRLX	=	0x18     | Line Clear
  48               	
  49 0000 0000 0000 		.ORG	ROM_START
  49      0000 0000 
  49      0000 0000 
  49      0000 0000 
  49      0000 0000 
  50               	
  51               	| FIRST 8 bytes loaded after reset |
  52 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  53 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
68K GAS  S68K_001.s 			page 2


  54               	
  55 80008 0000 0000 	        .ORG ROM_CODE
  55      0000 0000 
  55      0000 0000 
  55      0000 0000 
  55      0000 0000 
  56 80400 4E71      		nop
  57 80402 4FF9 0007 		lea			STACK_END,%sp
  57      FFFC 
  58 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  58      0008 0000 
  59 80410 4E71      		nop
  60               	|
  61               	| Test the first two SRAM location
  62               	|
  63 80412 203C DEAD 		move.l	#0xDEADBEEF, %d0	| Test Pattern #1
  63      BEEF 
  64 80418 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  65 8041c 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  66 8041e 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  67 80420 B042      		cmp			%d2, %d0
  68 80422 6600 00B8 		bne			FERVR2						
  69 80426 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  69      AAAA 
  70 8042c 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  71 80430 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  72 80432 2611      		move.l	(%a1), %d3				| Read back
  73 80434 B243      		cmp			%d3, %d1
  74 80436 6600 00A4 		bne			FERVR2
  75 8043a 4E71      		nop
  76               	| Test bits of first location (as bytes)
  77 8043c 7001      		move.l	#1, %d0
  78 8043e 207C 0000 		move.l	#0, %a0
  78      0000 
  79               	loop1stLoc:
  80 80444 1080      		move.b	%d0, (%a0)
  81 80446 1210      		move.b	(%a0), %d1
  82 80448 B200      		cmp.b		%d0, %d1
  83 8044a 6600 0090 		bne			failBitTest
  84 8044e E348      		lsl			#1, %d0
  85 80450 0C80 0000 		cmp.l		#0x00000100, %d0
  85      0100 
  86 80456 6600 FFEC 		bne			loop1stLoc
  87               	|
  88               	| Test all address lines, 512KB SRAM
  89               	| Write incrementing pattern to data bits
  90               	|
  91 8045a 7001      		move.l	#1, %d0		| Fill pattern
  92 8045c 7401      		move.l	#1, %d2
  93 8045e 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
  93      0001 
  94               	loopAdrFill:
  95 80464 1080      		move.b	%d0,(%a0)	| Do the write
  96 80466 5240      		addq		#1, %d0		| Increment the pattern
  97 80468 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
  98 8046a E38A      		lsl.l		#1, %d2		| Shift temp addr
  99 8046c 2042      		move.l	%d2, %a0	| Put back into addr reg
68K GAS  S68K_001.s 			page 3


 100 8046e 0C82 0008 		cmp.l		#0x00080000,%d2
 100      0000 
 101 80474 6600 FFEE 		bne			loopAdrFill
 102               	| Check
 103 80478 7001      		move.l	#1, %d0
 104 8047a 7401      		move.l	#1, %d2
 105 8047c 207C 0000 		move.l	#1, %a0
 105      0001 
 106               	loopAdrCk:
 107 80482 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 108 80484 B200      		cmp.b		%d0, %d1
 109 80486 6600 0054 		bne			failAdrTest
 110 8048a 5240      		addq		#1, %d0
 111 8048c 2408      		move.l	%a0, %d2 
 112 8048e E38A      		lsl.l		#1, %d2
 113 80490 2042      		move.l	%d2, %a0
 114 80492 0C82 0008 		cmp.l		#0x00080000,%d2
 114      0000 
 115 80498 6600 FFE8 		bne			loopAdrCk
 116               	|
 117               	| Done with address test of SRAM
 118               	|
 119 8049c 4EBA 01BE 		jsr     initDuart       | Setup the serial port
 120               		
 121 804a0 41FA 02A6 		lea		BANNER_MSG, %a0
 122 804a4 4EBA 0064 		jsr		printString1
 123 804a8 41FA 028C 		lea		RAM_PASS_MSG, %a0
 124 804ac 4EBA 005C 		jsr		printString1
 125               	|
 126               	| Interpreter Loop
 127               	|
 128               	interpLoop:
 129 804b0 41FA 0316 	    lea     msgPrompt, %a0   | Prompt
 130 804b4 6100 0054 	    bsr.w   printString
 131 804b8 4EBA 0082 		jsr		readLine
 132 804bc 4EBA 0110 		jsr		lineToUpper
 133 804c0 13FC 0004 		move.b	#0x04, OPS		| Blink LED on DUART Out2
 133      000F 001C 
 134 804c8 4EBA 0122 		jsr		parseLine
 135 804cc 4EBA 0218 		jsr		delay1Sec
 136 804d0 13FC 0004 		move.b	#0x04, OPR
 136      000F 001E 
 137 804d8 6000 FFD6 		bra		interpLoop
 138               		
 139               	failBitTest:
 140               	failAdrTest:
 141               	FERVR2:
 142 804dc 4E71      		nop
 143 804de 4EFA FFFC 		jmp	FERVR2
 144               	
 145               	|||||
 146               	| Writes a character to Port A, blocking if not ready (Full buffer)
 147               	|  - Takes a character in D0
 148               	outChar1:
 149               	outChar:
 150 804e2 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 150      000F 0002 
68K GAS  S68K_001.s 			page 4


 151 804ea 6700 FFF6 	    beq     outChar1     
 152 804ee 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 152      0006 
 153 804f4 4E75      	    rts
 154               	
 155               	| Writes a character to Port A, blocking if not ready (Full buffer)
 156               	|  - Takes a character in D0
 157               	outChar2:
 158 804f6 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 158      000F 0012 
 159 804fe 6700 FFF6 	    beq     outChar2     
 160 80502 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 160      0016 
 161 80508 4E75      	    rts
 162               	
 163               	******
 164               	* Print a null terminated string
 165               	*
 166               	printString1:
 167               	printString:
 168               	 PSloop:
 169 8050a 1018      	    move.b  (%a0)+, %d0  | Read in character
 170 8050c 6704      	    beq.s   PSend         | Check for the null
 171               	    
 172 8050e 61D2      	    bsr.s   outChar      | Otherwise write the character
 173 80510 60F8      	    bra.s   PSloop        | And continue
 174               	PSend:
 175 80512 4E75      	    rts
 176               	
 177               	
 178               	|||||
 179               	| Reads in a character from Port A, blocking if none available
 180               	|  - Returns character in D0
 181               	|    
 182               	inChar1:
 183               	inChar:
 184 80514 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 184      000F 0002 
 185 8051c 6700 FFF6 	    beq     inChar1
 186 80520 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 186      0006 
 187 80526 4E75      	    rts
 188               	
 189               	inChar2:
 190 80528 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 190      000F 0012 
 191 80530 6700 FFF6 	    beq     inChar2
 192 80534 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 192      0016 
 193 8053a 4E75      	    rts
 194               	
 195               	| Read in a line into the line buffer
 196               	readLine:
 197 8053c 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 198 80540 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 198      FBAE 
 199 80546 B542      	    eor.w   %d2, %d2           	| Clear the character counter
68K GAS  S68K_001.s 			page 5


 200               	 RLloop:
 201 80548 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 202 8054c 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 203 80550 6722      	    beq.s   RLBS
 204 80552 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 205 80556 673A      	    beq.s   RLlineClr
 206 80558 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 207 8055c 6758      	    beq.s   RLEndLn
 208 8055e 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
 209 80562 67E4      	    beq.s   RLloop            	| Ignore LFs and get the next character
 210               	 .char:                      	| Normal character to be inserted into the buffer
 211 80564 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 212 80568 6CDE      	    bge.s   RLloop            	| If the buffer is full ignore the character
 213 8056a 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 214 8056c 5242      	    addq.w  #1, %d2           	| Increment character count
 215 8056e 6100 FF72 	    bsr.w   outChar          	| Echo the character
 216 80572 60D4      	    bra.s   RLloop            	| And get the next one
 217               	 RLBS:
 218 80574 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 219 80576 67D0      	    beq.s   RLloop            	| Then ignore it
 220 80578 6100 FF68 	    bsr.w   outChar          	| Backspace
 221 8057c 103C 0020 	    move.b  #' ', %d0
 222 80580 6100 FF60 	    bsr.w   outChar          	| Space
 223 80584 103C 0008 	    move.b  #BKSP, %d0
 224 80588 6100 FF58 	    bsr.w   outChar          	| Backspace
 225 8058c 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 226 8058e 5382      	    subq.l  #1, %d2           	| And current character count
 227 80590 60B6      	    bra.s   RLloop            	| And goto the next character
 228               	 RLlineClr:
 229 80592 4A42      	    tst     %d2               	| Anything to clear?
 230 80594 67B2      	    beq.s   RLloop            	| If not, fetch the next character
 231 80596 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 232               	 RLlineClrloop:
 233 80598 103C 0008 	    move.b  #BKSP, %d0
 234 8059c 6100 FF44 	    bsr.w   outChar          	| Backspace
 235 805a0 103C 0020 	    move.b  #' ', %d0
 236 805a4 6100 FF3C 	    bsr.w   outChar          	| Space
 237 805a8 103C 0008 	    move.b  #BKSP, %d0
 238 805ac 6100 FF34 	    bsr.w   outChar          	| Backspace
 239 805b0 5342      	    subq.w  #1, %d2          
 240 805b2 66E4      	    bne.s   RLlineClrloop   	| Go till the start of the line
 241 805b4 6092      	    bra.s   RLloop   
 242               	 RLEndLn:
 243 805b6 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 244 805ba 103C 000A 	    move.b  #LF, %d0
 245 805be 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 246 805c2 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 247 805c6 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 248 805c8 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 249 805cc 4E75      	    rts                      	| And return
 250               	
 251               	
 252               	| Convert line buffer to upper case
 253               	lineToUpper:
 254 805ce 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 254      FBAE 
 255               	 LUloop:
68K GAS  S68K_001.s 			page 6


 256 805d4 1010      	    move.b  (%a0), %d0        | Read in a character
 257 805d6 0C00 0061 	    cmp.b   #'a', %d0         
 258 805da 6D0A      	    blt.s   LUnext            | Is it less than lower-case 'a', then move on
 259 805dc 0C00 007A 	    cmp.b   #'z', %d0
 260 805e0 6E04      	    bgt.s   LUnext            | Is it greater than lower-case 'z', then move on
 261 805e2 0400 0020 	    sub.b   #0x20, %d0         | Then convert a to A, b to B, etc.
 262               	 LUnext:
 263 805e6 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 264 805e8 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
 265 805ea 4E75      	    rts
 266               	
 267               	|
 268               	| Parse Line
 269               	|
 270               	parseLine:
 271 805ec 48E7 0030 	    movem.l %a2-%a3, -(%SP)     | Save registers
 272 805f0 41F9 0007 	    lea     varLineBuf, %a0
 272      FBAE 
 273               	 PLfindCommand:
 274 805f6 1018      	    move.b  (%a0)+, %d0
 275 805f8 0C00 0020 	    cmp.b   #' ', %d0           | Ignore spaces
 276 805fc 6700 FFF8 	    beq.w   PLfindCommand    
 277 80600 0C00 0045 	    cmp.b   #'E', %d0           | Examine command
 278 80604 6700 0052 	    beq.w   .examine
 279 80608 0C00 0044 	    cmp.b   #'D', %d0           | Deposit command
 280 8060c 6700 004A 	    beq.w   .deposit
 281 80610 0C00 0052 	    cmp.b   #'R', %d0           | Run command
 282 80614 6700 0042 	    beq.w   .run
 283 80618 0C00 0048 	    cmp.b   #'H', %d0           | Help command
 284 8061c 6700 0016 	    beq.w   .help
 285 80620 0C00 0000 	    cmp.b   #0, %d0             | Ignore blank lines
 286 80624 6708      	    beq.s   .exit               
 287               	 .invalid:   
 288 80626 41FA 0133 	    lea     msgInvalidCommand, %a0
 289 8062a 6100 FEDE 	    bsr.w   printString
 290               	 .exit:
 291 8062e 4CDF 0C00 	    movem.l (%SP)+, %a2-%a3     | Restore registers
 292 80632 4E75      	    rts
 293               	
 294               	 .help:
 295 80634 41FA 013A 	    lea     msgHelp, %a0
 296 80638 6100 FED0 	    bsr.w   printString
 297 8063c 6000 FFF0 	    bra.w   .exit
 298               	 .invalidAddr:
 299 80640 41FA 0172 	    lea     msgInvalidAddress, %a0
 300 80644 6100 FEC4 	    bsr.w   printString
 301 80648 6000 FFE4 	    bra.w   .exit
 302               	 .invalidVal:
 303 8064c 41FA 016A 	    lea     msgInvalidValue, %a0
 304 80650 6100 FEB8 	    bsr.w   printString
 305 80654 6000 FFD8 	    bra.w   .exit
 306               	
 307               	.examine:
 308               	.deposit:
 309               	.run:
 310 80658 6000 FFD4 		bra	.exit
 311               		
68K GAS  S68K_001.s 			page 7


 312               	|||||
 313               	| Initializes the 68681 DUART port A as 9600 8N1 
 314               	initDuart:
 315 8065c 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 315      000F 0004 
 316 80664 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 316      000F 0004 
 317 8066c 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 317      000F 0004 
 318               	    
 319 80674 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 319      000F 0008 
 320 8067c 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 320      000F 0002 
 321 80684 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 321      000F 0000 
 322 8068c 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 322      000F 0000 
 323               	    
 324 80694 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 324      000F 0004 
 325               	
 326 8069c 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 326      000F 0014 
 327 806a4 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 327      000F 0014 
 328 806ac 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 328      000F 0014 
 329               	    
 330 806b4 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 330      000F 0012 
 331 806bc 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 331      000F 0010 
 332 806c4 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 332      000F 0010 
 333               	    
 334 806cc 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 334      000F 0014 
 335               		
 336 806d4 13FC 0000 		move.b	#0x00, OPC		 | Output port configuration (all bit are outs)
 336      000F 001A 
 337 806dc 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 337      000F 001E 
 338 806e4 4E75      	    rts    
 339               	
 340               	delay1Sec:
 341 806e6 203C 0003 		move.l	#200000, %d0	| rough count
 341      0D40 
 342               	delay1Loop:
 343 806ec 5380      		sub.l	#1, %d0			
 344 806ee 6600 FFFC 		bne		delay1Loop
 345 806f2 4E75      		rts
 346               	
 347               	READINLINE:	  
 348 806f4 5265 6164 		.ascii  "Reading in line"
 348      696E 6720 
 348      696E 206C 
68K GAS  S68K_001.s 			page 8


 348      696E 65
 349 80703 0D0A 00   		dc.b CR,LF,EOT
 350               	L_TO_UPPER_MSG:  
 351 80706 436F 6E76 		.ascii  "Convert line to upper case"
 351      6572 7420 
 351      6C69 6E65 
 351      2074 6F20 
 351      7570 7065 
 352 80720 0D0A 00   		dc.b CR,LF,EOT
 353               	WRITEOUTLINE:	  
 354 80723 5772 6974 		.ascii  "Writing out line"
 354      696E 6720 
 354      6F75 7420 
 354      6C69 6E65 
 355 80733 0D0A 00   		dc.b CR,LF,EOT
 356               	RAM_PASS_MSG:  
 357 80736 5241 4D20 		.ascii  "RAM Test Passed"
 357      5465 7374 
 357      2050 6173 
 357      7365 64
 358 80745 0D0A 00   		dc.b CR,LF,EOT
 359               	BANNER_MSG:	
 360 80748 5349 4D50 		.ascii  "SIMPLE-68008 CPU"
 360      4C45 2D36 
 360      3830 3038 
 360      2043 5055 
 361 80758 0D0A 00   		dc.b CR,LF,EOT
 362               	msgInvalidCommand:
 363 8075b 496E 7661 	    .ascii "Invalid Command"
 363      6C69 6420 
 363      436F 6D6D 
 363      616E 64
 364 8076a 0D0A 00   		dc.b CR,LF,EOT
 365               	CRLF_MSG:	
 366 8076d 0D0A 00   		dc.b CR,LF,EOT
 367               	msgHelp:
 368 80770 4176 6169 	    .ascii	"Available Commands: "
 368      6C61 626C 
 368      6520 436F 
 368      6D6D 616E 
 368      6473 3A20 
 369 80784 0D0A      		dc.b	CR,LF
 370 80786 2028 4529 	    .ascii	" (E)xamine    (D)eposit    (R)un     (H)elp"
 370      7861 6D69 
 370      6E65 2020 
 370      2020 2844 
 370      2965 706F 
 371 807b1 0D0A 00   		dc.b	CR,LF,EOT
 372               	msgInvalidAddress:
 373 807b4 00        	    dc.b	"Invalid Address"
 374 807b5 0D0A 00   		dc.b 	CR,LF,EOT
 375               	msgInvalidValue:
 376 807b8 496E 7661 	    .ascii	"Invalid Value"
 376      6C69 6420 
 376      5661 6C75 
 376      65
 377 807c5 0D0A 00   		dc.b	CR,LF,EOT
68K GAS  S68K_001.s 			page 9


 378               	msgPrompt:
 379 807c8 3E20      		.ascii "> "
 380 807ca 00        	    dc.b EOT
 381               		
 382               	MAX_LINE_LENGTH = 80
 383               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
68K GAS  S68K_001.s 			page 10


DEFINED SYMBOLS
          S68K_001.s:4      *ABS*:0000000000000000 RAM_START
          S68K_001.s:5      *ABS*:000000000007fffc STACK_END
          S68K_001.s:6      *ABS*:000000000007ffff RAM_END
          S68K_001.s:7      *ABS*:0000000000080000 ROM_START
          S68K_001.s:8      *ABS*:0000000000080400 ROM_CODE
          S68K_001.s:9      *ABS*:0000000000087fff ROM_END
          S68K_001.s:14     *ABS*:00000000000f0000 DUART
          S68K_001.s:15     *ABS*:00000000000f0000 MRA
          S68K_001.s:16     *ABS*:00000000000f0002 SRA
          S68K_001.s:17     *ABS*:00000000000f0002 CSRA
          S68K_001.s:18     *ABS*:00000000000f0004 CRA
          S68K_001.s:19     *ABS*:00000000000f0006 RBA
          S68K_001.s:20     *ABS*:00000000000f0006 TBA
          S68K_001.s:21     *ABS*:00000000000f0008 ACR
          S68K_001.s:22     *ABS*:00000000000f000a ISR
          S68K_001.s:23     *ABS*:00000000000f000a IMR
          S68K_001.s:24     *ABS*:00000000000f0010 MRB
          S68K_001.s:25     *ABS*:00000000000f0012 SRB
          S68K_001.s:26     *ABS*:00000000000f0012 CSRB
          S68K_001.s:27     *ABS*:00000000000f0014 CRB
          S68K_001.s:28     *ABS*:00000000000f0016 RBB
          S68K_001.s:29     *ABS*:00000000000f0016 TBB
          S68K_001.s:30     *ABS*:00000000000f0018 IVR
          S68K_001.s:31     *ABS*:00000000000f001a OPC
          S68K_001.s:32     *ABS*:00000000000f001a INU
          S68K_001.s:33     *ABS*:00000000000f001c OPS
          S68K_001.s:34     *ABS*:00000000000f001e OPR
          S68K_001.s:39     *ABS*:0000000000000007 BEL
          S68K_001.s:40     *ABS*:0000000000000008 BKSP
          S68K_001.s:41     *ABS*:0000000000000009 TAB
          S68K_001.s:42     *ABS*:000000000000000a LF
          S68K_001.s:43     *ABS*:000000000000000d CR
          S68K_001.s:44     *ABS*:000000000000001b ESC
          S68K_001.s:46     *ABS*:0000000000000003 CTRLC
          S68K_001.s:47     *ABS*:0000000000000018 CTRLX
          S68K_001.s:141    .text:00000000000804dc FERVR2
          S68K_001.s:79     .text:0000000000080444 loop1stLoc
          S68K_001.s:139    .text:00000000000804dc failBitTest
          S68K_001.s:94     .text:0000000000080464 loopAdrFill
          S68K_001.s:106    .text:0000000000080482 loopAdrCk
          S68K_001.s:140    .text:00000000000804dc failAdrTest
          S68K_001.s:314    .text:000000000008065c initDuart
          S68K_001.s:359    .text:0000000000080748 BANNER_MSG
          S68K_001.s:166    .text:000000000008050a printString1
          S68K_001.s:356    .text:0000000000080736 RAM_PASS_MSG
          S68K_001.s:128    .text:00000000000804b0 interpLoop
          S68K_001.s:378    .text:00000000000807c8 msgPrompt
          S68K_001.s:167    .text:000000000008050a printString
          S68K_001.s:196    .text:000000000008053c readLine
          S68K_001.s:253    .text:00000000000805ce lineToUpper
          S68K_001.s:270    .text:00000000000805ec parseLine
          S68K_001.s:340    .text:00000000000806e6 delay1Sec
          S68K_001.s:148    .text:00000000000804e2 outChar1
          S68K_001.s:149    .text:00000000000804e2 outChar
          S68K_001.s:157    .text:00000000000804f6 outChar2
          S68K_001.s:168    .text:000000000008050a PSloop
68K GAS  S68K_001.s 			page 11


          S68K_001.s:174    .text:0000000000080512 PSend
          S68K_001.s:182    .text:0000000000080514 inChar1
          S68K_001.s:183    .text:0000000000080514 inChar
          S68K_001.s:189    .text:0000000000080528 inChar2
                            *ABS*:000000000007fbae varLineBuf
          S68K_001.s:200    .text:0000000000080548 RLloop
          S68K_001.s:217    .text:0000000000080574 RLBS
          S68K_001.s:228    .text:0000000000080592 RLlineClr
          S68K_001.s:242    .text:00000000000805b6 RLEndLn
          S68K_001.s:210    .text:0000000000080564 .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_001.s:232    .text:0000000000080598 RLlineClrloop
          S68K_001.s:255    .text:00000000000805d4 LUloop
          S68K_001.s:262    .text:00000000000805e6 LUnext
          S68K_001.s:273    .text:00000000000805f6 PLfindCommand
          S68K_001.s:307    .text:0000000000080658 .examine
          S68K_001.s:308    .text:0000000000080658 .deposit
          S68K_001.s:309    .text:0000000000080658 .run
          S68K_001.s:294    .text:0000000000080634 .help
          S68K_001.s:290    .text:000000000008062e .exit
          S68K_001.s:287    .text:0000000000080626 .invalid
          S68K_001.s:362    .text:000000000008075b msgInvalidCommand
          S68K_001.s:367    .text:0000000000080770 msgHelp
          S68K_001.s:298    .text:0000000000080640 .invalidAddr
          S68K_001.s:372    .text:00000000000807b4 msgInvalidAddress
          S68K_001.s:302    .text:000000000008064c .invalidVal
          S68K_001.s:375    .text:00000000000807b8 msgInvalidValue
          S68K_001.s:342    .text:00000000000806ec delay1Loop
          S68K_001.s:347    .text:00000000000806f4 READINLINE
          S68K_001.s:350    .text:0000000000080706 L_TO_UPPER_MSG
          S68K_001.s:353    .text:0000000000080723 WRITEOUTLINE
          S68K_001.s:365    .text:000000000008076d CRLF_MSG

UNDEFINED SYMBOLS
EOT
Invalid Address
