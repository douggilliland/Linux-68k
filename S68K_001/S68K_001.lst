68K GAS  S68K_001.s 			page 1


   1               	| Borrowed init code from 
   2               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   3               	
   4               	RAM_START	= 0x00000	| Beginning of the SRAM
   5               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   6               	RAM_END		= 0x7FFFF	| 512KB SRAM
   7               	ROM_START	= 0x80000	| ROM start
   8               	ROM_CODE	= ROM_START+1024| Skip vector table
   9               	ROM_END		= 0x87FFF	| End of 32KB EPROM
  10               	
  11               	|||||||||||||||||||||||||||||||||
  12               	| 68681 Duart Register Addresses
  13               	|
  14               	DUART = 0x0F0000	  | Base Addr of DUART
  15               	MRA   = DUART+0		  | Mode Register A           (R/W)
  16               	SRA   = DUART+2       | Status Register A         (r)
  17               	CSRA  = DUART+2       | Clock Select Register A   (w)
  18               	CRA   = DUART+4       | Commands Register A       (w)
  19               	RBA   = DUART+6       | Receiver Buffer A         (r)
  20               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  21               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  22               	ISR   = DUART+10      | Interrupt Status Register (R)
  23               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  24               	MRB   = DUART+16      | Mode Register B           (R/W)
  25               	SRB   = DUART+18      | Status Register B         (R)
  26               	CSRB  = DUART+18      | Clock Select Register B   (W)
  27               	CRB   = DUART+20      | Commands Register B       (W)
  28               	RBB   = DUART+22      | Reciever Buffer B         (R)
  29               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  30               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  31               	OPC   = DUART+26      | Output port config        (W)
  32               	INU   = DUART+26      | Input port (unlatched)    (R)
  33               	OPS   = DUART+28      | Output port Set           (W)
  34               	OPR   = DUART+30      | Output port Clear         (W)
  35               	
  36               	||||||||||||||||||||||||||||||||||
  37               	| ASCII Control Characters
  38               	|
  39               	BEL   = 0x07
  40               	BKSP  = 0x08       | CTRL-H
  41               	TAB   = 0x09
  42               	LF    = 0x0A
  43               	CR    = 0x0D
  44               	ESC   = 0x1B
  45               	
  46               	CTRLC	=	0x03
  47               	CTRLX	=	0x18     | Line Clear
  48               	
  49 0000 0000 0000 		.ORG	ROM_START
  49      0000 0000 
  49      0000 0000 
  49      0000 0000 
  49      0000 0000 
  50               	
  51               	| FIRST 8 bytes loaded after reset |
  52 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  53 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
68K GAS  S68K_001.s 			page 2


  54               	
  55 80008 0000 0000 	        .ORG ROM_CODE
  55      0000 0000 
  55      0000 0000 
  55      0000 0000 
  55      0000 0000 
  56 80400 4E71      		nop
  57 80402 4FF9 0007 		lea			STACK_END,%sp
  57      FFFC 
  58 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  58      0008 0000 
  59 80410 4E71      		nop
  60               	|
  61               	| Test the first two SRAM location
  62               	|
  63 80412 203C DEAD 		move.l	#0xDEADBEEF, %d0	| Test Pattern #1
  63      BEEF 
  64 80418 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  65 8041c 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  66 8041e 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  67 80420 B042      		cmp			%d2, %d0
  68 80422 6600 0104 		bne			FERVR2						
  69 80426 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  69      AAAA 
  70 8042c 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  71 80430 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  72 80432 2611      		move.l	(%a1), %d3				| Read back
  73 80434 B243      		cmp			%d3, %d1
  74 80436 6600 00F0 		bne			FERVR2
  75 8043a 4E71      		nop
  76               	| Test bits of first location (as bytes)
  77 8043c 7001      		move.l	#1, %d0
  78 8043e 207C 0000 		move.l	#0, %a0
  78      0000 
  79               	loop1stLoc:
  80 80444 1080      		move.b	%d0, (%a0)
  81 80446 1210      		move.b	(%a0), %d1
  82 80448 B200      		cmp.b		%d0, %d1
  83 8044a 6600 00E2 		bne			failBitTest
  84 8044e E348      		lsl			#1, %d0
  85 80450 0C80 0000 		cmp.l		#0x00000100, %d0
  85      0100 
  86 80456 6600 FFEC 		bne			loop1stLoc
  87               	|
  88               	| Test all address lines, 512KB SRAM
  89               	| Write incrementing pattern to data bits
  90               	|
  91 8045a 7001      		move.l	#1, %d0		| Fill pattern
  92 8045c 7401      		move.l	#1, %d2
  93 8045e 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
  93      0001 
  94               	loopAdrFill:
  95 80464 1080      		move.b	%d0,(%a0)	| Do the write
  96 80466 5240      		addq		#1, %d0		| Increment the pattern
  97 80468 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
  98 8046a E38A      		lsl.l		#1, %d2		| Shift temp addr
  99 8046c 2042      		move.l	%d2, %a0	| Put back into addr reg
68K GAS  S68K_001.s 			page 3


 100 8046e 0C82 0008 		cmp.l		#0x00080000,%d2
 100      0000 
 101 80474 6600 FFEE 		bne			loopAdrFill
 102               	| Check
 103 80478 7001      		move.l	#1, %d0
 104 8047a 7401      		move.l	#1, %d2
 105 8047c 207C 0000 		move.l	#1, %a0
 105      0001 
 106               	loopAdrCk:
 107 80482 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 108 80484 B200      		cmp.b		%d0, %d1
 109 80486 6600 00AC 		bne			failAdrTest
 110 8048a 5240      		addq		#1, %d0
 111 8048c 2408      		move.l	%a0, %d2 
 112 8048e E38A      		lsl.l		#1, %d2
 113 80490 2042      		move.l	%d2, %a0
 114 80492 0C82 0008 		cmp.l		#0x00080000,%d2
 114      0000 
 115 80498 6600 FFE8 		bne			loopAdrCk
 116               	|
 117               	| Done with address test of SRAM
 118               	|
 119 8049c 4EBA 01A6 		jsr     initDuart       | Setup the serial port
 120               		
 121 804a0 41FA 0289 		lea		BANNER_MSG, %a0
 122 804a4 4EBA 00BC 		jsr		printString1
 123 804a8 41FA 027E 		lea		CRLF_MSG, %a0
 124 804ac 4EBA 00B4 		jsr		printString1
 125 804b0 41FA 0266 		lea		RAM_PASS_MSG, %a0
 126 804b4 4EBA 00AC 		jsr		printString1
 127 804b8 41FA 026E 		lea		CRLF_MSG, %a0
 128 804bc 4EBA 00A4 		jsr		printString1
 129               	|
 130 804c0 4EBA 00AA 		jsr		inChar
 131 804c4 4EBA 0074 		jsr		outChar
 132               	|
 133 804c8 41FA 0212 		lea		READINLINE, %a0
 134 804cc 4EBA 0094 		jsr		printString1
 135 804d0 41FA 0256 		lea		CRLF_MSG, %a0
 136 804d4 4EBA 008C 		jsr		printString1
 137 804d8 4EBA 00BA 		jsr		readLine
 138 804dc 41FA 020E 		lea		LINETOUPPER, %a0
 139 804e0 4EBA 0080 		jsr		printString1
 140 804e4 41FA 0242 		lea		CRLF_MSG, %a0
 141 804e8 4EBA 0078 		jsr		printString1
 142 804ec 4EBA 0138 		jsr		lineToUpper
 143 804f0 41FA 0215 		lea		WRITEOUTLINE,%a0
 144 804f4 4EBA 006C 		jsr		printString1
 145 804f8 41FA 022E 		lea		CRLF_MSG, %a0
 146 804fc 4EBA 0064 		jsr		printString1
 147 80500 41F9 0007 		lea     varLineBuf, %a0
 147      FBAE 
 148 80506 4EBA 005A 		jsr		printString1
 149               		
 150               	FERVR:
 151 8050a 4E71      		nop
 152 8050c 13FC 0004 		move.b	#0x04, OPS		| Blink LED on DUART Out2
68K GAS  S68K_001.s 			page 4


 152      000F 001C 
 153 80514 4EBA 01B8 		jsr		delay1Sec
 154 80518 13FC 0004 		move.b	#0x04, OPR
 154      000F 001E 
 155 80520 4EBA 01AC 		jsr		delay1Sec
 156 80524 4EFA FFE4 		jmp		FERVR
 157               	|
 158               	FERVR2:
 159 80528 4E71      		nop
 160 8052a 4EFA FFFC 		jmp	FERVR2
 161               	failBitTest:
 162 8052e 4E71      		nop
 163 80530 4EFA FFFC 		jmp	failBitTest
 164               	failAdrTest:
 165 80534 4E71      		nop
 166 80536 4EFA FFFC 		jmp	failAdrTest
 167               	
 168               	|||||
 169               	| Writes a character to Port A, blocking if not ready (Full buffer)
 170               	|  - Takes a character in D0
 171               	outChar1:
 172               	outChar:
 173 8053a 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 173      000F 0002 
 174 80542 6700 FFF6 	    beq     outChar1     
 175 80546 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 175      0006 
 176 8054c 4E75      	    rts
 177               	
 178               	| Writes a character to Port A, blocking if not ready (Full buffer)
 179               	|  - Takes a character in D0
 180               	outChar2:
 181 8054e 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 181      000F 0012 
 182 80556 6700 FFF6 	    beq     outChar2     
 183 8055a 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 183      0016 
 184 80560 4E75      	    rts
 185               	
 186               	******
 187               	* Print a null terminated string
 188               	*
 189               	printString1:
 190               	printString:
 191               	 PSloop:
 192 80562 1018      	    move.b  (%a0)+, %d0  | Read in character
 193 80564 6704      	    beq.s   PSend         | Check for the null
 194               	    
 195 80566 61D2      	    bsr.s   outChar      | Otherwise write the character
 196 80568 60F8      	    bra.s   PSloop        | And continue
 197               	PSend:
 198 8056a 4E75      	    rts
 199               	
 200               	
 201               	|||||
 202               	| Reads in a character from Port A, blocking if none available
 203               	|  - Returns character in D0
68K GAS  S68K_001.s 			page 5


 204               	|    
 205               	inChar1:
 206               	inChar:
 207 8056c 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 207      000F 0002 
 208 80574 6700 FFF6 	    beq     inChar1
 209 80578 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 209      0006 
 210 8057e 4E75      	    rts
 211               	
 212               	inChar2:
 213 80580 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 213      000F 0012 
 214 80588 6700 FFF6 	    beq     inChar2
 215 8058c 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 215      0016 
 216 80592 4E75      	    rts
 217               	
 218               	| Read in a line into the line buffer
 219               	readLine:
 220 80594 48E7 2020 	    movem.l %d2/%a2, -(%SP)     | Save changed registers
 221 80598 45F9 0007 	    lea     varLineBuf, %a2   	| Start of the lineBuffer
 221      FBAE 
 222 8059e B542      	    eor.w   %d2, %d2           	| Clear the character counter
 223               	 .loop:
 224 805a0 6100 FFCA 	    bsr.w   inChar           	| Read a character from the serial port
 225 805a4 0C00 0008 	    cmp.b   #BKSP, %d0        	| Is it a backspace?
 226 805a8 6722      	    beq.s   .backspace
 227 805aa 0C00 0018 	    cmp.b   #CTRLX, %d0       	| Is it Ctrl-H (Line Clear)?
 228 805ae 673A      	    beq.s   .lineclear
 229 805b0 0C00 000D 	    cmp.b   #CR, %d0          	| Is it a carriage return?
 230 805b4 6758      	    beq.s   .endline
 231 805b6 0C00 000A 	    cmp.b   #LF, %d0          	| Is it anything else but a LF?
 232 805ba 67E4      	    beq.s   .loop            	| Ignore LFs and get the next character
 233               	 .char:                      	| Normal character to be inserted into the buffer
 234 805bc 0C42 0050 	    cmp.w   #MAX_LINE_LENGTH, %d2
 235 805c0 6CDE      	    bge.s   .loop            	| If the buffer is full ignore the character
 236 805c2 14C0      	    move.b  %d0, (%a2)+        	| Otherwise store the character
 237 805c4 5242      	    addq.w  #1, %d2           	| Increment character count
 238 805c6 6100 FF72 	    bsr.w   outChar          	| Echo the character
 239 805ca 60D4      	    bra.s   .loop            	| And get the next one
 240               	 .backspace:
 241 805cc 4A42      	    tst.w   %d2               	| Are we at the beginning of the line?
 242 805ce 67D0      	    beq.s   .loop            	| Then ignore it
 243 805d0 6100 FF68 	    bsr.w   outChar          	| Backspace
 244 805d4 103C 0020 	    move.b  #' ', %d0
 245 805d8 6100 FF60 	    bsr.w   outChar          	| Space
 246 805dc 103C 0008 	    move.b  #BKSP, %d0
 247 805e0 6100 FF58 	    bsr.w   outChar          	| Backspace
 248 805e4 538A      	    subq.l  #1, %a2           	| Move back in the buffer
 249 805e6 5382      	    subq.l  #1, %d2           	| And current character count
 250 805e8 60B6      	    bra.s   .loop            	| And goto the next character
 251               	 .lineclear:
 252 805ea 4A42      	    tst     %d2               	| Anything to clear?
 253 805ec 67B2      	    beq.s   .loop            	| If not, fetch the next character
 254 805ee 95C2      	    suba.l  %d2, %a2           	| Return to the start of the buffer
 255               	 .lineclearloop:
68K GAS  S68K_001.s 			page 6


 256 805f0 103C 0008 	    move.b  #BKSP, %d0
 257 805f4 6100 FF44 	    bsr.w   outChar          	| Backspace
 258 805f8 103C 0020 	    move.b  #' ', %d0
 259 805fc 6100 FF3C 	    bsr.w   outChar          	| Space
 260 80600 103C 0008 	    move.b  #BKSP, %d0
 261 80604 6100 FF34 	    bsr.w   outChar          	| Backspace
 262 80608 5342      	    subq.w  #1, %d2          
 263 8060a 66E4      	    bne.s   .lineclearloop   	| Go till the start of the line
 264 8060c 6092      	    bra.s   .loop   
 265               	 .endline:
 266 8060e 6100 FF2A 	    bsr.w   outChar          	| Echo the CR
 267 80612 103C 000A 	    move.b  #LF, %d0
 268 80616 6100 FF22 	    bsr.w   outChar          	| Line feed to be safe
 269 8061a 14BC 0000 	    move.b  #0, (%a2)         	| Terminate the line (Buffer is longer than max to allow this at ful
 270 8061e 204A      	    movea.l %a2, %a0           	| Ready the pointer to return (if needed)
 271 80620 4CDF 0404 	    movem.l (%SP)+, %d2/%a2     | Restore registers
 272 80624 4E75      	    rts                      	| And return
 273               	
 274               	
 275               	| Convert line buffer to upper case
 276               	lineToUpper:
 277 80626 41F9 0007 	    lea     varLineBuf, %a0   | Get the start of the line buffer
 277      FBAE 
 278               	 LUloop:
 279 8062c 1010      	    move.b  (%a0), %d0        | Read in a character
 280 8062e 0C00 0061 	    cmp.b   #'a', %d0         
 281 80632 6D0C      	    blt.s   LUnext2            | Is it less than lower-case 'a', then move on
 282 80634 0C00 007A 	    cmp.b   #'z', %d0
 283 80638 6E06      	    bgt.s   LUnext2            | Is it greater than lower-case 'z', then move on
 284 8063a 0400 0000 	    sub.b   #$20, %d0         | Then convert a to A, b to B, etc.
 285               	 LUnext:
 286 8063e 10C0      	    move.b  %d0, (%a0)+       | Store the character back into a0, and move to the next
 287               	LUnext2:
 288 80640 66EA      	    bne.s   LUloop             | Keep going till we hit a null terminator
 289 80642 4E75      	    rts
 290               	
 291               	
 292               	|||||
 293               	| Initializes the 68681 DUART port A as 9600 8N1 
 294               	initDuart:
 295 80644 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 295      000F 0004 
 296 8064c 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 296      000F 0004 
 297 80654 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 297      000F 0004 
 298               	    
 299 8065c 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 299      000F 0008 
 300 80664 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 300      000F 0002 
 301 8066c 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 301      000F 0000 
 302 80674 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 302      000F 0000 
 303               	    
 304 8067c 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
68K GAS  S68K_001.s 			page 7


 304      000F 0004 
 305               	
 306 80684 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 306      000F 0014 
 307 8068c 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 307      000F 0014 
 308 80694 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 308      000F 0014 
 309               	    
 310 8069c 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 310      000F 0012 
 311 806a4 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 311      000F 0010 
 312 806ac 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 312      000F 0010 
 313               	    
 314 806b4 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 314      000F 0014 
 315               		
 316 806bc 13FC 00FC 		move.b	#0xFC, OPC		 | Output port configuration (all bit are outs)
 316      000F 001A 
 317 806c4 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 317      000F 001E 
 318 806cc 4E75      	    rts    
 319               	
 320               	delay1Sec:
 321 806ce 203C 0003 		move.l	#200000, %d0	| rough count
 321      0D40 
 322               	delay1Loop:
 323 806d4 5380      		sub.l	#1, %d0			
 324 806d6 6600 FFFC 		bne		delay1Loop
 325 806da 4E75      		rts
 326               	
 327 806dc 5265 6164 	READINLINE:	  .ascii  "Reading in line"
 327      696E 6720 
 327      696E 206C 
 327      696E 65
 328 806eb 00        				DC.B    EOT
 329 806ec 436F 6E76 	LINETOUPPER:  .ascii  "Convert line to upper case"
 329      6572 7420 
 329      6C69 6E65 
 329      2074 6F20 
 329      7570 7065 
 330 80706 00        				DC.B    EOT
 331 80707 5772 6974 	WRITEOUTLINE:	  .ascii  "Writing out line"
 331      696E 6720 
 331      6F75 7420 
 331      6C69 6E65 
 332 80717 00        				DC.B    EOT
 333 80718 5241 4D20 	RAM_PASS_MSG:  .ascii  "RAM Test Passed"
 333      5465 7374 
 333      2050 6173 
 333      7365 64
 334 80727 00        				DC.B    EOT
 335 80728 0A0D 00   	CRLF_MSG:	dc.b 0x0a,0xd,0
 336 8072b 5349 4D50 	BANNER_MSG:	.ascii  "SIMPLE-68008 CPU"
 336      4C45 2D36 
68K GAS  S68K_001.s 			page 8


 336      3830 3038 
 336      2043 5055 
 337 8073b 00        				DC.B    EOT
 338               	
 339               	MAX_LINE_LENGTH = 80
 340               	varLineBuf = RAM_END+1-1024-MAX_LINE_LENGTH-2
68K GAS  S68K_001.s 			page 9


DEFINED SYMBOLS
          S68K_001.s:4      *ABS*:0000000000000000 RAM_START
          S68K_001.s:5      *ABS*:000000000007fffc STACK_END
          S68K_001.s:6      *ABS*:000000000007ffff RAM_END
          S68K_001.s:7      *ABS*:0000000000080000 ROM_START
          S68K_001.s:8      *ABS*:0000000000080400 ROM_CODE
          S68K_001.s:9      *ABS*:0000000000087fff ROM_END
          S68K_001.s:14     *ABS*:00000000000f0000 DUART
          S68K_001.s:15     *ABS*:00000000000f0000 MRA
          S68K_001.s:16     *ABS*:00000000000f0002 SRA
          S68K_001.s:17     *ABS*:00000000000f0002 CSRA
          S68K_001.s:18     *ABS*:00000000000f0004 CRA
          S68K_001.s:19     *ABS*:00000000000f0006 RBA
          S68K_001.s:20     *ABS*:00000000000f0006 TBA
          S68K_001.s:21     *ABS*:00000000000f0008 ACR
          S68K_001.s:22     *ABS*:00000000000f000a ISR
          S68K_001.s:23     *ABS*:00000000000f000a IMR
          S68K_001.s:24     *ABS*:00000000000f0010 MRB
          S68K_001.s:25     *ABS*:00000000000f0012 SRB
          S68K_001.s:26     *ABS*:00000000000f0012 CSRB
          S68K_001.s:27     *ABS*:00000000000f0014 CRB
          S68K_001.s:28     *ABS*:00000000000f0016 RBB
          S68K_001.s:29     *ABS*:00000000000f0016 TBB
          S68K_001.s:30     *ABS*:00000000000f0018 IVR
          S68K_001.s:31     *ABS*:00000000000f001a OPC
          S68K_001.s:32     *ABS*:00000000000f001a INU
          S68K_001.s:33     *ABS*:00000000000f001c OPS
          S68K_001.s:34     *ABS*:00000000000f001e OPR
          S68K_001.s:39     *ABS*:0000000000000007 BEL
          S68K_001.s:40     *ABS*:0000000000000008 BKSP
          S68K_001.s:41     *ABS*:0000000000000009 TAB
          S68K_001.s:42     *ABS*:000000000000000a LF
          S68K_001.s:43     *ABS*:000000000000000d CR
          S68K_001.s:44     *ABS*:000000000000001b ESC
          S68K_001.s:46     *ABS*:0000000000000003 CTRLC
          S68K_001.s:47     *ABS*:0000000000000018 CTRLX
          S68K_001.s:158    .text:0000000000080528 FERVR2
          S68K_001.s:79     .text:0000000000080444 loop1stLoc
          S68K_001.s:161    .text:000000000008052e failBitTest
          S68K_001.s:94     .text:0000000000080464 loopAdrFill
          S68K_001.s:106    .text:0000000000080482 loopAdrCk
          S68K_001.s:164    .text:0000000000080534 failAdrTest
          S68K_001.s:294    .text:0000000000080644 initDuart
          S68K_001.s:336    .text:000000000008072b BANNER_MSG
          S68K_001.s:189    .text:0000000000080562 printString1
          S68K_001.s:335    .text:0000000000080728 CRLF_MSG
          S68K_001.s:333    .text:0000000000080718 RAM_PASS_MSG
          S68K_001.s:206    .text:000000000008056c inChar
          S68K_001.s:172    .text:000000000008053a outChar
          S68K_001.s:327    .text:00000000000806dc READINLINE
          S68K_001.s:219    .text:0000000000080594 readLine
          S68K_001.s:329    .text:00000000000806ec LINETOUPPER
          S68K_001.s:276    .text:0000000000080626 lineToUpper
          S68K_001.s:331    .text:0000000000080707 WRITEOUTLINE
                            *ABS*:000000000007fbae varLineBuf
          S68K_001.s:150    .text:000000000008050a FERVR
          S68K_001.s:320    .text:00000000000806ce delay1Sec
68K GAS  S68K_001.s 			page 10


          S68K_001.s:171    .text:000000000008053a outChar1
          S68K_001.s:180    .text:000000000008054e outChar2
          S68K_001.s:190    .text:0000000000080562 printString
          S68K_001.s:191    .text:0000000000080562 PSloop
          S68K_001.s:197    .text:000000000008056a PSend
          S68K_001.s:205    .text:000000000008056c inChar1
          S68K_001.s:212    .text:0000000000080580 inChar2
          S68K_001.s:223    .text:00000000000805a0 .loop
          S68K_001.s:240    .text:00000000000805cc .backspace
          S68K_001.s:251    .text:00000000000805ea .lineclear
          S68K_001.s:265    .text:000000000008060e .endline
          S68K_001.s:233    .text:00000000000805bc .char
                            *ABS*:0000000000000050 MAX_LINE_LENGTH
          S68K_001.s:255    .text:00000000000805f0 .lineclearloop
          S68K_001.s:278    .text:000000000008062c LUloop
          S68K_001.s:287    .text:0000000000080640 LUnext2
          S68K_001.s:285    .text:000000000008063e LUnext
          S68K_001.s:322    .text:00000000000806d4 delay1Loop

UNDEFINED SYMBOLS
$20
EOT
