68K GAS  S68K_001.s 			page 1


   1               	| Borrowed init code from 
   2               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   3               	
   4               	RAM_START	= 0x00000	| Beginning of the SRAM
   5               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   6               	RAM_END		= 0x7FFFF	| 512KB SRAM
   7               	ROM_START	= 0x80000	| ROM start
   8               	ROM_CODE	= ROM_START+1024| Skip vector table
   9               	ROM_END		= 0x87FFF	| End of 32KB EPROM
  10               	
  11               	|||||||||||||||||||||||||||||||||
  12               	| 68681 Duart Register Addresses
  13               	|
  14               	DUART = 0x0F0000	  | Base Addr of DUART
  15               	MRA   = DUART+0		  | Mode Register A           (R/W)
  16               	SRA   = DUART+2       | Status Register A         (r)
  17               	CSRA  = DUART+2       | Clock Select Register A   (w)
  18               	CRA   = DUART+4       | Commands Register A       (w)
  19               	RBA   = DUART+6       | Receiver Buffer A         (r)
  20               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  21               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  22               	ISR   = DUART+10      | Interrupt Status Register (R)
  23               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  24               	MRB   = DUART+16      | Mode Register B           (R/W)
  25               	SRB   = DUART+18      | Status Register B         (R)
  26               	CSRB  = DUART+18      | Clock Select Register B   (W)
  27               	CRB   = DUART+20      | Commands Register B       (W)
  28               	RBB   = DUART+22      | Reciever Buffer B         (R)
  29               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  30               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  31               	OPC   = DUART+26      | Output port config        (W)
  32               	INU   = DUART+26      | Input port (unlatched)    (R)
  33               	OPS   = DUART+28      | Output port Set           (W)
  34               	OPR   = DUART+30      | Output port Clear         (W)
  35               	
  36               	||||||||||||||||||||||||||||||||||
  37               	| ASCII Control Characters
  38               	|
  39               	BEL   = 0x07
  40               	BKSP  = 0x08       | CTRL-H
  41               	TAB   = 0x09
  42               	LF    = 0x0A
  43               	CR    = 0x0D
  44               	ESC   = 0x1B
  45               	
  46               	CTRLC	=	0x03
  47               	CTRLX	=	0x18     | Line Clear
  48               	
  49 0000 0000 0000 		.ORG	ROM_START
  49      0000 0000 
  49      0000 0000 
  49      0000 0000 
  49      0000 0000 
  50               	
  51               	| FIRST 8 bytes loaded after reset |
  52 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  53 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
68K GAS  S68K_001.s 			page 2


  54               	
  55 80008 0000 0000 	        .ORG ROM_CODE
  55      0000 0000 
  55      0000 0000 
  55      0000 0000 
  55      0000 0000 
  56 80400 4E71      		nop
  57 80402 4FF9 0007 		lea			STACK_END,%sp
  57      FFFC 
  58 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  58      0008 0000 
  59 80410 4E71      		nop
  60               	|
  61               	| Test the first two SRAM location
  62               	|
  63 80412 203C DEAD 		move.l	#0xDEADBEEF, %d0	| Test Pattern #1
  63      BEEF 
  64 80418 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  65 8041c 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  66 8041e 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  67 80420 B042      		cmp			%d2, %d0
  68 80422 6600 00BA 		bne			FERVR2						
  69 80426 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  69      AAAA 
  70 8042c 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  71 80430 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  72 80432 2611      		move.l	(%a1), %d3				| Read back
  73 80434 B243      		cmp			%d3, %d1
  74 80436 6600 00A6 		bne			FERVR2
  75 8043a 4E71      		nop
  76               	| Test bits of first location (as bytes)
  77 8043c 7001      		move.l	#1, %d0
  78 8043e 207C 0000 		move.l	#0, %a0
  78      0000 
  79               	loop1stLoc:
  80 80444 1080      		move.b	%d0, (%a0)
  81 80446 1210      		move.b	(%a0), %d1
  82 80448 B200      		cmp.b		%d0, %d1
  83 8044a 6600 0098 		bne			failBitTest
  84 8044e E348      		lsl			#1, %d0
  85 80450 0C80 0000 		cmp.l		#0x00000100, %d0
  85      0100 
  86 80456 6600 FFEC 		bne			loop1stLoc
  87               	|
  88               	| Test all address lines, 512KB SRAM
  89               	| Write incrementing pattern to data bits
  90               	|
  91 8045a 7001      		move.l	#1, %d0		| Fill pattern
  92 8045c 7401      		move.l	#1, %d2
  93 8045e 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
  93      0001 
  94               	loopAdrFill:
  95 80464 1080      		move.b	%d0,(%a0)	| Do the write
  96 80466 5240      		addq		#1, %d0		| Increment the pattern
  97 80468 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
  98 8046a E38A      		lsl.l		#1, %d2		| Shift temp addr
  99 8046c 2042      		move.l	%d2, %a0	| Put back into addr reg
68K GAS  S68K_001.s 			page 3


 100 8046e 0C82 0008 		cmp.l		#0x00080000,%d2
 100      0000 
 101 80474 6600 FFEE 		bne			loopAdrFill
 102               	| Check
 103 80478 7001      		move.l	#1, %d0
 104 8047a 7401      		move.l	#1, %d2
 105 8047c 207C 0000 		move.l	#1, %a0
 105      0001 
 106               	loopAdrCk:
 107 80482 1210      		move.b	(%a0), %d1	| Do the read (as a byte)
 108 80484 B200      		cmp.b		%d0, %d1
 109 80486 6600 0062 		bne			failAdrTest
 110 8048a 5240      		addq		#1, %d0
 111 8048c 2408      		move.l	%a0, %d2 
 112 8048e E38A      		lsl.l		#1, %d2
 113 80490 2042      		move.l	%d2, %a0
 114 80492 0C82 0008 		cmp.l		#0x00080000,%d2
 114      0000 
 115 80498 6600 FFE8 		bne			loopAdrCk
 116               	|
 117               	| Done with address test of SRAM
 118               	|
 119 8049c 4EBA 00AC 		jsr     initDuart       | Setup the serial port
 120               		
 121 804a0 41FA 0153 		lea		BANNER_MSG, %a0
 122 804a4 4EBA 0072 		jsr		printString1
 123 804a8 41FA 0148 		lea		CRLF_MSG, %a0
 124 804ac 4EBA 006A 		jsr		printString1
 125 804b0 41FA 0130 		lea		RAM_PASS_MSG, %a0
 126 804b4 4EBA 0062 		jsr		printString1
 127 804b8 41FA 0138 		lea		CRLF_MSG, %a0
 128 804bc 4EBA 005A 		jsr		printString1
 129               	FERVR:
 130 804c0 4E71      		nop
 131 804c2 13FC 0004 		move.b	#0x04, OPS		| Blink LED on DUART Out2
 131      000F 001C 
 132 804ca 4EBA 0108 		jsr		delay1Sec
 133 804ce 13FC 0004 		move.b	#0x04, OPR
 133      000F 001E 
 134 804d6 4EBA 00FC 		jsr		delay1Sec
 135 804da 4EFA FFE4 		jmp		FERVR
 136               	|
 137               	FERVR2:
 138 804de 4E71      		nop
 139 804e0 4EFA FFFC 		jmp	FERVR2
 140               	failBitTest:
 141 804e4 4E71      		nop
 142 804e6 4EFA FFFC 		jmp	failBitTest
 143               	failAdrTest:
 144 804ea 4E71      		nop
 145 804ec 4EFA FFFC 		jmp	failAdrTest
 146               	
 147               	|||||
 148               	| Writes a character to Port A, blocking if not ready (Full buffer)
 149               	|  - Takes a character in D0
 150               	outChar1:
 151               	outChar:
68K GAS  S68K_001.s 			page 4


 152 804f0 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 152      000F 0002 
 153 804f8 6700 FFF6 	    beq     outChar1     
 154 804fc 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 154      0006 
 155 80502 4E75      	    rts
 156               	
 157               	| Writes a character to Port A, blocking if not ready (Full buffer)
 158               	|  - Takes a character in D0
 159               	outChar2:
 160 80504 0839 0002 	    btst    #2, SRB      | Check if transmitter ready bit is set
 160      000F 0012 
 161 8050c 6700 FFF6 	    beq     outChar2     
 162 80510 13C0 000F 	    move.b  %d0, TBB      | Transmit Character
 162      0016 
 163 80516 4E75      	    rts
 164               	
 165               	******
 166               	* Print a null terminated string
 167               	*
 168               	printString1:
 169               	printString:
 170               	 .loop:
 171 80518 1018      	    move.b  (%a0)+, %d0  | Read in character
 172 8051a 6704      	    beq.s   .end         | Check for the null
 173               	    
 174 8051c 61D2      	    bsr.s   outChar      | Otherwise write the character
 175 8051e 60F8      	    bra.s   .loop        | And continue
 176               	 .end:
 177 80520 4E75      	    rts
 178               	
 179               	
 180               	|||||
 181               	| Reads in a character from Port A, blocking if none available
 182               	|  - Returns character in D0
 183               	|    
 184               	inChar1:
 185               	inChar:
 186 80522 0839 0000 	    btst    #0,  SRA	| Check if receiver ready bit is set
 186      000F 0002 
 187 8052a 6700 FFF6 	    beq     inChar1
 188 8052e 1039 000F 	    move.b  RBA, %d0	| Read Character into D0
 188      0006 
 189 80534 4E75      	    rts
 190               	
 191               	inChar2:
 192 80536 0839 0000 	    btst    #0,  SRB	| Check if receiver ready bit is set
 192      000F 0012 
 193 8053e 6700 FFF6 	    beq     inChar2
 194 80542 1039 000F 	    move.b  RBB, %d0	| Read Character into D0
 194      0016 
 195 80548 4E75      	    rts
 196               	
 197               	|||||
 198               	| Initializes the 68681 DUART port A as 9600 8N1 
 199               	initDuart:
 200 8054a 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
68K GAS  S68K_001.s 			page 5


 200      000F 0004 
 201 80552 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 201      000F 0004 
 202 8055a 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 202      000F 0004 
 203               	    
 204 80562 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 204      000F 0008 
 205 8056a 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 205      000F 0002 
 206 80572 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 206      000F 0000 
 207 8057a 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 207      000F 0000 
 208               	    
 209 80582 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 209      000F 0004 
 210               	
 211 8058a 13FC 0030 	    move.b  #0x30, CRB       | Reset Transmitter
 211      000F 0014 
 212 80592 13FC 0020 	    move.b  #0x20, CRB       | Reset Receiver
 212      000F 0014 
 213 8059a 13FC 0010 	    move.b  #0x10, CRB       | Reset Mode Register Pointer
 213      000F 0014 
 214               	    
 215 805a2 13FC 00BB 	    move.b  #0xBB, CSRB      | Set Tx and Rx rates to 9600
 215      000F 0012 
 216 805aa 13FC 0093 	    move.b  #0x93, MRB       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 216      000F 0010 
 217 805b2 13FC 0007 	    move.b  #0x07, MRB       | Normal Mode, Not CTS/RTS, 1 stop bit
 217      000F 0010 
 218               	    
 219 805ba 13FC 0005 	    move.b  #0x05, CRB       | Enable Transmit/Recieve
 219      000F 0014 
 220               		
 221 805c2 13FC 00FC 		move.b	#0xFC, OPC		 | Output port configuration (all bit are outs)
 221      000F 001A 
 222 805ca 13FC 00FC 		move.b	#0xFC, OPR		 | Clear all outputs
 222      000F 001E 
 223 805d2 4E75      	    rts    
 224               	
 225               	delay1Sec:
 226 805d4 203C 0003 		move.l	#200000, %d0	| rough count
 226      0D40 
 227               	delay1Loop:
 228 805da 5380      		sub.l	#1, %d0			
 229 805dc 6600 FFFC 		bne		delay1Loop
 230 805e0 4E75      		rts
 231               	
 232 805e2 5241 4D20 	RAM_PASS_MSG:  .ascii  "RAM Test Passed"
 232      5465 7374 
 232      2050 6173 
 232      7365 64
 233 805f1 00        				DC.B    EOT
 234 805f2 0A0D 00   	CRLF_MSG:	dc.b 0x0a,0xd,0
 235 805f5 5349 4D50 	BANNER_MSG:	.ascii  "SIMPLE-68008 CPU"
 235      4C45 2D36 
68K GAS  S68K_001.s 			page 6


 235      3830 3038 
 235      2043 5055 
 236 80605 00        				DC.B    EOT...
68K GAS  S68K_001.s 			page 7


DEFINED SYMBOLS
          S68K_001.s:4      *ABS*:0000000000000000 RAM_START
          S68K_001.s:5      *ABS*:000000000007fffc STACK_END
          S68K_001.s:6      *ABS*:000000000007ffff RAM_END
          S68K_001.s:7      *ABS*:0000000000080000 ROM_START
          S68K_001.s:8      *ABS*:0000000000080400 ROM_CODE
          S68K_001.s:9      *ABS*:0000000000087fff ROM_END
          S68K_001.s:14     *ABS*:00000000000f0000 DUART
          S68K_001.s:15     *ABS*:00000000000f0000 MRA
          S68K_001.s:16     *ABS*:00000000000f0002 SRA
          S68K_001.s:17     *ABS*:00000000000f0002 CSRA
          S68K_001.s:18     *ABS*:00000000000f0004 CRA
          S68K_001.s:19     *ABS*:00000000000f0006 RBA
          S68K_001.s:20     *ABS*:00000000000f0006 TBA
          S68K_001.s:21     *ABS*:00000000000f0008 ACR
          S68K_001.s:22     *ABS*:00000000000f000a ISR
          S68K_001.s:23     *ABS*:00000000000f000a IMR
          S68K_001.s:24     *ABS*:00000000000f0010 MRB
          S68K_001.s:25     *ABS*:00000000000f0012 SRB
          S68K_001.s:26     *ABS*:00000000000f0012 CSRB
          S68K_001.s:27     *ABS*:00000000000f0014 CRB
          S68K_001.s:28     *ABS*:00000000000f0016 RBB
          S68K_001.s:29     *ABS*:00000000000f0016 TBB
          S68K_001.s:30     *ABS*:00000000000f0018 IVR
          S68K_001.s:31     *ABS*:00000000000f001a OPC
          S68K_001.s:32     *ABS*:00000000000f001a INU
          S68K_001.s:33     *ABS*:00000000000f001c OPS
          S68K_001.s:34     *ABS*:00000000000f001e OPR
          S68K_001.s:39     *ABS*:0000000000000007 BEL
          S68K_001.s:40     *ABS*:0000000000000008 BKSP
          S68K_001.s:41     *ABS*:0000000000000009 TAB
          S68K_001.s:42     *ABS*:000000000000000a LF
          S68K_001.s:43     *ABS*:000000000000000d CR
          S68K_001.s:44     *ABS*:000000000000001b ESC
          S68K_001.s:46     *ABS*:0000000000000003 CTRLC
          S68K_001.s:47     *ABS*:0000000000000018 CTRLX
          S68K_001.s:137    .text:00000000000804de FERVR2
          S68K_001.s:79     .text:0000000000080444 loop1stLoc
          S68K_001.s:140    .text:00000000000804e4 failBitTest
          S68K_001.s:94     .text:0000000000080464 loopAdrFill
          S68K_001.s:106    .text:0000000000080482 loopAdrCk
          S68K_001.s:143    .text:00000000000804ea failAdrTest
          S68K_001.s:199    .text:000000000008054a initDuart
          S68K_001.s:235    .text:00000000000805f5 BANNER_MSG
          S68K_001.s:168    .text:0000000000080518 printString1
          S68K_001.s:234    .text:00000000000805f2 CRLF_MSG
          S68K_001.s:232    .text:00000000000805e2 RAM_PASS_MSG
          S68K_001.s:129    .text:00000000000804c0 FERVR
          S68K_001.s:225    .text:00000000000805d4 delay1Sec
          S68K_001.s:150    .text:00000000000804f0 outChar1
          S68K_001.s:151    .text:00000000000804f0 outChar
          S68K_001.s:159    .text:0000000000080504 outChar2
          S68K_001.s:169    .text:0000000000080518 printString
          S68K_001.s:170    .text:0000000000080518 .loop
          S68K_001.s:176    .text:0000000000080520 .end
          S68K_001.s:184    .text:0000000000080522 inChar1
          S68K_001.s:185    .text:0000000000080522 inChar
68K GAS  S68K_001.s 			page 8


          S68K_001.s:191    .text:0000000000080536 inChar2
          S68K_001.s:227    .text:00000000000805da delay1Loop

UNDEFINED SYMBOLS
EOT
