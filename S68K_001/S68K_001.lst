68K GAS  S68K_001.s 			page 1


   1               	| Borrowed init code from 
   2               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   3               	
   4               	RAM_START	= 0x00100	| Leave room for vector table copy
   5               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   6               	RAM_END		= 0x7FFFF	| 512KB SRAM
   7               	ROM_START	= 0x80000	| ROM start
   8               	ROM_CODE	= ROM_START+1024| Skip vector table
   9               	ROM_END		= 0x87FFF	| End of 32KB EPROM
  10               	
  11               	|||||||||||||||||||||||||||||||||
  12               	| 68681 Duart Register Addresses
  13               	|
  14               	DUART = 0x0F0000       | Base Addr of DUART
  15               	MRA   = DUART+0       | Mode Register A           (R/W)
  16               	SRA   = DUART+2       | Status Register A         (r)
  17               	CSRA  = DUART+2       | Clock Select Register A   (w)
  18               	CRA   = DUART+4       | Commands Register A       (w)
  19               	RBA   = DUART+6       | Receiver Buffer A         (r)
  20               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  21               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  22               	ISR   = DUART+10      | Interrupt Status Register (R)
  23               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  24               	MRB   = DUART+16      | Mode Register B           (R/W)
  25               	SRB   = DUART+18      | Status Register B         (R)
  26               	CSRB  = DUART+18      | Clock Select Register B   (W)
  27               	CRB   = DUART+20      | Commands Register B       (W)
  28               	RBB   = DUART+22      | Reciever Buffer B         (R)
  29               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  30               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  31               	
  32               	||||||||||||||||||||||||||||||||||
  33               	| ASCII Control Characters
  34               	|
  35               	BEL   = 0x07
  36               	BKSP  = 0x08       | CTRL-H
  37               	TAB   = 0x09
  38               	LF    = 0x0A
  39               	CR    = 0x0D
  40               	ESC   = 0x1B
  41               	
  42               	CTRLC	=	0x03
  43               	CTRLX	=	0x18     | Line Clear
  44               	
  45 0000 0000 0000 		.ORG	ROM_START
  45      0000 0000 
  45      0000 0000 
  45      0000 0000 
  45      0000 0000 
  46               	
  47               	| FIRST 8 bytes loaded after reset |
  48 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  49 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  50               	
  51 80008 0000 0000 	        .ORG ROM_CODE
  51      0000 0000 
  51      0000 0000 
68K GAS  S68K_001.s 			page 2


  51      0000 0000 
  51      0000 0000 
  52 80400 4E71      		nop
  53 80402 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  53      0008 0000 
  54 8040a 4E71      		nop
  55 8040c 203C DEAD 		move.l	#0xDEADBEEF, %d0	| Test Pattern #1
  55      BEEF 
  56 80412 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  57 80416 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  58 80418 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  59 8041a B042      		cmp			%d2, %d0
  60 8041c 6600 0024 		bne			FERVR						
  61 80420 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  61      AAAA 
  62 80426 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  63 8042a 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  64 8042c 2611      		move.l	(%a1), %d3				| Read back
  65 8042e B243      		cmp			%d3, %d1
  66 80430 6600 0010 		bne			FERVR
  67 80434 4E71      		nop
  68 80436 4EBA 0050 		jsr     initDuart       | Setup the serial port
  69 8043a 13FC 0020 		move.b	#0x20, d0
  69      0000 0000 
  70               	FERVR:
  71 80442 4EBA 001C 		jsr	outChar
  72 80446 5240      		add	#1,%d0
  73 80448 0C79 0066 		cmp	#0x66,d0
  73      0000 0000 
  74 80450 6600 000A 		bne	skipIt
  75 80454 13FC 0020 		move.b	#0x20, d0
  75      0000 0000 
  76               	skipIt:
  77 8045c 4EFA FFE4 		jmp	FERVR
  78               	
  79               	|||||
  80               	| Writes a character to Port A, blocking if not ready (Full buffer)
  81               	|  - Takes a character in D0
  82               	outChar:
  83 80460 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
  83      000F 0002 
  84 80468 6700 FFF6 	    beq     outChar     
  85 8046c 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
  85      0006 
  86 80472 4E75      	    rts
  87               	
  88               	|||||
  89               	| Reads in a character from Port A, blocking if none available
  90               	|  - Returns character in D0
  91               	|    
  92               	inChar:
  93 80474 0839 0000 	    btst    #0,  SRA     | Check if receiver ready bit is set
  93      000F 0002 
  94 8047c 6700 FFF6 	    beq     inChar
  95 80480 1039 000F 	    move.b  RBA, %d0      | Read Character into D0
  95      0006 
  96 80486 4E75      	    rts
68K GAS  S68K_001.s 			page 3


  97               	
  98               	|||||
  99               	| Initializes the 68681 DUART port A as 9600 8N1 
 100               	initDuart:
 101 80488 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 101      000F 0004 
 102 80490 13FC 0020 	    move.b  #0x20, CRA       | Reset Reciever
 102      000F 0004 
 103 80498 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 103      000F 0004 
 104               	    
 105 804a0 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 105      000F 0008 
 106 804a8 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 106      000F 0002 
 107 804b0 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 107      000F 0000 
 108 804b8 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 108      000F 0000 
 109               	    
 110 804c0 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 110      000F 0004 
 111 804c8 4E75      	    rts    
 112               	
 113               	
68K GAS  S68K_001.s 			page 4


DEFINED SYMBOLS
          S68K_001.s:4      *ABS*:0000000000000100 RAM_START
          S68K_001.s:5      *ABS*:000000000007fffc STACK_END
          S68K_001.s:6      *ABS*:000000000007ffff RAM_END
          S68K_001.s:7      *ABS*:0000000000080000 ROM_START
          S68K_001.s:8      *ABS*:0000000000080400 ROM_CODE
          S68K_001.s:9      *ABS*:0000000000087fff ROM_END
          S68K_001.s:14     *ABS*:00000000000f0000 DUART
          S68K_001.s:15     *ABS*:00000000000f0000 MRA
          S68K_001.s:16     *ABS*:00000000000f0002 SRA
          S68K_001.s:17     *ABS*:00000000000f0002 CSRA
          S68K_001.s:18     *ABS*:00000000000f0004 CRA
          S68K_001.s:19     *ABS*:00000000000f0006 RBA
          S68K_001.s:20     *ABS*:00000000000f0006 TBA
          S68K_001.s:21     *ABS*:00000000000f0008 ACR
          S68K_001.s:22     *ABS*:00000000000f000a ISR
          S68K_001.s:23     *ABS*:00000000000f000a IMR
          S68K_001.s:24     *ABS*:00000000000f0010 MRB
          S68K_001.s:25     *ABS*:00000000000f0012 SRB
          S68K_001.s:26     *ABS*:00000000000f0012 CSRB
          S68K_001.s:27     *ABS*:00000000000f0014 CRB
          S68K_001.s:28     *ABS*:00000000000f0016 RBB
          S68K_001.s:29     *ABS*:00000000000f0016 TBB
          S68K_001.s:30     *ABS*:00000000000f0018 IVR
          S68K_001.s:35     *ABS*:0000000000000007 BEL
          S68K_001.s:36     *ABS*:0000000000000008 BKSP
          S68K_001.s:37     *ABS*:0000000000000009 TAB
          S68K_001.s:38     *ABS*:000000000000000a LF
          S68K_001.s:39     *ABS*:000000000000000d CR
          S68K_001.s:40     *ABS*:000000000000001b ESC
          S68K_001.s:42     *ABS*:0000000000000003 CTRLC
          S68K_001.s:43     *ABS*:0000000000000018 CTRLX
          S68K_001.s:70     .text:0000000000080442 FERVR
          S68K_001.s:100    .text:0000000000080488 initDuart
          S68K_001.s:82     .text:0000000000080460 outChar
          S68K_001.s:76     .text:000000000008045c skipIt
          S68K_001.s:92     .text:0000000000080474 inChar

UNDEFINED SYMBOLS
d0
