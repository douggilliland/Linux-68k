68K GAS  S68K_001.s 			page 1


   1               	| Borrowed init code from 
   2               	|  https://raw.githubusercontent.com/ChartreuseK/68k-Monitor/master/Monitor-Simple.x68
   3               	
   4               	RAM_START	= 0x00000	| Beginning of the SRAM
   5               	STACK_END	= 0x7FFFC	| Has to be on a word boundary
   6               	RAM_END		= 0x7FFFF	| 512KB SRAM
   7               	ROM_START	= 0x80000	| ROM start
   8               	ROM_CODE	= ROM_START+1024| Skip vector table
   9               	ROM_END		= 0x87FFF	| End of 32KB EPROM
  10               	
  11               	|||||||||||||||||||||||||||||||||
  12               	| 68681 Duart Register Addresses
  13               	|
  14               	DUART = 0x0F0000			| Base Addr of DUART
  15               	MRA   = DUART+0				| Mode Register A           (R/W)
  16               	SRA   = DUART+2       | Status Register A         (r)
  17               	CSRA  = DUART+2       | Clock Select Register A   (w)
  18               	CRA   = DUART+4       | Commands Register A       (w)
  19               	RBA   = DUART+6       | Receiver Buffer A         (r)
  20               	TBA   = DUART+6       | Transmitter Buffer A      (w)
  21               	ACR   = DUART+8       | Aux. Control Register     (R/W)
  22               	ISR   = DUART+10      | Interrupt Status Register (R)
  23               	IMR   = DUART+10      | Interrupt Mask Register   (W)
  24               	MRB   = DUART+16      | Mode Register B           (R/W)
  25               	SRB   = DUART+18      | Status Register B         (R)
  26               	CSRB  = DUART+18      | Clock Select Register B   (W)
  27               	CRB   = DUART+20      | Commands Register B       (W)
  28               	RBB   = DUART+22      | Reciever Buffer B         (R)
  29               	TBB   = DUART+22      | Transmitter Buffer B      (W)
  30               	IVR   = DUART+24      | Interrupt Vector Register (R/W)
  31               	
  32               	||||||||||||||||||||||||||||||||||
  33               	| ASCII Control Characters
  34               	|
  35               	BEL   = 0x07
  36               	BKSP  = 0x08       | CTRL-H
  37               	TAB   = 0x09
  38               	LF    = 0x0A
  39               	CR    = 0x0D
  40               	ESC   = 0x1B
  41               	
  42               	CTRLC	=	0x03
  43               	CTRLX	=	0x18     | Line Clear
  44               	
  45 0000 0000 0000 		.ORG	ROM_START
  45      0000 0000 
  45      0000 0000 
  45      0000 0000 
  45      0000 0000 
  46               	
  47               	| FIRST 8 bytes loaded after reset |
  48 80000 0007 FFFC 	    DC.l    STACK_END | Supervisor stack pointer
  49 80004 0008 0400 	    DC.l    ROM_CODE	| Initial PC
  50               	
  51 80008 0000 0000 	        .ORG ROM_CODE
  51      0000 0000 
  51      0000 0000 
68K GAS  S68K_001.s 			page 2


  51      0000 0000 
  51      0000 0000 
  52 80400 4E71      		nop
  53 80402 4FF9 0007 		lea			STACK_END,%sp
  53      FFFC 
  54 80408 13FC 00FF 		move.b	#0xFF, 0x080000		| Set swap bit so SRAM works
  54      0008 0000 
  55 80410 4E71      		nop
  56               	| Test the first two SRAM location
  57 80412 203C DEAD 		move.l	#0xDEADBEEF, %d0	| Test Pattern #1
  57      BEEF 
  58 80418 307C 0000 		move		#0x00000000, %a0	| First address of SRAM
  59 8041c 2080      		move.l	%d0, (%a0)				| Write out test pattern to SRAM
  60 8041e 2410      		move.l	(%a0), %d2				| Read first SRAM pattern into d2
  61 80420 B042      		cmp			%d2, %d0
  62 80422 6600 00A0 		bne			FERVR2						
  63 80426 223C 5555 		move.l	#0x5555AAAA, %d1	| Test Pattern #2
  63      AAAA 
  64 8042c 327C 0004 		move		#0x00000004, %a1	| Second long address of SRAM
  65 80430 2281      		move.l	%d1, (%a1)				| Write out test pattern to SRAM
  66 80432 2611      		move.l	(%a1), %d3				| Read back
  67 80434 B243      		cmp			%d3, %d1
  68 80436 6600 008C 		bne			FERVR2
  69 8043a 4E71      		nop
  70               	| Test bits of first location (as bytes)
  71 8043c 7001      		move.l	#1, %d0
  72 8043e 207C 0000 		move.l	#0, %a0
  72      0000 
  73               	loop1stLoc:
  74 80444 1080      		move.b	%d0, (%a0)
  75 80446 1210      		move.b	(%a0), %d1
  76 80448 B200      		cmp.b		%d0, %d1
  77 8044a 6600 007E 		bne			failBitTest
  78 8044e E348      		lsl			#1, %d0
  79 80450 0C80 0000 		cmp.l		#0x00000100, %d0
  79      0100 
  80 80456 6600 FFEC 		bne			loop1stLoc
  81               	| Test all address lines, 512KB SRAM
  82               	| Write incrementing pattern to data bits
  83 8045a 7001      		move.l	#1, %d0		| Fill pattern
  84 8045c 7401      		move.l	#1, %d2
  85 8045e 207C 0000 		move.l	#1, %a0		| Start address 1 (already tested addr 0)
  85      0001 
  86               	loopAdrFill:
  87 80464 1080      		move.b	%d0,(%a0)	| Do the write
  88 80466 5240      		add			#1, %d0		| Increment the pattern
  89 80468 2408      		move.l	%a0, %d2	| Copy a0 to d2 for shift
  90 8046a E34A      		lsl			#1, %d2		| Shift temp addr
  91 8046c 2042      		move.l	%d2, %a0	| Put back into addr reg
  92 8046e 0C82 0000 		cmp.l		#$08000000,%d2
  92      0000 
  93 80474 6D00 FFEE 		blt			loopAdrFill
  94               	| Check
  95 80478 7001      		move.l	#1, %d0
  96 8047a 7401      		move.l	#1, %d2
  97 8047c 207C 0000 		move.l	#1, %a0
  97      0001 
68K GAS  S68K_001.s 			page 3


  98               	loopAdrCk:
  99 80482 1210      		move.b	(%a0), %d1
 100 80484 B240      		cmp			%d0, %d1
 101 80486 6600 0048 		bne			failAdrTest
 102 8048a 5240      		add			#1, %d0
 103 8048c 2408      		move.l	%a0, %d2 
 104 8048e E34A      		lsl			#1, %d2
 105 80490 2442      		move.l	%d2, %a2
 106 80492 0C42 0000 		cmp			#$080000000,%d2
 107 80496 6D00 FFEA 		blt			loopAdrCk
 108               	| Done with address test of SRAM
 109 8049a 4EBA 0062 		jsr     initDuart       | Setup the serial port
 110 8049e 13FC 0020 		move.b	#0x20, d0
 110      0000 0000 
 111               	FERVR:
 112 804a6 4EBA 002E 		jsr	outChar
 113 804aa 5240      		add	#1,%d0
 114 804ac 0C79 0066 		cmp	#0x66,d0
 114      0000 0000 
 115 804b4 6600 000A 		bne	skipIt
 116 804b8 13FC 0020 		move.b	#0x20, d0
 116      0000 0000 
 117               	skipIt:
 118 804c0 4EFA FFE4 		jmp	FERVR
 119               	|
 120               	FERVR2:
 121 804c4 4E71      		nop
 122 804c6 4EFA FFFC 		jmp	FERVR2
 123               	failBitTest:
 124 804ca 4E71      		nop
 125 804cc 4EFA FFFC 		jmp	failBitTest
 126               	failAdrTest:
 127 804d0 4E71      		nop
 128 804d2 4EFA FFFC 		jmp	failAdrTest
 129               	|||||
 130               	| Writes a character to Port A, blocking if not ready (Full buffer)
 131               	|  - Takes a character in D0
 132               	outChar:
 133 804d6 0839 0002 	    btst    #2, SRA      | Check if transmitter ready bit is set
 133      000F 0002 
 134 804de 6700 FFF6 	    beq     outChar     
 135 804e2 13C0 000F 	    move.b  %d0, TBA      | Transmit Character
 135      0006 
 136 804e8 4E75      	    rts
 137               	
 138               	|||||
 139               	| Reads in a character from Port A, blocking if none available
 140               	|  - Returns character in D0
 141               	|    
 142               	inChar:
 143 804ea 0839 0000 	    btst    #0,  SRA     | Check if receiver ready bit is set
 143      000F 0002 
 144 804f2 6700 FFF6 	    beq     inChar
 145 804f6 1039 000F 	    move.b  RBA, %d0      | Read Character into D0
 145      0006 
 146 804fc 4E75      	    rts
 147               	
68K GAS  S68K_001.s 			page 4


 148               	|||||
 149               	| Initializes the 68681 DUART port A as 9600 8N1 
 150               	initDuart:
 151 804fe 13FC 0030 	    move.b  #0x30, CRA       | Reset Transmitter
 151      000F 0004 
 152 80506 13FC 0020 	    move.b  #0x20, CRA       | Reset Receiver
 152      000F 0004 
 153 8050e 13FC 0010 	    move.b  #0x10, CRA       | Reset Mode Register Pointer
 153      000F 0004 
 154               	    
 155 80516 13FC 0080 	    move.b  #0x80, ACR       | Baud Rate Set #2
 155      000F 0008 
 156 8051e 13FC 00BB 	    move.b  #0xBB, CSRA      | Set Tx and Rx rates to 9600
 156      000F 0002 
 157 80526 13FC 0093 	    move.b  #0x93, MRA       | 7-bit, No Parity (0x93 for 8-bit, 0x92 for 7-bit)
 157      000F 0000 
 158 8052e 13FC 0007 	    move.b  #0x07, MRA       | Normal Mode, Not CTS/RTS, 1 stop bit
 158      000F 0000 
 159               	    
 160 80536 13FC 0005 	    move.b  #0x05, CRA       | Enable Transmit/Recieve
 160      000F 0004 
 161 8053e 4E75      	    rts    
 162               	
 163               	
68K GAS  S68K_001.s 			page 5


DEFINED SYMBOLS
          S68K_001.s:4      *ABS*:0000000000000000 RAM_START
          S68K_001.s:5      *ABS*:000000000007fffc STACK_END
          S68K_001.s:6      *ABS*:000000000007ffff RAM_END
          S68K_001.s:7      *ABS*:0000000000080000 ROM_START
          S68K_001.s:8      *ABS*:0000000000080400 ROM_CODE
          S68K_001.s:9      *ABS*:0000000000087fff ROM_END
          S68K_001.s:14     *ABS*:00000000000f0000 DUART
          S68K_001.s:15     *ABS*:00000000000f0000 MRA
          S68K_001.s:16     *ABS*:00000000000f0002 SRA
          S68K_001.s:17     *ABS*:00000000000f0002 CSRA
          S68K_001.s:18     *ABS*:00000000000f0004 CRA
          S68K_001.s:19     *ABS*:00000000000f0006 RBA
          S68K_001.s:20     *ABS*:00000000000f0006 TBA
          S68K_001.s:21     *ABS*:00000000000f0008 ACR
          S68K_001.s:22     *ABS*:00000000000f000a ISR
          S68K_001.s:23     *ABS*:00000000000f000a IMR
          S68K_001.s:24     *ABS*:00000000000f0010 MRB
          S68K_001.s:25     *ABS*:00000000000f0012 SRB
          S68K_001.s:26     *ABS*:00000000000f0012 CSRB
          S68K_001.s:27     *ABS*:00000000000f0014 CRB
          S68K_001.s:28     *ABS*:00000000000f0016 RBB
          S68K_001.s:29     *ABS*:00000000000f0016 TBB
          S68K_001.s:30     *ABS*:00000000000f0018 IVR
          S68K_001.s:35     *ABS*:0000000000000007 BEL
          S68K_001.s:36     *ABS*:0000000000000008 BKSP
          S68K_001.s:37     *ABS*:0000000000000009 TAB
          S68K_001.s:38     *ABS*:000000000000000a LF
          S68K_001.s:39     *ABS*:000000000000000d CR
          S68K_001.s:40     *ABS*:000000000000001b ESC
          S68K_001.s:42     *ABS*:0000000000000003 CTRLC
          S68K_001.s:43     *ABS*:0000000000000018 CTRLX
          S68K_001.s:120    .text:00000000000804c4 FERVR2
          S68K_001.s:73     .text:0000000000080444 loop1stLoc
          S68K_001.s:123    .text:00000000000804ca failBitTest
          S68K_001.s:86     .text:0000000000080464 loopAdrFill
          S68K_001.s:98     .text:0000000000080482 loopAdrCk
          S68K_001.s:126    .text:00000000000804d0 failAdrTest
          S68K_001.s:150    .text:00000000000804fe initDuart
          S68K_001.s:111    .text:00000000000804a6 FERVR
          S68K_001.s:132    .text:00000000000804d6 outChar
          S68K_001.s:117    .text:00000000000804c0 skipIt
          S68K_001.s:142    .text:00000000000804ea inChar

UNDEFINED SYMBOLS
$08000000
$080000000
d0
